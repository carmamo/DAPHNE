
F446RE_RTOS_LEPTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800bee0  0800bee0  0001bee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c100  0800c100  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c100  0800c100  0001c100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c108  0800c108  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c108  0800c108  0001c108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c10c  0800c10c  0001c10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001161c  20000074  0800c184  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011690  0800c184  00021690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004512  00000000  00000000  00046166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e78  00000000  00000000  0004a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd8  00000000  00000000  0004c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275c2  00000000  00000000  0004e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d19  00000000  00000000  0007578a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7e93  00000000  00000000  000994a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008624  00000000  00000000  00181388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bec8 	.word	0x0800bec8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800bec8 	.word	0x0800bec8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
	__WFI();
 8000518:	bf30      	wfi
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <lepton_Init>:

static lepton_t dev;


void lepton_Init(I2C_HandleTypeDef *i2c, SPI_HandleTypeDef *spi, UART_HandleTypeDef *uart, GPIO_TypeDef *port, uint16_t pin)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
 8000530:	603b      	str	r3, [r7, #0]
	dev.spiHandle = spi;
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <lepton_Init+0x38>)
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	6053      	str	r3, [r2, #4]
	dev.uartHandle = uart;
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <lepton_Init+0x38>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6113      	str	r3, [r2, #16]
	dev.i2cHandle = i2c;
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <lepton_Init+0x38>)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	6013      	str	r3, [r2, #0]
	dev.CS_port = port;
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <lepton_Init+0x38>)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	6093      	str	r3, [r2, #8]
	dev.CS_pin = pin;
 800054a:	4a04      	ldr	r2, [pc, #16]	; (800055c <lepton_Init+0x38>)
 800054c:	8b3b      	ldrh	r3, [r7, #24]
 800054e:	8193      	strh	r3, [r2, #12]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	20000090 	.word	0x20000090

08000560 <lepton_GetReg>:
	array[1] = reg;
	return HAL_I2C_Master_Transmit(dev.i2cHandle, LEPTON_I2C_ADDR, array, 2, 100);
}

HAL_StatusTypeDef lepton_GetReg(uint16_t reg, uint16_t *rxdata)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af04      	add	r7, sp, #16
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(dev.i2cHandle, LEPTON_I2C_ADDR, reg, 2, (uint8_t *)rxdata, 2, 100);
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <lepton_GetReg+0x50>)
 800056e:	6818      	ldr	r0, [r3, #0]
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	2302      	movs	r3, #2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2302      	movs	r3, #2
 8000580:	2154      	movs	r1, #84	; 0x54
 8000582:	f002 f87f 	bl	8002684 <HAL_I2C_Mem_Read>
 8000586:	4603      	mov	r3, r0
 8000588:	73fb      	strb	r3, [r7, #15]
	*rxdata = (*rxdata >> 8 | *rxdata << 8);
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b21b      	sxth	r3, r3
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	801a      	strh	r2, [r3, #0]
	return status;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]

//	lepton_SetReg(reg);
//	return HAL_I2C_Master_Receive(dev.i2cHandle, LEPTON_I2C_ADDR, (uint8_t *)rxdata, 2, 100);

}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000090 	.word	0x20000090

080005b4 <lepton_SetData>:
HAL_StatusTypeDef lepton_SetData(uint8_t *txdata, uint16_t size)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af04      	add	r7, sp, #16
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint16_t *rxdata = (uint16_t *)malloc(sizeof(uint16_t));
 80005c0:	2002      	movs	r0, #2
 80005c2:	f00b fae5 	bl	800bb90 <malloc>
 80005c6:	4603      	mov	r3, r0
 80005c8:	60fb      	str	r3, [r7, #12]

	do
	{
		lepton_GetReg(0x0002, rxdata);
 80005ca:	68f9      	ldr	r1, [r7, #12]
 80005cc:	2002      	movs	r0, #2
 80005ce:	f7ff ffc7 	bl	8000560 <lepton_GetReg>
	}
	while(*rxdata & 0x01);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f5      	bne.n	80005ca <lepton_SetData+0x16>

//	HAL_I2C_Master_Transmit(dev.i2cHandle, LEPTON_I2C_ADDR, txdata, size, 100);

	// Write data, 0x0008 Data 0 Address (beginning of data block)
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0008, 2, txdata, size, 100);
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <lepton_SetData+0xa4>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	887b      	ldrh	r3, [r7, #2]
 80005e4:	2264      	movs	r2, #100	; 0x64
 80005e6:	9202      	str	r2, [sp, #8]
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2302      	movs	r3, #2
 80005f0:	2208      	movs	r2, #8
 80005f2:	2154      	movs	r1, #84	; 0x54
 80005f4:	f001 ff4c 	bl	8002490 <HAL_I2C_Mem_Write>
 80005f8:	4603      	mov	r3, r0
 80005fa:	72fb      	strb	r3, [r7, #11]
	if(status != HAL_OK)
 80005fc:	7afb      	ldrb	r3, [r7, #11]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d004      	beq.n	800060c <lepton_SetData+0x58>
	{
		free(rxdata);
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f00b facc 	bl	800bba0 <free>
		return status;
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	e021      	b.n	8000650 <lepton_SetData+0x9c>
	}

	// Write data length, 0x0006 Data Length Register
	size = size >> 1;
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	085b      	lsrs	r3, r3, #1
 8000610:	b29b      	uxth	r3, r3
 8000612:	807b      	strh	r3, [r7, #2]
	size = (size >> 8 | size << 8);
 8000614:	887b      	ldrh	r3, [r7, #2]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b29b      	uxth	r3, r3
 800061a:	b21a      	sxth	r2, r3
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	807b      	strh	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0006, 2, (uint8_t *)&size, 2, 100);
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <lepton_SetData+0xa4>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9302      	str	r3, [sp, #8]
 8000632:	2302      	movs	r3, #2
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	1cbb      	adds	r3, r7, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2302      	movs	r3, #2
 800063c:	2206      	movs	r2, #6
 800063e:	2154      	movs	r1, #84	; 0x54
 8000640:	f001 ff26 	bl	8002490 <HAL_I2C_Mem_Write>
 8000644:	4603      	mov	r3, r0
 8000646:	72fb      	strb	r3, [r7, #11]

	free(rxdata);
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f00b faa9 	bl	800bba0 <free>
	return status;
 800064e:	7afb      	ldrb	r3, [r7, #11]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000090 	.word	0x20000090

0800065c <lepton_command>:
//	*rxdata = (*rxdata >> 8 | *rxdata << 8);
	return status;
}

HAL_StatusTypeDef lepton_command(uint16_t cmd)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af04      	add	r7, sp, #16
 8000662:	4603      	mov	r3, r0
 8000664:	80fb      	strh	r3, [r7, #6]
	uint16_t *rxdata = (uint16_t *)malloc(sizeof(uint16_t));
 8000666:	2002      	movs	r0, #2
 8000668:	f00b fa92 	bl	800bb90 <malloc>
 800066c:	4603      	mov	r3, r0
 800066e:	60fb      	str	r3, [r7, #12]

	do
	{
		lepton_GetReg(0x02, rxdata);
 8000670:	68f9      	ldr	r1, [r7, #12]
 8000672:	2002      	movs	r0, #2
 8000674:	f7ff ff74 	bl	8000560 <lepton_GetReg>
	}
	while(*rxdata & 0x01);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1f5      	bne.n	8000670 <lepton_command+0x14>

	free(rxdata);
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f00b fa8b 	bl	800bba0 <free>
	cmd = (cmd >> 8 | cmd << 8);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29b      	uxth	r3, r3
 8000690:	b21a      	sxth	r2, r3
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b21b      	sxth	r3, r3
 8000698:	4313      	orrs	r3, r2
 800069a:	b21b      	sxth	r3, r3
 800069c:	b29b      	uxth	r3, r3
 800069e:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0004, 2, (uint8_t *)&cmd, 2, 100);
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <lepton_command+0x68>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	2302      	movs	r3, #2
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	1dbb      	adds	r3, r7, #6
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	2204      	movs	r2, #4
 80006b4:	2154      	movs	r1, #84	; 0x54
 80006b6:	f001 feeb 	bl	8002490 <HAL_I2C_Mem_Write>
 80006ba:	4603      	mov	r3, r0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000090 	.word	0x20000090

080006c8 <lepton_vsync>:
	/* 0x0E00 (RAD Module ID) + 0x10 (Command Base - Ctrl enable) + 0x01 (Set) + 0x4000 (Protection Bit) = 0x4E11 */
	return lepton_command(0x4E11);
}

HAL_StatusTypeDef lepton_vsync(bool vsync_enabled)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	uint8_t *data = (uint8_t *)malloc(4*sizeof(uint8_t));
 80006d2:	2004      	movs	r0, #4
 80006d4:	f00b fa5c 	bl	800bb90 <malloc>
 80006d8:	4603      	mov	r3, r0
 80006da:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<4; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	e007      	b.n	80006f2 <lepton_vsync+0x2a>
		{
			data[i] = 0x00;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	4413      	add	r3, r2
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<4; i++)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	ddf4      	ble.n	80006e2 <lepton_vsync+0x1a>
		}

		if(vsync_enabled) data[1] = 0x05;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <lepton_vsync+0x3e>
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3301      	adds	r3, #1
 8000702:	2205      	movs	r2, #5
 8000704:	701a      	strb	r2, [r3, #0]

		lepton_SetData(data, 4);
 8000706:	2104      	movs	r1, #4
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f7ff ff53 	bl	80005b4 <lepton_SetData>
		free(data);
 800070e:	68b8      	ldr	r0, [r7, #8]
 8000710:	f00b fa46 	bl	800bba0 <free>

		/* 0x0800 (OEM Module ID) + 0x54 (Command Base - Ctrl enable) + 0x01 (Set) + 0x4000 (Protection Bit) = 0x4855 */
		return lepton_command(0x4855);
 8000714:	f644 0055 	movw	r0, #18517	; 0x4855
 8000718:	f7ff ffa0 	bl	800065c <lepton_command>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <send_byte>:


void send_byte(uint8_t data)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(dev.uartHandle, &data, 1, 100);
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <send_byte+0x20>)
 8000734:	6918      	ldr	r0, [r3, #16]
 8000736:	1df9      	adds	r1, r7, #7
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	2201      	movs	r2, #1
 800073c:	f004 fabd 	bl	8004cba <HAL_UART_Transmit>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000090 	.word	0x20000090

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fe17 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f84f 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f973 	bl	8000a44 <MX_GPIO_Init>
  MX_DMA_Init();
 800075e:	f000 f949 	bl	80009f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000762:	f000 f91b 	bl	800099c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000766:	f000 f8b3 	bl	80008d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800076a:	f000 f8df 	bl	800092c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();					/* Configure and initialize SystemView */
 800076e:	f009 fb39 	bl	8009de4 <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 8000772:	f009 f8f9 	bl	8009968 <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 8000776:	f00a fc13 	bl	800afa0 <SEGGER_SYSVIEW_Start>

  lepton_Init(&hi2c1, &hspi1, &huart2, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 800077a:	2340      	movs	r3, #64	; 0x40
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <main+0x7c>)
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <main+0x80>)
 8000782:	4913      	ldr	r1, [pc, #76]	; (80007d0 <main+0x84>)
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <main+0x88>)
 8000786:	f7ff fecd 	bl	8000524 <lepton_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800078a:	f005 fae5 	bl	8005d58 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  FramePoolHandle = osMemoryPoolNew(MEMPOOL_OBJECTS, FRAME_SIZE_U8, &FramePool_attributes);
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <main+0x8c>)
 8000790:	f242 6170 	movw	r1, #9840	; 0x2670
 8000794:	2004      	movs	r0, #4
 8000796:	f005 fca5 	bl	80060e4 <osMemoryPoolNew>
 800079a:	4603      	mov	r3, r0
 800079c:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <main+0x90>)
 800079e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTx */
  uartTxHandle = osThreadNew(prvPrintImageTask, NULL, &uartTx_attributes);
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <main+0x94>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	480f      	ldr	r0, [pc, #60]	; (80007e4 <main+0x98>)
 80007a6:	f005 fb21 	bl	8005dec <osThreadNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <main+0x9c>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* creation of VoSPI */
  VoSPIHandle = osThreadNew(prvCaptureFramesTask, NULL, &VoSPI_attributes);
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <main+0xa0>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	480e      	ldr	r0, [pc, #56]	; (80007f0 <main+0xa4>)
 80007b6:	f005 fb19 	bl	8005dec <osThreadNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <main+0xa8>)
 80007be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007c0:	f005 faee 	bl	8005da0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <main+0x78>
 80007c6:	bf00      	nop
 80007c8:	40020400 	.word	0x40020400
 80007cc:	20000210 	.word	0x20000210
 80007d0:	200000f8 	.word	0x200000f8
 80007d4:	200000a4 	.word	0x200000a4
 80007d8:	0800c040 	.word	0x0800c040
 80007dc:	20009c20 	.word	0x20009c20
 80007e0:	0800bff8 	.word	0x0800bff8
 80007e4:	08000c01 	.word	0x08000c01
 80007e8:	20000254 	.word	0x20000254
 80007ec:	0800c01c 	.word	0x0800c01c
 80007f0:	08000ca9 	.word	0x08000ca9
 80007f4:	20000258 	.word	0x20000258

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	; 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2234      	movs	r2, #52	; 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00b f9f0 	bl	800bbec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <SystemClock_Config+0xd0>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <SystemClock_Config+0xd0>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <SystemClock_Config+0xd0>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <SystemClock_Config+0xd4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <SystemClock_Config+0xd4>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <SystemClock_Config+0xd4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800085c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000868:	2304      	movs	r3, #4
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fffd 	bl	8003880 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800088c:	f000 fabe 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2105      	movs	r1, #5
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fc6a 	bl	8003188 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008ba:	f000 faa7 	bl	8000e0c <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2C1_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_I2C1_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_I2C1_Init+0x50>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_I2C1_Init+0x58>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_I2C1_Init+0x50>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_I2C1_Init+0x50>)
 800090e:	f001 fc7b 	bl	8002208 <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 fa78 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000a4 	.word	0x200000a4
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_SPI1_Init+0x68>)
 8000932:	4a19      	ldr	r2, [pc, #100]	; (8000998 <MX_SPI1_Init+0x6c>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_SPI1_Init+0x68>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_SPI1_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_SPI1_Init+0x68>)
 8000946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800094a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_SPI1_Init+0x68>)
 800094e:	2202      	movs	r2, #2
 8000950:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_SPI1_Init+0x68>)
 8000954:	2201      	movs	r2, #1
 8000956:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_SPI1_Init+0x68>)
 800095a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_SPI1_Init+0x68>)
 8000962:	2208      	movs	r2, #8
 8000964:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_SPI1_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_SPI1_Init+0x68>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_SPI1_Init+0x68>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_SPI1_Init+0x68>)
 800097a:	220a      	movs	r2, #10
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_SPI1_Init+0x68>)
 8000980:	f003 fa1c 	bl	8003dbc <HAL_SPI_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800098a:	f000 fa3f 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000f8 	.word	0x200000f8
 8000998:	40013000 	.word	0x40013000

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART2_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x54>)
 80009aa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c0:	220c      	movs	r2, #12
 80009c2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f004 f924 	bl	8004c20 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 fa15 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000210 	.word	0x20000210
 80009ec:	40004400 	.word	0x40004400
 80009f0:	001e8480 	.word	0x001e8480

080009f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_DMA_Init+0x4c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <MX_DMA_Init+0x4c>)
 8000a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_DMA_Init+0x4c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2105      	movs	r1, #5
 8000a1a:	2038      	movs	r0, #56	; 0x38
 8000a1c:	f000 fdf4 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a20:	2038      	movs	r0, #56	; 0x38
 8000a22:	f000 fe0d 	bl	8001640 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2105      	movs	r1, #5
 8000a2a:	203b      	movs	r0, #59	; 0x3b
 8000a2c:	f000 fdec 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a30:	203b      	movs	r0, #59	; 0x3b
 8000a32:	f000 fe05 	bl	8001640 <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b43      	ldr	r3, [pc, #268]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a42      	ldr	r2, [pc, #264]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a3b      	ldr	r2, [pc, #236]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a34      	ldr	r2, [pc, #208]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b32      	ldr	r3, [pc, #200]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a2d      	ldr	r2, [pc, #180]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <MX_GPIO_Init+0x128>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000ad0:	4827      	ldr	r0, [pc, #156]	; (8000b70 <MX_GPIO_Init+0x12c>)
 8000ad2:	f001 fb67 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4826      	ldr	r0, [pc, #152]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000adc:	f001 fb62 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4820      	ldr	r0, [pc, #128]	; (8000b78 <MX_GPIO_Init+0x134>)
 8000af8:	f001 f9c0 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLIR_VSYNC_Pin */
  GPIO_InitStruct.Pin = FLIR_VSYNC_Pin;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLIR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000b14:	f001 f9b2 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLIR_PWR_DWN_L_Pin FLIR_RESET_L_Pin */
  GPIO_InitStruct.Pin = FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin;
 8000b18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480f      	ldr	r0, [pc, #60]	; (8000b70 <MX_GPIO_Init+0x12c>)
 8000b32:	f001 f9a3 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000b4e:	f001 f995 	bl	8001e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2105      	movs	r1, #5
 8000b56:	2028      	movs	r0, #40	; 0x28
 8000b58:	f000 fd56 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b5c:	2028      	movs	r0, #40	; 0x28
 8000b5e:	f000 fd6f 	bl	8001640 <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40020800 	.word	0x40020800

08000b7c <HAL_GPIO_EXTI_Callback>:
 * memory pool. If memory allocation is successful, it starts a DMA
 * transfer to receive data from the hspi1 peripheral and disables the
 * EXTI15_10_IRQn interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000b86:	f00a fcd3 	bl	800b530 <SEGGER_SYSVIEW_RecordEnterISR>
	if (GPIO_Pin == FLIR_VSYNC_Pin)
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b90:	d115      	bne.n	8000bbe <HAL_GPIO_EXTI_Callback+0x42>
	{
		current_frame = (lepton_frame *)osMemoryPoolAlloc(FramePoolHandle, 0U);
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x50>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f005 fb79 	bl	8006290 <osMemoryPoolAlloc>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ba2:	6013      	str	r3, [r2, #0]
		if(current_frame != NULL)
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d008      	beq.n	8000bbe <HAL_GPIO_EXTI_Callback+0x42>
		{
			osThreadFlagsSet(VoSPIHandle, 0x1U);
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f005 f9ac 	bl	8005f10 <osThreadFlagsSet>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000bb8:	2028      	movs	r0, #40	; 0x28
 8000bba:	f000 fd4f 	bl	800165c <HAL_NVIC_DisableIRQ>
		}
	}
	SEGGER_SYSVIEW_RecordExitISR();
 8000bbe:	f00a fcf9 	bl	800b5b4 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20009c20 	.word	0x20009c20
 8000bd0:	20009c24 	.word	0x20009c24
 8000bd4:	20000258 	.word	0x20000258

08000bd8 <HAL_SPI_RxCpltCallback>:
 * @brief
 *
 * @param hspi
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000be0:	f00a fca6 	bl	800b530 <SEGGER_SYSVIEW_RecordEnterISR>
	osThreadFlagsSet(VoSPIHandle, 0x2U);
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_SPI_RxCpltCallback+0x24>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2102      	movs	r1, #2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 f990 	bl	8005f10 <osThreadFlagsSet>
	SEGGER_SYSVIEW_RecordExitISR();
 8000bf0:	f00a fce0 	bl	800b5b4 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000258 	.word	0x20000258

08000c00 <prvPrintImageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvPrintImageTask */
void prvPrintImageTask(void *argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		/* Wait for completed frame */
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f005 f9cc 	bl	8005fac <osThreadFlagsWait>

		for(int i = 0; i < 60; i++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e016      	b.n	8000c48 <prvPrintImageTask+0x48>
		{
			memcpy((void *)&frame_packet[i*80], (void *)complete_frame->y16[i].data, 160);
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <prvPrintImageTask+0x94>)
 8000c28:	1898      	adds	r0, r3, r2
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <prvPrintImageTask+0x98>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	21a4      	movs	r1, #164	; 0xa4
 8000c32:	fb01 f303 	mul.w	r3, r1, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	3304      	adds	r3, #4
 8000c3a:	22a0      	movs	r2, #160	; 0xa0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f00a ffc7 	bl	800bbd0 <memcpy>
		for(int i = 0; i < 60; i++)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b3b      	cmp	r3, #59	; 0x3b
 8000c4c:	dde5      	ble.n	8000c1a <prvPrintImageTask+0x1a>
		}

		osMemoryPoolFree(FramePoolHandle, complete_frame);
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <prvPrintImageTask+0x9c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <prvPrintImageTask+0x98>)
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f005 fb8f 	bl	800637c <osMemoryPoolFree>
		complete_frame = NULL;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <prvPrintImageTask+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]

		/* Transmit header */
		send_byte(0xDE);
 8000c64:	20de      	movs	r0, #222	; 0xde
 8000c66:	f7ff fd5f 	bl	8000728 <send_byte>
		send_byte(0xAD);
 8000c6a:	20ad      	movs	r0, #173	; 0xad
 8000c6c:	f7ff fd5c 	bl	8000728 <send_byte>
		send_byte(0xBE);
 8000c70:	20be      	movs	r0, #190	; 0xbe
 8000c72:	f7ff fd59 	bl	8000728 <send_byte>
		send_byte(0xEF);
 8000c76:	20ef      	movs	r0, #239	; 0xef
 8000c78:	f7ff fd56 	bl	8000728 <send_byte>

		/* Transmit frame */
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)frame_packet, PACKET_SIZE_U8);
 8000c7c:	22a4      	movs	r2, #164	; 0xa4
 8000c7e:	4905      	ldr	r1, [pc, #20]	; (8000c94 <prvPrintImageTask+0x94>)
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <prvPrintImageTask+0xa0>)
 8000c82:	f004 f8ac 	bl	8004dde <HAL_UART_Transmit_IT>


		__HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <prvPrintImageTask+0xa4>)
 8000c88:	2228      	movs	r2, #40	; 0x28
 8000c8a:	615a      	str	r2, [r3, #20]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8c:	2028      	movs	r0, #40	; 0x28
 8000c8e:	f000 fcd7 	bl	8001640 <HAL_NVIC_EnableIRQ>
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000c92:	e7b9      	b.n	8000c08 <prvPrintImageTask+0x8>
 8000c94:	20009c2c 	.word	0x20009c2c
 8000c98:	20009c28 	.word	0x20009c28
 8000c9c:	20009c20 	.word	0x20009c20
 8000ca0:	20000210 	.word	0x20000210
 8000ca4:	40013c00 	.word	0x40013c00

08000ca8 <prvCaptureFramesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvCaptureFramesTask */
void prvCaptureFramesTask(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvCaptureFramesTask */


	HAL_Delay(100);
 8000cb0:	2064      	movs	r0, #100	; 0x64
 8000cb2:	f000 fba9 	bl	8001408 <HAL_Delay>
	HAL_GPIO_WritePin(FLIR_PWR_DWN_L_GPIO_Port, FLIR_PWR_DWN_L_Pin, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cbc:	4841      	ldr	r0, [pc, #260]	; (8000dc4 <prvCaptureFramesTask+0x11c>)
 8000cbe:	f001 fa71 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000cc2:	2064      	movs	r0, #100	; 0x64
 8000cc4:	f000 fba0 	bl	8001408 <HAL_Delay>
	HAL_GPIO_WritePin(FLIR_RESET_L_GPIO_Port, FLIR_RESET_L_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	483d      	ldr	r0, [pc, #244]	; (8000dc4 <prvCaptureFramesTask+0x11c>)
 8000cd0:	f001 fa68 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8000cd4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cd8:	f000 fb96 	bl	8001408 <HAL_Delay>

	lepton_vsync(true);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fcf3 	bl	80006c8 <lepton_vsync>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4838      	ldr	r0, [pc, #224]	; (8000dc8 <prvCaptureFramesTask+0x120>)
 8000ce8:	f001 fa5c 	bl	80021a4 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f005 f95a 	bl	8005fac <osThreadFlagsWait>

		HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame, FRAME_SIZE_U8);
 8000cf8:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f242 6270 	movw	r2, #9840	; 0x2670
 8000d00:	4619      	mov	r1, r3
 8000d02:	4833      	ldr	r0, [pc, #204]	; (8000dd0 <prvCaptureFramesTask+0x128>)
 8000d04:	f003 f8e4 	bl	8003ed0 <HAL_SPI_Receive_DMA>

		osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f005 f94c 	bl	8005fac <osThreadFlagsWait>


		if((current_frame->y16[59].header[0] & 0xff) == (FRAME_HEIGHT - 1))
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000d1c:	f8b3 35cc 	ldrh.w	r3, [r3, #1484]	; 0x5cc
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b3b      	cmp	r3, #59	; 0x3b
 8000d24:	d110      	bne.n	8000d48 <prvCaptureFramesTask+0xa0>
		{
			complete_frame = current_frame;
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a2a      	ldr	r2, [pc, #168]	; (8000dd4 <prvCaptureFramesTask+0x12c>)
 8000d2c:	6013      	str	r3, [r2, #0]
			current_frame = NULL;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

			lost_frame = 0;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <prvCaptureFramesTask+0x130>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]

			osThreadFlagsSet(uartTxHandle, 0x1U);
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <prvCaptureFramesTask+0x134>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 f8e5 	bl	8005f10 <osThreadFlagsSet>
 8000d46:	e7d1      	b.n	8000cec <prvCaptureFramesTask+0x44>

		}
		else
		{
			lost_frame++;
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <prvCaptureFramesTask+0x130>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <prvCaptureFramesTask+0x130>)
 8000d52:	701a      	strb	r2, [r3, #0]

			if(lost_frame > 9)
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <prvCaptureFramesTask+0x130>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b09      	cmp	r3, #9
 8000d5a:	d921      	bls.n	8000da0 <prvCaptureFramesTask+0xf8>
			{
				// Synchronization Lost
				osDelay(185);
 8000d5c:	20b9      	movs	r0, #185	; 0xb9
 8000d5e:	f005 f9a6 	bl	80060ae <osDelay>
//					HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame, 1);
//					osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
//
//				} while((current_frame->y16[0].header[0] & 0xf00) == 0xf00);

				HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame , FRAME_SIZE_U8);
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f242 6270 	movw	r2, #9840	; 0x2670
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <prvCaptureFramesTask+0x128>)
 8000d6e:	f003 f8af 	bl	8003ed0 <HAL_SPI_Receive_DMA>

				osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
 8000d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d76:	2100      	movs	r1, #0
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f005 f917 	bl	8005fac <osThreadFlagsWait>

				complete_frame = current_frame;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <prvCaptureFramesTask+0x12c>)
 8000d84:	6013      	str	r3, [r2, #0]
				current_frame = NULL;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]

				lost_frame = 0;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <prvCaptureFramesTask+0x130>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]

				osThreadFlagsSet(uartTxHandle, 0x1U);
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <prvCaptureFramesTask+0x134>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2101      	movs	r1, #1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 f8b9 	bl	8005f10 <osThreadFlagsSet>
 8000d9e:	e7a5      	b.n	8000cec <prvCaptureFramesTask+0x44>
			}
			else
			{
				osMemoryPoolFree(FramePoolHandle, current_frame);
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <prvCaptureFramesTask+0x138>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fae6 	bl	800637c <osMemoryPoolFree>
				current_frame = NULL;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <prvCaptureFramesTask+0x124>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]

				__HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <prvCaptureFramesTask+0x13c>)
 8000db8:	2228      	movs	r2, #40	; 0x28
 8000dba:	615a      	str	r2, [r3, #20]
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dbc:	2028      	movs	r0, #40	; 0x28
 8000dbe:	f000 fc3f 	bl	8001640 <HAL_NVIC_EnableIRQ>
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000dc2:	e793      	b.n	8000cec <prvCaptureFramesTask+0x44>
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	20009c24 	.word	0x20009c24
 8000dd0:	200000f8 	.word	0x200000f8
 8000dd4:	20009c28 	.word	0x20009c28
 8000dd8:	20009c1c 	.word	0x20009c1c
 8000ddc:	20000254 	.word	0x20000254
 8000de0:	20009c20 	.word	0x20009c20
 8000de4:	40013c00 	.word	0x40013c00

08000de8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dfa:	f000 fae5 	bl	80013c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010000 	.word	0x40010000

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_MspInit+0x54>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_MspInit+0x54>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_MspInit+0x54>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_MspInit+0x54>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_MspInit+0x54>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_MspInit+0x54>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	210f      	movs	r1, #15
 8000e5a:	f06f 0001 	mvn.w	r0, #1
 8000e5e:	f000 fbd3 	bl	8001608 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_I2C_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12c      	bne.n	8000eec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb4:	2312      	movs	r3, #18
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <HAL_I2C_MspInit+0x8c>)
 8000ecc:	f000 ffd6 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400

08000f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a52      	ldr	r2, [pc, #328]	; (8001068 <HAL_SPI_MspInit+0x168>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f040 809e 	bne.w	8001060 <HAL_SPI_MspInit+0x160>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	4b50      	ldr	r3, [pc, #320]	; (800106c <HAL_SPI_MspInit+0x16c>)
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_SPI_MspInit+0x16c>)
 8000f2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f32:	6453      	str	r3, [r2, #68]	; 0x44
 8000f34:	4b4d      	ldr	r3, [pc, #308]	; (800106c <HAL_SPI_MspInit+0x16c>)
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_SPI_MspInit+0x16c>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_SPI_MspInit+0x16c>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f50:	4b46      	ldr	r3, [pc, #280]	; (800106c <HAL_SPI_MspInit+0x16c>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f5c:	23e0      	movs	r3, #224	; 0xe0
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	483e      	ldr	r0, [pc, #248]	; (8001070 <HAL_SPI_MspInit+0x170>)
 8000f78:	f000 ff80 	bl	8001e7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000f7c:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000f7e:	4a3e      	ldr	r2, [pc, #248]	; (8001078 <HAL_SPI_MspInit+0x178>)
 8000f80:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000f84:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f88:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f90:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f96:	4b37      	ldr	r3, [pc, #220]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa6:	4b33      	ldr	r3, [pc, #204]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fac:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fd2:	4828      	ldr	r0, [pc, #160]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fd4:	f000 fb50 	bl	8001678 <HAL_DMA_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 8000fde:	f7ff ff15 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a23      	ldr	r2, [pc, #140]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fe6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <HAL_SPI_MspInit+0x174>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8000ff0:	4a23      	ldr	r2, [pc, #140]	; (8001080 <HAL_SPI_MspInit+0x180>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8000ff6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ffa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_SPI_MspInit+0x17c>)
 800100a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8001012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001016:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_SPI_MspInit+0x17c>)
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_SPI_MspInit+0x17c>)
 800102e:	2204      	movs	r2, #4
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8001034:	2203      	movs	r2, #3
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_SPI_MspInit+0x17c>)
 800103a:	2200      	movs	r2, #0
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8001040:	2200      	movs	r2, #0
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8001046:	f000 fb17 	bl	8001678 <HAL_DMA_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 8001050:	f7ff fedc 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <HAL_SPI_MspInit+0x17c>)
 8001058:	649a      	str	r2, [r3, #72]	; 0x48
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_SPI_MspInit+0x17c>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40013000 	.word	0x40013000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	20000150 	.word	0x20000150
 8001078:	40026410 	.word	0x40026410
 800107c:	200001b0 	.word	0x200001b0
 8001080:	40026458 	.word	0x40026458

08001084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_UART_MspInit+0x94>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d133      	bne.n	800110e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_UART_MspInit+0x98>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_UART_MspInit+0x98>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_UART_MspInit+0x98>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0x98>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_UART_MspInit+0x98>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_UART_MspInit+0x98>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010de:	230c      	movs	r3, #12
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ee:	2307      	movs	r3, #7
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <HAL_UART_MspInit+0x9c>)
 80010fa:	f000 febf 	bl	8001e7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	2026      	movs	r0, #38	; 0x26
 8001104:	f000 fa80 	bl	8001608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001108:	2026      	movs	r0, #38	; 0x26
 800110a:	f000 fa99 	bl	8001640 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004400 	.word	0x40004400
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <HAL_InitTick+0xd4>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <HAL_InitTick+0xd4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6453      	str	r3, [r2, #68]	; 0x44
 8001144:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <HAL_InitTick+0xd4>)
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001150:	f107 020c 	add.w	r2, r7, #12
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f002 f92e 	bl	80033bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001160:	f002 f918 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 8001164:	4603      	mov	r3, r0
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <HAL_InitTick+0xd8>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9b      	lsrs	r3, r3, #18
 8001174:	3b01      	subs	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_InitTick+0xdc>)
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_InitTick+0xe0>)
 800117c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_InitTick+0xdc>)
 8001180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001184:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_InitTick+0xdc>)
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_InitTick+0xdc>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_InitTick+0xdc>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_InitTick+0xdc>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <HAL_InitTick+0xdc>)
 80011a0:	f003 fa90 	bl	80046c4 <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d11b      	bne.n	80011ea <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011b2:	4813      	ldr	r0, [pc, #76]	; (8001200 <HAL_InitTick+0xdc>)
 80011b4:	f003 fae0 	bl	8004778 <HAL_TIM_Base_Start_IT>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d111      	bne.n	80011ea <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011c6:	2019      	movs	r0, #25
 80011c8:	f000 fa3a 	bl	8001640 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	d808      	bhi.n	80011e4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011d2:	2200      	movs	r2, #0
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	2019      	movs	r0, #25
 80011d8:	f000 fa16 	bl	8001608 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_InitTick+0xe4>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e002      	b.n	80011ea <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3730      	adds	r7, #48	; 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	2000c1ac 	.word	0x2000c1ac
 8001204:	40010000 	.word	0x40010000
 8001208:	20000004 	.word	0x20000004

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800123e:	f003 fb0b 	bl	8004858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000c1ac 	.word	0x2000c1ac

0800124c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <USART2_IRQHandler+0x10>)
 8001252:	f003 fe09 	bl	8004e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000210 	.word	0x20000210

08001260 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLIR_VSYNC_Pin);
 8001264:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001268:	f000 ffb6 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800126c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001270:	f000 ffb2 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA2_Stream0_IRQHandler+0x10>)
 800127e:	f000 fb93 	bl	80019a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000150 	.word	0x20000150

0800128c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA2_Stream3_IRQHandler+0x10>)
 8001292:	f000 fb89 	bl	80019a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001b0 	.word	0x200001b0

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f00a fc32 	bl	800bb38 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20020000 	.word	0x20020000
 8001300:	00000400 	.word	0x00000400
 8001304:	2000c1f4 	.word	0x2000c1f4
 8001308:	20011690 	.word	0x20011690

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800134c:	4c0b      	ldr	r4, [pc, #44]	; (800137c <LoopFillZerobss+0x26>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800135a:	f7ff ffd7 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f00a fbf1 	bl	800bb44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff f9f3 	bl	800074c <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001374:	0800c110 	.word	0x0800c110
  ldr r2, =_sbss
 8001378:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800137c:	20011690 	.word	0x20011690

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f920 	bl	80015f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f7ff feb6 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fd2e 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	2000c1f8 	.word	0x2000c1f8

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000c1f8 	.word	0x2000c1f8

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <__NVIC_EnableIRQ+0x38>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db12      	blt.n	8001528 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	490a      	ldr	r1, [pc, #40]	; (8001534 <__NVIC_DisableIRQ+0x44>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	3320      	adds	r3, #32
 8001518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ff28 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161a:	f7ff ff3d 	bl	8001498 <__NVIC_GetPriorityGrouping>
 800161e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	6978      	ldr	r0, [r7, #20]
 8001626:	f7ff ffb1 	bl	800158c <NVIC_EncodePriority>
 800162a:	4602      	mov	r2, r0
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff80 	bl	8001538 <__NVIC_SetPriority>
}
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff30 	bl	80014b4 <__NVIC_EnableIRQ>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff40 	bl	80014f0 <__NVIC_DisableIRQ>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff feb4 	bl	80013f0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e099      	b.n	80017c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b4:	e00f      	b.n	80016d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016b6:	f7ff fe9b 	bl	80013f0 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d908      	bls.n	80016d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e078      	b.n	80017c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e8      	bne.n	80016b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_DMA_Init+0x158>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	2b04      	cmp	r3, #4
 800172e:	d107      	bne.n	8001740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4313      	orrs	r3, r2
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f023 0307 	bic.w	r3, r3, #7
 8001756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	2b04      	cmp	r3, #4
 8001768:	d117      	bne.n	800179a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4313      	orrs	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00e      	beq.n	800179a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fb01 	bl	8001d84 <DMA_CheckFifoParam>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001796:	2301      	movs	r3, #1
 8001798:	e016      	b.n	80017c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fab8 	bl	8001d18 <DMA_CalcBaseAndBitshift>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	223f      	movs	r2, #63	; 0x3f
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	f010803f 	.word	0xf010803f

080017d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Start_IT+0x26>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e040      	b.n	800187c <HAL_DMA_Start_IT+0xa8>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d12f      	bne.n	800186e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2202      	movs	r2, #2
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fa4a 	bl	8001cbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	223f      	movs	r2, #63	; 0x3f
 800182e:	409a      	lsls	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0216 	orr.w	r2, r2, #22
 8001842:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0208 	orr.w	r2, r2, #8
 800185a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e005      	b.n	800187a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001876:	2302      	movs	r3, #2
 8001878:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001892:	f7ff fdad 	bl	80013f0 <HAL_GetTick>
 8001896:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d008      	beq.n	80018b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2280      	movs	r2, #128	; 0x80
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e052      	b.n	800195c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0216 	bic.w	r2, r2, #22
 80018c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <HAL_DMA_Abort+0x62>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0208 	bic.w	r2, r2, #8
 80018f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001906:	e013      	b.n	8001930 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001908:	f7ff fd72 	bl	80013f0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b05      	cmp	r3, #5
 8001914:	d90c      	bls.n	8001930 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2220      	movs	r2, #32
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2203      	movs	r2, #3
 8001920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e015      	b.n	800195c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1e4      	bne.n	8001908 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001942:	223f      	movs	r2, #63	; 0x3f
 8001944:	409a      	lsls	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d004      	beq.n	8001982 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00c      	b.n	800199c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2205      	movs	r2, #5
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019b4:	4b8e      	ldr	r3, [pc, #568]	; (8001bf0 <HAL_DMA_IRQHandler+0x248>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a8e      	ldr	r2, [pc, #568]	; (8001bf4 <HAL_DMA_IRQHandler+0x24c>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0a9b      	lsrs	r3, r3, #10
 80019c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2208      	movs	r2, #8
 80019d4:	409a      	lsls	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01a      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0204 	bic.w	r2, r2, #4
 80019fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	2208      	movs	r2, #8
 8001a02:	409a      	lsls	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2201      	movs	r2, #1
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d012      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f043 0202 	orr.w	r2, r3, #2
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2204      	movs	r2, #4
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a78:	f043 0204 	orr.w	r2, r3, #4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	2210      	movs	r2, #16
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d043      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03c      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d018      	beq.n	8001aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d024      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
 8001ad6:	e01f      	b.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01b      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
 8001ae8:	e016      	b.n	8001b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0208 	bic.w	r2, r2, #8
 8001b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 808f 	beq.w	8001c48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8087 	beq.w	8001c48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	2220      	movs	r2, #32
 8001b40:	409a      	lsls	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d136      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0216 	bic.w	r2, r2, #22
 8001b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <HAL_DMA_IRQHandler+0x1da>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0208 	bic.w	r2, r2, #8
 8001b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	223f      	movs	r2, #63	; 0x3f
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d07e      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	4798      	blx	r3
        }
        return;
 8001bbe:	e079      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01d      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10d      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d031      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
 8001bec:	e02c      	b.n	8001c48 <HAL_DMA_IRQHandler+0x2a0>
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d023      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
 8001c08:	e01e      	b.n	8001c48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10f      	bne.n	8001c38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0210 	bic.w	r2, r2, #16
 8001c26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d032      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d022      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2205      	movs	r2, #5
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d307      	bcc.n	8001c90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f2      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x2cc>
 8001c8e:	e000      	b.n	8001c92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
 8001cb2:	e000      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cb4:	bf00      	nop
    }
  }
}
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d108      	bne.n	8001cfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cfa:	e007      	b.n	8001d0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3b10      	subs	r3, #16
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <DMA_CalcBaseAndBitshift+0x64>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <DMA_CalcBaseAndBitshift+0x68>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d909      	bls.n	8001d5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d4e:	f023 0303 	bic.w	r3, r3, #3
 8001d52:	1d1a      	adds	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	659a      	str	r2, [r3, #88]	; 0x58
 8001d58:	e007      	b.n	8001d6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d62:	f023 0303 	bic.w	r3, r3, #3
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	aaaaaaab 	.word	0xaaaaaaab
 8001d80:	0800c070 	.word	0x0800c070

08001d84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d11f      	bne.n	8001dde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d856      	bhi.n	8001e52 <DMA_CheckFifoParam+0xce>
 8001da4:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <DMA_CheckFifoParam+0x28>)
 8001da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001daa:	bf00      	nop
 8001dac:	08001dbd 	.word	0x08001dbd
 8001db0:	08001dcf 	.word	0x08001dcf
 8001db4:	08001dbd 	.word	0x08001dbd
 8001db8:	08001e53 	.word	0x08001e53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d046      	beq.n	8001e56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dcc:	e043      	b.n	8001e56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dd6:	d140      	bne.n	8001e5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ddc:	e03d      	b.n	8001e5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de6:	d121      	bne.n	8001e2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d837      	bhi.n	8001e5e <DMA_CheckFifoParam+0xda>
 8001dee:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <DMA_CheckFifoParam+0x70>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e05 	.word	0x08001e05
 8001df8:	08001e0b 	.word	0x08001e0b
 8001dfc:	08001e05 	.word	0x08001e05
 8001e00:	08001e1d 	.word	0x08001e1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
      break;
 8001e08:	e030      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d025      	beq.n	8001e62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e1a:	e022      	b.n	8001e62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e24:	d11f      	bne.n	8001e66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e2a:	e01c      	b.n	8001e66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d903      	bls.n	8001e3a <DMA_CheckFifoParam+0xb6>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d003      	beq.n	8001e40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e38:	e018      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e3e:	e015      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e50:	e00b      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      break;
 8001e52:	bf00      	nop
 8001e54:	e00a      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
      break;
 8001e56:	bf00      	nop
 8001e58:	e008      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e006      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
      break;
 8001e5e:	bf00      	nop
 8001e60:	e004      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
      break;
 8001e62:	bf00      	nop
 8001e64:	e002      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e66:	bf00      	nop
 8001e68:	e000      	b.n	8001e6c <DMA_CheckFifoParam+0xe8>
      break;
 8001e6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e165      	b.n	8002164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8154 	bne.w	800215e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80ae 	beq.w	800215e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_GPIO_Init+0x300>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a5c      	ldr	r2, [pc, #368]	; (800217c <HAL_GPIO_Init+0x300>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b5a      	ldr	r3, [pc, #360]	; (800217c <HAL_GPIO_Init+0x300>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	; (8002184 <HAL_GPIO_Init+0x308>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d025      	beq.n	8002096 <HAL_GPIO_Init+0x21a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_GPIO_Init+0x30c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x216>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4d      	ldr	r2, [pc, #308]	; (800218c <HAL_GPIO_Init+0x310>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x212>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4c      	ldr	r2, [pc, #304]	; (8002190 <HAL_GPIO_Init+0x314>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4b      	ldr	r2, [pc, #300]	; (8002194 <HAL_GPIO_Init+0x318>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x20a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4a      	ldr	r2, [pc, #296]	; (8002198 <HAL_GPIO_Init+0x31c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x206>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a49      	ldr	r2, [pc, #292]	; (800219c <HAL_GPIO_Init+0x320>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x202>
 800207a:	2306      	movs	r3, #6
 800207c:	e00c      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 800207e:	2307      	movs	r3, #7
 8002080:	e00a      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 8002082:	2305      	movs	r3, #5
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 8002086:	2304      	movs	r3, #4
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 8002096:	2300      	movs	r3, #0
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a8:	4935      	ldr	r1, [pc, #212]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_GPIO_Init+0x324>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a31      	ldr	r2, [pc, #196]	; (80021a0 <HAL_GPIO_Init+0x324>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x324>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210a:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_GPIO_Init+0x324>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002158:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <HAL_GPIO_Init+0x324>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	f67f ae96 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40013800 	.word	0x40013800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020400 	.word	0x40020400
 800218c:	40020800 	.word	0x40020800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40021400 	.word	0x40021400
 800219c:	40021800 	.word	0x40021800
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fcc0 	bl	8000b7c <HAL_GPIO_EXTI_Callback>
  }
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40013c00 	.word	0x40013c00

08002208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e12b      	b.n	8002472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fe1e 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800226c:	f001 f87e 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a81      	ldr	r2, [pc, #516]	; (800247c <HAL_I2C_Init+0x274>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d807      	bhi.n	800228c <HAL_I2C_Init+0x84>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a80      	ldr	r2, [pc, #512]	; (8002480 <HAL_I2C_Init+0x278>)
 8002280:	4293      	cmp	r3, r2
 8002282:	bf94      	ite	ls
 8002284:	2301      	movls	r3, #1
 8002286:	2300      	movhi	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e006      	b.n	800229a <HAL_I2C_Init+0x92>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a7d      	ldr	r2, [pc, #500]	; (8002484 <HAL_I2C_Init+0x27c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	bf94      	ite	ls
 8002294:	2301      	movls	r3, #1
 8002296:	2300      	movhi	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0e7      	b.n	8002472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a78      	ldr	r2, [pc, #480]	; (8002488 <HAL_I2C_Init+0x280>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0c9b      	lsrs	r3, r3, #18
 80022ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a6a      	ldr	r2, [pc, #424]	; (800247c <HAL_I2C_Init+0x274>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d802      	bhi.n	80022dc <HAL_I2C_Init+0xd4>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3301      	adds	r3, #1
 80022da:	e009      	b.n	80022f0 <HAL_I2C_Init+0xe8>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_I2C_Init+0x284>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	3301      	adds	r3, #1
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	495c      	ldr	r1, [pc, #368]	; (800247c <HAL_I2C_Init+0x274>)
 800230c:	428b      	cmp	r3, r1
 800230e:	d819      	bhi.n	8002344 <HAL_I2C_Init+0x13c>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e59      	subs	r1, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fbb1 f3f3 	udiv	r3, r1, r3
 800231e:	1c59      	adds	r1, r3, #1
 8002320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002324:	400b      	ands	r3, r1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_I2C_Init+0x138>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e59      	subs	r1, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fbb1 f3f3 	udiv	r3, r1, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233e:	e051      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 8002340:	2304      	movs	r3, #4
 8002342:	e04f      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d111      	bne.n	8002370 <HAL_I2C_Init+0x168>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e012      	b.n	8002396 <HAL_I2C_Init+0x18e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	0099      	lsls	r1, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Init+0x196>
 800239a:	2301      	movs	r3, #1
 800239c:	e022      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <HAL_I2C_Init+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e58      	subs	r0, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6859      	ldr	r1, [r3, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	440b      	add	r3, r1
 80023b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c2:	e00f      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	6809      	ldr	r1, [r1, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6911      	ldr	r1, [r2, #16]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68d2      	ldr	r2, [r2, #12]
 800241e:	4311      	orrs	r1, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	000186a0 	.word	0x000186a0
 8002480:	001e847f 	.word	0x001e847f
 8002484:	003d08ff 	.word	0x003d08ff
 8002488:	431bde83 	.word	0x431bde83
 800248c:	10624dd3 	.word	0x10624dd3

08002490 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	460b      	mov	r3, r1
 80024a4:	813b      	strh	r3, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024aa:	f7fe ffa1 	bl	80013f0 <HAL_GetTick>
 80024ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	f040 80d9 	bne.w	8002670 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2319      	movs	r3, #25
 80024c4:	2201      	movs	r2, #1
 80024c6:	496d      	ldr	r1, [pc, #436]	; (800267c <HAL_I2C_Mem_Write+0x1ec>)
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fc7f 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
 80024d6:	e0cc      	b.n	8002672 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_I2C_Mem_Write+0x56>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e0c5      	b.n	8002672 <HAL_I2C_Mem_Write+0x1e2>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d007      	beq.n	800250c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2221      	movs	r2, #33	; 0x21
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a4d      	ldr	r2, [pc, #308]	; (8002680 <HAL_I2C_Mem_Write+0x1f0>)
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800254e:	88f8      	ldrh	r0, [r7, #6]
 8002550:	893a      	ldrh	r2, [r7, #8]
 8002552:	8979      	ldrh	r1, [r7, #10]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4603      	mov	r3, r0
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fab6 	bl	8002ad0 <I2C_RequestMemoryWrite>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d052      	beq.n	8002610 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e081      	b.n	8002672 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fd00 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2b04      	cmp	r3, #4
 8002584:	d107      	bne.n	8002596 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002594:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e06b      	b.n	8002672 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d11b      	bne.n	8002610 <HAL_I2C_Mem_Write+0x180>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d017      	beq.n	8002610 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1aa      	bne.n	800256e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fcec 	bl	8002ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2b04      	cmp	r3, #4
 800262e:	d107      	bne.n	8002640 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e016      	b.n	8002672 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e000      	b.n	8002672 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
  }
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	00100002 	.word	0x00100002
 8002680:	ffff0000 	.word	0xffff0000

08002684 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4603      	mov	r3, r0
 8002694:	817b      	strh	r3, [r7, #10]
 8002696:	460b      	mov	r3, r1
 8002698:	813b      	strh	r3, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800269e:	f7fe fea7 	bl	80013f0 <HAL_GetTick>
 80026a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	f040 8208 	bne.w	8002ac2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2319      	movs	r3, #25
 80026b8:	2201      	movs	r2, #1
 80026ba:	497b      	ldr	r1, [pc, #492]	; (80028a8 <HAL_I2C_Mem_Read+0x224>)
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fb85 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
 80026ca:	e1fb      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_I2C_Mem_Read+0x56>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e1f4      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d007      	beq.n	8002700 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2222      	movs	r2, #34	; 0x22
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2240      	movs	r2, #64	; 0x40
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a5b      	ldr	r2, [pc, #364]	; (80028ac <HAL_I2C_Mem_Read+0x228>)
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002742:	88f8      	ldrh	r0, [r7, #6]
 8002744:	893a      	ldrh	r2, [r7, #8]
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4603      	mov	r3, r0
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa52 	bl	8002bfc <I2C_RequestMemoryRead>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e1b0      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d113      	bne.n	8002792 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	623b      	str	r3, [r7, #32]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	623b      	str	r3, [r7, #32]
 800277e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e184      	b.n	8002a9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	2b01      	cmp	r3, #1
 8002798:	d11b      	bne.n	80027d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e164      	b.n	8002a9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d11b      	bne.n	8002812 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	e144      	b.n	8002a9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002828:	e138      	b.n	8002a9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	2b03      	cmp	r3, #3
 8002830:	f200 80f1 	bhi.w	8002a16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	2b01      	cmp	r3, #1
 800283a:	d123      	bne.n	8002884 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fc1b 	bl	800307c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e139      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002882:	e10b      	b.n	8002a9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	2b02      	cmp	r3, #2
 800288a:	d14e      	bne.n	800292a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002892:	2200      	movs	r2, #0
 8002894:	4906      	ldr	r1, [pc, #24]	; (80028b0 <HAL_I2C_Mem_Read+0x22c>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fa98 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e10e      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
 80028a6:	bf00      	nop
 80028a8:	00100002 	.word	0x00100002
 80028ac:	ffff0000 	.word	0xffff0000
 80028b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002928:	e0b8      	b.n	8002a9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	2200      	movs	r2, #0
 8002932:	4966      	ldr	r1, [pc, #408]	; (8002acc <HAL_I2C_Mem_Read+0x448>)
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fa49 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0bf      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	2200      	movs	r2, #0
 800298e:	494f      	ldr	r1, [pc, #316]	; (8002acc <HAL_I2C_Mem_Read+0x448>)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fa1b 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e091      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a14:	e042      	b.n	8002a9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fb2e 	bl	800307c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e04c      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d118      	bne.n	8002a9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f aec2 	bne.w	800282a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
  }
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3728      	adds	r7, #40	; 0x28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	00010004 	.word	0x00010004

08002ad0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	4608      	mov	r0, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	817b      	strh	r3, [r7, #10]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	813b      	strh	r3, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f960 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b20:	d103      	bne.n	8002b2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e05f      	b.n	8002bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	492d      	ldr	r1, [pc, #180]	; (8002bf8 <I2C_RequestMemoryWrite+0x128>)
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f998 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e04c      	b.n	8002bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fa02 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d107      	bne.n	8002b92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e02b      	b.n	8002bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	e021      	b.n	8002bec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f9dc 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e005      	b.n	8002bee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be2:	893b      	ldrh	r3, [r7, #8]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	00010002 	.word	0x00010002

08002bfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	817b      	strh	r3, [r7, #10]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	813b      	strh	r3, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8c2 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5c:	d103      	bne.n	8002c66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0aa      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	4952      	ldr	r1, [pc, #328]	; (8002dc8 <I2C_RequestMemoryRead+0x1cc>)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f8fa 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e097      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca8:	6a39      	ldr	r1, [r7, #32]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f964 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00d      	beq.n	8002cd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d107      	bne.n	8002cce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e076      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d105      	bne.n	8002ce4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	e021      	b.n	8002d28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ce4:	893b      	ldrh	r3, [r7, #8]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f93e 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d107      	bne.n	8002d1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e050      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	6a39      	ldr	r1, [r7, #32]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f923 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d107      	bne.n	8002d50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e035      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f82b 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	d103      	bne.n	8002d94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e013      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	6a3a      	ldr	r2, [r7, #32]
 8002dac:	4906      	ldr	r1, [pc, #24]	; (8002dc8 <I2C_RequestMemoryRead+0x1cc>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f863 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00010002 	.word	0x00010002

08002dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	e025      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de4:	d021      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe fb03 	bl	80013f0 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e023      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10d      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	e00c      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d0b6      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e88:	e051      	b.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d123      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e046      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d021      	beq.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fa81 	bl	80013f0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e020      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e00b      	b.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d18d      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e02d      	b.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8ce 	bl	8003128 <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02d      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f9c:	d021      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fa27 	bl	80013f0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d116      	bne.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d1ca      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003006:	e02d      	b.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f88d 	bl	8003128 <I2C_IsAcknowledgeFailed>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02d      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800301e:	d021      	beq.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe f9e6 	bl	80013f0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d1ca      	bne.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003088:	e042      	b.n	8003110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b10      	cmp	r3, #16
 8003096:	d119      	bne.n	80030cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0210 	mvn.w	r2, #16
 80030a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e029      	b.n	8003120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030cc:	f7fe f990 	bl	80013f0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e007      	b.n	8003120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d1b5      	bne.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313e:	d11b      	bne.n	8003178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0204 	orr.w	r2, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cc      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b68      	ldr	r3, [pc, #416]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90c      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d044      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e067      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fe f8ba 	bl	80013f0 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fe f8b6 	bl	80013f0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e04f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d20c      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f887 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fef8 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00
 8003344:	40023800 	.word	0x40023800
 8003348:	0800c058 	.word	0x0800c058
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	0800c068 	.word	0x0800c068

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003398:	f7ff ffdc 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0b5b      	lsrs	r3, r3, #13
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	0800c068 	.word	0x0800c068

080033bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	220f      	movs	r2, #15
 80033ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_GetClockConfig+0x5c>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0203 	and.w	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_RCC_GetClockConfig+0x5c>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_RCC_GetClockConfig+0x5c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_GetClockConfig+0x5c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	08db      	lsrs	r3, r3, #3
 80033f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <HAL_RCC_GetClockConfig+0x60>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	40023c00 	.word	0x40023c00

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b0ae      	sub	sp, #184	; 0xb8
 8003426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003446:	4bcb      	ldr	r3, [pc, #812]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b0c      	cmp	r3, #12
 8003450:	f200 8206 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x440>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	08003861 	.word	0x08003861
 8003464:	08003861 	.word	0x08003861
 8003468:	08003861 	.word	0x08003861
 800346c:	08003499 	.word	0x08003499
 8003470:	08003861 	.word	0x08003861
 8003474:	08003861 	.word	0x08003861
 8003478:	08003861 	.word	0x08003861
 800347c:	080034a1 	.word	0x080034a1
 8003480:	08003861 	.word	0x08003861
 8003484:	08003861 	.word	0x08003861
 8003488:	08003861 	.word	0x08003861
 800348c:	08003691 	.word	0x08003691
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4bb9      	ldr	r3, [pc, #740]	; (8003778 <HAL_RCC_GetSysClockFreq+0x358>)
 8003492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003496:	e1e7      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003498:	4bb8      	ldr	r3, [pc, #736]	; (800377c <HAL_RCC_GetSysClockFreq+0x35c>)
 800349a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800349e:	e1e3      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a0:	4bb4      	ldr	r3, [pc, #720]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ac:	4bb1      	ldr	r3, [pc, #708]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d071      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b8:	4bae      	ldr	r3, [pc, #696]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80034c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	6439      	str	r1, [r7, #64]	; 0x40
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	647b      	str	r3, [r7, #68]	; 0x44
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003510:	4649      	mov	r1, r9
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4641      	mov	r1, r8
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4641      	mov	r1, r8
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	4641      	mov	r1, r8
 8003520:	1a51      	subs	r1, r2, r1
 8003522:	63b9      	str	r1, [r7, #56]	; 0x38
 8003524:	4649      	mov	r1, r9
 8003526:	eb63 0301 	sbc.w	r3, r3, r1
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003538:	4649      	mov	r1, r9
 800353a:	00cb      	lsls	r3, r1, #3
 800353c:	4641      	mov	r1, r8
 800353e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003542:	4641      	mov	r1, r8
 8003544:	00ca      	lsls	r2, r1, #3
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	4603      	mov	r3, r0
 800354c:	4622      	mov	r2, r4
 800354e:	189b      	adds	r3, r3, r2
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
 8003552:	462b      	mov	r3, r5
 8003554:	460a      	mov	r2, r1
 8003556:	eb42 0303 	adc.w	r3, r2, r3
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003568:	4629      	mov	r1, r5
 800356a:	024b      	lsls	r3, r1, #9
 800356c:	4621      	mov	r1, r4
 800356e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003572:	4621      	mov	r1, r4
 8003574:	024a      	lsls	r2, r1, #9
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003584:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003588:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800358c:	f7fc fe40 	bl	8000210 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800359a:	e067      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4b75      	ldr	r3, [pc, #468]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80035ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035b6:	2300      	movs	r3, #0
 80035b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80035be:	4622      	mov	r2, r4
 80035c0:	462b      	mov	r3, r5
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	0159      	lsls	r1, r3, #5
 80035cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d0:	0150      	lsls	r0, r2, #5
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4621      	mov	r1, r4
 80035d8:	1a51      	subs	r1, r2, r1
 80035da:	62b9      	str	r1, [r7, #40]	; 0x28
 80035dc:	4629      	mov	r1, r5
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80035f0:	4649      	mov	r1, r9
 80035f2:	018b      	lsls	r3, r1, #6
 80035f4:	4641      	mov	r1, r8
 80035f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fa:	4641      	mov	r1, r8
 80035fc:	018a      	lsls	r2, r1, #6
 80035fe:	4641      	mov	r1, r8
 8003600:	ebb2 0a01 	subs.w	sl, r2, r1
 8003604:	4649      	mov	r1, r9
 8003606:	eb63 0b01 	sbc.w	fp, r3, r1
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003616:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800361a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361e:	4692      	mov	sl, r2
 8003620:	469b      	mov	fp, r3
 8003622:	4623      	mov	r3, r4
 8003624:	eb1a 0303 	adds.w	r3, sl, r3
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	462b      	mov	r3, r5
 800362c:	eb4b 0303 	adc.w	r3, fp, r3
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800363e:	4629      	mov	r1, r5
 8003640:	028b      	lsls	r3, r1, #10
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003648:	4621      	mov	r1, r4
 800364a:	028a      	lsls	r2, r1, #10
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003654:	2200      	movs	r2, #0
 8003656:	673b      	str	r3, [r7, #112]	; 0x70
 8003658:	677a      	str	r2, [r7, #116]	; 0x74
 800365a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800365e:	f7fc fdd7 	bl	8000210 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4613      	mov	r3, r2
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800367e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800368e:	e0eb      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003690:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369c:	4b35      	ldr	r3, [pc, #212]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d06b      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	2200      	movs	r2, #0
 80036b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80036b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ba:	663b      	str	r3, [r7, #96]	; 0x60
 80036bc:	2300      	movs	r3, #0
 80036be:	667b      	str	r3, [r7, #100]	; 0x64
 80036c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80036c4:	4622      	mov	r2, r4
 80036c6:	462b      	mov	r3, r5
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0159      	lsls	r1, r3, #5
 80036d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d6:	0150      	lsls	r0, r2, #5
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4621      	mov	r1, r4
 80036de:	1a51      	subs	r1, r2, r1
 80036e0:	61b9      	str	r1, [r7, #24]
 80036e2:	4629      	mov	r1, r5
 80036e4:	eb63 0301 	sbc.w	r3, r3, r1
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036f6:	4659      	mov	r1, fp
 80036f8:	018b      	lsls	r3, r1, #6
 80036fa:	4651      	mov	r1, sl
 80036fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003700:	4651      	mov	r1, sl
 8003702:	018a      	lsls	r2, r1, #6
 8003704:	4651      	mov	r1, sl
 8003706:	ebb2 0801 	subs.w	r8, r2, r1
 800370a:	4659      	mov	r1, fp
 800370c:	eb63 0901 	sbc.w	r9, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003724:	4690      	mov	r8, r2
 8003726:	4699      	mov	r9, r3
 8003728:	4623      	mov	r3, r4
 800372a:	eb18 0303 	adds.w	r3, r8, r3
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	462b      	mov	r3, r5
 8003732:	eb49 0303 	adc.w	r3, r9, r3
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003744:	4629      	mov	r1, r5
 8003746:	024b      	lsls	r3, r1, #9
 8003748:	4621      	mov	r1, r4
 800374a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800374e:	4621      	mov	r1, r4
 8003750:	024a      	lsls	r2, r1, #9
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800375a:	2200      	movs	r2, #0
 800375c:	65bb      	str	r3, [r7, #88]	; 0x58
 800375e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003760:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003764:	f7fc fd54 	bl	8000210 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003772:	e065      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x420>
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_RCC_GetSysClockFreq+0x458>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	2200      	movs	r2, #0
 8003788:	4618      	mov	r0, r3
 800378a:	4611      	mov	r1, r2
 800378c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003790:	653b      	str	r3, [r7, #80]	; 0x50
 8003792:	2300      	movs	r3, #0
 8003794:	657b      	str	r3, [r7, #84]	; 0x54
 8003796:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800379a:	4642      	mov	r2, r8
 800379c:	464b      	mov	r3, r9
 800379e:	f04f 0000 	mov.w	r0, #0
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	0159      	lsls	r1, r3, #5
 80037a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ac:	0150      	lsls	r0, r2, #5
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4641      	mov	r1, r8
 80037b4:	1a51      	subs	r1, r2, r1
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	4649      	mov	r1, r9
 80037ba:	eb63 0301 	sbc.w	r3, r3, r1
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037cc:	4659      	mov	r1, fp
 80037ce:	018b      	lsls	r3, r1, #6
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d6:	4651      	mov	r1, sl
 80037d8:	018a      	lsls	r2, r1, #6
 80037da:	4651      	mov	r1, sl
 80037dc:	1a54      	subs	r4, r2, r1
 80037de:	4659      	mov	r1, fp
 80037e0:	eb63 0501 	sbc.w	r5, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	00eb      	lsls	r3, r5, #3
 80037ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	4643      	mov	r3, r8
 80037fa:	18e3      	adds	r3, r4, r3
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	464b      	mov	r3, r9
 8003800:	eb45 0303 	adc.w	r3, r5, r3
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003812:	4629      	mov	r1, r5
 8003814:	028b      	lsls	r3, r1, #10
 8003816:	4621      	mov	r1, r4
 8003818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800381c:	4621      	mov	r1, r4
 800381e:	028a      	lsls	r2, r1, #10
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003828:	2200      	movs	r2, #0
 800382a:	64bb      	str	r3, [r7, #72]	; 0x48
 800382c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800382e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003832:	f7fc fced 	bl	8000210 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4613      	mov	r3, r2
 800383c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <HAL_RCC_GetSysClockFreq+0x458>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0f1b      	lsrs	r3, r3, #28
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800384e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800385e:	e003      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003866:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800386c:	4618      	mov	r0, r3
 800386e:	37b8      	adds	r7, #184	; 0xb8
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	00f42400 	.word	0x00f42400

08003880 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e28d      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8083 	beq.w	80039a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038a0:	4b94      	ldr	r3, [pc, #592]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d019      	beq.n	80038e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038ac:	4b91      	ldr	r3, [pc, #580]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038b8:	4b8e      	ldr	r3, [pc, #568]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c4:	d00c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c6:	4b8b      	ldr	r3, [pc, #556]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d112      	bne.n	80038f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d2:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038de:	d10b      	bne.n	80038f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	4b84      	ldr	r3, [pc, #528]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05b      	beq.n	80039a4 <HAL_RCC_OscConfig+0x124>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d157      	bne.n	80039a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e25a      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003900:	d106      	bne.n	8003910 <HAL_RCC_OscConfig+0x90>
 8003902:	4b7c      	ldr	r3, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7b      	ldr	r2, [pc, #492]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e01d      	b.n	800394c <HAL_RCC_OscConfig+0xcc>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0xb4>
 800391a:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a72      	ldr	r2, [pc, #456]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e00b      	b.n	800394c <HAL_RCC_OscConfig+0xcc>
 8003934:	4b6f      	ldr	r3, [pc, #444]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6e      	ldr	r2, [pc, #440]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 800393a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4b6c      	ldr	r3, [pc, #432]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a6b      	ldr	r2, [pc, #428]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d013      	beq.n	800397c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fd fd4c 	bl	80013f0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800395c:	f7fd fd48 	bl	80013f0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e21f      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0xdc>
 800397a:	e014      	b.n	80039a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fd fd38 	bl	80013f0 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003984:	f7fd fd34 	bl	80013f0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e20b      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x104>
 80039a2:	e000      	b.n	80039a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06f      	beq.n	8003a92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039b2:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d017      	beq.n	80039ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039be:	4b4d      	ldr	r3, [pc, #308]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d105      	bne.n	80039d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039ca:	4b4a      	ldr	r3, [pc, #296]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b44      	ldr	r3, [pc, #272]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x186>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1d3      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4937      	ldr	r1, [pc, #220]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <HAL_RCC_OscConfig+0x278>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fd fce1 	bl	80013f0 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fd fcdd 	bl	80013f0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1b4      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4925      	ldr	r1, [pc, #148]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <HAL_RCC_OscConfig+0x278>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fcc0 	bl	80013f0 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fd fcbc 	bl	80013f0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e193      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d036      	beq.n	8003b0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <HAL_RCC_OscConfig+0x27c>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd fca0 	bl	80013f0 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fd fc9c 	bl	80013f0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e173      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x234>
 8003ad2:	e01b      	b.n	8003b0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fd fc89 	bl	80013f0 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	e00e      	b.n	8003b00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7fd fc85 	bl	80013f0 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d907      	bls.n	8003b00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e15c      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b8a      	ldr	r3, [pc, #552]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ea      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b83      	ldr	r3, [pc, #524]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b7f      	ldr	r3, [pc, #508]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a7e      	ldr	r2, [pc, #504]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b7c      	ldr	r3, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b79      	ldr	r3, [pc, #484]	; (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b76      	ldr	r3, [pc, #472]	; (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a75      	ldr	r2, [pc, #468]	; (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fd fc45 	bl	80013f0 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fd fc41 	bl	80013f0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e118      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x31e>
 8003b90:	4b66      	ldr	r3, [pc, #408]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	4a65      	ldr	r2, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x358>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x340>
 8003ba6:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	4a60      	ldr	r2, [pc, #384]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb2:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a5d      	ldr	r2, [pc, #372]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x358>
 8003bc0:	4b5a      	ldr	r3, [pc, #360]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4a59      	ldr	r2, [pc, #356]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
 8003bcc:	4b57      	ldr	r3, [pc, #348]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a56      	ldr	r2, [pc, #344]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd fc06 	bl	80013f0 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fd fc02 	bl	80013f0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0d7      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ee      	beq.n	8003be8 <HAL_RCC_OscConfig+0x368>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fd fbf0 	bl	80013f0 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fd fbec 	bl	80013f0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0c1      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ee      	bne.n	8003c14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	4a3a      	ldr	r2, [pc, #232]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80ad 	beq.w	8003dac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d060      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d145      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b33      	ldr	r3, [pc, #204]	; (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fbc0 	bl	80013f0 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd fbbc 	bl	80013f0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e093      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	491b      	ldr	r1, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fd fb91 	bl	80013f0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fd fb8d 	bl	80013f0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e064      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x452>
 8003cf0:	e05c      	b.n	8003dac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fb7a 	bl	80013f0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fb76 	bl	80013f0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e04d      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x480>
 8003d1e:	e045      	b.n	8003dac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e040      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d38:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <HAL_RCC_OscConfig+0x538>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d030      	beq.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d129      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d122      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d119      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d10f      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07b      	b.n	8003ec6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d108      	bne.n	8003de8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dde:	d009      	beq.n	8003df4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	61da      	str	r2, [r3, #28]
 8003de6:	e005      	b.n	8003df4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd f876 	bl	8000f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	ea42 0103 	orr.w	r1, r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	f003 0104 	and.w	r1, r3, #4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0210 	and.w	r2, r3, #16
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d110      	bne.n	8003f0c <HAL_SPI_Receive_DMA+0x3c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef2:	d10b      	bne.n	8003f0c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f8ac 	bl	8004060 <HAL_SPI_TransmitReceive_DMA>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	e09f      	b.n	800404c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_SPI_Receive_DMA+0x4a>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e098      	b.n	800404c <HAL_SPI_Receive_DMA+0x17c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f32:	e086      	b.n	8004042 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_SPI_Receive_DMA+0x70>
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d102      	bne.n	8003f46 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f44:	e07d      	b.n	8004042 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	88fa      	ldrh	r2, [r7, #6]
 8003f5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f86:	d10f      	bne.n	8003fa8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fa6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fac:	4a29      	ldr	r2, [pc, #164]	; (8004054 <HAL_SPI_Receive_DMA+0x184>)
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb4:	4a28      	ldr	r2, [pc, #160]	; (8004058 <HAL_SPI_Receive_DMA+0x188>)
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbc:	4a27      	ldr	r2, [pc, #156]	; (800405c <HAL_SPI_Receive_DMA+0x18c>)
 8003fbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fde:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003fe0:	f7fd fbf8 	bl	80017d4 <HAL_DMA_Start_IT>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f043 0210 	orr.w	r2, r3, #16
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004002:	e01e      	b.n	8004042 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d007      	beq.n	8004022 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004020:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0220 	orr.w	r2, r2, #32
 8004030:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800404a:	7dfb      	ldrb	r3, [r7, #23]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	080043ed 	.word	0x080043ed
 8004058:	080042b5 	.word	0x080042b5
 800405c:	08004425 	.word	0x08004425

08004060 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_SPI_TransmitReceive_DMA+0x20>
 800407c:	2302      	movs	r3, #2
 800407e:	e0e3      	b.n	8004248 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800408e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004096:	7dbb      	ldrb	r3, [r7, #22]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d00d      	beq.n	80040b8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a2:	d106      	bne.n	80040b2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80040ac:	7dbb      	ldrb	r3, [r7, #22]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
 80040b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040b6:	e0c2      	b.n	800423e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_SPI_TransmitReceive_DMA+0x6a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_SPI_TransmitReceive_DMA+0x6a>
 80040c4:	887b      	ldrh	r3, [r7, #2]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040ce:	e0b6      	b.n	800423e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d003      	beq.n	80040e4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2205      	movs	r2, #5
 80040e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	887a      	ldrh	r2, [r7, #2]
 80040fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b04      	cmp	r3, #4
 8004124:	d108      	bne.n	8004138 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	4a49      	ldr	r2, [pc, #292]	; (8004250 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	4a48      	ldr	r2, [pc, #288]	; (8004254 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004134:	63da      	str	r2, [r3, #60]	; 0x3c
 8004136:	e007      	b.n	8004148 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	4a46      	ldr	r2, [pc, #280]	; (8004258 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800413e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	4a45      	ldr	r2, [pc, #276]	; (800425c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004146:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414c:	4a44      	ldr	r2, [pc, #272]	; (8004260 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800414e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	2200      	movs	r2, #0
 8004156:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	4619      	mov	r1, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004170:	f7fd fb30 	bl	80017d4 <HAL_DMA_Start_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0210 	orr.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004192:	e054      	b.n	800423e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	2200      	movs	r2, #0
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b0:	2200      	movs	r2, #0
 80041b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b8:	2200      	movs	r2, #0
 80041ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	2200      	movs	r2, #0
 80041c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	4619      	mov	r1, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80041dc:	f7fd fafa 	bl	80017d4 <HAL_DMA_Start_IT>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f043 0210 	orr.w	r2, r3, #16
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80041fe:	e01e      	b.n	800423e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d007      	beq.n	800421e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0220 	orr.w	r2, r2, #32
 800422c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0202 	orr.w	r2, r2, #2
 800423c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	080043ed 	.word	0x080043ed
 8004254:	080042b5 	.word	0x080042b5
 8004258:	08004409 	.word	0x08004409
 800425c:	0800435d 	.word	0x0800435d
 8004260:	08004425 	.word	0x08004425

08004264 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c2:	f7fd f895 	bl	80013f0 <HAL_GetTick>
 80042c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d6:	d03b      	beq.n	8004350 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0220 	bic.w	r2, r2, #32
 80042e6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10d      	bne.n	800430c <SPI_DMAReceiveCplt+0x58>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f8:	d108      	bne.n	800430c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0203 	bic.w	r2, r2, #3
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	e007      	b.n	800431c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	2164      	movs	r1, #100	; 0x64
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f927 	bl	8004574 <SPI_EndRxTransaction>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ffa9 	bl	80042a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800434e:	e002      	b.n	8004356 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7fc fc41 	bl	8000bd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800436a:	f7fd f841 	bl	80013f0 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437e:	d02f      	beq.n	80043e0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0220 	bic.w	r2, r2, #32
 800438e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	2164      	movs	r1, #100	; 0x64
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f953 	bl	8004640 <SPI_EndRxTxTransaction>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0203 	bic.w	r2, r2, #3
 80043ba:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff ff61 	bl	80042a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80043de:	e002      	b.n	80043e6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7ff ff3f 	bl	8004264 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f7ff ff3c 	bl	8004278 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff ff38 	bl	800428c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0203 	bic.w	r2, r2, #3
 8004440:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f043 0210 	orr.w	r2, r3, #16
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff ff22 	bl	80042a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004474:	f7fc ffbc 	bl	80013f0 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4413      	add	r3, r2
 8004482:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004484:	f7fc ffb4 	bl	80013f0 <HAL_GetTick>
 8004488:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448a:	4b39      	ldr	r3, [pc, #228]	; (8004570 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	015b      	lsls	r3, r3, #5
 8004490:	0d1b      	lsrs	r3, r3, #20
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449a:	e054      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a2:	d050      	beq.n	8004546 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a4:	f7fc ffa4 	bl	80013f0 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d902      	bls.n	80044ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d13d      	bne.n	8004536 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d2:	d111      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044dc:	d004      	beq.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e6:	d107      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004500:	d10f      	bne.n	8004522 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004520:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e017      	b.n	8004566 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3b01      	subs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	429a      	cmp	r2, r3
 8004562:	d19b      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000000 	.word	0x20000000

08004574 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004588:	d111      	bne.n	80045ae <SPI_EndRxTransaction+0x3a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004592:	d004      	beq.n	800459e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459c:	d107      	bne.n	80045ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d12a      	bne.n	800460e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c0:	d012      	beq.n	80045e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	2180      	movs	r1, #128	; 0x80
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff ff49 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02d      	beq.n	8004634 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e026      	b.n	8004636 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	2101      	movs	r1, #1
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ff36 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01a      	beq.n	8004634 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e013      	b.n	8004636 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2200      	movs	r2, #0
 8004616:	2101      	movs	r1, #1
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff ff23 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e000      	b.n	8004636 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <SPI_EndRxTxTransaction+0x7c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <SPI_EndRxTxTransaction+0x80>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	0d5b      	lsrs	r3, r3, #21
 8004658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800466a:	d112      	bne.n	8004692 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff fef4 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e00f      	b.n	80046b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3b01      	subs	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b80      	cmp	r3, #128	; 0x80
 80046aa:	d0f2      	beq.n	8004692 <SPI_EndRxTxTransaction+0x52>
 80046ac:	e000      	b.n	80046b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80046ae:	bf00      	nop
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000000 	.word	0x20000000
 80046c0:	165e9f81 	.word	0x165e9f81

080046c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e041      	b.n	800475a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f839 	bl	8004762 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 f9d8 	bl	8004ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d001      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e04e      	b.n	800482e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a23      	ldr	r2, [pc, #140]	; (800483c <HAL_TIM_Base_Start_IT+0xc4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d01d      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_TIM_Base_Start_IT+0xc8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <HAL_TIM_Base_Start_IT+0xcc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <HAL_TIM_Base_Start_IT+0xd0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1b      	ldr	r2, [pc, #108]	; (800484c <HAL_TIM_Base_Start_IT+0xd4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a19      	ldr	r2, [pc, #100]	; (8004850 <HAL_TIM_Base_Start_IT+0xd8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a18      	ldr	r2, [pc, #96]	; (8004854 <HAL_TIM_Base_Start_IT+0xdc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d111      	bne.n	800481c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b06      	cmp	r3, #6
 8004808:	d010      	beq.n	800482c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	e007      	b.n	800482c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40010400 	.word	0x40010400
 8004850:	40014000 	.word	0x40014000
 8004854:	40001800 	.word	0x40001800

08004858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0202 	mvn.w	r2, #2
 8004884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8ee 	bl	8004a7c <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8e0 	bl	8004a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f8f1 	bl	8004a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0204 	mvn.w	r2, #4
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8c4 	bl	8004a7c <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8b6 	bl	8004a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8c7 	bl	8004a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b08      	cmp	r3, #8
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0208 	mvn.w	r2, #8
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2204      	movs	r2, #4
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f89a 	bl	8004a7c <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f88c 	bl	8004a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f89d 	bl	8004a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b10      	cmp	r3, #16
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b10      	cmp	r3, #16
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0210 	mvn.w	r2, #16
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2208      	movs	r2, #8
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f870 	bl	8004a7c <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f862 	bl	8004a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f873 	bl	8004a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d10e      	bne.n	80049dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0201 	mvn.w	r2, #1
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fc fa06 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d10e      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d107      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f902 	bl	8004c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d10e      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d107      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f838 	bl	8004aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0220 	mvn.w	r2, #32
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8cc 	bl	8004bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a40      	ldr	r2, [pc, #256]	; (8004bcc <TIM_Base_SetConfig+0x114>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad6:	d00f      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a3d      	ldr	r2, [pc, #244]	; (8004bd0 <TIM_Base_SetConfig+0x118>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a3c      	ldr	r2, [pc, #240]	; (8004bd4 <TIM_Base_SetConfig+0x11c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a3b      	ldr	r2, [pc, #236]	; (8004bd8 <TIM_Base_SetConfig+0x120>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a3a      	ldr	r2, [pc, #232]	; (8004bdc <TIM_Base_SetConfig+0x124>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2f      	ldr	r2, [pc, #188]	; (8004bcc <TIM_Base_SetConfig+0x114>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d02b      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b18:	d027      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a2c      	ldr	r2, [pc, #176]	; (8004bd0 <TIM_Base_SetConfig+0x118>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d023      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a2b      	ldr	r2, [pc, #172]	; (8004bd4 <TIM_Base_SetConfig+0x11c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d01f      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <TIM_Base_SetConfig+0x120>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01b      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a29      	ldr	r2, [pc, #164]	; (8004bdc <TIM_Base_SetConfig+0x124>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d017      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a28      	ldr	r2, [pc, #160]	; (8004be0 <TIM_Base_SetConfig+0x128>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a27      	ldr	r2, [pc, #156]	; (8004be4 <TIM_Base_SetConfig+0x12c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00f      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a26      	ldr	r2, [pc, #152]	; (8004be8 <TIM_Base_SetConfig+0x130>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00b      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a25      	ldr	r2, [pc, #148]	; (8004bec <TIM_Base_SetConfig+0x134>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d007      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a24      	ldr	r2, [pc, #144]	; (8004bf0 <TIM_Base_SetConfig+0x138>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a23      	ldr	r2, [pc, #140]	; (8004bf4 <TIM_Base_SetConfig+0x13c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d108      	bne.n	8004b7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <TIM_Base_SetConfig+0x114>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_Base_SetConfig+0xf8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <TIM_Base_SetConfig+0x124>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d103      	bne.n	8004bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	615a      	str	r2, [r3, #20]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	40000c00 	.word	0x40000c00
 8004bdc:	40010400 	.word	0x40010400
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40014400 	.word	0x40014400
 8004be8:	40014800 	.word	0x40014800
 8004bec:	40001800 	.word	0x40001800
 8004bf0:	40001c00 	.word	0x40001c00
 8004bf4:	40002000 	.word	0x40002000

08004bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e03f      	b.n	8004cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fa1c 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fdbf 	bl	80057e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b08a      	sub	sp, #40	; 0x28
 8004cbe:	af02      	add	r7, sp, #8
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d17c      	bne.n	8004dd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_UART_Transmit+0x2c>
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e075      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_Transmit+0x3e>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e06e      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2221      	movs	r2, #33	; 0x21
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc fb6f 	bl	80013f0 <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d108      	bne.n	8004d3c <HAL_UART_Transmit+0x82>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e003      	b.n	8004d44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d4c:	e02a      	b.n	8004da4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fb3d 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e036      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	3302      	adds	r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e007      	b.n	8004d96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1cf      	bne.n	8004d4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2140      	movs	r1, #64	; 0x40
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fb0d 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e006      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d130      	bne.n	8004e5a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_UART_Transmit_IT+0x26>
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e029      	b.n	8004e5c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Transmit_IT+0x38>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e022      	b.n	8004e5c <HAL_UART_Transmit_IT+0x7e>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	88fa      	ldrh	r2, [r7, #6]
 8004e28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2221      	movs	r2, #33	; 0x21
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e54:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e000      	b.n	8004e5c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
  }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b0ba      	sub	sp, #232	; 0xe8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <HAL_UART_IRQHandler+0x66>
 8004eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fbd3 	bl	8005672 <UART_Receive_IT>
      return;
 8004ecc:	e256      	b.n	800537c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80de 	beq.w	8005094 <HAL_UART_IRQHandler+0x22c>
 8004ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80d1 	beq.w	8005094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_UART_IRQHandler+0xae>
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_UART_IRQHandler+0xd2>
 8004f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f043 0202 	orr.w	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_UART_IRQHandler+0xf6>
 8004f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d011      	beq.n	8004f8e <HAL_UART_IRQHandler+0x126>
 8004f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f043 0208 	orr.w	r2, r3, #8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 81ed 	beq.w	8005372 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x14e>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb5e 	bl	8005672 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x17a>
 8004fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d04f      	beq.n	8005082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa66 	bl	80054b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d141      	bne.n	800507a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800500c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800502e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800503a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1d9      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	2b00      	cmp	r3, #0
 8005048:	d013      	beq.n	8005072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	4a7d      	ldr	r2, [pc, #500]	; (8005244 <HAL_UART_IRQHandler+0x3dc>)
 8005050:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	4618      	mov	r0, r3
 8005058:	f7fc fc84 	bl	8001964 <HAL_DMA_Abort_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	e00e      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f99a 	bl	80053ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005078:	e00a      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f996 	bl	80053ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e006      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f992 	bl	80053ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800508e:	e170      	b.n	8005372 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	bf00      	nop
    return;
 8005092:	e16e      	b.n	8005372 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 814a 	bne.w	8005332 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8143 	beq.w	8005332 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 813c 	beq.w	8005332 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	f040 80b4 	bne.w	8005248 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8140 	beq.w	8005376 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050fe:	429a      	cmp	r2, r3
 8005100:	f080 8139 	bcs.w	8005376 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800510a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005116:	f000 8088 	beq.w	800522a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800514a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800515e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1d9      	bne.n	800511a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3314      	adds	r3, #20
 800516c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800518a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800518e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800519c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e1      	bne.n	8005166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e3      	bne.n	80051a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fa:	f023 0310 	bic.w	r3, r3, #16
 80051fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800520c:	65ba      	str	r2, [r7, #88]	; 0x58
 800520e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800521a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e3      	bne.n	80051e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	4618      	mov	r0, r3
 8005226:	f7fc fb2d 	bl	8001884 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005232:	b29b      	uxth	r3, r3
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	b29b      	uxth	r3, r3
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8c0 	bl	80053c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005240:	e099      	b.n	8005376 <HAL_UART_IRQHandler+0x50e>
 8005242:	bf00      	nop
 8005244:	0800557b 	.word	0x0800557b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005250:	b29b      	uxth	r3, r3
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 808b 	beq.w	800537a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8086 	beq.w	800537a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005292:	647a      	str	r2, [r7, #68]	; 0x44
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	623b      	str	r3, [r7, #32]
   return(result);
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3314      	adds	r3, #20
 80052c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052ca:	633a      	str	r2, [r7, #48]	; 0x30
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e3      	bne.n	80052a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005310:	61fa      	str	r2, [r7, #28]
 8005312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	617b      	str	r3, [r7, #20]
   return(result);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e3      	bne.n	80052ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f848 	bl	80053c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005330:	e023      	b.n	800537a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <HAL_UART_IRQHandler+0x4ea>
 800533e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f929 	bl	80055a2 <UART_Transmit_IT>
    return;
 8005350:	e014      	b.n	800537c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <HAL_UART_IRQHandler+0x514>
 800535e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f969 	bl	8005642 <UART_EndTransmit_IT>
    return;
 8005370:	e004      	b.n	800537c <HAL_UART_IRQHandler+0x514>
    return;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <HAL_UART_IRQHandler+0x514>
      return;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <HAL_UART_IRQHandler+0x514>
      return;
 800537a:	bf00      	nop
  }
}
 800537c:	37e8      	adds	r7, #232	; 0xe8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b090      	sub	sp, #64	; 0x40
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	e050      	b.n	800548c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f0:	d04c      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <UART_WaitOnFlagUntilTimeout+0x30>
 80053f8:	f7fb fffa 	bl	80013f0 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005404:	429a      	cmp	r2, r3
 8005406:	d241      	bcs.n	800548c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005428:	637a      	str	r2, [r7, #52]	; 0x34
 800542a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e5      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3314      	adds	r3, #20
 8005442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	e853 3f00 	ldrex	r3, [r3]
 800544a:	613b      	str	r3, [r7, #16]
   return(result);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	63bb      	str	r3, [r7, #56]	; 0x38
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800545c:	623a      	str	r2, [r7, #32]
 800545e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	61bb      	str	r3, [r7, #24]
   return(result);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e5      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e00f      	b.n	80054ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4013      	ands	r3, r2
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d09f      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3740      	adds	r7, #64	; 0x40
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b095      	sub	sp, #84	; 0x54
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054dc:	643a      	str	r2, [r7, #64]	; 0x40
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	64bb      	str	r3, [r7, #72]	; 0x48
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	2b01      	cmp	r3, #1
 800552a:	d119      	bne.n	8005560 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	60bb      	str	r3, [r7, #8]
   return(result);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 0310 	bic.w	r3, r3, #16
 8005542:	647b      	str	r3, [r7, #68]	; 0x44
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800554c:	61ba      	str	r2, [r7, #24]
 800554e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6979      	ldr	r1, [r7, #20]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	613b      	str	r3, [r7, #16]
   return(result);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800556e:	bf00      	nop
 8005570:	3754      	adds	r7, #84	; 0x54
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f7ff ff09 	bl	80053ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b21      	cmp	r3, #33	; 0x21
 80055b4:	d13e      	bne.n	8005634 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	d114      	bne.n	80055ea <UART_Transmit_IT+0x48>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d110      	bne.n	80055ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	1c9a      	adds	r2, r3, #2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	621a      	str	r2, [r3, #32]
 80055e8:	e008      	b.n	80055fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6211      	str	r1, [r2, #32]
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29b      	uxth	r3, r3
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4619      	mov	r1, r3
 800560a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10f      	bne.n	8005630 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800561e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800562e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e000      	b.n	8005636 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005634:	2302      	movs	r3, #2
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005658:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fe8e 	bl	8005384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b08c      	sub	sp, #48	; 0x30
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b22      	cmp	r3, #34	; 0x22
 8005684:	f040 80ab 	bne.w	80057de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005690:	d117      	bne.n	80056c2 <UART_Receive_IT+0x50>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d113      	bne.n	80056c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	1c9a      	adds	r2, r3, #2
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	; 0x28
 80056c0:	e026      	b.n	8005710 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d4:	d007      	beq.n	80056e6 <UART_Receive_IT+0x74>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <UART_Receive_IT+0x82>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e008      	b.n	8005706 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005700:	b2da      	uxtb	r2, r3
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29b      	uxth	r3, r3
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4619      	mov	r1, r3
 800571e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005720:	2b00      	cmp	r3, #0
 8005722:	d15a      	bne.n	80057da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0220 	bic.w	r2, r2, #32
 8005732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	2b01      	cmp	r3, #1
 8005762:	d135      	bne.n	80057d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	330c      	adds	r3, #12
 8005770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	613b      	str	r3, [r7, #16]
   return(result);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f023 0310 	bic.w	r3, r3, #16
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	330c      	adds	r3, #12
 8005788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578a:	623a      	str	r2, [r7, #32]
 800578c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	69f9      	ldr	r1, [r7, #28]
 8005790:	6a3a      	ldr	r2, [r7, #32]
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	61bb      	str	r3, [r7, #24]
   return(result);
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e5      	bne.n	800576a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d10a      	bne.n	80057c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fdf9 	bl	80053c0 <HAL_UARTEx_RxEventCallback>
 80057ce:	e002      	b.n	80057d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fde1 	bl	8005398 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e002      	b.n	80057e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	e000      	b.n	80057e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057de:	2302      	movs	r3, #2
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3730      	adds	r7, #48	; 0x30
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ec:	b0c0      	sub	sp, #256	; 0x100
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	68d9      	ldr	r1, [r3, #12]
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	ea40 0301 	orr.w	r3, r0, r1
 8005810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	431a      	orrs	r2, r3
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	431a      	orrs	r2, r3
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005840:	f021 010c 	bic.w	r1, r1, #12
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800584e:	430b      	orrs	r3, r1
 8005850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005862:	6999      	ldr	r1, [r3, #24]
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	ea40 0301 	orr.w	r3, r0, r1
 800586e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b8f      	ldr	r3, [pc, #572]	; (8005ab4 <UART_SetConfig+0x2cc>)
 8005878:	429a      	cmp	r2, r3
 800587a:	d005      	beq.n	8005888 <UART_SetConfig+0xa0>
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b8d      	ldr	r3, [pc, #564]	; (8005ab8 <UART_SetConfig+0x2d0>)
 8005884:	429a      	cmp	r2, r3
 8005886:	d104      	bne.n	8005892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005888:	f7fd fd84 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 800588c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005890:	e003      	b.n	800589a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005892:	f7fd fd6b 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8005896:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a4:	f040 810c 	bne.w	8005ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058ba:	4622      	mov	r2, r4
 80058bc:	462b      	mov	r3, r5
 80058be:	1891      	adds	r1, r2, r2
 80058c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80058c2:	415b      	adcs	r3, r3
 80058c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058ca:	4621      	mov	r1, r4
 80058cc:	eb12 0801 	adds.w	r8, r2, r1
 80058d0:	4629      	mov	r1, r5
 80058d2:	eb43 0901 	adc.w	r9, r3, r1
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ea:	4690      	mov	r8, r2
 80058ec:	4699      	mov	r9, r3
 80058ee:	4623      	mov	r3, r4
 80058f0:	eb18 0303 	adds.w	r3, r8, r3
 80058f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058f8:	462b      	mov	r3, r5
 80058fa:	eb49 0303 	adc.w	r3, r9, r3
 80058fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800590e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005916:	460b      	mov	r3, r1
 8005918:	18db      	adds	r3, r3, r3
 800591a:	653b      	str	r3, [r7, #80]	; 0x50
 800591c:	4613      	mov	r3, r2
 800591e:	eb42 0303 	adc.w	r3, r2, r3
 8005922:	657b      	str	r3, [r7, #84]	; 0x54
 8005924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800592c:	f7fa fc70 	bl	8000210 <__aeabi_uldivmod>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4b61      	ldr	r3, [pc, #388]	; (8005abc <UART_SetConfig+0x2d4>)
 8005936:	fba3 2302 	umull	r2, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	011c      	lsls	r4, r3, #4
 800593e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005948:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800594c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	64b9      	str	r1, [r7, #72]	; 0x48
 8005958:	415b      	adcs	r3, r3
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800595c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005960:	4641      	mov	r1, r8
 8005962:	eb12 0a01 	adds.w	sl, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb43 0b01 	adc.w	fp, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800597c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005980:	4692      	mov	sl, r2
 8005982:	469b      	mov	fp, r3
 8005984:	4643      	mov	r3, r8
 8005986:	eb1a 0303 	adds.w	r3, sl, r3
 800598a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800598e:	464b      	mov	r3, r9
 8005990:	eb4b 0303 	adc.w	r3, fp, r3
 8005994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059ac:	460b      	mov	r3, r1
 80059ae:	18db      	adds	r3, r3, r3
 80059b0:	643b      	str	r3, [r7, #64]	; 0x40
 80059b2:	4613      	mov	r3, r2
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059c2:	f7fa fc25 	bl	8000210 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <UART_SetConfig+0x2d4>)
 80059ce:	fba3 2301 	umull	r2, r3, r3, r1
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	2264      	movs	r2, #100	; 0x64
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	1acb      	subs	r3, r1, r3
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059e2:	4b36      	ldr	r3, [pc, #216]	; (8005abc <UART_SetConfig+0x2d4>)
 80059e4:	fba3 2302 	umull	r2, r3, r3, r2
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059f0:	441c      	add	r4, r3
 80059f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	1891      	adds	r1, r2, r2
 8005a0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a0c:	415b      	adcs	r3, r3
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a14:	4641      	mov	r1, r8
 8005a16:	1851      	adds	r1, r2, r1
 8005a18:	6339      	str	r1, [r7, #48]	; 0x30
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	414b      	adcs	r3, r1
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	00cb      	lsls	r3, r1, #3
 8005a30:	4651      	mov	r1, sl
 8005a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a36:	4651      	mov	r1, sl
 8005a38:	00ca      	lsls	r2, r1, #3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4642      	mov	r2, r8
 8005a42:	189b      	adds	r3, r3, r2
 8005a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a48:	464b      	mov	r3, r9
 8005a4a:	460a      	mov	r2, r1
 8005a4c:	eb42 0303 	adc.w	r3, r2, r3
 8005a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a68:	460b      	mov	r3, r1
 8005a6a:	18db      	adds	r3, r3, r3
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6e:	4613      	mov	r3, r2
 8005a70:	eb42 0303 	adc.w	r3, r2, r3
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a7e:	f7fa fbc7 	bl	8000210 <__aeabi_uldivmod>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <UART_SetConfig+0x2d4>)
 8005a88:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	2164      	movs	r1, #100	; 0x64
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	3332      	adds	r3, #50	; 0x32
 8005a9a:	4a08      	ldr	r2, [pc, #32]	; (8005abc <UART_SetConfig+0x2d4>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	f003 0207 	and.w	r2, r3, #7
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4422      	add	r2, r4
 8005aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ab0:	e105      	b.n	8005cbe <UART_SetConfig+0x4d6>
 8005ab2:	bf00      	nop
 8005ab4:	40011000 	.word	0x40011000
 8005ab8:	40011400 	.word	0x40011400
 8005abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005aca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ad2:	4642      	mov	r2, r8
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	1891      	adds	r1, r2, r2
 8005ad8:	6239      	str	r1, [r7, #32]
 8005ada:	415b      	adcs	r3, r3
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	1854      	adds	r4, r2, r1
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	eb43 0501 	adc.w	r5, r3, r1
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	00eb      	lsls	r3, r5, #3
 8005af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afa:	00e2      	lsls	r2, r4, #3
 8005afc:	4614      	mov	r4, r2
 8005afe:	461d      	mov	r5, r3
 8005b00:	4643      	mov	r3, r8
 8005b02:	18e3      	adds	r3, r4, r3
 8005b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b08:	464b      	mov	r3, r9
 8005b0a:	eb45 0303 	adc.w	r3, r5, r3
 8005b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b2e:	4629      	mov	r1, r5
 8005b30:	008b      	lsls	r3, r1, #2
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b38:	4621      	mov	r1, r4
 8005b3a:	008a      	lsls	r2, r1, #2
 8005b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b40:	f7fa fb66 	bl	8000210 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b60      	ldr	r3, [pc, #384]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011c      	lsls	r4, r3, #4
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	61b9      	str	r1, [r7, #24]
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b74:	4641      	mov	r1, r8
 8005b76:	1851      	adds	r1, r2, r1
 8005b78:	6139      	str	r1, [r7, #16]
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	414b      	adcs	r3, r1
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	00cb      	lsls	r3, r1, #3
 8005b90:	4651      	mov	r1, sl
 8005b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b96:	4651      	mov	r1, sl
 8005b98:	00ca      	lsls	r2, r1, #3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ba8:	464b      	mov	r3, r9
 8005baa:	460a      	mov	r2, r1
 8005bac:	eb42 0303 	adc.w	r3, r2, r3
 8005bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bcc:	4649      	mov	r1, r9
 8005bce:	008b      	lsls	r3, r1, #2
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	008a      	lsls	r2, r1, #2
 8005bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bde:	f7fa fb17 	bl	8000210 <__aeabi_uldivmod>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005be8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	2164      	movs	r1, #100	; 0x64
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	3332      	adds	r3, #50	; 0x32
 8005bfa:	4a34      	ldr	r2, [pc, #208]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c06:	441c      	add	r4, r3
 8005c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c10:	677a      	str	r2, [r7, #116]	; 0x74
 8005c12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c16:	4642      	mov	r2, r8
 8005c18:	464b      	mov	r3, r9
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	415b      	adcs	r3, r3
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c26:	4641      	mov	r1, r8
 8005c28:	1851      	adds	r1, r2, r1
 8005c2a:	6039      	str	r1, [r7, #0]
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	414b      	adcs	r3, r1
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c3e:	4659      	mov	r1, fp
 8005c40:	00cb      	lsls	r3, r1, #3
 8005c42:	4651      	mov	r1, sl
 8005c44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c48:	4651      	mov	r1, sl
 8005c4a:	00ca      	lsls	r2, r1, #3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4603      	mov	r3, r0
 8005c52:	4642      	mov	r2, r8
 8005c54:	189b      	adds	r3, r3, r2
 8005c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c58:	464b      	mov	r3, r9
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c6c:	667a      	str	r2, [r7, #100]	; 0x64
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	008b      	lsls	r3, r1, #2
 8005c7e:	4641      	mov	r1, r8
 8005c80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c84:	4641      	mov	r1, r8
 8005c86:	008a      	lsls	r2, r1, #2
 8005c88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c8c:	f7fa fac0 	bl	8000210 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005c96:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2164      	movs	r1, #100	; 0x64
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	3332      	adds	r3, #50	; 0x32
 8005ca8:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <UART_SetConfig+0x4e4>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	f003 020f 	and.w	r2, r3, #15
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4422      	add	r2, r4
 8005cbc:	609a      	str	r2, [r3, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cca:	bf00      	nop
 8005ccc:	51eb851f 	.word	0x51eb851f

08005cd0 <__NVIC_SetPriority>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	db0a      	blt.n	8005cfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	490c      	ldr	r1, [pc, #48]	; (8005d1c <__NVIC_SetPriority+0x4c>)
 8005cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cee:	0112      	lsls	r2, r2, #4
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005cf8:	e00a      	b.n	8005d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	4908      	ldr	r1, [pc, #32]	; (8005d20 <__NVIC_SetPriority+0x50>)
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	3b04      	subs	r3, #4
 8005d08:	0112      	lsls	r2, r2, #4
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	761a      	strb	r2, [r3, #24]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	e000e100 	.word	0xe000e100
 8005d20:	e000ed00 	.word	0xe000ed00

08005d24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <SysTick_Handler+0x1c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d2c:	f002 fc48 	bl	80085c0 <xTaskGetSchedulerState>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d001      	beq.n	8005d3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d36:	f003 fd7f 	bl	8009838 <xPortSysTickHandler>
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010

08005d44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d48:	2100      	movs	r1, #0
 8005d4a:	f06f 0004 	mvn.w	r0, #4
 8005d4e:	f7ff ffbf 	bl	8005cd0 <__NVIC_SetPriority>
#endif
}
 8005d52:	bf00      	nop
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d5e:	f3ef 8305 	mrs	r3, IPSR
 8005d62:	603b      	str	r3, [r7, #0]
  return(result);
 8005d64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d6a:	f06f 0305 	mvn.w	r3, #5
 8005d6e:	607b      	str	r3, [r7, #4]
 8005d70:	e00c      	b.n	8005d8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d72:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <osKernelInitialize+0x44>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d105      	bne.n	8005d86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <osKernelInitialize+0x44>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	e002      	b.n	8005d8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d8c:	687b      	ldr	r3, [r7, #4]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	2000c1fc 	.word	0x2000c1fc

08005da0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da6:	f3ef 8305 	mrs	r3, IPSR
 8005daa:	603b      	str	r3, [r7, #0]
  return(result);
 8005dac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <osKernelStart+0x1a>
    stat = osErrorISR;
 8005db2:	f06f 0305 	mvn.w	r3, #5
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	e010      	b.n	8005ddc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <osKernelStart+0x48>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d109      	bne.n	8005dd6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dc2:	f7ff ffbf 	bl	8005d44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dc6:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <osKernelStart+0x48>)
 8005dc8:	2202      	movs	r2, #2
 8005dca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005dcc:	f001 ff1c 	bl	8007c08 <vTaskStartScheduler>
      stat = osOK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	607b      	str	r3, [r7, #4]
 8005dd4:	e002      	b.n	8005ddc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ddc:	687b      	ldr	r3, [r7, #4]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	2000c1fc 	.word	0x2000c1fc

08005dec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08e      	sub	sp, #56	; 0x38
 8005df0:	af04      	add	r7, sp, #16
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dfc:	f3ef 8305 	mrs	r3, IPSR
 8005e00:	617b      	str	r3, [r7, #20]
  return(result);
 8005e02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d17e      	bne.n	8005f06 <osThreadNew+0x11a>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d07b      	beq.n	8005f06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e12:	2318      	movs	r3, #24
 8005e14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d045      	beq.n	8005eb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <osThreadNew+0x48>
        name = attr->name;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <osThreadNew+0x6e>
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2b38      	cmp	r3, #56	; 0x38
 8005e4c:	d805      	bhi.n	8005e5a <osThreadNew+0x6e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <osThreadNew+0x72>
        return (NULL);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e054      	b.n	8005f08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	089b      	lsrs	r3, r3, #2
 8005e6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <osThreadNew+0xa8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2bbb      	cmp	r3, #187	; 0xbb
 8005e7c:	d90a      	bls.n	8005e94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d006      	beq.n	8005e94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <osThreadNew+0xa8>
        mem = 1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	e010      	b.n	8005eb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10c      	bne.n	8005eb6 <osThreadNew+0xca>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d108      	bne.n	8005eb6 <osThreadNew+0xca>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <osThreadNew+0xca>
          mem = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61bb      	str	r3, [r7, #24]
 8005eb0:	e001      	b.n	8005eb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d110      	bne.n	8005ede <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ec4:	9202      	str	r2, [sp, #8]
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f001 fc8a 	bl	80077ec <xTaskCreateStatic>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	e013      	b.n	8005f06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d110      	bne.n	8005f06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	f107 0310 	add.w	r3, r7, #16
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f001 fcd5 	bl	80078a6 <xTaskCreate>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d001      	beq.n	8005f06 <osThreadNew+0x11a>
            hTask = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f06:	693b      	ldr	r3, [r7, #16]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3728      	adds	r7, #40	; 0x28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <osThreadFlagsSet+0x1a>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da03      	bge.n	8005f32 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8005f2a:	f06f 0303 	mvn.w	r3, #3
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e035      	b.n	8005f9e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f38:	f3ef 8305 	mrs	r3, IPSR
 8005f3c:	613b      	str	r3, [r7, #16]
  return(result);
 8005f3e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01f      	beq.n	8005f84 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005f48:	f107 0308 	add.w	r3, r7, #8
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2201      	movs	r2, #1
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6978      	ldr	r0, [r7, #20]
 8005f56:	f002 fe07 	bl	8008b68 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005f5a:	f107 030c 	add.w	r3, r7, #12
 8005f5e:	2200      	movs	r2, #0
 8005f60:	9200      	str	r2, [sp, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	2100      	movs	r1, #0
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f002 fdfe 	bl	8008b68 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d015      	beq.n	8005f9e <osThreadFlagsSet+0x8e>
 8005f72:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <osThreadFlagsSet+0x98>)
 8005f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	e00c      	b.n	8005f9e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005f84:	2300      	movs	r3, #0
 8005f86:	2201      	movs	r2, #1
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6978      	ldr	r0, [r7, #20]
 8005f8c:	f002 fd1c 	bl	80089c8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005f90:	f107 030c 	add.w	r3, r7, #12
 8005f94:	2200      	movs	r2, #0
 8005f96:	2100      	movs	r1, #0
 8005f98:	6978      	ldr	r0, [r7, #20]
 8005f9a:	f002 fd15 	bl	80089c8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb8:	f3ef 8305 	mrs	r3, IPSR
 8005fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005fbe:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005fc4:	f06f 0305 	mvn.w	r3, #5
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fca:	e06b      	b.n	80060a4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da03      	bge.n	8005fda <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005fd2:	f06f 0303 	mvn.w	r3, #3
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd8:	e064      	b.n	80060a4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe8:	e001      	b.n	8005fee <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8005ff6:	f001 ff39 	bl	8007e6c <xTaskGetTickCount>
 8005ffa:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005ffc:	f107 0210 	add.w	r2, r7, #16
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006004:	2000      	movs	r0, #0
 8006006:	f002 fc77 	bl	80088f8 <xTaskNotifyWait>
 800600a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d137      	bne.n	8006082 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8006012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4013      	ands	r3, r2
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800601e:	4313      	orrs	r3, r2
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00c      	beq.n	8006046 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	4013      	ands	r3, r2
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	429a      	cmp	r2, r3
 8006036:	d032      	beq.n	800609e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10f      	bne.n	800605e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800603e:	f06f 0302 	mvn.w	r3, #2
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006044:	e02e      	b.n	80060a4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d128      	bne.n	80060a2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8006056:	f06f 0302 	mvn.w	r3, #2
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800605c:	e022      	b.n	80060a4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800605e:	f001 ff05 	bl	8007e6c <xTaskGetTickCount>
 8006062:	4602      	mov	r2, r0
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	429a      	cmp	r2, r3
 8006070:	d902      	bls.n	8006078 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	e00e      	b.n	8006096 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8006078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
 8006080:	e009      	b.n	8006096 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d103      	bne.n	8006090 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8006088:	f06f 0302 	mvn.w	r3, #2
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800608e:	e002      	b.n	8006096 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8006090:	f06f 0301 	mvn.w	r3, #1
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1af      	bne.n	8005ffc <osThreadFlagsWait+0x50>
 800609c:	e002      	b.n	80060a4 <osThreadFlagsWait+0xf8>
            break;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <osThreadFlagsWait+0xf8>
            break;
 80060a2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3730      	adds	r7, #48	; 0x30
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b6:	f3ef 8305 	mrs	r3, IPSR
 80060ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80060bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <osDelay+0x1c>
    stat = osErrorISR;
 80060c2:	f06f 0305 	mvn.w	r3, #5
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e007      	b.n	80060da <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <osDelay+0x2c>
      vTaskDelay(ticks);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fd5f 	bl	8007b98 <vTaskDelay>
    }
  }

  return (stat);
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	; 0x28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f0:	f3ef 8305 	mrs	r3, IPSR
 80060f4:	613b      	str	r3, [r7, #16]
  return(result);
 80060f6:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <osMemoryPoolNew+0x1e>
    mp = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006100:	e0be      	b.n	8006280 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <osMemoryPoolNew+0x2a>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <osMemoryPoolNew+0x30>
    mp = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
 8006112:	e0b5      	b.n	8006280 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	3303      	adds	r3, #3
 800611c:	f023 0203 	bic.w	r2, r3, #3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	617b      	str	r3, [r7, #20]

    name = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 800612c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006130:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 8006132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006136:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d038      	beq.n	80061b0 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <osMemoryPoolNew+0x68>
        name = attr->name;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <osMemoryPoolNew+0x7e>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b73      	cmp	r3, #115	; 0x73
 800615a:	d902      	bls.n	8006162 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 800615c:	2301      	movs	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e009      	b.n	8006176 <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d105      	bne.n	8006176 <osMemoryPoolNew+0x92>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <osMemoryPoolNew+0xa8>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	e015      	b.n	80061b8 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d011      	beq.n	80061b8 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d806      	bhi.n	80061b8 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e003      	b.n	80061b8 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 80061be:	2074      	movs	r0, #116	; 0x74
 80061c0:	f003 fc18 	bl	80099f4 <pvPortMalloc>
 80061c4:	6278      	str	r0, [r7, #36]	; 0x24
 80061c6:	e002      	b.n	80061ce <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	461a      	mov	r2, r3
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fba4 	bl	800692a <xQueueCreateCountingSemaphoreStatic>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00d      	beq.n	800620c <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 80061f6:	6978      	ldr	r0, [r7, #20]
 80061f8:	f003 fbfc 	bl	80099f4 <pvPortMalloc>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	609a      	str	r2, [r3, #8]
 8006202:	e003      	b.n	800620c <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d02b      	beq.n	800626a <osMemoryPoolNew+0x186>
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d027      	beq.n	800626a <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	2200      	movs	r2, #0
 800623c:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	4a12      	ldr	r2, [pc, #72]	; (800628c <osMemoryPoolNew+0x1a8>)
 8006242:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d105      	bne.n	8006256 <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f043 0201 	orr.w	r2, r3, #1
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d111      	bne.n	8006280 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f043 0202 	orr.w	r2, r3, #2
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 8006268:	e00a      	b.n	8006280 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <osMemoryPoolNew+0x198>
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 8006276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006278:	f003 fc88 	bl	8009b8c <vPortFree>
      }
      mp = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006282:	4618      	mov	r0, r3
 8006284:	3728      	adds	r7, #40	; 0x28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	5eed0000 	.word	0x5eed0000

08006290 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
 80062a4:	e062      	b.n	800636c <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	6a1a      	ldr	r2, [r3, #32]
 80062b2:	4b31      	ldr	r3, [pc, #196]	; (8006378 <osMemoryPoolAlloc+0xe8>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	4a30      	ldr	r2, [pc, #192]	; (8006378 <osMemoryPoolAlloc+0xe8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d157      	bne.n	800636c <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062bc:	f3ef 8305 	mrs	r3, IPSR
 80062c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80062c2:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d032      	beq.n	800632e <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d14e      	bne.n	800636c <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 f820 	bl	800731c <xQueueReceiveFromISR>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d144      	bne.n	800636c <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	6a1a      	ldr	r2, [r3, #32]
 80062e6:	4b24      	ldr	r3, [pc, #144]	; (8006378 <osMemoryPoolAlloc+0xe8>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	4a23      	ldr	r2, [pc, #140]	; (8006378 <osMemoryPoolAlloc+0xe8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d13d      	bne.n	800636c <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062f0:	f3ef 8211 	mrs	r2, BASEPRI
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	617a      	str	r2, [r7, #20]
 8006306:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006308:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 800630a:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 800630c:	6a38      	ldr	r0, [r7, #32]
 800630e:	f000 f8ef 	bl	80064f0 <AllocBlock>
 8006312:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d103      	bne.n	8006322 <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 800631a:	6a38      	ldr	r0, [r7, #32]
 800631c:	f000 f8c6 	bl	80064ac <CreateBlock>
 8006320:	6278      	str	r0, [r7, #36]	; 0x24
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800632c:	e01e      	b.n	800636c <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f000 feb5 	bl	80070a4 <xQueueSemaphoreTake>
 800633a:	4603      	mov	r3, r0
 800633c:	2b01      	cmp	r3, #1
 800633e:	d115      	bne.n	800636c <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	6a1a      	ldr	r2, [r3, #32]
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <osMemoryPoolAlloc+0xe8>)
 8006346:	4013      	ands	r3, r2
 8006348:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <osMemoryPoolAlloc+0xe8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d10e      	bne.n	800636c <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 800634e:	f003 f9e1 	bl	8009714 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 8006352:	6a38      	ldr	r0, [r7, #32]
 8006354:	f000 f8cc 	bl	80064f0 <AllocBlock>
 8006358:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 8006360:	6a38      	ldr	r0, [r7, #32]
 8006362:	f000 f8a3 	bl	80064ac <CreateBlock>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 8006368:	f003 fa04 	bl	8009774 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800636e:	4618      	mov	r0, r3
 8006370:	3728      	adds	r7, #40	; 0x28
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	5eed0000 	.word	0x5eed0000

0800637c <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <osMemoryPoolFree+0x16>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 8006392:	f06f 0303 	mvn.w	r3, #3
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	e07f      	b.n	800649a <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	6a1a      	ldr	r2, [r3, #32]
 80063a2:	4b40      	ldr	r3, [pc, #256]	; (80064a4 <osMemoryPoolFree+0x128>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	4a3f      	ldr	r2, [pc, #252]	; (80064a4 <osMemoryPoolFree+0x128>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 80063ac:	f06f 0302 	mvn.w	r3, #2
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
 80063b2:	e072      	b.n	800649a <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d308      	bcc.n	80063d0 <osMemoryPoolFree+0x54>
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d903      	bls.n	80063d8 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 80063d0:	f06f 0303 	mvn.w	r3, #3
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	e060      	b.n	800649a <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 80063d8:	2300      	movs	r3, #0
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063dc:	f3ef 8305 	mrs	r3, IPSR
 80063e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80063e2:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d03b      	beq.n	8006460 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 f851 	bl	8007494 <uxQueueMessagesWaitingFromISR>
 80063f2:	4602      	mov	r2, r0
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d103      	bne.n	8006404 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 80063fc:	f06f 0302 	mvn.w	r3, #2
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
 8006402:	e04a      	b.n	800649a <osMemoryPoolFree+0x11e>
	__asm volatile
 8006404:	f3ef 8211 	mrs	r2, BASEPRI
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	613a      	str	r2, [r7, #16]
 800641a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800641c:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 800641e:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6a38      	ldr	r0, [r7, #32]
 8006424:	f000 f87c 	bl	8006520 <FreeBlock>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f383 8811 	msr	BASEPRI, r3
}
 8006432:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 8006434:	2300      	movs	r3, #0
 8006436:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f107 0208 	add.w	r2, r7, #8
 8006440:	4611      	mov	r1, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fc7d 	bl	8006d42 <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d025      	beq.n	800649a <osMemoryPoolFree+0x11e>
 800644e:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <osMemoryPoolFree+0x12c>)
 8006450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	e01c      	b.n	800649a <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fff7 	bl	8007458 <uxQueueMessagesWaiting>
 800646a:	4602      	mov	r2, r0
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	429a      	cmp	r2, r3
 8006472:	d103      	bne.n	800647c <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 8006474:	f06f 0302 	mvn.w	r3, #2
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
 800647a:	e00e      	b.n	800649a <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 800647c:	f003 f94a 	bl	8009714 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6a38      	ldr	r0, [r7, #32]
 8006484:	f000 f84c 	bl	8006520 <FreeBlock>

          taskEXIT_CRITICAL();
 8006488:	f003 f974 	bl	8009774 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	6858      	ldr	r0, [r3, #4]
 8006490:	2300      	movs	r3, #0
 8006492:	2200      	movs	r2, #0
 8006494:	2100      	movs	r1, #0
 8006496:	f000 fa7f 	bl	8006998 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	5eed0000 	.word	0x5eed0000
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d20e      	bcs.n	80064e2 <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	69c9      	ldr	r1, [r1, #28]
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	4413      	add	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	61da      	str	r2, [r3, #28]
  }

  return (p);
 80064e2:	68fb      	ldr	r3, [r7, #12]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d006      	beq.n	8006512 <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
  }

  return (p);
 8006512:	68fb      	ldr	r3, [r7, #12]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	601a      	str	r2, [r3, #0]
}
 800653c:	bf00      	nop
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a07      	ldr	r2, [pc, #28]	; (8006574 <vApplicationGetIdleTaskMemory+0x2c>)
 8006558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a06      	ldr	r2, [pc, #24]	; (8006578 <vApplicationGetIdleTaskMemory+0x30>)
 800655e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2280      	movs	r2, #128	; 0x80
 8006564:	601a      	str	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	2000c200 	.word	0x2000c200
 8006578:	2000c2bc 	.word	0x2000c2bc

0800657c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a07      	ldr	r2, [pc, #28]	; (80065a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800658c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4a06      	ldr	r2, [pc, #24]	; (80065ac <vApplicationGetTimerTaskMemory+0x30>)
 8006592:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800659a:	601a      	str	r2, [r3, #0]
}
 800659c:	bf00      	nop
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	2000c4bc 	.word	0x2000c4bc
 80065ac:	2000c578 	.word	0x2000c578

080065b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f103 0208 	add.w	r2, r3, #8
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f103 0208 	add.w	r2, r3, #8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f103 0208 	add.w	r2, r3, #8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006652:	b480      	push	{r7}
 8006654:	b085      	sub	sp, #20
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006668:	d103      	bne.n	8006672 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e00c      	b.n	800668c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3308      	adds	r3, #8
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	e002      	b.n	8006680 <vListInsert+0x2e>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	429a      	cmp	r2, r3
 800668a:	d2f6      	bcs.n	800667a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	601a      	str	r2, [r3, #0]
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6892      	ldr	r2, [r2, #8]
 80066da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6852      	ldr	r2, [r2, #4]
 80066e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d103      	bne.n	80066f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	1e5a      	subs	r2, r3, #1
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <xQueueGenericReset+0x2a>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60bb      	str	r3, [r7, #8]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006742:	f002 ffe7 	bl	8009714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	68f9      	ldr	r1, [r7, #12]
 8006750:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006752:	fb01 f303 	mul.w	r3, r1, r3
 8006756:	441a      	add	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006772:	3b01      	subs	r3, #1
 8006774:	68f9      	ldr	r1, [r7, #12]
 8006776:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	22ff      	movs	r2, #255	; 0xff
 800678e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d114      	bne.n	80067c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01a      	beq.n	80067d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3310      	adds	r3, #16
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 fd0b 	bl	80081c0 <xTaskRemoveFromEventList>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067b0:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <xQueueGenericReset+0xcc>)
 80067b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	e009      	b.n	80067d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3310      	adds	r3, #16
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fef2 	bl	80065b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3324      	adds	r3, #36	; 0x24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff feed 	bl	80065b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067d6:	f002 ffcd 	bl	8009774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067da:	2301      	movs	r3, #1
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	e000ed04 	.word	0xe000ed04

080067e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08e      	sub	sp, #56	; 0x38
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <xQueueGenericCreateStatic+0x52>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <xQueueGenericCreateStatic+0x56>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <xQueueGenericCreateStatic+0x58>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	623b      	str	r3, [r7, #32]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d102      	bne.n	8006866 <xQueueGenericCreateStatic+0x7e>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <xQueueGenericCreateStatic+0x82>
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <xQueueGenericCreateStatic+0x84>
 800686a:	2300      	movs	r3, #0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	61fb      	str	r3, [r7, #28]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006886:	2350      	movs	r3, #80	; 0x50
 8006888:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b50      	cmp	r3, #80	; 0x50
 800688e:	d00a      	beq.n	80068a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	61bb      	str	r3, [r7, #24]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	4613      	mov	r3, r2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f805 	bl	80068d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3730      	adds	r7, #48	; 0x30
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d103      	bne.n	80068f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e002      	b.n	80068fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006906:	2101      	movs	r1, #1
 8006908:	69b8      	ldr	r0, [r7, #24]
 800690a:	f7ff ff05 	bl	8006718 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	2073      	movs	r0, #115	; 0x73
 800691e:	f004 f989 	bl	800ac34 <SEGGER_SYSVIEW_RecordU32x3>
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800692a:	b580      	push	{r7, lr}
 800692c:	b08a      	sub	sp, #40	; 0x28
 800692e:	af02      	add	r7, sp, #8
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	61bb      	str	r3, [r7, #24]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	429a      	cmp	r2, r3
 8006958:	d90a      	bls.n	8006970 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	617b      	str	r3, [r7, #20]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006970:	2302      	movs	r3, #2
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	2100      	movs	r1, #0
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff ff34 	bl	80067e8 <xQueueGenericCreateStatic>
 8006980:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800698e:	69fb      	ldr	r3, [r7, #28]
	}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b090      	sub	sp, #64	; 0x40
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069a6:	2300      	movs	r3, #0
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueGenericSend+0x32>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <xQueueGenericSend+0x40>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <xQueueGenericSend+0x44>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <xQueueGenericSend+0x46>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <xQueueGenericSend+0x60>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d103      	bne.n	8006a06 <xQueueGenericSend+0x6e>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <xQueueGenericSend+0x72>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueGenericSend+0x74>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xQueueGenericSend+0x8e>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	623b      	str	r3, [r7, #32]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a26:	f001 fdcb 	bl	80085c0 <xTaskGetSchedulerState>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <xQueueGenericSend+0x9e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <xQueueGenericSend+0xa2>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericSend+0xa4>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61fb      	str	r3, [r7, #28]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a56:	f002 fe5d 	bl	8009714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d302      	bcc.n	8006a6c <xQueueGenericSend+0xd4>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d136      	bne.n	8006ada <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f004 ff1a 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4601      	mov	r1, r0
 8006a80:	205a      	movs	r0, #90	; 0x5a
 8006a82:	f004 f94d 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a8c:	f000 fd38 	bl	8007500 <prvCopyDataToQueue>
 8006a90:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d010      	beq.n	8006abc <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	3324      	adds	r3, #36	; 0x24
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 fb8e 	bl	80081c0 <xTaskRemoveFromEventList>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d013      	beq.n	8006ad2 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006aaa:	4b4d      	ldr	r3, [pc, #308]	; (8006be0 <xQueueGenericSend+0x248>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	e00a      	b.n	8006ad2 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ac2:	4b47      	ldr	r3, [pc, #284]	; (8006be0 <xQueueGenericSend+0x248>)
 8006ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ad2:	f002 fe4f 	bl	8009774 <vPortExitCritical>
				return pdPASS;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e07d      	b.n	8006bd6 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d110      	bne.n	8006b02 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ae0:	f002 fe48 	bl	8009774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f004 fede 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	460b      	mov	r3, r1
 8006af6:	4601      	mov	r1, r0
 8006af8:	205a      	movs	r0, #90	; 0x5a
 8006afa:	f004 f911 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e069      	b.n	8006bd6 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d106      	bne.n	8006b16 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b08:	f107 0314 	add.w	r3, r7, #20
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 fbbf 	bl	8008290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b12:	2301      	movs	r3, #1
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b16:	f002 fe2d 	bl	8009774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b1a:	f001 f8f7 	bl	8007d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b1e:	f002 fdf9 	bl	8009714 <vPortEnterCritical>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b28:	b25b      	sxtb	r3, r3
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b2e:	d103      	bne.n	8006b38 <xQueueGenericSend+0x1a0>
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b3e:	b25b      	sxtb	r3, r3
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b44:	d103      	bne.n	8006b4e <xQueueGenericSend+0x1b6>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b4e:	f002 fe11 	bl	8009774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b52:	1d3a      	adds	r2, r7, #4
 8006b54:	f107 0314 	add.w	r3, r7, #20
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f001 fbae 	bl	80082bc <xTaskCheckForTimeOut>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d124      	bne.n	8006bb0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b68:	f000 fdc2 	bl	80076f0 <prvIsQueueFull>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d018      	beq.n	8006ba4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	3310      	adds	r3, #16
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	4611      	mov	r1, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 face 	bl	800811c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b82:	f000 fd4d 	bl	8007620 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b86:	f001 f8cf 	bl	8007d28 <xTaskResumeAll>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f47f af62 	bne.w	8006a56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <xQueueGenericSend+0x248>)
 8006b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	e758      	b.n	8006a56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ba6:	f000 fd3b 	bl	8007620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006baa:	f001 f8bd 	bl	8007d28 <xTaskResumeAll>
 8006bae:	e752      	b.n	8006a56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb2:	f000 fd35 	bl	8007620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bb6:	f001 f8b7 	bl	8007d28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f004 fe73 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4601      	mov	r1, r0
 8006bce:	205a      	movs	r0, #90	; 0x5a
 8006bd0:	f004 f8a6 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8006bd4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3738      	adds	r7, #56	; 0x38
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b090      	sub	sp, #64	; 0x40
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <xQueueGenericSendFromISR+0x3c>
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <xQueueGenericSendFromISR+0x40>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <xQueueGenericSendFromISR+0x42>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d103      	bne.n	8006c4e <xQueueGenericSendFromISR+0x6a>
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <xQueueGenericSendFromISR+0x6e>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <xQueueGenericSendFromISR+0x70>
 8006c52:	2300      	movs	r3, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	623b      	str	r3, [r7, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c6e:	f002 fe3b 	bl	80098e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c72:	f3ef 8211 	mrs	r2, BASEPRI
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	61fa      	str	r2, [r7, #28]
 8006c88:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d302      	bcc.n	8006ca0 <xQueueGenericSendFromISR+0xbc>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d139      	bne.n	8006d14 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f004 fdf8 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006cb8:	4601      	mov	r1, r0
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2060      	movs	r0, #96	; 0x60
 8006cc0:	f003 ff5e 	bl	800ab80 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cca:	f000 fc19 	bl	8007500 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd6:	d112      	bne.n	8006cfe <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d016      	beq.n	8006d0e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	3324      	adds	r3, #36	; 0x24
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 fa6b 	bl	80081c0 <xTaskRemoveFromEventList>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00e      	beq.n	8006d0e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e007      	b.n	8006d0e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d02:	3301      	adds	r3, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	b25a      	sxtb	r2, r3
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006d12:	e00b      	b.n	8006d2c <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	4618      	mov	r0, r3
 8006d18:	f004 fdc6 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	461a      	mov	r2, r3
 8006d22:	2060      	movs	r0, #96	; 0x60
 8006d24:	f003 ff2c 	bl	800ab80 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f383 8811 	msr	BASEPRI, r3
}
 8006d36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3740      	adds	r7, #64	; 0x40
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b08e      	sub	sp, #56	; 0x38
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	623b      	str	r3, [r7, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <xQueueGiveFromISR+0x48>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	61fb      	str	r3, [r7, #28]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d103      	bne.n	8006d9a <xQueueGiveFromISR+0x58>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <xQueueGiveFromISR+0x5c>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <xQueueGiveFromISR+0x5e>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xQueueGiveFromISR+0x78>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	61bb      	str	r3, [r7, #24]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dba:	f002 fd95 	bl	80098e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	617a      	str	r2, [r7, #20]
 8006dd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006dd6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d235      	bcs.n	8006e56 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	4618      	mov	r0, r3
 8006df8:	f004 fd56 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	2060      	movs	r0, #96	; 0x60
 8006e04:	f003 febc 	bl	800ab80 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e18:	d112      	bne.n	8006e40 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	3324      	adds	r3, #36	; 0x24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f9ca 	bl	80081c0 <xTaskRemoveFromEventList>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e007      	b.n	8006e50 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e44:	3301      	adds	r3, #1
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	b25a      	sxtb	r2, r3
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e50:	2301      	movs	r3, #1
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
 8006e54:	e00b      	b.n	8006e6e <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f004 fd25 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006e5e:	4601      	mov	r1, r0
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	2060      	movs	r0, #96	; 0x60
 8006e66:	f003 fe8b 	bl	800ab80 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f383 8811 	msr	BASEPRI, r3
}
 8006e78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3738      	adds	r7, #56	; 0x38
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e84:	b590      	push	{r4, r7, lr}
 8006e86:	b08f      	sub	sp, #60	; 0x3c
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e90:	2300      	movs	r3, #0
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <xQueueReceive+0x30>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	623b      	str	r3, [r7, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <xQueueReceive+0x3e>
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <xQueueReceive+0x42>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <xQueueReceive+0x44>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <xQueueReceive+0x5e>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	61fb      	str	r3, [r7, #28]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ee2:	f001 fb6d 	bl	80085c0 <xTaskGetSchedulerState>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <xQueueReceive+0x6e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <xQueueReceive+0x72>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <xQueueReceive+0x74>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueReceive+0x8e>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	61bb      	str	r3, [r7, #24]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f12:	f002 fbff 	bl	8009714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d02f      	beq.n	8006f82 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f26:	f000 fb55 	bl	80075d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f004 fcbb 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006f32:	4604      	mov	r4, r0
 8006f34:	2000      	movs	r0, #0
 8006f36:	f004 fcb7 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2101      	movs	r1, #1
 8006f40:	9100      	str	r1, [sp, #0]
 8006f42:	4621      	mov	r1, r4
 8006f44:	205c      	movs	r0, #92	; 0x5c
 8006f46:	f003 feeb 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	1e5a      	subs	r2, r3, #1
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00f      	beq.n	8006f7a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	3310      	adds	r3, #16
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 f92e 	bl	80081c0 <xTaskRemoveFromEventList>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f6a:	4b4d      	ldr	r3, [pc, #308]	; (80070a0 <xQueueReceive+0x21c>)
 8006f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f7a:	f002 fbfb 	bl	8009774 <vPortExitCritical>
				return pdPASS;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e08a      	b.n	8007098 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d113      	bne.n	8006fb0 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f88:	f002 fbf4 	bl	8009774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f004 fc8a 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006f94:	4604      	mov	r4, r0
 8006f96:	2000      	movs	r0, #0
 8006f98:	f004 fc86 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	9100      	str	r1, [sp, #0]
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	205c      	movs	r0, #92	; 0x5c
 8006fa8:	f003 feba 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e073      	b.n	8007098 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb6:	f107 0310 	add.w	r3, r7, #16
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 f968 	bl	8008290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc4:	f002 fbd6 	bl	8009774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fc8:	f000 fea0 	bl	8007d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fcc:	f002 fba2 	bl	8009714 <vPortEnterCritical>
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd6:	b25b      	sxtb	r3, r3
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fdc:	d103      	bne.n	8006fe6 <xQueueReceive+0x162>
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff2:	d103      	bne.n	8006ffc <xQueueReceive+0x178>
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ffc:	f002 fbba 	bl	8009774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007000:	1d3a      	adds	r2, r7, #4
 8007002:	f107 0310 	add.w	r3, r7, #16
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f001 f957 	bl	80082bc <xTaskCheckForTimeOut>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d124      	bne.n	800705e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007016:	f000 fb55 	bl	80076c4 <prvIsQueueEmpty>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d018      	beq.n	8007052 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	3324      	adds	r3, #36	; 0x24
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f001 f877 	bl	800811c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800702e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007030:	f000 faf6 	bl	8007620 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007034:	f000 fe78 	bl	8007d28 <xTaskResumeAll>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	f47f af69 	bne.w	8006f12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <xQueueReceive+0x21c>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	e75f      	b.n	8006f12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007054:	f000 fae4 	bl	8007620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007058:	f000 fe66 	bl	8007d28 <xTaskResumeAll>
 800705c:	e759      	b.n	8006f12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800705e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007060:	f000 fade 	bl	8007620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007064:	f000 fe60 	bl	8007d28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706a:	f000 fb2b 	bl	80076c4 <prvIsQueueEmpty>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	f43f af4e 	beq.w	8006f12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	4618      	mov	r0, r3
 800707a:	f004 fc15 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 800707e:	4604      	mov	r4, r0
 8007080:	2000      	movs	r0, #0
 8007082:	f004 fc11 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8007086:	4602      	mov	r2, r0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2101      	movs	r1, #1
 800708c:	9100      	str	r1, [sp, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	205c      	movs	r0, #92	; 0x5c
 8007092:	f003 fe45 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8007096:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007098:	4618      	mov	r0, r3
 800709a:	3734      	adds	r7, #52	; 0x34
 800709c:	46bd      	mov	sp, r7
 800709e:	bd90      	pop	{r4, r7, pc}
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b091      	sub	sp, #68	; 0x44
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	623b      	str	r3, [r7, #32]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	61fb      	str	r3, [r7, #28]
}
 80070f0:	bf00      	nop
 80070f2:	e7fe      	b.n	80070f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070f4:	f001 fa64 	bl	80085c0 <xTaskGetSchedulerState>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d102      	bne.n	8007104 <xQueueSemaphoreTake+0x60>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <xQueueSemaphoreTake+0x64>
 8007104:	2301      	movs	r3, #1
 8007106:	e000      	b.n	800710a <xQueueSemaphoreTake+0x66>
 8007108:	2300      	movs	r3, #0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	61bb      	str	r3, [r7, #24]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007124:	f002 faf6 	bl	8009714 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d034      	beq.n	800719e <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	4618      	mov	r0, r3
 8007138:	f004 fbb6 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 800713c:	4604      	mov	r4, r0
 800713e:	2000      	movs	r0, #0
 8007140:	f004 fbb2 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8007144:	4602      	mov	r2, r0
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2101      	movs	r1, #1
 800714a:	9100      	str	r1, [sp, #0]
 800714c:	4621      	mov	r1, r4
 800714e:	205c      	movs	r0, #92	; 0x5c
 8007150:	f003 fde6 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	1e5a      	subs	r2, r3, #1
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007164:	f001 fbb4 	bl	80088d0 <pvTaskIncrementMutexHeldCount>
 8007168:	4602      	mov	r2, r0
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00f      	beq.n	8007196 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	3310      	adds	r3, #16
 800717a:	4618      	mov	r0, r3
 800717c:	f001 f820 	bl	80081c0 <xTaskRemoveFromEventList>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d007      	beq.n	8007196 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007186:	4b64      	ldr	r3, [pc, #400]	; (8007318 <xQueueSemaphoreTake+0x274>)
 8007188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007196:	f002 faed 	bl	8009774 <vPortExitCritical>
				return pdPASS;
 800719a:	2301      	movs	r3, #1
 800719c:	e0b7      	b.n	800730e <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d121      	bne.n	80071e8 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	617b      	str	r3, [r7, #20]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80071c0:	f002 fad8 	bl	8009774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	4618      	mov	r0, r3
 80071c8:	f004 fb6e 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 80071cc:	4604      	mov	r4, r0
 80071ce:	2000      	movs	r0, #0
 80071d0:	f004 fb6a 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 80071d4:	4602      	mov	r2, r0
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2101      	movs	r1, #1
 80071da:	9100      	str	r1, [sp, #0]
 80071dc:	4621      	mov	r1, r4
 80071de:	205c      	movs	r0, #92	; 0x5c
 80071e0:	f003 fd9e 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e092      	b.n	800730e <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071ee:	f107 030c 	add.w	r3, r7, #12
 80071f2:	4618      	mov	r0, r3
 80071f4:	f001 f84c 	bl	8008290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071fc:	f002 faba 	bl	8009774 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007200:	f000 fd84 	bl	8007d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007204:	f002 fa86 	bl	8009714 <vPortEnterCritical>
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800720e:	b25b      	sxtb	r3, r3
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007214:	d103      	bne.n	800721e <xQueueSemaphoreTake+0x17a>
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007224:	b25b      	sxtb	r3, r3
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800722a:	d103      	bne.n	8007234 <xQueueSemaphoreTake+0x190>
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007234:	f002 fa9e 	bl	8009774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007238:	463a      	mov	r2, r7
 800723a:	f107 030c 	add.w	r3, r7, #12
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f001 f83b 	bl	80082bc <xTaskCheckForTimeOut>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d132      	bne.n	80072b2 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800724c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800724e:	f000 fa39 	bl	80076c4 <prvIsQueueEmpty>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d026      	beq.n	80072a6 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d109      	bne.n	8007274 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8007260:	f002 fa58 	bl	8009714 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4618      	mov	r0, r3
 800726a:	f001 f9c7 	bl	80085fc <xTaskPriorityInherit>
 800726e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007270:	f002 fa80 	bl	8009774 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	4611      	mov	r1, r2
 800727c:	4618      	mov	r0, r3
 800727e:	f000 ff4d 	bl	800811c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007284:	f000 f9cc 	bl	8007620 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007288:	f000 fd4e 	bl	8007d28 <xTaskResumeAll>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	f47f af48 	bne.w	8007124 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007294:	4b20      	ldr	r3, [pc, #128]	; (8007318 <xQueueSemaphoreTake+0x274>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	e73e      	b.n	8007124 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072a8:	f000 f9ba 	bl	8007620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072ac:	f000 fd3c 	bl	8007d28 <xTaskResumeAll>
 80072b0:	e738      	b.n	8007124 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b4:	f000 f9b4 	bl	8007620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072b8:	f000 fd36 	bl	8007d28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072be:	f000 fa01 	bl	80076c4 <prvIsQueueEmpty>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f43f af2d 	beq.w	8007124 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00d      	beq.n	80072ec <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 80072d0:	f002 fa20 	bl	8009714 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072d6:	f000 f8fb 	bl	80074d0 <prvGetDisinheritPriorityAfterTimeout>
 80072da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fa6a 	bl	80087bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072e8:	f002 fa44 	bl	8009774 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	4618      	mov	r0, r3
 80072f0:	f004 fada 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 80072f4:	4604      	mov	r4, r0
 80072f6:	2000      	movs	r0, #0
 80072f8:	f004 fad6 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 80072fc:	4602      	mov	r2, r0
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2101      	movs	r1, #1
 8007302:	9100      	str	r1, [sp, #0]
 8007304:	4621      	mov	r1, r4
 8007306:	205c      	movs	r0, #92	; 0x5c
 8007308:	f003 fd0a 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800730c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800730e:	4618      	mov	r0, r3
 8007310:	373c      	adds	r7, #60	; 0x3c
 8007312:	46bd      	mov	sp, r7
 8007314:	bd90      	pop	{r4, r7, pc}
 8007316:	bf00      	nop
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b08f      	sub	sp, #60	; 0x3c
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	623b      	str	r3, [r7, #32]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <xQueueReceiveFromISR+0x3a>
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <xQueueReceiveFromISR+0x3e>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <xQueueReceiveFromISR+0x40>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	61fb      	str	r3, [r7, #28]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007376:	f002 fab7 	bl	80098e8 <vPortValidateInterruptPriority>
	__asm volatile
 800737a:	f3ef 8211 	mrs	r2, BASEPRI
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	61ba      	str	r2, [r7, #24]
 8007390:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007392:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d03e      	beq.n	8007420 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	4618      	mov	r0, r3
 80073b0:	f004 fa7a 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 80073b4:	4604      	mov	r4, r0
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f004 fa75 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 80073be:	4602      	mov	r2, r0
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4621      	mov	r1, r4
 80073c4:	2062      	movs	r0, #98	; 0x62
 80073c6:	f003 fc35 	bl	800ac34 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ce:	f000 f901 	bl	80075d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80073da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073e2:	d112      	bne.n	800740a <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d016      	beq.n	800741a <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	3310      	adds	r3, #16
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fee5 	bl	80081c0 <xTaskRemoveFromEventList>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00e      	beq.n	800741a <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e007      	b.n	800741a <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800740a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800740e:	3301      	adds	r3, #1
 8007410:	b2db      	uxtb	r3, r3
 8007412:	b25a      	sxtb	r2, r3
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800741a:	2301      	movs	r3, #1
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
 800741e:	e010      	b.n	8007442 <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8007420:	2300      	movs	r3, #0
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	4618      	mov	r0, r3
 8007428:	f004 fa3e 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 800742c:	4604      	mov	r4, r0
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4618      	mov	r0, r3
 8007432:	f004 fa39 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8007436:	4602      	mov	r2, r0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4621      	mov	r1, r4
 800743c:	2062      	movs	r0, #98	; 0x62
 800743e:	f003 fbf9 	bl	800ac34 <SEGGER_SYSVIEW_RecordU32x3>
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f383 8811 	msr	BASEPRI, r3
}
 800744c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007450:	4618      	mov	r0, r3
 8007452:	373c      	adds	r7, #60	; 0x3c
 8007454:	46bd      	mov	sp, r7
 8007456:	bd90      	pop	{r4, r7, pc}

08007458 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60bb      	str	r3, [r7, #8]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800747c:	f002 f94a 	bl	8009714 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007486:	f002 f975 	bl	8009774 <vPortExitCritical>

	return uxReturn;
 800748a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	60fb      	str	r3, [r7, #12]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80074c2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80074c4:	4618      	mov	r0, r3
 80074c6:	371c      	adds	r7, #28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d006      	beq.n	80074ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	e001      	b.n	80074f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074f2:	68fb      	ldr	r3, [r7, #12]
	}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10d      	bne.n	800753a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d14d      	bne.n	80075c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4618      	mov	r0, r3
 800752c:	f001 f8d4 	bl	80086d8 <xTaskPriorityDisinherit>
 8007530:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	e043      	b.n	80075c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d119      	bne.n	8007574 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6858      	ldr	r0, [r3, #4]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	461a      	mov	r2, r3
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	f004 fb40 	bl	800bbd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	441a      	add	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	429a      	cmp	r2, r3
 8007568:	d32b      	bcc.n	80075c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	e026      	b.n	80075c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68d8      	ldr	r0, [r3, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	461a      	mov	r2, r3
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	f004 fb26 	bl	800bbd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	425b      	negs	r3, r3
 800758e:	441a      	add	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d207      	bcs.n	80075b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	425b      	negs	r3, r3
 80075aa:	441a      	add	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d105      	bne.n	80075c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	3b01      	subs	r3, #1
 80075c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075ca:	697b      	ldr	r3, [r7, #20]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d018      	beq.n	8007618 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	441a      	add	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d303      	bcc.n	8007608 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68d9      	ldr	r1, [r3, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	461a      	mov	r2, r3
 8007612:	6838      	ldr	r0, [r7, #0]
 8007614:	f004 fadc 	bl	800bbd0 <memcpy>
	}
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007628:	f002 f874 	bl	8009714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007632:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007634:	e011      	b.n	800765a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d012      	beq.n	8007664 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3324      	adds	r3, #36	; 0x24
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fdbc 	bl	80081c0 <xTaskRemoveFromEventList>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800764e:	f000 fe97 	bl	8008380 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	3b01      	subs	r3, #1
 8007656:	b2db      	uxtb	r3, r3
 8007658:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800765a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	dce9      	bgt.n	8007636 <prvUnlockQueue+0x16>
 8007662:	e000      	b.n	8007666 <prvUnlockQueue+0x46>
					break;
 8007664:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	22ff      	movs	r2, #255	; 0xff
 800766a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800766e:	f002 f881 	bl	8009774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007672:	f002 f84f 	bl	8009714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800767c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800767e:	e011      	b.n	80076a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d012      	beq.n	80076ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3310      	adds	r3, #16
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fd97 	bl	80081c0 <xTaskRemoveFromEventList>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007698:	f000 fe72 	bl	8008380 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	3b01      	subs	r3, #1
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dce9      	bgt.n	8007680 <prvUnlockQueue+0x60>
 80076ac:	e000      	b.n	80076b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	22ff      	movs	r2, #255	; 0xff
 80076b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076b8:	f002 f85c 	bl	8009774 <vPortExitCritical>
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076cc:	f002 f822 	bl	8009714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076d8:	2301      	movs	r3, #1
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e001      	b.n	80076e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076e2:	f002 f847 	bl	8009774 <vPortExitCritical>

	return xReturn;
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076f8:	f002 f80c 	bl	8009714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007704:	429a      	cmp	r2, r3
 8007706:	d102      	bne.n	800770e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	e001      	b.n	8007712 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007712:	f002 f82f 	bl	8009774 <vPortExitCritical>

	return xReturn;
 8007716:	68fb      	ldr	r3, [r7, #12]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	e01e      	b.n	800776e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007730:	4a13      	ldr	r2, [pc, #76]	; (8007780 <vQueueAddToRegistry+0x60>)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d115      	bne.n	8007768 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800773c:	4910      	ldr	r1, [pc, #64]	; (8007780 <vQueueAddToRegistry+0x60>)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007746:	4a0e      	ldr	r2, [pc, #56]	; (8007780 <vQueueAddToRegistry+0x60>)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	4413      	add	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4618      	mov	r0, r3
 8007756:	f004 f8a7 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 800775a:	4601      	mov	r1, r0
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	2071      	movs	r0, #113	; 0x71
 8007762:	f003 fa0d 	bl	800ab80 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8007766:	e006      	b.n	8007776 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b07      	cmp	r3, #7
 8007772:	d9dd      	bls.n	8007730 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007774:	bf00      	nop
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	2000c978 	.word	0x2000c978

08007784 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007794:	f001 ffbe 	bl	8009714 <vPortEnterCritical>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800779e:	b25b      	sxtb	r3, r3
 80077a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a4:	d103      	bne.n	80077ae <vQueueWaitForMessageRestricted+0x2a>
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ba:	d103      	bne.n	80077c4 <vQueueWaitForMessageRestricted+0x40>
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c4:	f001 ffd6 	bl	8009774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	3324      	adds	r3, #36	; 0x24
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fcc3 	bl	8008164 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077de:	6978      	ldr	r0, [r7, #20]
 80077e0:	f7ff ff1e 	bl	8007620 <prvUnlockQueue>
	}
 80077e4:	bf00      	nop
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08e      	sub	sp, #56	; 0x38
 80077f0:	af04      	add	r7, sp, #16
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	623b      	str	r3, [r7, #32]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xTaskCreateStatic+0x46>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61fb      	str	r3, [r7, #28]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007832:	23bc      	movs	r3, #188	; 0xbc
 8007834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2bbc      	cmp	r3, #188	; 0xbc
 800783a:	d00a      	beq.n	8007852 <xTaskCreateStatic+0x66>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	61bb      	str	r3, [r7, #24]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01e      	beq.n	8007898 <xTaskCreateStatic+0xac>
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01b      	beq.n	8007898 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	2202      	movs	r2, #2
 800786e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007872:	2300      	movs	r3, #0
 8007874:	9303      	str	r3, [sp, #12]
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	9302      	str	r3, [sp, #8]
 800787a:	f107 0314 	add.w	r3, r7, #20
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f850 	bl	8007930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007892:	f000 f8f3 	bl	8007a7c <prvAddNewTaskToReadyList>
 8007896:	e001      	b.n	800789c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800789c:	697b      	ldr	r3, [r7, #20]
	}
 800789e:	4618      	mov	r0, r3
 80078a0:	3728      	adds	r7, #40	; 0x28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b08c      	sub	sp, #48	; 0x30
 80078aa:	af04      	add	r7, sp, #16
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f002 f89a 	bl	80099f4 <pvPortMalloc>
 80078c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00e      	beq.n	80078e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078c8:	20bc      	movs	r0, #188	; 0xbc
 80078ca:	f002 f893 	bl	80099f4 <pvPortMalloc>
 80078ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
 80078dc:	e005      	b.n	80078ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	f002 f954 	bl	8009b8c <vPortFree>
 80078e4:	e001      	b.n	80078ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078f8:	88fa      	ldrh	r2, [r7, #6]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f80e 	bl	8007930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007914:	69f8      	ldr	r0, [r7, #28]
 8007916:	f000 f8b1 	bl	8007a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800791a:	2301      	movs	r3, #1
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	e002      	b.n	8007926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007926:	69bb      	ldr	r3, [r7, #24]
	}
 8007928:	4618      	mov	r0, r3
 800792a:	3720      	adds	r7, #32
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	461a      	mov	r2, r3
 8007948:	21a5      	movs	r1, #165	; 0xa5
 800794a:	f004 f94f 	bl	800bbec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007958:	3b01      	subs	r3, #1
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f023 0307 	bic.w	r3, r3, #7
 8007966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	617b      	str	r3, [r7, #20]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01f      	beq.n	80079ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800798e:	2300      	movs	r3, #0
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	e012      	b.n	80079ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	7819      	ldrb	r1, [r3, #0]
 800799c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	3334      	adds	r3, #52	; 0x34
 80079a4:	460a      	mov	r2, r1
 80079a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d006      	beq.n	80079c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	3301      	adds	r3, #1
 80079b8:	61fb      	str	r3, [r7, #28]
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	2b0f      	cmp	r3, #15
 80079be:	d9e9      	bls.n	8007994 <prvInitialiseNewTask+0x64>
 80079c0:	e000      	b.n	80079c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80079c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079cc:	e003      	b.n	80079d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	2b37      	cmp	r3, #55	; 0x37
 80079da:	d901      	bls.n	80079e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079dc:	2337      	movs	r3, #55	; 0x37
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	2200      	movs	r2, #0
 80079f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	3304      	adds	r3, #4
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fdfa 	bl	80065f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	3318      	adds	r3, #24
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fdf5 	bl	80065f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	3354      	adds	r3, #84	; 0x54
 8007a30:	2260      	movs	r2, #96	; 0x60
 8007a32:	2100      	movs	r1, #0
 8007a34:	4618      	mov	r0, r3
 8007a36:	f004 f8d9 	bl	800bbec <memset>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	4a0c      	ldr	r2, [pc, #48]	; (8007a70 <prvInitialiseNewTask+0x140>)
 8007a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	4a0c      	ldr	r2, [pc, #48]	; (8007a74 <prvInitialiseNewTask+0x144>)
 8007a44:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	4a0b      	ldr	r2, [pc, #44]	; (8007a78 <prvInitialiseNewTask+0x148>)
 8007a4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	69b8      	ldr	r0, [r7, #24]
 8007a52:	f001 fd35 	bl	80094c0 <pxPortInitialiseStack>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a68:	bf00      	nop
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	0800c0c0 	.word	0x0800c0c0
 8007a74:	0800c0e0 	.word	0x0800c0e0
 8007a78:	0800c0a0 	.word	0x0800c0a0

08007a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a7c:	b5b0      	push	{r4, r5, r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a84:	f001 fe46 	bl	8009714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a88:	4b3c      	ldr	r3, [pc, #240]	; (8007b7c <prvAddNewTaskToReadyList+0x100>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	4a3b      	ldr	r2, [pc, #236]	; (8007b7c <prvAddNewTaskToReadyList+0x100>)
 8007a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a92:	4b3b      	ldr	r3, [pc, #236]	; (8007b80 <prvAddNewTaskToReadyList+0x104>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a9a:	4a39      	ldr	r2, [pc, #228]	; (8007b80 <prvAddNewTaskToReadyList+0x104>)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007aa0:	4b36      	ldr	r3, [pc, #216]	; (8007b7c <prvAddNewTaskToReadyList+0x100>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d110      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007aa8:	f000 fc90 	bl	80083cc <prvInitialiseTaskLists>
 8007aac:	e00d      	b.n	8007aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aae:	4b35      	ldr	r3, [pc, #212]	; (8007b84 <prvAddNewTaskToReadyList+0x108>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ab6:	4b32      	ldr	r3, [pc, #200]	; (8007b80 <prvAddNewTaskToReadyList+0x104>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d802      	bhi.n	8007aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ac4:	4a2e      	ldr	r2, [pc, #184]	; (8007b80 <prvAddNewTaskToReadyList+0x104>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aca:	4b2f      	ldr	r3, [pc, #188]	; (8007b88 <prvAddNewTaskToReadyList+0x10c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	4a2d      	ldr	r2, [pc, #180]	; (8007b88 <prvAddNewTaskToReadyList+0x10c>)
 8007ad2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ad4:	4b2c      	ldr	r3, [pc, #176]	; (8007b88 <prvAddNewTaskToReadyList+0x10c>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d016      	beq.n	8007b10 <prvAddNewTaskToReadyList+0x94>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f003 fdb9 	bl	800b65c <SEGGER_SYSVIEW_OnTaskCreate>
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afa:	461d      	mov	r5, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461c      	mov	r4, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	1ae3      	subs	r3, r4, r3
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	462b      	mov	r3, r5
 8007b0c:	f002 fa22 	bl	8009f54 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f003 fe26 	bl	800b764 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1c:	4b1b      	ldr	r3, [pc, #108]	; (8007b8c <prvAddNewTaskToReadyList+0x110>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d903      	bls.n	8007b2c <prvAddNewTaskToReadyList+0xb0>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <prvAddNewTaskToReadyList+0x110>)
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4a15      	ldr	r2, [pc, #84]	; (8007b90 <prvAddNewTaskToReadyList+0x114>)
 8007b3a:	441a      	add	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f7fe fd61 	bl	800660a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b48:	f001 fe14 	bl	8009774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <prvAddNewTaskToReadyList+0x108>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00e      	beq.n	8007b72 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b54:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <prvAddNewTaskToReadyList+0x104>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d207      	bcs.n	8007b72 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b62:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <prvAddNewTaskToReadyList+0x118>)
 8007b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bdb0      	pop	{r4, r5, r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	2000ce8c 	.word	0x2000ce8c
 8007b80:	2000c9b8 	.word	0x2000c9b8
 8007b84:	2000ce98 	.word	0x2000ce98
 8007b88:	2000cea8 	.word	0x2000cea8
 8007b8c:	2000ce94 	.word	0x2000ce94
 8007b90:	2000c9bc 	.word	0x2000c9bc
 8007b94:	e000ed04 	.word	0xe000ed04

08007b98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01b      	beq.n	8007be2 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007baa:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <vTaskDelay+0x68>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <vTaskDelay+0x30>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	60bb      	str	r3, [r7, #8]
}
 8007bc4:	bf00      	nop
 8007bc6:	e7fe      	b.n	8007bc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bc8:	f000 f8a0 	bl	8007d0c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	2023      	movs	r0, #35	; 0x23
 8007bd0:	f002 ff9a 	bl	800ab08 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 f8be 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bdc:	f000 f8a4 	bl	8007d28 <xTaskResumeAll>
 8007be0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d107      	bne.n	8007bf8 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <vTaskDelay+0x6c>)
 8007bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	2000ceb4 	.word	0x2000ceb4
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	; 0x28
 8007c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c16:	463a      	mov	r2, r7
 8007c18:	1d39      	adds	r1, r7, #4
 8007c1a:	f107 0308 	add.w	r3, r7, #8
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fc92 	bl	8006548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	9202      	str	r2, [sp, #8]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	460a      	mov	r2, r1
 8007c36:	492d      	ldr	r1, [pc, #180]	; (8007cec <vTaskStartScheduler+0xe4>)
 8007c38:	482d      	ldr	r0, [pc, #180]	; (8007cf0 <vTaskStartScheduler+0xe8>)
 8007c3a:	f7ff fdd7 	bl	80077ec <xTaskCreateStatic>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4a2c      	ldr	r2, [pc, #176]	; (8007cf4 <vTaskStartScheduler+0xec>)
 8007c42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c44:	4b2b      	ldr	r3, [pc, #172]	; (8007cf4 <vTaskStartScheduler+0xec>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e001      	b.n	8007c56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d102      	bne.n	8007c62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c5c:	f001 f8e2 	bl	8008e24 <xTimerCreateTimerTask>
 8007c60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d12e      	bne.n	8007cc6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	613b      	str	r3, [r7, #16]
}
 8007c7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c7c:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <vTaskStartScheduler+0xf0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3354      	adds	r3, #84	; 0x54
 8007c82:	4a1e      	ldr	r2, [pc, #120]	; (8007cfc <vTaskStartScheduler+0xf4>)
 8007c84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c86:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <vTaskStartScheduler+0xf8>)
 8007c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <vTaskStartScheduler+0xfc>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c94:	4b1c      	ldr	r3, [pc, #112]	; (8007d08 <vTaskStartScheduler+0x100>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8007c9a:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <vTaskStartScheduler+0xf0>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3334      	adds	r3, #52	; 0x34
 8007ca0:	2205      	movs	r2, #5
 8007ca2:	4912      	ldr	r1, [pc, #72]	; (8007cec <vTaskStartScheduler+0xe4>)
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f003 ff83 	bl	800bbb0 <memcmp>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <vTaskStartScheduler+0xb4>
 8007cb0:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <vTaskStartScheduler+0xf0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f003 fd13 	bl	800b6e0 <SEGGER_SYSVIEW_OnTaskStartExec>
 8007cba:	e001      	b.n	8007cc0 <vTaskStartScheduler+0xb8>
 8007cbc:	f003 fcb2 	bl	800b624 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cc0:	f001 fc86 	bl	80095d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cc4:	e00e      	b.n	8007ce4 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ccc:	d10a      	bne.n	8007ce4 <vTaskStartScheduler+0xdc>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60fb      	str	r3, [r7, #12]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <vTaskStartScheduler+0xda>
}
 8007ce4:	bf00      	nop
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	0800befc 	.word	0x0800befc
 8007cf0:	08008399 	.word	0x08008399
 8007cf4:	2000ceb0 	.word	0x2000ceb0
 8007cf8:	2000c9b8 	.word	0x2000c9b8
 8007cfc:	20000010 	.word	0x20000010
 8007d00:	2000ceac 	.word	0x2000ceac
 8007d04:	2000ce98 	.word	0x2000ce98
 8007d08:	2000ce90 	.word	0x2000ce90

08007d0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d10:	4b04      	ldr	r3, [pc, #16]	; (8007d24 <vTaskSuspendAll+0x18>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3301      	adds	r3, #1
 8007d16:	4a03      	ldr	r2, [pc, #12]	; (8007d24 <vTaskSuspendAll+0x18>)
 8007d18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d1a:	bf00      	nop
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	2000ceb4 	.word	0x2000ceb4

08007d28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d36:	4b44      	ldr	r3, [pc, #272]	; (8007e48 <xTaskResumeAll+0x120>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	603b      	str	r3, [r7, #0]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d54:	f001 fcde 	bl	8009714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d58:	4b3b      	ldr	r3, [pc, #236]	; (8007e48 <xTaskResumeAll+0x120>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	4a3a      	ldr	r2, [pc, #232]	; (8007e48 <xTaskResumeAll+0x120>)
 8007d60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d62:	4b39      	ldr	r3, [pc, #228]	; (8007e48 <xTaskResumeAll+0x120>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d166      	bne.n	8007e38 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d6a:	4b38      	ldr	r3, [pc, #224]	; (8007e4c <xTaskResumeAll+0x124>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d062      	beq.n	8007e38 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d72:	e033      	b.n	8007ddc <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d74:	4b36      	ldr	r3, [pc, #216]	; (8007e50 <xTaskResumeAll+0x128>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3318      	adds	r3, #24
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe fc9f 	bl	80066c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fc9a 	bl	80066c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f003 fce6 	bl	800b764 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9c:	4b2d      	ldr	r3, [pc, #180]	; (8007e54 <xTaskResumeAll+0x12c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d903      	bls.n	8007dac <xTaskResumeAll+0x84>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	4a2a      	ldr	r2, [pc, #168]	; (8007e54 <xTaskResumeAll+0x12c>)
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4a27      	ldr	r2, [pc, #156]	; (8007e58 <xTaskResumeAll+0x130>)
 8007dba:	441a      	add	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f7fe fc21 	bl	800660a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dcc:	4b23      	ldr	r3, [pc, #140]	; (8007e5c <xTaskResumeAll+0x134>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d302      	bcc.n	8007ddc <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8007dd6:	4b22      	ldr	r3, [pc, #136]	; (8007e60 <xTaskResumeAll+0x138>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <xTaskResumeAll+0x128>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1c7      	bne.n	8007d74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dea:	f000 fbc9 	bl	8008580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007dee:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <xTaskResumeAll+0x13c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d010      	beq.n	8007e1c <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007dfa:	f000 f859 	bl	8007eb0 <xTaskIncrementTick>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8007e04:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <xTaskResumeAll+0x138>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f1      	bne.n	8007dfa <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <xTaskResumeAll+0x13c>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <xTaskResumeAll+0x138>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e28:	4b0f      	ldr	r3, [pc, #60]	; (8007e68 <xTaskResumeAll+0x140>)
 8007e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e38:	f001 fc9c 	bl	8009774 <vPortExitCritical>

	return xAlreadyYielded;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	2000ceb4 	.word	0x2000ceb4
 8007e4c:	2000ce8c 	.word	0x2000ce8c
 8007e50:	2000ce4c 	.word	0x2000ce4c
 8007e54:	2000ce94 	.word	0x2000ce94
 8007e58:	2000c9bc 	.word	0x2000c9bc
 8007e5c:	2000c9b8 	.word	0x2000c9b8
 8007e60:	2000cea0 	.word	0x2000cea0
 8007e64:	2000ce9c 	.word	0x2000ce9c
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e72:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <xTaskGetTickCount+0x1c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e78:	687b      	ldr	r3, [r7, #4]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	2000ce90 	.word	0x2000ce90

08007e8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e92:	f001 fd29 	bl	80098e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007e96:	2300      	movs	r3, #0
 8007e98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007e9a:	4b04      	ldr	r3, [pc, #16]	; (8007eac <xTaskGetTickCountFromISR+0x20>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ea0:	683b      	ldr	r3, [r7, #0]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	2000ce90 	.word	0x2000ce90

08007eb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eba:	4b51      	ldr	r3, [pc, #324]	; (8008000 <xTaskIncrementTick+0x150>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f040 8093 	bne.w	8007fea <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ec4:	4b4f      	ldr	r3, [pc, #316]	; (8008004 <xTaskIncrementTick+0x154>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ecc:	4a4d      	ldr	r2, [pc, #308]	; (8008004 <xTaskIncrementTick+0x154>)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d120      	bne.n	8007f1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ed8:	4b4b      	ldr	r3, [pc, #300]	; (8008008 <xTaskIncrementTick+0x158>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	603b      	str	r3, [r7, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <xTaskIncrementTick+0x46>
 8007ef8:	4b43      	ldr	r3, [pc, #268]	; (8008008 <xTaskIncrementTick+0x158>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	4b43      	ldr	r3, [pc, #268]	; (800800c <xTaskIncrementTick+0x15c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a41      	ldr	r2, [pc, #260]	; (8008008 <xTaskIncrementTick+0x158>)
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	4a41      	ldr	r2, [pc, #260]	; (800800c <xTaskIncrementTick+0x15c>)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	4b40      	ldr	r3, [pc, #256]	; (8008010 <xTaskIncrementTick+0x160>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	4a3f      	ldr	r2, [pc, #252]	; (8008010 <xTaskIncrementTick+0x160>)
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	f000 fb33 	bl	8008580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f1a:	4b3e      	ldr	r3, [pc, #248]	; (8008014 <xTaskIncrementTick+0x164>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d34d      	bcc.n	8007fc0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f24:	4b38      	ldr	r3, [pc, #224]	; (8008008 <xTaskIncrementTick+0x158>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f2e:	4b39      	ldr	r3, [pc, #228]	; (8008014 <xTaskIncrementTick+0x164>)
 8007f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f34:	601a      	str	r2, [r3, #0]
					break;
 8007f36:	e043      	b.n	8007fc0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f38:	4b33      	ldr	r3, [pc, #204]	; (8008008 <xTaskIncrementTick+0x158>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d203      	bcs.n	8007f58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f50:	4a30      	ldr	r2, [pc, #192]	; (8008014 <xTaskIncrementTick+0x164>)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f56:	e033      	b.n	8007fc0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe fbb1 	bl	80066c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d004      	beq.n	8007f74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	3318      	adds	r3, #24
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fba8 	bl	80066c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f003 fbf4 	bl	800b764 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4b25      	ldr	r3, [pc, #148]	; (8008018 <xTaskIncrementTick+0x168>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d903      	bls.n	8007f90 <xTaskIncrementTick+0xe0>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	4a22      	ldr	r2, [pc, #136]	; (8008018 <xTaskIncrementTick+0x168>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a1f      	ldr	r2, [pc, #124]	; (800801c <xTaskIncrementTick+0x16c>)
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fe fb2f 	bl	800660a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <xTaskIncrementTick+0x170>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d3b4      	bcc.n	8007f24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fbe:	e7b1      	b.n	8007f24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fc0:	4b17      	ldr	r3, [pc, #92]	; (8008020 <xTaskIncrementTick+0x170>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc6:	4915      	ldr	r1, [pc, #84]	; (800801c <xTaskIncrementTick+0x16c>)
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d901      	bls.n	8007fdc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007fdc:	4b11      	ldr	r3, [pc, #68]	; (8008024 <xTaskIncrementTick+0x174>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	e004      	b.n	8007ff4 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <xTaskIncrementTick+0x178>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <xTaskIncrementTick+0x178>)
 8007ff2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ff4:	697b      	ldr	r3, [r7, #20]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	2000ceb4 	.word	0x2000ceb4
 8008004:	2000ce90 	.word	0x2000ce90
 8008008:	2000ce44 	.word	0x2000ce44
 800800c:	2000ce48 	.word	0x2000ce48
 8008010:	2000cea4 	.word	0x2000cea4
 8008014:	2000ceac 	.word	0x2000ceac
 8008018:	2000ce94 	.word	0x2000ce94
 800801c:	2000c9bc 	.word	0x2000c9bc
 8008020:	2000c9b8 	.word	0x2000c9b8
 8008024:	2000cea0 	.word	0x2000cea0
 8008028:	2000ce9c 	.word	0x2000ce9c

0800802c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008032:	4b33      	ldr	r3, [pc, #204]	; (8008100 <vTaskSwitchContext+0xd4>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800803a:	4b32      	ldr	r3, [pc, #200]	; (8008104 <vTaskSwitchContext+0xd8>)
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008040:	e059      	b.n	80080f6 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8008042:	4b30      	ldr	r3, [pc, #192]	; (8008104 <vTaskSwitchContext+0xd8>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008048:	4b2f      	ldr	r3, [pc, #188]	; (8008108 <vTaskSwitchContext+0xdc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e010      	b.n	8008072 <vTaskSwitchContext+0x46>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <vTaskSwitchContext+0x40>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	607b      	str	r3, [r7, #4]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <vTaskSwitchContext+0x3e>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3b01      	subs	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	4926      	ldr	r1, [pc, #152]	; (800810c <vTaskSwitchContext+0xe0>)
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	440b      	add	r3, r1
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0e4      	beq.n	8008050 <vTaskSwitchContext+0x24>
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4a1e      	ldr	r2, [pc, #120]	; (800810c <vTaskSwitchContext+0xe0>)
 8008092:	4413      	add	r3, r2
 8008094:	60bb      	str	r3, [r7, #8]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	605a      	str	r2, [r3, #4]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	3308      	adds	r3, #8
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d104      	bne.n	80080b6 <vTaskSwitchContext+0x8a>
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	4a14      	ldr	r2, [pc, #80]	; (8008110 <vTaskSwitchContext+0xe4>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	4a11      	ldr	r2, [pc, #68]	; (8008108 <vTaskSwitchContext+0xdc>)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80080c6:	4b12      	ldr	r3, [pc, #72]	; (8008110 <vTaskSwitchContext+0xe4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3334      	adds	r3, #52	; 0x34
 80080cc:	2205      	movs	r2, #5
 80080ce:	4911      	ldr	r1, [pc, #68]	; (8008114 <vTaskSwitchContext+0xe8>)
 80080d0:	4618      	mov	r0, r3
 80080d2:	f003 fd6d 	bl	800bbb0 <memcmp>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d005      	beq.n	80080e8 <vTaskSwitchContext+0xbc>
 80080dc:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <vTaskSwitchContext+0xe4>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f003 fafd 	bl	800b6e0 <SEGGER_SYSVIEW_OnTaskStartExec>
 80080e6:	e001      	b.n	80080ec <vTaskSwitchContext+0xc0>
 80080e8:	f003 fa9c 	bl	800b624 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080ec:	4b08      	ldr	r3, [pc, #32]	; (8008110 <vTaskSwitchContext+0xe4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3354      	adds	r3, #84	; 0x54
 80080f2:	4a09      	ldr	r2, [pc, #36]	; (8008118 <vTaskSwitchContext+0xec>)
 80080f4:	6013      	str	r3, [r2, #0]
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	2000ceb4 	.word	0x2000ceb4
 8008104:	2000cea0 	.word	0x2000cea0
 8008108:	2000ce94 	.word	0x2000ce94
 800810c:	2000c9bc 	.word	0x2000c9bc
 8008110:	2000c9b8 	.word	0x2000c9b8
 8008114:	0800befc 	.word	0x0800befc
 8008118:	20000010 	.word	0x20000010

0800811c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60fb      	str	r3, [r7, #12]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <vTaskPlaceOnEventList+0x44>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3318      	adds	r3, #24
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fe fa81 	bl	8006652 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008150:	2101      	movs	r1, #1
 8008152:	6838      	ldr	r0, [r7, #0]
 8008154:	f000 fe00 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
}
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	2000c9b8 	.word	0x2000c9b8

08008164 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	617b      	str	r3, [r7, #20]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <vTaskPlaceOnEventListRestricted+0x58>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3318      	adds	r3, #24
 8008192:	4619      	mov	r1, r3
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7fe fa38 	bl	800660a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80081a6:	2024      	movs	r0, #36	; 0x24
 80081a8:	f002 fc90 	bl	800aacc <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	68b8      	ldr	r0, [r7, #8]
 80081b0:	f000 fdd2 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
	}
 80081b4:	bf00      	nop
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	2000c9b8 	.word	0x2000c9b8

080081c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60fb      	str	r3, [r7, #12]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	3318      	adds	r3, #24
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe fa67 	bl	80066c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <xTaskRemoveFromEventList+0xb8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d121      	bne.n	8008242 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	3304      	adds	r3, #4
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe fa5e 	bl	80066c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4618      	mov	r0, r3
 800820c:	f003 faaa 	bl	800b764 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	4b19      	ldr	r3, [pc, #100]	; (800827c <xTaskRemoveFromEventList+0xbc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d903      	bls.n	8008224 <xTaskRemoveFromEventList+0x64>
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	4a16      	ldr	r2, [pc, #88]	; (800827c <xTaskRemoveFromEventList+0xbc>)
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4a13      	ldr	r2, [pc, #76]	; (8008280 <xTaskRemoveFromEventList+0xc0>)
 8008232:	441a      	add	r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7fe f9e5 	bl	800660a <vListInsertEnd>
 8008240:	e005      	b.n	800824e <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	3318      	adds	r3, #24
 8008246:	4619      	mov	r1, r3
 8008248:	480e      	ldr	r0, [pc, #56]	; (8008284 <xTaskRemoveFromEventList+0xc4>)
 800824a:	f7fe f9de 	bl	800660a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008252:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <xTaskRemoveFromEventList+0xc8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	429a      	cmp	r2, r3
 800825a:	d905      	bls.n	8008268 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800825c:	2301      	movs	r3, #1
 800825e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008260:	4b0a      	ldr	r3, [pc, #40]	; (800828c <xTaskRemoveFromEventList+0xcc>)
 8008262:	2201      	movs	r2, #1
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	e001      	b.n	800826c <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800826c:	697b      	ldr	r3, [r7, #20]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	2000ceb4 	.word	0x2000ceb4
 800827c:	2000ce94 	.word	0x2000ce94
 8008280:	2000c9bc 	.word	0x2000c9bc
 8008284:	2000ce4c 	.word	0x2000ce4c
 8008288:	2000c9b8 	.word	0x2000c9b8
 800828c:	2000cea0 	.word	0x2000cea0

08008290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008298:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <vTaskInternalSetTimeOutState+0x24>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <vTaskInternalSetTimeOutState+0x28>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	605a      	str	r2, [r3, #4]
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	2000cea4 	.word	0x2000cea4
 80082b8:	2000ce90 	.word	0x2000ce90

080082bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	613b      	str	r3, [r7, #16]
}
 80082de:	bf00      	nop
 80082e0:	e7fe      	b.n	80082e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10a      	bne.n	80082fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	60fb      	str	r3, [r7, #12]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082fe:	f001 fa09 	bl	8009714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008302:	4b1d      	ldr	r3, [pc, #116]	; (8008378 <xTaskCheckForTimeOut+0xbc>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831a:	d102      	bne.n	8008322 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	61fb      	str	r3, [r7, #28]
 8008320:	e023      	b.n	800836a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b15      	ldr	r3, [pc, #84]	; (800837c <xTaskCheckForTimeOut+0xc0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d007      	beq.n	800833e <xTaskCheckForTimeOut+0x82>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	429a      	cmp	r2, r3
 8008336:	d302      	bcc.n	800833e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008338:	2301      	movs	r3, #1
 800833a:	61fb      	str	r3, [r7, #28]
 800833c:	e015      	b.n	800836a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	429a      	cmp	r2, r3
 8008346:	d20b      	bcs.n	8008360 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff ff9b 	bl	8008290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	e004      	b.n	800836a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008366:	2301      	movs	r3, #1
 8008368:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800836a:	f001 fa03 	bl	8009774 <vPortExitCritical>

	return xReturn;
 800836e:	69fb      	ldr	r3, [r7, #28]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	2000ce90 	.word	0x2000ce90
 800837c:	2000cea4 	.word	0x2000cea4

08008380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008384:	4b03      	ldr	r3, [pc, #12]	; (8008394 <vTaskMissedYield+0x14>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	2000cea0 	.word	0x2000cea0

08008398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083a0:	f000 f854 	bl	800844c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083a4:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <prvIdleTask+0x2c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d907      	bls.n	80083bc <prvIdleTask+0x24>
			{
				taskYIELD();
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <prvIdleTask+0x30>)
 80083ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80083bc:	f7f8 f8aa 	bl	8000514 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80083c0:	e7ee      	b.n	80083a0 <prvIdleTask+0x8>
 80083c2:	bf00      	nop
 80083c4:	2000c9bc 	.word	0x2000c9bc
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083d2:	2300      	movs	r3, #0
 80083d4:	607b      	str	r3, [r7, #4]
 80083d6:	e00c      	b.n	80083f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4a12      	ldr	r2, [pc, #72]	; (800842c <prvInitialiseTaskLists+0x60>)
 80083e4:	4413      	add	r3, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe f8e2 	bl	80065b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3301      	adds	r3, #1
 80083f0:	607b      	str	r3, [r7, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b37      	cmp	r3, #55	; 0x37
 80083f6:	d9ef      	bls.n	80083d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083f8:	480d      	ldr	r0, [pc, #52]	; (8008430 <prvInitialiseTaskLists+0x64>)
 80083fa:	f7fe f8d9 	bl	80065b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083fe:	480d      	ldr	r0, [pc, #52]	; (8008434 <prvInitialiseTaskLists+0x68>)
 8008400:	f7fe f8d6 	bl	80065b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008404:	480c      	ldr	r0, [pc, #48]	; (8008438 <prvInitialiseTaskLists+0x6c>)
 8008406:	f7fe f8d3 	bl	80065b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800840a:	480c      	ldr	r0, [pc, #48]	; (800843c <prvInitialiseTaskLists+0x70>)
 800840c:	f7fe f8d0 	bl	80065b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008410:	480b      	ldr	r0, [pc, #44]	; (8008440 <prvInitialiseTaskLists+0x74>)
 8008412:	f7fe f8cd 	bl	80065b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <prvInitialiseTaskLists+0x78>)
 8008418:	4a05      	ldr	r2, [pc, #20]	; (8008430 <prvInitialiseTaskLists+0x64>)
 800841a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <prvInitialiseTaskLists+0x7c>)
 800841e:	4a05      	ldr	r2, [pc, #20]	; (8008434 <prvInitialiseTaskLists+0x68>)
 8008420:	601a      	str	r2, [r3, #0]
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	2000c9bc 	.word	0x2000c9bc
 8008430:	2000ce1c 	.word	0x2000ce1c
 8008434:	2000ce30 	.word	0x2000ce30
 8008438:	2000ce4c 	.word	0x2000ce4c
 800843c:	2000ce60 	.word	0x2000ce60
 8008440:	2000ce78 	.word	0x2000ce78
 8008444:	2000ce44 	.word	0x2000ce44
 8008448:	2000ce48 	.word	0x2000ce48

0800844c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008452:	e019      	b.n	8008488 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008454:	f001 f95e 	bl	8009714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008458:	4b10      	ldr	r3, [pc, #64]	; (800849c <prvCheckTasksWaitingTermination+0x50>)
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
 8008464:	4618      	mov	r0, r3
 8008466:	f7fe f92d 	bl	80066c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <prvCheckTasksWaitingTermination+0x54>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3b01      	subs	r3, #1
 8008470:	4a0b      	ldr	r2, [pc, #44]	; (80084a0 <prvCheckTasksWaitingTermination+0x54>)
 8008472:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008474:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <prvCheckTasksWaitingTermination+0x58>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3b01      	subs	r3, #1
 800847a:	4a0a      	ldr	r2, [pc, #40]	; (80084a4 <prvCheckTasksWaitingTermination+0x58>)
 800847c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800847e:	f001 f979 	bl	8009774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f848 	bl	8008518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008488:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <prvCheckTasksWaitingTermination+0x58>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e1      	bne.n	8008454 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	2000ce60 	.word	0x2000ce60
 80084a0:	2000ce8c 	.word	0x2000ce8c
 80084a4:	2000ce74 	.word	0x2000ce74

080084a8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80084b4:	e005      	b.n	80084c2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3301      	adds	r3, #1
 80084ba:	607b      	str	r3, [r7, #4]
			ulCount++;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3301      	adds	r3, #1
 80084c0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2ba5      	cmp	r3, #165	; 0xa5
 80084c8:	d0f5      	beq.n	80084b6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	089b      	lsrs	r3, r3, #2
 80084ce:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	b29b      	uxth	r3, r3
	}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <uxTaskGetStackHighWaterMark+0x14>
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <uxTaskGetStackHighWaterMark+0x34>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	e000      	b.n	80084f6 <uxTaskGetStackHighWaterMark+0x16>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80084fe:	6938      	ldr	r0, [r7, #16]
 8008500:	f7ff ffd2 	bl	80084a8 <prvTaskCheckFreeStackSpace>
 8008504:	4603      	mov	r3, r0
 8008506:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8008508:	68fb      	ldr	r3, [r7, #12]
	}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	2000c9b8 	.word	0x2000c9b8

08008518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3354      	adds	r3, #84	; 0x54
 8008524:	4618      	mov	r0, r3
 8008526:	f003 fc57 	bl	800bdd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008530:	2b00      	cmp	r3, #0
 8008532:	d108      	bne.n	8008546 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fb27 	bl	8009b8c <vPortFree>
				vPortFree( pxTCB );
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 fb24 	bl	8009b8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008544:	e018      	b.n	8008578 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800854c:	2b01      	cmp	r3, #1
 800854e:	d103      	bne.n	8008558 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 fb1b 	bl	8009b8c <vPortFree>
	}
 8008556:	e00f      	b.n	8008578 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800855e:	2b02      	cmp	r3, #2
 8008560:	d00a      	beq.n	8008578 <prvDeleteTCB+0x60>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	60fb      	str	r3, [r7, #12]
}
 8008574:	bf00      	nop
 8008576:	e7fe      	b.n	8008576 <prvDeleteTCB+0x5e>
	}
 8008578:	bf00      	nop
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvResetNextTaskUnblockTime+0x38>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d104      	bne.n	800859a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <prvResetNextTaskUnblockTime+0x3c>)
 8008592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008598:	e008      	b.n	80085ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <prvResetNextTaskUnblockTime+0x38>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	4a04      	ldr	r2, [pc, #16]	; (80085bc <prvResetNextTaskUnblockTime+0x3c>)
 80085aa:	6013      	str	r3, [r2, #0]
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	2000ce44 	.word	0x2000ce44
 80085bc:	2000ceac 	.word	0x2000ceac

080085c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085c6:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <xTaskGetSchedulerState+0x34>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085ce:	2301      	movs	r3, #1
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	e008      	b.n	80085e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d4:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <xTaskGetSchedulerState+0x38>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d102      	bne.n	80085e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085dc:	2302      	movs	r3, #2
 80085de:	607b      	str	r3, [r7, #4]
 80085e0:	e001      	b.n	80085e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085e2:	2300      	movs	r3, #0
 80085e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085e6:	687b      	ldr	r3, [r7, #4]
	}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	2000ce98 	.word	0x2000ce98
 80085f8:	2000ceb4 	.word	0x2000ceb4

080085fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d056      	beq.n	80086c0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008616:	4b2d      	ldr	r3, [pc, #180]	; (80086cc <xTaskPriorityInherit+0xd0>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	429a      	cmp	r2, r3
 800861e:	d246      	bcs.n	80086ae <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	db06      	blt.n	8008636 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008628:	4b28      	ldr	r3, [pc, #160]	; (80086cc <xTaskPriorityInherit+0xd0>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6959      	ldr	r1, [r3, #20]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4a22      	ldr	r2, [pc, #136]	; (80086d0 <xTaskPriorityInherit+0xd4>)
 8008648:	4413      	add	r3, r2
 800864a:	4299      	cmp	r1, r3
 800864c:	d122      	bne.n	8008694 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	3304      	adds	r3, #4
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe f836 	bl	80066c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008658:	4b1c      	ldr	r3, [pc, #112]	; (80086cc <xTaskPriorityInherit+0xd0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008666:	4b1b      	ldr	r3, [pc, #108]	; (80086d4 <xTaskPriorityInherit+0xd8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d903      	bls.n	8008676 <xTaskPriorityInherit+0x7a>
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	4a18      	ldr	r2, [pc, #96]	; (80086d4 <xTaskPriorityInherit+0xd8>)
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867a:	4613      	mov	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4a13      	ldr	r2, [pc, #76]	; (80086d0 <xTaskPriorityInherit+0xd4>)
 8008684:	441a      	add	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	3304      	adds	r3, #4
 800868a:	4619      	mov	r1, r3
 800868c:	4610      	mov	r0, r2
 800868e:	f7fd ffbc 	bl	800660a <vListInsertEnd>
 8008692:	e004      	b.n	800869e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008694:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <xTaskPriorityInherit+0xd0>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4619      	mov	r1, r3
 80086a2:	2049      	movs	r0, #73	; 0x49
 80086a4:	f002 fa30 	bl	800ab08 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e008      	b.n	80086c0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086b2:	4b06      	ldr	r3, [pc, #24]	; (80086cc <xTaskPriorityInherit+0xd0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d201      	bcs.n	80086c0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086c0:	68fb      	ldr	r3, [r7, #12]
	}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	2000c9b8 	.word	0x2000c9b8
 80086d0:	2000c9bc 	.word	0x2000c9bc
 80086d4:	2000ce94 	.word	0x2000ce94

080086d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d05b      	beq.n	80087a6 <xTaskPriorityDisinherit+0xce>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086ee:	4b30      	ldr	r3, [pc, #192]	; (80087b0 <xTaskPriorityDisinherit+0xd8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d00a      	beq.n	800870e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	60fb      	str	r3, [r7, #12]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	60bb      	str	r3, [r7, #8]
}
 8008728:	bf00      	nop
 800872a:	e7fe      	b.n	800872a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008730:	1e5a      	subs	r2, r3, #1
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873e:	429a      	cmp	r2, r3
 8008740:	d031      	beq.n	80087a6 <xTaskPriorityDisinherit+0xce>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12d      	bne.n	80087a6 <xTaskPriorityDisinherit+0xce>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	3304      	adds	r3, #4
 800874e:	4618      	mov	r0, r3
 8008750:	f7fd ffb8 	bl	80066c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4619      	mov	r1, r3
 8008758:	204a      	movs	r0, #74	; 0x4a
 800875a:	f002 f9d5 	bl	800ab08 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <xTaskPriorityDisinherit+0xdc>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d903      	bls.n	8008786 <xTaskPriorityDisinherit+0xae>
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <xTaskPriorityDisinherit+0xdc>)
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <xTaskPriorityDisinherit+0xe0>)
 8008794:	441a      	add	r2, r3
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	3304      	adds	r3, #4
 800879a:	4619      	mov	r1, r3
 800879c:	4610      	mov	r0, r2
 800879e:	f7fd ff34 	bl	800660a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087a2:	2301      	movs	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087a6:	697b      	ldr	r3, [r7, #20]
	}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	2000c9b8 	.word	0x2000c9b8
 80087b4:	2000ce94 	.word	0x2000ce94
 80087b8:	2000c9bc 	.word	0x2000c9bc

080087bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80087ca:	2301      	movs	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d073      	beq.n	80088bc <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	60fb      	str	r3, [r7, #12]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d902      	bls.n	8008802 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e002      	b.n	8008808 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008806:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	429a      	cmp	r2, r3
 8008810:	d054      	beq.n	80088bc <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	429a      	cmp	r2, r3
 800881a:	d14f      	bne.n	80088bc <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800881c:	4b29      	ldr	r3, [pc, #164]	; (80088c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	429a      	cmp	r2, r3
 8008824:	d10a      	bne.n	800883c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	60bb      	str	r3, [r7, #8]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4619      	mov	r1, r3
 8008840:	204a      	movs	r0, #74	; 0x4a
 8008842:	f002 f961 	bl	800ab08 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	69fa      	ldr	r2, [r7, #28]
 8008850:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	db04      	blt.n	8008864 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	6959      	ldr	r1, [r3, #20]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4a15      	ldr	r2, [pc, #84]	; (80088c8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008874:	4413      	add	r3, r2
 8008876:	4299      	cmp	r1, r3
 8008878:	d120      	bne.n	80088bc <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	3304      	adds	r3, #4
 800887e:	4618      	mov	r0, r3
 8008880:	f7fd ff20 	bl	80066c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	4618      	mov	r0, r3
 8008888:	f002 ff6c 	bl	800b764 <SEGGER_SYSVIEW_OnTaskStartReady>
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008890:	4b0e      	ldr	r3, [pc, #56]	; (80088cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d903      	bls.n	80088a0 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4a06      	ldr	r2, [pc, #24]	; (80088c8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80088ae:	441a      	add	r2, r3
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f7fd fea7 	bl	800660a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088bc:	bf00      	nop
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	2000c9b8 	.word	0x2000c9b8
 80088c8:	2000c9bc 	.word	0x2000c9bc
 80088cc:	2000ce94 	.word	0x2000ce94

080088d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088e2:	3201      	adds	r2, #1
 80088e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80088e6:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80088e8:	681b      	ldr	r3, [r3, #0]
	}
 80088ea:	4618      	mov	r0, r3
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	2000c9b8 	.word	0x2000c9b8

080088f8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008906:	f000 ff05 	bl	8009714 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800890a:	4b2d      	ldr	r3, [pc, #180]	; (80089c0 <xTaskNotifyWait+0xc8>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d01c      	beq.n	8008952 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008918:	4b29      	ldr	r3, [pc, #164]	; (80089c0 <xTaskNotifyWait+0xc8>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	43d2      	mvns	r2, r2
 8008924:	400a      	ands	r2, r1
 8008926:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800892a:	4b25      	ldr	r3, [pc, #148]	; (80089c0 <xTaskNotifyWait+0xc8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00b      	beq.n	8008952 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800893a:	2101      	movs	r1, #1
 800893c:	6838      	ldr	r0, [r7, #0]
 800893e:	f000 fa0b 	bl	8008d58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008942:	4b20      	ldr	r3, [pc, #128]	; (80089c4 <xTaskNotifyWait+0xcc>)
 8008944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008952:	f000 ff0f 	bl	8009774 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008956:	f000 fedd 	bl	8009714 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	4613      	mov	r3, r2
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	68f9      	ldr	r1, [r7, #12]
 8008966:	2040      	movs	r0, #64	; 0x40
 8008968:	f002 f9da 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <xTaskNotifyWait+0x86>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008972:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <xTaskNotifyWait+0xc8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800897e:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <xTaskNotifyWait+0xc8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d002      	beq.n	8008992 <xTaskNotifyWait+0x9a>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	e00a      	b.n	80089a8 <xTaskNotifyWait+0xb0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008992:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <xTaskNotifyWait+0xc8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	43d2      	mvns	r2, r2
 800899e:	400a      	ands	r2, r1
 80089a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089a8:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <xTaskNotifyWait+0xc8>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80089b2:	f000 fedf 	bl	8009774 <vPortExitCritical>

		return xReturn;
 80089b6:	697b      	ldr	r3, [r7, #20]
	}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	2000c9b8 	.word	0x2000c9b8
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08c      	sub	sp, #48	; 0x30
 80089cc:	af02      	add	r7, sp, #8
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	4613      	mov	r3, r2
 80089d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80089d8:	2301      	movs	r3, #1
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10a      	bne.n	80089f8 <xTaskGenericNotify+0x30>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	61bb      	str	r3, [r7, #24]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80089fc:	f000 fe8a 	bl	8009714 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008a16:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8008a20:	79fb      	ldrb	r3, [r7, #7]
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d82d      	bhi.n	8008a82 <xTaskGenericNotify+0xba>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <xTaskGenericNotify+0x64>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008aa5 	.word	0x08008aa5
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a53 	.word	0x08008a53
 8008a38:	08008a63 	.word	0x08008a63
 8008a3c:	08008a6d 	.word	0x08008a6d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008a50:	e02b      	b.n	8008aaa <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008a60:	e023      	b.n	8008aaa <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008a6a:	e01e      	b.n	8008aaa <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008a6c:	7ffb      	ldrb	r3, [r7, #31]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d004      	beq.n	8008a7c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008a7a:	e016      	b.n	8008aaa <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008a80:	e013      	b.n	8008aaa <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a8c:	d00c      	beq.n	8008aa8 <xTaskGenericNotify+0xe0>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	617b      	str	r3, [r7, #20]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <xTaskGenericNotify+0xda>
					break;
 8008aa4:	bf00      	nop
 8008aa6:	e000      	b.n	8008aaa <xTaskGenericNotify+0xe2>

					break;
 8008aa8:	bf00      	nop
			}

			traceTASK_NOTIFY();
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f002 fefb 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8008ab2:	4601      	mov	r1, r0
 8008ab4:	79fa      	ldrb	r2, [r7, #7]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	4613      	mov	r3, r2
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	203e      	movs	r0, #62	; 0x3e
 8008ac0:	f002 f92e 	bl	800ad20 <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008ac4:	7ffb      	ldrb	r3, [r7, #31]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d13e      	bne.n	8008b48 <xTaskGenericNotify+0x180>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fd fdf8 	bl	80066c4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f002 fe44 	bl	800b764 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae0:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <xTaskGenericNotify+0x190>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d903      	bls.n	8008af0 <xTaskGenericNotify+0x128>
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	4a1a      	ldr	r2, [pc, #104]	; (8008b58 <xTaskGenericNotify+0x190>)
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4a17      	ldr	r2, [pc, #92]	; (8008b5c <xTaskGenericNotify+0x194>)
 8008afe:	441a      	add	r2, r3
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	f7fd fd7f 	bl	800660a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <xTaskGenericNotify+0x162>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	613b      	str	r3, [r7, #16]
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <xTaskGenericNotify+0x160>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2e:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <xTaskGenericNotify+0x198>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d907      	bls.n	8008b48 <xTaskGenericNotify+0x180>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <xTaskGenericNotify+0x19c>)
 8008b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008b48:	f000 fe14 	bl	8009774 <vPortExitCritical>

		return xReturn;
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3728      	adds	r7, #40	; 0x28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	2000ce94 	.word	0x2000ce94
 8008b5c:	2000c9bc 	.word	0x2000c9bc
 8008b60:	2000c9b8 	.word	0x2000c9b8
 8008b64:	e000ed04 	.word	0xe000ed04

08008b68 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b090      	sub	sp, #64	; 0x40
 8008b6c:	af02      	add	r7, sp, #8
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	4613      	mov	r3, r2
 8008b76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b98:	f000 fea6 	bl	80098e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008ba0:	f3ef 8211 	mrs	r2, BASEPRI
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	623a      	str	r2, [r7, #32]
 8008bb6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008bb8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	2202      	movs	r2, #2
 8008bda:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d82f      	bhi.n	8008c44 <xTaskGenericNotifyFromISR+0xdc>
 8008be4:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <xTaskGenericNotifyFromISR+0x84>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008c67 	.word	0x08008c67
 8008bf0:	08008c01 	.word	0x08008c01
 8008bf4:	08008c13 	.word	0x08008c13
 8008bf8:	08008c23 	.word	0x08008c23
 8008bfc:	08008c2d 	.word	0x08008c2d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008c10:	e02c      	b.n	8008c6c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008c20:	e024      	b.n	8008c6c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008c2a:	e01f      	b.n	8008c6c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008c2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d004      	beq.n	8008c3e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008c3c:	e016      	b.n	8008c6c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008c42:	e013      	b.n	8008c6c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c4e:	d00c      	beq.n	8008c6a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	61bb      	str	r3, [r7, #24]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8008c66:	bf00      	nop
 8008c68:	e000      	b.n	8008c6c <xTaskGenericNotifyFromISR+0x104>
					break;
 8008c6a:	bf00      	nop
			}

			traceTASK_NOTIFY_FROM_ISR();
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f002 fe1a 	bl	800b8a8 <SEGGER_SYSVIEW_ShrinkId>
 8008c74:	79f9      	ldrb	r1, [r7, #7]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c7a:	9201      	str	r2, [sp, #4]
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	4601      	mov	r1, r0
 8008c84:	203f      	movs	r0, #63	; 0x3f
 8008c86:	f002 f8dd 	bl	800ae44 <SEGGER_SYSVIEW_RecordU32x5>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d14a      	bne.n	8008d28 <xTaskGenericNotifyFromISR+0x1c0>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <xTaskGenericNotifyFromISR+0x148>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	617b      	str	r3, [r7, #20]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <xTaskGenericNotifyFromISR+0x146>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cb0:	4b23      	ldr	r3, [pc, #140]	; (8008d40 <xTaskGenericNotifyFromISR+0x1d8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d121      	bne.n	8008cfc <xTaskGenericNotifyFromISR+0x194>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fd fd01 	bl	80066c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f002 fd4d 	bl	800b764 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cce:	4b1d      	ldr	r3, [pc, #116]	; (8008d44 <xTaskGenericNotifyFromISR+0x1dc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d903      	bls.n	8008cde <xTaskGenericNotifyFromISR+0x176>
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	4a1a      	ldr	r2, [pc, #104]	; (8008d44 <xTaskGenericNotifyFromISR+0x1dc>)
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <xTaskGenericNotifyFromISR+0x1e0>)
 8008cec:	441a      	add	r2, r3
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	f7fd fc88 	bl	800660a <vListInsertEnd>
 8008cfa:	e005      	b.n	8008d08 <xTaskGenericNotifyFromISR+0x1a0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	3318      	adds	r3, #24
 8008d00:	4619      	mov	r1, r3
 8008d02:	4812      	ldr	r0, [pc, #72]	; (8008d4c <xTaskGenericNotifyFromISR+0x1e4>)
 8008d04:	f7fd fc81 	bl	800660a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <xTaskGenericNotifyFromISR+0x1e8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d908      	bls.n	8008d28 <xTaskGenericNotifyFromISR+0x1c0>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <xTaskGenericNotifyFromISR+0x1ba>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1e:	2201      	movs	r2, #1
 8008d20:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008d22:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <xTaskGenericNotifyFromISR+0x1ec>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f383 8811 	msr	BASEPRI, r3
}
 8008d32:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3738      	adds	r7, #56	; 0x38
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	2000ceb4 	.word	0x2000ceb4
 8008d44:	2000ce94 	.word	0x2000ce94
 8008d48:	2000c9bc 	.word	0x2000c9bc
 8008d4c:	2000ce4c 	.word	0x2000ce4c
 8008d50:	2000c9b8 	.word	0x2000c9b8
 8008d54:	2000cea0 	.word	0x2000cea0

08008d58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d62:	4b2a      	ldr	r3, [pc, #168]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d68:	4b29      	ldr	r3, [pc, #164]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fd fca8 	bl	80066c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d7a:	d110      	bne.n	8008d9e <prvAddCurrentTaskToDelayedList+0x46>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00d      	beq.n	8008d9e <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8008d82:	4b23      	ldr	r3, [pc, #140]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	211b      	movs	r1, #27
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f002 fd2d 	bl	800b7e8 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8e:	4b20      	ldr	r3, [pc, #128]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	481f      	ldr	r0, [pc, #124]	; (8008e14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d98:	f7fd fc37 	bl	800660a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d9c:	e032      	b.n	8008e04 <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4413      	add	r3, r2
 8008da4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d20f      	bcs.n	8008dd6 <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8008db6:	4b16      	ldr	r3, [pc, #88]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2104      	movs	r1, #4
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f002 fd13 	bl	800b7e8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc2:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f7fd fc3f 	bl	8006652 <vListInsert>
}
 8008dd4:	e016      	b.n	8008e04 <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8008dd6:	4b0e      	ldr	r3, [pc, #56]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2104      	movs	r1, #4
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f002 fd03 	bl	800b7e8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de2:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fd fc2f 	bl	8006652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008df4:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d202      	bcs.n	8008e04 <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 8008dfe:	4a08      	ldr	r2, [pc, #32]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	6013      	str	r3, [r2, #0]
}
 8008e04:	bf00      	nop
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	2000ce90 	.word	0x2000ce90
 8008e10:	2000c9b8 	.word	0x2000c9b8
 8008e14:	2000ce78 	.word	0x2000ce78
 8008e18:	2000ce48 	.word	0x2000ce48
 8008e1c:	2000ce44 	.word	0x2000ce44
 8008e20:	2000ceac 	.word	0x2000ceac

08008e24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08a      	sub	sp, #40	; 0x28
 8008e28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e2e:	f000 fb07 	bl	8009440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e32:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <xTimerCreateTimerTask+0x80>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d021      	beq.n	8008e7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e42:	1d3a      	adds	r2, r7, #4
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	f107 030c 	add.w	r3, r7, #12
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fd fb95 	bl	800657c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	9202      	str	r2, [sp, #8]
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	2300      	movs	r3, #0
 8008e62:	460a      	mov	r2, r1
 8008e64:	4910      	ldr	r1, [pc, #64]	; (8008ea8 <xTimerCreateTimerTask+0x84>)
 8008e66:	4811      	ldr	r0, [pc, #68]	; (8008eac <xTimerCreateTimerTask+0x88>)
 8008e68:	f7fe fcc0 	bl	80077ec <xTaskCreateStatic>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	4a10      	ldr	r2, [pc, #64]	; (8008eb0 <xTimerCreateTimerTask+0x8c>)
 8008e70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e72:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <xTimerCreateTimerTask+0x8c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10a      	bne.n	8008e9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	613b      	str	r3, [r7, #16]
}
 8008e96:	bf00      	nop
 8008e98:	e7fe      	b.n	8008e98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e9a:	697b      	ldr	r3, [r7, #20]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	2000cee8 	.word	0x2000cee8
 8008ea8:	0800bf04 	.word	0x0800bf04
 8008eac:	08008fe9 	.word	0x08008fe9
 8008eb0:	2000ceec 	.word	0x2000ceec

08008eb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08a      	sub	sp, #40	; 0x28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	623b      	str	r3, [r7, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <xTimerGenericCommand+0x98>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d02a      	beq.n	8008f40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b05      	cmp	r3, #5
 8008efa:	dc18      	bgt.n	8008f2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008efc:	f7ff fb60 	bl	80085c0 <xTaskGetSchedulerState>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d109      	bne.n	8008f1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f06:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <xTimerGenericCommand+0x98>)
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	f107 0110 	add.w	r1, r7, #16
 8008f0e:	2300      	movs	r3, #0
 8008f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f12:	f7fd fd41 	bl	8006998 <xQueueGenericSend>
 8008f16:	6278      	str	r0, [r7, #36]	; 0x24
 8008f18:	e012      	b.n	8008f40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <xTimerGenericCommand+0x98>)
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	f107 0110 	add.w	r1, r7, #16
 8008f22:	2300      	movs	r3, #0
 8008f24:	2200      	movs	r2, #0
 8008f26:	f7fd fd37 	bl	8006998 <xQueueGenericSend>
 8008f2a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f2c:	e008      	b.n	8008f40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f2e:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <xTimerGenericCommand+0x98>)
 8008f30:	6818      	ldr	r0, [r3, #0]
 8008f32:	f107 0110 	add.w	r1, r7, #16
 8008f36:	2300      	movs	r3, #0
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	f7fd fe53 	bl	8006be4 <xQueueGenericSendFromISR>
 8008f3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3728      	adds	r7, #40	; 0x28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	2000cee8 	.word	0x2000cee8

08008f50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5a:	4b22      	ldr	r3, [pc, #136]	; (8008fe4 <prvProcessExpiredTimer+0x94>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fd fbab 	bl	80066c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d022      	beq.n	8008fc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	699a      	ldr	r2, [r3, #24]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	18d1      	adds	r1, r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	6978      	ldr	r0, [r7, #20]
 8008f8a:	f000 f8d1 	bl	8009130 <prvInsertTimerInActiveList>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01f      	beq.n	8008fd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f94:	2300      	movs	r3, #0
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	6978      	ldr	r0, [r7, #20]
 8008fa0:	f7ff ff88 	bl	8008eb4 <xTimerGenericCommand>
 8008fa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d113      	bne.n	8008fd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	60fb      	str	r3, [r7, #12]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fc8:	f023 0301 	bic.w	r3, r3, #1
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	6a1b      	ldr	r3, [r3, #32]
 8008fd8:	6978      	ldr	r0, [r7, #20]
 8008fda:	4798      	blx	r3
}
 8008fdc:	bf00      	nop
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	2000cee0 	.word	0x2000cee0

08008fe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ff0:	f107 0308 	add.w	r3, r7, #8
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 f857 	bl	80090a8 <prvGetNextExpireTime>
 8008ffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4619      	mov	r1, r3
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 f803 	bl	800900c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009006:	f000 f8d5 	bl	80091b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800900a:	e7f1      	b.n	8008ff0 <prvTimerTask+0x8>

0800900c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009016:	f7fe fe79 	bl	8007d0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800901a:	f107 0308 	add.w	r3, r7, #8
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f866 	bl	80090f0 <prvSampleTimeNow>
 8009024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d130      	bne.n	800908e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <prvProcessTimerOrBlockTask+0x3c>
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	429a      	cmp	r2, r3
 8009038:	d806      	bhi.n	8009048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800903a:	f7fe fe75 	bl	8007d28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800903e:	68f9      	ldr	r1, [r7, #12]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff ff85 	bl	8008f50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009046:	e024      	b.n	8009092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d008      	beq.n	8009060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800904e:	4b13      	ldr	r3, [pc, #76]	; (800909c <prvProcessTimerOrBlockTask+0x90>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <prvProcessTimerOrBlockTask+0x50>
 8009058:	2301      	movs	r3, #1
 800905a:	e000      	b.n	800905e <prvProcessTimerOrBlockTask+0x52>
 800905c:	2300      	movs	r3, #0
 800905e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009060:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <prvProcessTimerOrBlockTask+0x94>)
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	4619      	mov	r1, r3
 800906e:	f7fe fb89 	bl	8007784 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009072:	f7fe fe59 	bl	8007d28 <xTaskResumeAll>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <prvProcessTimerOrBlockTask+0x98>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	f3bf 8f6f 	isb	sy
}
 800908c:	e001      	b.n	8009092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800908e:	f7fe fe4b 	bl	8007d28 <xTaskResumeAll>
}
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	2000cee4 	.word	0x2000cee4
 80090a0:	2000cee8 	.word	0x2000cee8
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090b0:	4b0e      	ldr	r3, [pc, #56]	; (80090ec <prvGetNextExpireTime+0x44>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <prvGetNextExpireTime+0x16>
 80090ba:	2201      	movs	r2, #1
 80090bc:	e000      	b.n	80090c0 <prvGetNextExpireTime+0x18>
 80090be:	2200      	movs	r2, #0
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d105      	bne.n	80090d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090cc:	4b07      	ldr	r3, [pc, #28]	; (80090ec <prvGetNextExpireTime+0x44>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	e001      	b.n	80090dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090dc:	68fb      	ldr	r3, [r7, #12]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	2000cee0 	.word	0x2000cee0

080090f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090f8:	f7fe feb8 	bl	8007e6c <xTaskGetTickCount>
 80090fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090fe:	4b0b      	ldr	r3, [pc, #44]	; (800912c <prvSampleTimeNow+0x3c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	429a      	cmp	r2, r3
 8009106:	d205      	bcs.n	8009114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009108:	f000 f936 	bl	8009378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	e002      	b.n	800911a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800911a:	4a04      	ldr	r2, [pc, #16]	; (800912c <prvSampleTimeNow+0x3c>)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009120:	68fb      	ldr	r3, [r7, #12]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	2000cef0 	.word	0x2000cef0

08009130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800913e:	2300      	movs	r3, #0
 8009140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	429a      	cmp	r2, r3
 8009154:	d812      	bhi.n	800917c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	1ad2      	subs	r2, r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	429a      	cmp	r2, r3
 8009162:	d302      	bcc.n	800916a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e01b      	b.n	80091a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800916a:	4b10      	ldr	r3, [pc, #64]	; (80091ac <prvInsertTimerInActiveList+0x7c>)
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3304      	adds	r3, #4
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f7fd fa6c 	bl	8006652 <vListInsert>
 800917a:	e012      	b.n	80091a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d206      	bcs.n	8009192 <prvInsertTimerInActiveList+0x62>
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d302      	bcc.n	8009192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800918c:	2301      	movs	r3, #1
 800918e:	617b      	str	r3, [r7, #20]
 8009190:	e007      	b.n	80091a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009192:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <prvInsertTimerInActiveList+0x80>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3304      	adds	r3, #4
 800919a:	4619      	mov	r1, r3
 800919c:	4610      	mov	r0, r2
 800919e:	f7fd fa58 	bl	8006652 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091a2:	697b      	ldr	r3, [r7, #20]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	2000cee4 	.word	0x2000cee4
 80091b0:	2000cee0 	.word	0x2000cee0

080091b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08e      	sub	sp, #56	; 0x38
 80091b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091ba:	e0ca      	b.n	8009352 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	da18      	bge.n	80091f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091c2:	1d3b      	adds	r3, r7, #4
 80091c4:	3304      	adds	r3, #4
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10a      	bne.n	80091e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	61fb      	str	r3, [r7, #28]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ea:	6850      	ldr	r0, [r2, #4]
 80091ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ee:	6892      	ldr	r2, [r2, #8]
 80091f0:	4611      	mov	r1, r2
 80091f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f2c0 80aa 	blt.w	8009350 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	3304      	adds	r3, #4
 800920c:	4618      	mov	r0, r3
 800920e:	f7fd fa59 	bl	80066c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009212:	463b      	mov	r3, r7
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff ff6b 	bl	80090f0 <prvSampleTimeNow>
 800921a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b09      	cmp	r3, #9
 8009220:	f200 8097 	bhi.w	8009352 <prvProcessReceivedCommands+0x19e>
 8009224:	a201      	add	r2, pc, #4	; (adr r2, 800922c <prvProcessReceivedCommands+0x78>)
 8009226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922a:	bf00      	nop
 800922c:	08009255 	.word	0x08009255
 8009230:	08009255 	.word	0x08009255
 8009234:	08009255 	.word	0x08009255
 8009238:	080092c9 	.word	0x080092c9
 800923c:	080092dd 	.word	0x080092dd
 8009240:	08009327 	.word	0x08009327
 8009244:	08009255 	.word	0x08009255
 8009248:	08009255 	.word	0x08009255
 800924c:	080092c9 	.word	0x080092c9
 8009250:	080092dd 	.word	0x080092dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800925a:	f043 0301 	orr.w	r3, r3, #1
 800925e:	b2da      	uxtb	r2, r3
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	18d1      	adds	r1, r2, r3
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009274:	f7ff ff5c 	bl	8009130 <prvInsertTimerInActiveList>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d069      	beq.n	8009352 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009284:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	d05e      	beq.n	8009352 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	441a      	add	r2, r3
 800929c:	2300      	movs	r3, #0
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2300      	movs	r3, #0
 80092a2:	2100      	movs	r1, #0
 80092a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a6:	f7ff fe05 	bl	8008eb4 <xTimerGenericCommand>
 80092aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d14f      	bne.n	8009352 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	61bb      	str	r3, [r7, #24]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80092da:	e03a      	b.n	8009352 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e2:	f043 0301 	orr.w	r3, r3, #1
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10a      	bne.n	8009312 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	617b      	str	r3, [r7, #20]
}
 800930e:	bf00      	nop
 8009310:	e7fe      	b.n	8009310 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	699a      	ldr	r2, [r3, #24]
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	18d1      	adds	r1, r2, r3
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009320:	f7ff ff06 	bl	8009130 <prvInsertTimerInActiveList>
					break;
 8009324:	e015      	b.n	8009352 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d103      	bne.n	800933c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009336:	f000 fc29 	bl	8009b8c <vPortFree>
 800933a:	e00a      	b.n	8009352 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009342:	f023 0301 	bic.w	r3, r3, #1
 8009346:	b2da      	uxtb	r2, r3
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800934e:	e000      	b.n	8009352 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009352:	4b08      	ldr	r3, [pc, #32]	; (8009374 <prvProcessReceivedCommands+0x1c0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	1d39      	adds	r1, r7, #4
 8009358:	2200      	movs	r2, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f7fd fd92 	bl	8006e84 <xQueueReceive>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	f47f af2a 	bne.w	80091bc <prvProcessReceivedCommands+0x8>
	}
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	3730      	adds	r7, #48	; 0x30
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	2000cee8 	.word	0x2000cee8

08009378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800937e:	e048      	b.n	8009412 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009380:	4b2d      	ldr	r3, [pc, #180]	; (8009438 <prvSwitchTimerLists+0xc0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938a:	4b2b      	ldr	r3, [pc, #172]	; (8009438 <prvSwitchTimerLists+0xc0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3304      	adds	r3, #4
 8009398:	4618      	mov	r0, r3
 800939a:	f7fd f993 	bl	80066c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d02e      	beq.n	8009412 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	4413      	add	r3, r2
 80093bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d90e      	bls.n	80093e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093d2:	4b19      	ldr	r3, [pc, #100]	; (8009438 <prvSwitchTimerLists+0xc0>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3304      	adds	r3, #4
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7fd f938 	bl	8006652 <vListInsert>
 80093e2:	e016      	b.n	8009412 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093e4:	2300      	movs	r3, #0
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2300      	movs	r3, #0
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	2100      	movs	r1, #0
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff fd60 	bl	8008eb4 <xTimerGenericCommand>
 80093f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	603b      	str	r3, [r7, #0]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009412:	4b09      	ldr	r3, [pc, #36]	; (8009438 <prvSwitchTimerLists+0xc0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1b1      	bne.n	8009380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <prvSwitchTimerLists+0xc0>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009422:	4b06      	ldr	r3, [pc, #24]	; (800943c <prvSwitchTimerLists+0xc4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a04      	ldr	r2, [pc, #16]	; (8009438 <prvSwitchTimerLists+0xc0>)
 8009428:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800942a:	4a04      	ldr	r2, [pc, #16]	; (800943c <prvSwitchTimerLists+0xc4>)
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	6013      	str	r3, [r2, #0]
}
 8009430:	bf00      	nop
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	2000cee0 	.word	0x2000cee0
 800943c:	2000cee4 	.word	0x2000cee4

08009440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009446:	f000 f965 	bl	8009714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800944a:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <prvCheckForValidListAndQueue+0x60>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d120      	bne.n	8009494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009452:	4814      	ldr	r0, [pc, #80]	; (80094a4 <prvCheckForValidListAndQueue+0x64>)
 8009454:	f7fd f8ac 	bl	80065b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009458:	4813      	ldr	r0, [pc, #76]	; (80094a8 <prvCheckForValidListAndQueue+0x68>)
 800945a:	f7fd f8a9 	bl	80065b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <prvCheckForValidListAndQueue+0x6c>)
 8009460:	4a10      	ldr	r2, [pc, #64]	; (80094a4 <prvCheckForValidListAndQueue+0x64>)
 8009462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009464:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <prvCheckForValidListAndQueue+0x70>)
 8009466:	4a10      	ldr	r2, [pc, #64]	; (80094a8 <prvCheckForValidListAndQueue+0x68>)
 8009468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800946a:	2300      	movs	r3, #0
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <prvCheckForValidListAndQueue+0x74>)
 8009470:	4a11      	ldr	r2, [pc, #68]	; (80094b8 <prvCheckForValidListAndQueue+0x78>)
 8009472:	2110      	movs	r1, #16
 8009474:	200a      	movs	r0, #10
 8009476:	f7fd f9b7 	bl	80067e8 <xQueueGenericCreateStatic>
 800947a:	4603      	mov	r3, r0
 800947c:	4a08      	ldr	r2, [pc, #32]	; (80094a0 <prvCheckForValidListAndQueue+0x60>)
 800947e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <prvCheckForValidListAndQueue+0x60>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009488:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <prvCheckForValidListAndQueue+0x60>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	490b      	ldr	r1, [pc, #44]	; (80094bc <prvCheckForValidListAndQueue+0x7c>)
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe f946 	bl	8007720 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009494:	f000 f96e 	bl	8009774 <vPortExitCritical>
}
 8009498:	bf00      	nop
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	2000cee8 	.word	0x2000cee8
 80094a4:	2000ceb8 	.word	0x2000ceb8
 80094a8:	2000cecc 	.word	0x2000cecc
 80094ac:	2000cee0 	.word	0x2000cee0
 80094b0:	2000cee4 	.word	0x2000cee4
 80094b4:	2000cf94 	.word	0x2000cf94
 80094b8:	2000cef4 	.word	0x2000cef4
 80094bc:	0800bf0c 	.word	0x0800bf0c

080094c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3b04      	subs	r3, #4
 80094d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3b04      	subs	r3, #4
 80094de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f023 0201 	bic.w	r2, r3, #1
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3b04      	subs	r3, #4
 80094ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094f0:	4a0c      	ldr	r2, [pc, #48]	; (8009524 <pxPortInitialiseStack+0x64>)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3b14      	subs	r3, #20
 80094fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3b04      	subs	r3, #4
 8009506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f06f 0202 	mvn.w	r2, #2
 800950e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	3b20      	subs	r3, #32
 8009514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009516:	68fb      	ldr	r3, [r7, #12]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	08009529 	.word	0x08009529

08009528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009532:	4b12      	ldr	r3, [pc, #72]	; (800957c <prvTaskExitError+0x54>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800953a:	d00a      	beq.n	8009552 <prvTaskExitError+0x2a>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	60fb      	str	r3, [r7, #12]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <prvTaskExitError+0x28>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	60bb      	str	r3, [r7, #8]
}
 8009564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009566:	bf00      	nop
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0fc      	beq.n	8009568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800956e:	bf00      	nop
 8009570:	bf00      	nop
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	2000000c 	.word	0x2000000c

08009580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <pxCurrentTCBConst2>)
 8009582:	6819      	ldr	r1, [r3, #0]
 8009584:	6808      	ldr	r0, [r1, #0]
 8009586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	f380 8809 	msr	PSP, r0
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f380 8811 	msr	BASEPRI, r0
 800959a:	4770      	bx	lr
 800959c:	f3af 8000 	nop.w

080095a0 <pxCurrentTCBConst2>:
 80095a0:	2000c9b8 	.word	0x2000c9b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop

080095a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095a8:	4808      	ldr	r0, [pc, #32]	; (80095cc <prvPortStartFirstTask+0x24>)
 80095aa:	6800      	ldr	r0, [r0, #0]
 80095ac:	6800      	ldr	r0, [r0, #0]
 80095ae:	f380 8808 	msr	MSP, r0
 80095b2:	f04f 0000 	mov.w	r0, #0
 80095b6:	f380 8814 	msr	CONTROL, r0
 80095ba:	b662      	cpsie	i
 80095bc:	b661      	cpsie	f
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	df00      	svc	0
 80095c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095ca:	bf00      	nop
 80095cc:	e000ed08 	.word	0xe000ed08

080095d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095d6:	4b46      	ldr	r3, [pc, #280]	; (80096f0 <xPortStartScheduler+0x120>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a46      	ldr	r2, [pc, #280]	; (80096f4 <xPortStartScheduler+0x124>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d10a      	bne.n	80095f6 <xPortStartScheduler+0x26>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	613b      	str	r3, [r7, #16]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095f6:	4b3e      	ldr	r3, [pc, #248]	; (80096f0 <xPortStartScheduler+0x120>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a3f      	ldr	r2, [pc, #252]	; (80096f8 <xPortStartScheduler+0x128>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d10a      	bne.n	8009616 <xPortStartScheduler+0x46>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	60fb      	str	r3, [r7, #12]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009616:	4b39      	ldr	r3, [pc, #228]	; (80096fc <xPortStartScheduler+0x12c>)
 8009618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	b2db      	uxtb	r3, r3
 8009620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	22ff      	movs	r2, #255	; 0xff
 8009626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009638:	b2da      	uxtb	r2, r3
 800963a:	4b31      	ldr	r3, [pc, #196]	; (8009700 <xPortStartScheduler+0x130>)
 800963c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800963e:	4b31      	ldr	r3, [pc, #196]	; (8009704 <xPortStartScheduler+0x134>)
 8009640:	2207      	movs	r2, #7
 8009642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009644:	e009      	b.n	800965a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009646:	4b2f      	ldr	r3, [pc, #188]	; (8009704 <xPortStartScheduler+0x134>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3b01      	subs	r3, #1
 800964c:	4a2d      	ldr	r2, [pc, #180]	; (8009704 <xPortStartScheduler+0x134>)
 800964e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	b2db      	uxtb	r3, r3
 8009658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009662:	2b80      	cmp	r3, #128	; 0x80
 8009664:	d0ef      	beq.n	8009646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009666:	4b27      	ldr	r3, [pc, #156]	; (8009704 <xPortStartScheduler+0x134>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f1c3 0307 	rsb	r3, r3, #7
 800966e:	2b04      	cmp	r3, #4
 8009670:	d00a      	beq.n	8009688 <xPortStartScheduler+0xb8>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	60bb      	str	r3, [r7, #8]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009688:	4b1e      	ldr	r3, [pc, #120]	; (8009704 <xPortStartScheduler+0x134>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	021b      	lsls	r3, r3, #8
 800968e:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <xPortStartScheduler+0x134>)
 8009690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009692:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <xPortStartScheduler+0x134>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800969a:	4a1a      	ldr	r2, [pc, #104]	; (8009704 <xPortStartScheduler+0x134>)
 800969c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096a6:	4b18      	ldr	r3, [pc, #96]	; (8009708 <xPortStartScheduler+0x138>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a17      	ldr	r2, [pc, #92]	; (8009708 <xPortStartScheduler+0x138>)
 80096ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096b2:	4b15      	ldr	r3, [pc, #84]	; (8009708 <xPortStartScheduler+0x138>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a14      	ldr	r2, [pc, #80]	; (8009708 <xPortStartScheduler+0x138>)
 80096b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096be:	f000 f8e5 	bl	800988c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096c2:	4b12      	ldr	r3, [pc, #72]	; (800970c <xPortStartScheduler+0x13c>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096c8:	f000 f904 	bl	80098d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096cc:	4b10      	ldr	r3, [pc, #64]	; (8009710 <xPortStartScheduler+0x140>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0f      	ldr	r2, [pc, #60]	; (8009710 <xPortStartScheduler+0x140>)
 80096d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096d8:	f7ff ff66 	bl	80095a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096dc:	f7fe fca6 	bl	800802c <vTaskSwitchContext>
	prvTaskExitError();
 80096e0:	f7ff ff22 	bl	8009528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	e000ed00 	.word	0xe000ed00
 80096f4:	410fc271 	.word	0x410fc271
 80096f8:	410fc270 	.word	0x410fc270
 80096fc:	e000e400 	.word	0xe000e400
 8009700:	2000cfe4 	.word	0x2000cfe4
 8009704:	2000cfe8 	.word	0x2000cfe8
 8009708:	e000ed20 	.word	0xe000ed20
 800970c:	2000000c 	.word	0x2000000c
 8009710:	e000ef34 	.word	0xe000ef34

08009714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	607b      	str	r3, [r7, #4]
}
 800972c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800972e:	4b0f      	ldr	r3, [pc, #60]	; (800976c <vPortEnterCritical+0x58>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3301      	adds	r3, #1
 8009734:	4a0d      	ldr	r2, [pc, #52]	; (800976c <vPortEnterCritical+0x58>)
 8009736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <vPortEnterCritical+0x58>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d10f      	bne.n	8009760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009740:	4b0b      	ldr	r3, [pc, #44]	; (8009770 <vPortEnterCritical+0x5c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <vPortEnterCritical+0x4c>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	603b      	str	r3, [r7, #0]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <vPortEnterCritical+0x4a>
	}
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	2000000c 	.word	0x2000000c
 8009770:	e000ed04 	.word	0xe000ed04

08009774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800977a:	4b12      	ldr	r3, [pc, #72]	; (80097c4 <vPortExitCritical+0x50>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <vPortExitCritical+0x24>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	607b      	str	r3, [r7, #4]
}
 8009794:	bf00      	nop
 8009796:	e7fe      	b.n	8009796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009798:	4b0a      	ldr	r3, [pc, #40]	; (80097c4 <vPortExitCritical+0x50>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3b01      	subs	r3, #1
 800979e:	4a09      	ldr	r2, [pc, #36]	; (80097c4 <vPortExitCritical+0x50>)
 80097a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097a2:	4b08      	ldr	r3, [pc, #32]	; (80097c4 <vPortExitCritical+0x50>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d105      	bne.n	80097b6 <vPortExitCritical+0x42>
 80097aa:	2300      	movs	r3, #0
 80097ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	f383 8811 	msr	BASEPRI, r3
}
 80097b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097b6:	bf00      	nop
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	2000000c 	.word	0x2000000c
	...

080097d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097d0:	f3ef 8009 	mrs	r0, PSP
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	4b15      	ldr	r3, [pc, #84]	; (8009830 <pxCurrentTCBConst>)
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	f01e 0f10 	tst.w	lr, #16
 80097e0:	bf08      	it	eq
 80097e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ea:	6010      	str	r0, [r2, #0]
 80097ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097f4:	f380 8811 	msr	BASEPRI, r0
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f7fe fc14 	bl	800802c <vTaskSwitchContext>
 8009804:	f04f 0000 	mov.w	r0, #0
 8009808:	f380 8811 	msr	BASEPRI, r0
 800980c:	bc09      	pop	{r0, r3}
 800980e:	6819      	ldr	r1, [r3, #0]
 8009810:	6808      	ldr	r0, [r1, #0]
 8009812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009816:	f01e 0f10 	tst.w	lr, #16
 800981a:	bf08      	it	eq
 800981c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009820:	f380 8809 	msr	PSP, r0
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	f3af 8000 	nop.w

08009830 <pxCurrentTCBConst>:
 8009830:	2000c9b8 	.word	0x2000c9b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop

08009838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	607b      	str	r3, [r7, #4]
}
 8009850:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8009852:	f001 fe6d 	bl	800b530 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009856:	f7fe fb2b 	bl	8007eb0 <xTaskIncrementTick>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d006      	beq.n	800986e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8009860:	f001 fec4 	bl	800b5ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009864:	4b08      	ldr	r3, [pc, #32]	; (8009888 <xPortSysTickHandler+0x50>)
 8009866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e001      	b.n	8009872 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800986e:	f001 fea1 	bl	800b5b4 <SEGGER_SYSVIEW_RecordExitISR>
 8009872:	2300      	movs	r3, #0
 8009874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	f383 8811 	msr	BASEPRI, r3
}
 800987c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009890:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <vPortSetupTimerInterrupt+0x34>)
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009896:	4b0b      	ldr	r3, [pc, #44]	; (80098c4 <vPortSetupTimerInterrupt+0x38>)
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <vPortSetupTimerInterrupt+0x3c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a0a      	ldr	r2, [pc, #40]	; (80098cc <vPortSetupTimerInterrupt+0x40>)
 80098a2:	fba2 2303 	umull	r2, r3, r2, r3
 80098a6:	099b      	lsrs	r3, r3, #6
 80098a8:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <vPortSetupTimerInterrupt+0x44>)
 80098aa:	3b01      	subs	r3, #1
 80098ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098ae:	4b04      	ldr	r3, [pc, #16]	; (80098c0 <vPortSetupTimerInterrupt+0x34>)
 80098b0:	2207      	movs	r2, #7
 80098b2:	601a      	str	r2, [r3, #0]
}
 80098b4:	bf00      	nop
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	e000e010 	.word	0xe000e010
 80098c4:	e000e018 	.word	0xe000e018
 80098c8:	20000000 	.word	0x20000000
 80098cc:	10624dd3 	.word	0x10624dd3
 80098d0:	e000e014 	.word	0xe000e014

080098d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098e4 <vPortEnableVFP+0x10>
 80098d8:	6801      	ldr	r1, [r0, #0]
 80098da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80098de:	6001      	str	r1, [r0, #0]
 80098e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098e2:	bf00      	nop
 80098e4:	e000ed88 	.word	0xe000ed88

080098e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ee:	f3ef 8305 	mrs	r3, IPSR
 80098f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b0f      	cmp	r3, #15
 80098f8:	d914      	bls.n	8009924 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098fa:	4a17      	ldr	r2, [pc, #92]	; (8009958 <vPortValidateInterruptPriority+0x70>)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4413      	add	r3, r2
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009904:	4b15      	ldr	r3, [pc, #84]	; (800995c <vPortValidateInterruptPriority+0x74>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	7afa      	ldrb	r2, [r7, #11]
 800990a:	429a      	cmp	r2, r3
 800990c:	d20a      	bcs.n	8009924 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	607b      	str	r3, [r7, #4]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009924:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <vPortValidateInterruptPriority+0x78>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800992c:	4b0d      	ldr	r3, [pc, #52]	; (8009964 <vPortValidateInterruptPriority+0x7c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d90a      	bls.n	800994a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	603b      	str	r3, [r7, #0]
}
 8009946:	bf00      	nop
 8009948:	e7fe      	b.n	8009948 <vPortValidateInterruptPriority+0x60>
	}
 800994a:	bf00      	nop
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	e000e3f0 	.word	0xe000e3f0
 800995c:	2000cfe4 	.word	0x2000cfe4
 8009960:	e000ed0c 	.word	0xe000ed0c
 8009964:	2000cfe8 	.word	0x2000cfe8

08009968 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800996e:	4b1f      	ldr	r3, [pc, #124]	; (80099ec <vSetVarulMaxPRIGROUPValue+0x84>)
 8009970:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	22ff      	movs	r2, #255	; 0xff
 8009976:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	b2db      	uxtb	r3, r3
 800997e:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009980:	4b1b      	ldr	r3, [pc, #108]	; (80099f0 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009982:	2207      	movs	r2, #7
 8009984:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009986:	e009      	b.n	800999c <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8009988:	4b19      	ldr	r3, [pc, #100]	; (80099f0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3b01      	subs	r3, #1
 800998e:	4a18      	ldr	r2, [pc, #96]	; (80099f0 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009990:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	b2db      	uxtb	r3, r3
 800999a:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a4:	2b80      	cmp	r3, #128	; 0x80
 80099a6:	d0ef      	beq.n	8009988 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099a8:	4b11      	ldr	r3, [pc, #68]	; (80099f0 <vSetVarulMaxPRIGROUPValue+0x88>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f1c3 0307 	rsb	r3, r3, #7
 80099b0:	2b04      	cmp	r3, #4
 80099b2:	d00a      	beq.n	80099ca <vSetVarulMaxPRIGROUPValue+0x62>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60bb      	str	r3, [r7, #8]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099ca:	4b09      	ldr	r3, [pc, #36]	; (80099f0 <vSetVarulMaxPRIGROUPValue+0x88>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	021b      	lsls	r3, r3, #8
 80099d0:	4a07      	ldr	r2, [pc, #28]	; (80099f0 <vSetVarulMaxPRIGROUPValue+0x88>)
 80099d2:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099d4:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <vSetVarulMaxPRIGROUPValue+0x88>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099dc:	4a04      	ldr	r2, [pc, #16]	; (80099f0 <vSetVarulMaxPRIGROUPValue+0x88>)
 80099de:	6013      	str	r3, [r2, #0]
}
 80099e0:	bf00      	nop
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	e000e400 	.word	0xe000e400
 80099f0:	2000cfe8 	.word	0x2000cfe8

080099f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08a      	sub	sp, #40	; 0x28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099fc:	2300      	movs	r3, #0
 80099fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a00:	f7fe f984 	bl	8007d0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a04:	4b5b      	ldr	r3, [pc, #364]	; (8009b74 <pvPortMalloc+0x180>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a0c:	f000 f920 	bl	8009c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a10:	4b59      	ldr	r3, [pc, #356]	; (8009b78 <pvPortMalloc+0x184>)
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4013      	ands	r3, r2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f040 8093 	bne.w	8009b44 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01d      	beq.n	8009a60 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a24:	2208      	movs	r2, #8
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4413      	add	r3, r2
 8009a2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f003 0307 	and.w	r3, r3, #7
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d014      	beq.n	8009a60 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f023 0307 	bic.w	r3, r3, #7
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <pvPortMalloc+0x6c>
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	617b      	str	r3, [r7, #20]
}
 8009a5c:	bf00      	nop
 8009a5e:	e7fe      	b.n	8009a5e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d06e      	beq.n	8009b44 <pvPortMalloc+0x150>
 8009a66:	4b45      	ldr	r3, [pc, #276]	; (8009b7c <pvPortMalloc+0x188>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d869      	bhi.n	8009b44 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a70:	4b43      	ldr	r3, [pc, #268]	; (8009b80 <pvPortMalloc+0x18c>)
 8009a72:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a74:	4b42      	ldr	r3, [pc, #264]	; (8009b80 <pvPortMalloc+0x18c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a7a:	e004      	b.n	8009a86 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d903      	bls.n	8009a98 <pvPortMalloc+0xa4>
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1f1      	bne.n	8009a7c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a98:	4b36      	ldr	r3, [pc, #216]	; (8009b74 <pvPortMalloc+0x180>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d050      	beq.n	8009b44 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2208      	movs	r2, #8
 8009aa8:	4413      	add	r3, r2
 8009aaa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	1ad2      	subs	r2, r2, r3
 8009abc:	2308      	movs	r3, #8
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d91f      	bls.n	8009b04 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4413      	add	r3, r2
 8009aca:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <pvPortMalloc+0xf8>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	613b      	str	r3, [r7, #16]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	1ad2      	subs	r2, r2, r3
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009afe:	69b8      	ldr	r0, [r7, #24]
 8009b00:	f000 f908 	bl	8009d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b04:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <pvPortMalloc+0x188>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	4a1b      	ldr	r2, [pc, #108]	; (8009b7c <pvPortMalloc+0x188>)
 8009b10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b12:	4b1a      	ldr	r3, [pc, #104]	; (8009b7c <pvPortMalloc+0x188>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	4b1b      	ldr	r3, [pc, #108]	; (8009b84 <pvPortMalloc+0x190>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d203      	bcs.n	8009b26 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b1e:	4b17      	ldr	r3, [pc, #92]	; (8009b7c <pvPortMalloc+0x188>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a18      	ldr	r2, [pc, #96]	; (8009b84 <pvPortMalloc+0x190>)
 8009b24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <pvPortMalloc+0x184>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <pvPortMalloc+0x194>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	4a11      	ldr	r2, [pc, #68]	; (8009b88 <pvPortMalloc+0x194>)
 8009b42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b44:	f7fe f8f0 	bl	8007d28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <pvPortMalloc+0x174>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	60fb      	str	r3, [r7, #12]
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <pvPortMalloc+0x172>
	return pvReturn;
 8009b68:	69fb      	ldr	r3, [r7, #28]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3728      	adds	r7, #40	; 0x28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20010bf4 	.word	0x20010bf4
 8009b78:	20010c08 	.word	0x20010c08
 8009b7c:	20010bf8 	.word	0x20010bf8
 8009b80:	20010bec 	.word	0x20010bec
 8009b84:	20010bfc 	.word	0x20010bfc
 8009b88:	20010c00 	.word	0x20010c00

08009b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d04d      	beq.n	8009c3a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b9e:	2308      	movs	r3, #8
 8009ba0:	425b      	negs	r3, r3
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	4b24      	ldr	r3, [pc, #144]	; (8009c44 <vPortFree+0xb8>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10a      	bne.n	8009bd0 <vPortFree+0x44>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	60fb      	str	r3, [r7, #12]
}
 8009bcc:	bf00      	nop
 8009bce:	e7fe      	b.n	8009bce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <vPortFree+0x62>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	60bb      	str	r3, [r7, #8]
}
 8009bea:	bf00      	nop
 8009bec:	e7fe      	b.n	8009bec <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	4b14      	ldr	r3, [pc, #80]	; (8009c44 <vPortFree+0xb8>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01e      	beq.n	8009c3a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d11a      	bne.n	8009c3a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	4b0e      	ldr	r3, [pc, #56]	; (8009c44 <vPortFree+0xb8>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	43db      	mvns	r3, r3
 8009c0e:	401a      	ands	r2, r3
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c14:	f7fe f87a 	bl	8007d0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <vPortFree+0xbc>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4413      	add	r3, r2
 8009c22:	4a09      	ldr	r2, [pc, #36]	; (8009c48 <vPortFree+0xbc>)
 8009c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c26:	6938      	ldr	r0, [r7, #16]
 8009c28:	f000 f874 	bl	8009d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c2c:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <vPortFree+0xc0>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	4a06      	ldr	r2, [pc, #24]	; (8009c4c <vPortFree+0xc0>)
 8009c34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c36:	f7fe f877 	bl	8007d28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c3a:	bf00      	nop
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20010c08 	.word	0x20010c08
 8009c48:	20010bf8 	.word	0x20010bf8
 8009c4c:	20010c04 	.word	0x20010c04

08009c50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c5c:	4b27      	ldr	r3, [pc, #156]	; (8009cfc <prvHeapInit+0xac>)
 8009c5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00c      	beq.n	8009c84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3307      	adds	r3, #7
 8009c6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0307 	bic.w	r3, r3, #7
 8009c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	4a1f      	ldr	r2, [pc, #124]	; (8009cfc <prvHeapInit+0xac>)
 8009c80:	4413      	add	r3, r2
 8009c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c88:	4a1d      	ldr	r2, [pc, #116]	; (8009d00 <prvHeapInit+0xb0>)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c8e:	4b1c      	ldr	r3, [pc, #112]	; (8009d00 <prvHeapInit+0xb0>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f023 0307 	bic.w	r3, r3, #7
 8009caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4a15      	ldr	r2, [pc, #84]	; (8009d04 <prvHeapInit+0xb4>)
 8009cb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cb2:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <prvHeapInit+0xb4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cba:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <prvHeapInit+0xb4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	1ad2      	subs	r2, r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009cd0:	4b0c      	ldr	r3, [pc, #48]	; (8009d04 <prvHeapInit+0xb4>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	4a0a      	ldr	r2, [pc, #40]	; (8009d08 <prvHeapInit+0xb8>)
 8009cde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4a09      	ldr	r2, [pc, #36]	; (8009d0c <prvHeapInit+0xbc>)
 8009ce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ce8:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <prvHeapInit+0xc0>)
 8009cea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009cee:	601a      	str	r2, [r3, #0]
}
 8009cf0:	bf00      	nop
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	2000cfec 	.word	0x2000cfec
 8009d00:	20010bec 	.word	0x20010bec
 8009d04:	20010bf4 	.word	0x20010bf4
 8009d08:	20010bfc 	.word	0x20010bfc
 8009d0c:	20010bf8 	.word	0x20010bf8
 8009d10:	20010c08 	.word	0x20010c08

08009d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d1c:	4b28      	ldr	r3, [pc, #160]	; (8009dc0 <prvInsertBlockIntoFreeList+0xac>)
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e002      	b.n	8009d28 <prvInsertBlockIntoFreeList+0x14>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d8f7      	bhi.n	8009d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d108      	bne.n	8009d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	441a      	add	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d118      	bne.n	8009d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4b15      	ldr	r3, [pc, #84]	; (8009dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d00d      	beq.n	8009d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	441a      	add	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	e008      	b.n	8009da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d92:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e003      	b.n	8009da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d002      	beq.n	8009db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009db2:	bf00      	nop
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20010bec 	.word	0x20010bec
 8009dc4:	20010bf4 	.word	0x20010bf4

08009dc8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009dcc:	4803      	ldr	r0, [pc, #12]	; (8009ddc <_cbSendSystemDesc+0x14>)
 8009dce:	f001 fb59 	bl	800b484 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick,I#56=VSYNC_Callback,I#72=SPI_RxCpltCallback");
 8009dd2:	4803      	ldr	r0, [pc, #12]	; (8009de0 <_cbSendSystemDesc+0x18>)
 8009dd4:	f001 fb56 	bl	800b484 <SEGGER_SYSVIEW_SendSysDesc>
}
 8009dd8:	bf00      	nop
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	0800bf14 	.word	0x0800bf14
 8009de0:	0800bf50 	.word	0x0800bf50

08009de4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009de8:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <SEGGER_SYSVIEW_Conf+0x20>)
 8009dea:	6818      	ldr	r0, [r3, #0]
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <SEGGER_SYSVIEW_Conf+0x20>)
 8009dee:	6819      	ldr	r1, [r3, #0]
 8009df0:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <SEGGER_SYSVIEW_Conf+0x24>)
 8009df2:	4a06      	ldr	r2, [pc, #24]	; (8009e0c <SEGGER_SYSVIEW_Conf+0x28>)
 8009df4:	f000 fe16 	bl	800aa24 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009df8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009dfc:	f000 fe56 	bl	800aaac <SEGGER_SYSVIEW_SetRAMBase>
}
 8009e00:	bf00      	nop
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	20000000 	.word	0x20000000
 8009e08:	08009dc9 	.word	0x08009dc9
 8009e0c:	0800c078 	.word	0x0800c078

08009e10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
 8009e1a:	e048      	b.n	8009eae <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8009e1c:	4929      	ldr	r1, [pc, #164]	; (8009ec4 <_cbSendTaskList+0xb4>)
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	440b      	add	r3, r1
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fe fb57 	bl	80084e0 <uxTaskGetStackHighWaterMark>
 8009e32:	4601      	mov	r1, r0
 8009e34:	4823      	ldr	r0, [pc, #140]	; (8009ec4 <_cbSendTaskList+0xb4>)
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4403      	add	r3, r0
 8009e42:	3310      	adds	r3, #16
 8009e44:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009e46:	491f      	ldr	r1, [pc, #124]	; (8009ec4 <_cbSendTaskList+0xb4>)
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	440b      	add	r3, r1
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	491b      	ldr	r1, [pc, #108]	; (8009ec4 <_cbSendTaskList+0xb4>)
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	440b      	add	r3, r1
 8009e64:	3304      	adds	r3, #4
 8009e66:	6819      	ldr	r1, [r3, #0]
 8009e68:	4c16      	ldr	r4, [pc, #88]	; (8009ec4 <_cbSendTaskList+0xb4>)
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4423      	add	r3, r4
 8009e76:	3308      	adds	r3, #8
 8009e78:	681c      	ldr	r4, [r3, #0]
 8009e7a:	4d12      	ldr	r5, [pc, #72]	; (8009ec4 <_cbSendTaskList+0xb4>)
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	442b      	add	r3, r5
 8009e88:	330c      	adds	r3, #12
 8009e8a:	681d      	ldr	r5, [r3, #0]
 8009e8c:	4e0d      	ldr	r6, [pc, #52]	; (8009ec4 <_cbSendTaskList+0xb4>)
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	4613      	mov	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4433      	add	r3, r6
 8009e9a:	3310      	adds	r3, #16
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	462b      	mov	r3, r5
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	f000 f8be 	bl	800a024 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	607b      	str	r3, [r7, #4]
 8009eae:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <_cbSendTaskList+0xb8>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d3b1      	bcc.n	8009e1c <_cbSendTaskList+0xc>
  }
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20010c0c 	.word	0x20010c0c
 8009ec8:	20010cac 	.word	0x20010cac

08009ecc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8009ed4:	f7fd ffda 	bl	8007e8c <xTaskGetTickCountFromISR>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2200      	movs	r2, #0
 8009edc:	469a      	mov	sl, r3
 8009ede:	4693      	mov	fp, r2
 8009ee0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	f04f 0a00 	mov.w	sl, #0
 8009ef0:	f04f 0b00 	mov.w	fp, #0
 8009ef4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009ef8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009efc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009f00:	4652      	mov	r2, sl
 8009f02:	465b      	mov	r3, fp
 8009f04:	1a14      	subs	r4, r2, r0
 8009f06:	eb63 0501 	sbc.w	r5, r3, r1
 8009f0a:	f04f 0200 	mov.w	r2, #0
 8009f0e:	f04f 0300 	mov.w	r3, #0
 8009f12:	00ab      	lsls	r3, r5, #2
 8009f14:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009f18:	00a2      	lsls	r2, r4, #2
 8009f1a:	4614      	mov	r4, r2
 8009f1c:	461d      	mov	r5, r3
 8009f1e:	eb14 0800 	adds.w	r8, r4, r0
 8009f22:	eb45 0901 	adc.w	r9, r5, r1
 8009f26:	f04f 0200 	mov.w	r2, #0
 8009f2a:	f04f 0300 	mov.w	r3, #0
 8009f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f3a:	4690      	mov	r8, r2
 8009f3c:	4699      	mov	r9, r3
 8009f3e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009f42:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009f46:	4610      	mov	r0, r2
 8009f48:	4619      	mov	r1, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009f54 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af02      	add	r7, sp, #8
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009f62:	2205      	movs	r2, #5
 8009f64:	492b      	ldr	r1, [pc, #172]	; (800a014 <SYSVIEW_AddTask+0xc0>)
 8009f66:	68b8      	ldr	r0, [r7, #8]
 8009f68:	f001 fe22 	bl	800bbb0 <memcmp>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d04b      	beq.n	800a00a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8009f72:	4b29      	ldr	r3, [pc, #164]	; (800a018 <SYSVIEW_AddTask+0xc4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b07      	cmp	r3, #7
 8009f78:	d903      	bls.n	8009f82 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009f7a:	4828      	ldr	r0, [pc, #160]	; (800a01c <SYSVIEW_AddTask+0xc8>)
 8009f7c:	f001 fd80 	bl	800ba80 <SEGGER_SYSVIEW_Warn>
    return;
 8009f80:	e044      	b.n	800a00c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8009f82:	4b25      	ldr	r3, [pc, #148]	; (800a018 <SYSVIEW_AddTask+0xc4>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	4926      	ldr	r1, [pc, #152]	; (800a020 <SYSVIEW_AddTask+0xcc>)
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8009f96:	4b20      	ldr	r3, [pc, #128]	; (800a018 <SYSVIEW_AddTask+0xc4>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	4921      	ldr	r1, [pc, #132]	; (800a020 <SYSVIEW_AddTask+0xcc>)
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009fac:	4b1a      	ldr	r3, [pc, #104]	; (800a018 <SYSVIEW_AddTask+0xc4>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	491b      	ldr	r1, [pc, #108]	; (800a020 <SYSVIEW_AddTask+0xcc>)
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	440b      	add	r3, r1
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8009fc2:	4b15      	ldr	r3, [pc, #84]	; (800a018 <SYSVIEW_AddTask+0xc4>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	4916      	ldr	r1, [pc, #88]	; (800a020 <SYSVIEW_AddTask+0xcc>)
 8009fc8:	4613      	mov	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	440b      	add	r3, r1
 8009fd2:	330c      	adds	r3, #12
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009fd8:	4b0f      	ldr	r3, [pc, #60]	; (800a018 <SYSVIEW_AddTask+0xc4>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	4910      	ldr	r1, [pc, #64]	; (800a020 <SYSVIEW_AddTask+0xcc>)
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	3310      	adds	r3, #16
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <SYSVIEW_AddTask+0xc4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	4a08      	ldr	r2, [pc, #32]	; (800a018 <SYSVIEW_AddTask+0xc4>)
 8009ff6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	68b9      	ldr	r1, [r7, #8]
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 f80e 	bl	800a024 <SYSVIEW_SendTaskInfo>
 800a008:	e000      	b.n	800a00c <SYSVIEW_AddTask+0xb8>
    return;
 800a00a:	bf00      	nop

}
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	0800bf8c 	.word	0x0800bf8c
 800a018:	20010cac 	.word	0x20010cac
 800a01c:	0800bf94 	.word	0x0800bf94
 800a020:	20010c0c 	.word	0x20010c0c

0800a024 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800a024:	b580      	push	{r7, lr}
 800a026:	b08a      	sub	sp, #40	; 0x28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800a032:	f107 0314 	add.w	r3, r7, #20
 800a036:	2214      	movs	r2, #20
 800a038:	2100      	movs	r1, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 fdd6 	bl	800bbec <memset>
  TaskInfo.TaskID     = TaskID;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800a054:	f107 0314 	add.w	r3, r7, #20
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 f91b 	bl	800b294 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800a05e:	bf00      	nop
 800a060:	3728      	adds	r7, #40	; 0x28
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
	...

0800a068 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800a06e:	4b26      	ldr	r3, [pc, #152]	; (800a108 <_DoInit+0xa0>)
 800a070:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800a072:	22a8      	movs	r2, #168	; 0xa8
 800a074:	2100      	movs	r1, #0
 800a076:	6838      	ldr	r0, [r7, #0]
 800a078:	f001 fdb8 	bl	800bbec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	2203      	movs	r2, #3
 800a080:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2203      	movs	r2, #3
 800a086:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	4a20      	ldr	r2, [pc, #128]	; (800a10c <_DoInit+0xa4>)
 800a08c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	4a1f      	ldr	r2, [pc, #124]	; (800a110 <_DoInit+0xa8>)
 800a092:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a09a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	4a16      	ldr	r2, [pc, #88]	; (800a10c <_DoInit+0xa4>)
 800a0b2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	4a17      	ldr	r2, [pc, #92]	; (800a114 <_DoInit+0xac>)
 800a0b8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2210      	movs	r2, #16
 800a0be:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800a0d2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	607b      	str	r3, [r7, #4]
 800a0da:	e00c      	b.n	800a0f6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f1c3 030f 	rsb	r3, r3, #15
 800a0e2:	4a0d      	ldr	r2, [pc, #52]	; (800a118 <_DoInit+0xb0>)
 800a0e4:	5cd1      	ldrb	r1, [r2, r3]
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	460a      	mov	r2, r1
 800a0ee:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	607b      	str	r3, [r7, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b0f      	cmp	r3, #15
 800a0fa:	d9ef      	bls.n	800a0dc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800a0fc:	f3bf 8f5f 	dmb	sy
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20010cb0 	.word	0x20010cb0
 800a10c:	0800bfe4 	.word	0x0800bfe4
 800a110:	20010d58 	.word	0x20010d58
 800a114:	20011158 	.word	0x20011158
 800a118:	0800c080 	.word	0x0800c080

0800a11c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08c      	sub	sp, #48	; 0x30
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800a128:	4b3e      	ldr	r3, [pc, #248]	; (800a224 <SEGGER_RTT_ReadNoLock+0x108>)
 800a12a:	623b      	str	r3, [r7, #32]
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <SEGGER_RTT_ReadNoLock+0x1e>
 800a136:	f7ff ff97 	bl	800a068 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	4613      	mov	r3, r2
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	4413      	add	r3, r2
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	3360      	adds	r3, #96	; 0x60
 800a146:	4a37      	ldr	r2, [pc, #220]	; (800a224 <SEGGER_RTT_ReadNoLock+0x108>)
 800a148:	4413      	add	r3, r2
 800a14a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800a15c:	2300      	movs	r3, #0
 800a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800a160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	429a      	cmp	r2, r3
 800a166:	d92b      	bls.n	800a1c0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4293      	cmp	r3, r2
 800a178:	bf28      	it	cs
 800a17a:	4613      	movcs	r3, r2
 800a17c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	4413      	add	r3, r2
 800a186:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	6939      	ldr	r1, [r7, #16]
 800a18c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a18e:	f001 fd1f 	bl	800bbd0 <memcpy>
    NumBytesRead += NumBytesRem;
 800a192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	4413      	add	r3, r2
 800a198:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800a19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	4413      	add	r3, r2
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a1aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d101      	bne.n	800a1c0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	bf28      	it	cs
 800a1d0:	4613      	movcs	r3, r2
 800a1d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d019      	beq.n	800a20e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e0:	4413      	add	r3, r2
 800a1e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	6939      	ldr	r1, [r7, #16]
 800a1e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1ea:	f001 fcf1 	bl	800bbd0 <memcpy>
    NumBytesRead += NumBytesRem;
 800a1ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	4413      	add	r3, r2
 800a20c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a218:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3730      	adds	r7, #48	; 0x30
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20010cb0 	.word	0x20010cb0

0800a228 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08c      	sub	sp, #48	; 0x30
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	62fb      	str	r3, [r7, #44]	; 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	4613      	mov	r3, r2
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	4413      	add	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	4a38      	ldr	r2, [pc, #224]	; (800a328 <SEGGER_RTT_WriteSkipNoLock+0x100>)
 800a246:	4413      	add	r3, r2
 800a248:	62bb      	str	r3, [r7, #40]	; 0x28
  RdOff = pRing->RdOff;
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
  WrOff = pRing->WrOff;
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	623b      	str	r3, [r7, #32]
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	4413      	add	r3, r2
 800a25e:	61fb      	str	r3, [r7, #28]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 800a260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	429a      	cmp	r2, r3
 800a266:	d842      	bhi.n	800a2ee <SEGGER_RTT_WriteSkipNoLock+0xc6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800a268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	3b01      	subs	r3, #1
 800a272:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 1)?
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d30d      	bcc.n	800a298 <SEGGER_RTT_WriteSkipNoLock+0x70>
      memcpy((void*)pDst, pData, NumBytes);
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a280:	69f8      	ldr	r0, [r7, #28]
 800a282:	f001 fca5 	bl	800bbd0 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a286:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 800a28a:	6a3a      	ldr	r2, [r7, #32]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	441a      	add	r2, r3
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	60da      	str	r2, [r3, #12]
      return 1;
 800a294:	2301      	movs	r3, #1
 800a296:	e042      	b.n	800a31e <SEGGER_RTT_WriteSkipNoLock+0xf6>
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	4413      	add	r3, r2
 800a29e:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d339      	bcc.n	800a31c <SEGGER_RTT_WriteSkipNoLock+0xf4>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	6a3b      	ldr	r3, [r7, #32]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2b6:	69f8      	ldr	r0, [r7, #28]
 800a2b8:	f001 fc8a 	bl	800bbd0 <memcpy>
      NumBytes -= Rem;
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	607b      	str	r3, [r7, #4]
      // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
      // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
      // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <SEGGER_RTT_WriteSkipNoLock+0xb8>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800a2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	61fb      	str	r3, [r7, #28]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 800a2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	69f8      	ldr	r0, [r7, #28]
 800a2dc:	f001 fc78 	bl	800bbd0 <memcpy>
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a2e0:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = NumBytes;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	60da      	str	r2, [r3, #12]
      return 1;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e017      	b.n	800a31e <SEGGER_RTT_WriteSkipNoLock+0xf6>
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d30d      	bcc.n	800a31c <SEGGER_RTT_WriteSkipNoLock+0xf4>
      memcpy((void*)pDst, pData, NumBytes);
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a304:	69f8      	ldr	r0, [r7, #28]
 800a306:	f001 fc63 	bl	800bbd0 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a30a:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 800a30e:	6a3a      	ldr	r2, [r7, #32]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	441a      	add	r2, r3
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	60da      	str	r2, [r3, #12]
      return 1;
 800a318:	2301      	movs	r3, #1
 800a31a:	e000      	b.n	800a31e <SEGGER_RTT_WriteSkipNoLock+0xf6>
    }
  }
  return 0;     // No space in buffer
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3730      	adds	r7, #48	; 0x30
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20010cb0 	.word	0x20010cb0

0800a32c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800a33a:	4b3d      	ldr	r3, [pc, #244]	; (800a430 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a33c:	61bb      	str	r3, [r7, #24]
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <SEGGER_RTT_AllocUpBuffer+0x20>
 800a348:	f7ff fe8e 	bl	800a068 <_DoInit>
  SEGGER_RTT_LOCK();
 800a34c:	f3ef 8311 	mrs	r3, BASEPRI
 800a350:	f04f 0120 	mov.w	r1, #32
 800a354:	f381 8811 	msr	BASEPRI, r1
 800a358:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a35a:	4b35      	ldr	r3, [pc, #212]	; (800a430 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a35c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800a362:	6939      	ldr	r1, [r7, #16]
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	4613      	mov	r3, r2
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	4413      	add	r3, r2
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	440b      	add	r3, r1
 800a372:	3304      	adds	r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d008      	beq.n	800a38c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	3301      	adds	r3, #1
 800a37e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	69fa      	ldr	r2, [r7, #28]
 800a386:	429a      	cmp	r2, r3
 800a388:	dbeb      	blt.n	800a362 <SEGGER_RTT_AllocUpBuffer+0x36>
 800a38a:	e000      	b.n	800a38e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800a38c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	69fa      	ldr	r2, [r7, #28]
 800a394:	429a      	cmp	r2, r3
 800a396:	da3f      	bge.n	800a418 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800a398:	6939      	ldr	r1, [r7, #16]
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	4613      	mov	r3, r2
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	4413      	add	r3, r2
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	440b      	add	r3, r1
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800a3ac:	6939      	ldr	r1, [r7, #16]
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	440b      	add	r3, r1
 800a3bc:	3304      	adds	r3, #4
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800a3c2:	6939      	ldr	r1, [r7, #16]
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	4413      	add	r3, r2
 800a3cc:	00db      	lsls	r3, r3, #3
 800a3ce:	440b      	add	r3, r1
 800a3d0:	3320      	adds	r3, #32
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800a3d6:	6939      	ldr	r1, [r7, #16]
 800a3d8:	69fa      	ldr	r2, [r7, #28]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4413      	add	r3, r2
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3328      	adds	r3, #40	; 0x28
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800a3ea:	6939      	ldr	r1, [r7, #16]
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	4413      	add	r3, r2
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3324      	adds	r3, #36	; 0x24
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800a3fe:	6939      	ldr	r1, [r7, #16]
 800a400:	69fa      	ldr	r2, [r7, #28]
 800a402:	4613      	mov	r3, r2
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	4413      	add	r3, r2
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	440b      	add	r3, r1
 800a40c:	332c      	adds	r3, #44	; 0x2c
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a412:	f3bf 8f5f 	dmb	sy
 800a416:	e002      	b.n	800a41e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800a418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a41c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800a424:	69fb      	ldr	r3, [r7, #28]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3720      	adds	r7, #32
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20010cb0 	.word	0x20010cb0

0800a434 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a434:	b580      	push	{r7, lr}
 800a436:	b08a      	sub	sp, #40	; 0x28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800a442:	4b21      	ldr	r3, [pc, #132]	; (800a4c8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800a444:	623b      	str	r3, [r7, #32]
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d101      	bne.n	800a454 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800a450:	f7ff fe0a 	bl	800a068 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a454:	4b1c      	ldr	r3, [pc, #112]	; (800a4c8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800a456:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d82c      	bhi.n	800a4b8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800a45e:	f3ef 8311 	mrs	r3, BASEPRI
 800a462:	f04f 0120 	mov.w	r1, #32
 800a466:	f381 8811 	msr	BASEPRI, r1
 800a46a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4613      	mov	r3, r2
 800a470:	005b      	lsls	r3, r3, #1
 800a472:	4413      	add	r3, r2
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	3360      	adds	r3, #96	; 0x60
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00e      	beq.n	800a4a2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2200      	movs	r2, #0
 800a49a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a4a8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b6:	e002      	b.n	800a4be <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800a4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3728      	adds	r7, #40	; 0x28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20010cb0 	.word	0x20010cb0

0800a4cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800a4cc:	b480      	push	{r7}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00f      	beq.n	800a502 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800a4e2:	e002      	b.n	800a4ea <_EncodeStr+0x1e>
      Len++;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1f6      	bne.n	800a4e4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d901      	bls.n	800a502 <_EncodeStr+0x36>
      Len = Limit;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2bfe      	cmp	r3, #254	; 0xfe
 800a506:	d806      	bhi.n	800a516 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	60fa      	str	r2, [r7, #12]
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	701a      	strb	r2, [r3, #0]
 800a514:	e011      	b.n	800a53a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	60fa      	str	r2, [r7, #12]
 800a51c:	22ff      	movs	r2, #255	; 0xff
 800a51e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	60fa      	str	r2, [r7, #12]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	b2d2      	uxtb	r2, r2
 800a52a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	0a19      	lsrs	r1, r3, #8
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	60fa      	str	r2, [r7, #12]
 800a536:	b2ca      	uxtb	r2, r1
 800a538:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800a53e:	e00a      	b.n	800a556 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	1c53      	adds	r3, r2, #1
 800a544:	60bb      	str	r3, [r7, #8]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	1c59      	adds	r1, r3, #1
 800a54a:	60f9      	str	r1, [r7, #12]
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	701a      	strb	r2, [r3, #0]
    n++;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	3301      	adds	r3, #1
 800a554:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d3f0      	bcc.n	800a540 <_EncodeStr+0x74>
  }
  return pPayload;
 800a55e:	68fb      	ldr	r3, [r7, #12]
}
 800a560:	4618      	mov	r0, r3
 800a562:	371c      	adds	r7, #28
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3307      	adds	r3, #7
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a58a:	4b35      	ldr	r3, [pc, #212]	; (800a660 <_HandleIncomingPacket+0xdc>)
 800a58c:	7e1b      	ldrb	r3, [r3, #24]
 800a58e:	4618      	mov	r0, r3
 800a590:	1cfb      	adds	r3, r7, #3
 800a592:	2201      	movs	r2, #1
 800a594:	4619      	mov	r1, r3
 800a596:	f7ff fdc1 	bl	800a11c <SEGGER_RTT_ReadNoLock>
 800a59a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d052      	beq.n	800a648 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	2b80      	cmp	r3, #128	; 0x80
 800a5a6:	d031      	beq.n	800a60c <_HandleIncomingPacket+0x88>
 800a5a8:	2b80      	cmp	r3, #128	; 0x80
 800a5aa:	dc40      	bgt.n	800a62e <_HandleIncomingPacket+0xaa>
 800a5ac:	2b07      	cmp	r3, #7
 800a5ae:	dc15      	bgt.n	800a5dc <_HandleIncomingPacket+0x58>
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dd3c      	ble.n	800a62e <_HandleIncomingPacket+0xaa>
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	2b06      	cmp	r3, #6
 800a5b8:	d839      	bhi.n	800a62e <_HandleIncomingPacket+0xaa>
 800a5ba:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <_HandleIncomingPacket+0x3c>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a5e3 	.word	0x0800a5e3
 800a5c4:	0800a5e9 	.word	0x0800a5e9
 800a5c8:	0800a5ef 	.word	0x0800a5ef
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5fb 	.word	0x0800a5fb
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	0800a607 	.word	0x0800a607
 800a5dc:	2b7f      	cmp	r3, #127	; 0x7f
 800a5de:	d035      	beq.n	800a64c <_HandleIncomingPacket+0xc8>
 800a5e0:	e025      	b.n	800a62e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800a5e2:	f000 fcdd 	bl	800afa0 <SEGGER_SYSVIEW_Start>
      break;
 800a5e6:	e036      	b.n	800a656 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800a5e8:	f000 fd94 	bl	800b114 <SEGGER_SYSVIEW_Stop>
      break;
 800a5ec:	e033      	b.n	800a656 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800a5ee:	f000 ff6d 	bl	800b4cc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800a5f2:	e030      	b.n	800a656 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800a5f4:	f000 ff32 	bl	800b45c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800a5f8:	e02d      	b.n	800a656 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800a5fa:	f000 fdb1 	bl	800b160 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800a5fe:	e02a      	b.n	800a656 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800a600:	f001 fa00 	bl	800ba04 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800a604:	e027      	b.n	800a656 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800a606:	f001 f9df 	bl	800b9c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800a60a:	e024      	b.n	800a656 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a60c:	4b14      	ldr	r3, [pc, #80]	; (800a660 <_HandleIncomingPacket+0xdc>)
 800a60e:	7e1b      	ldrb	r3, [r3, #24]
 800a610:	4618      	mov	r0, r3
 800a612:	1cfb      	adds	r3, r7, #3
 800a614:	2201      	movs	r2, #1
 800a616:	4619      	mov	r1, r3
 800a618:	f7ff fd80 	bl	800a11c <SEGGER_RTT_ReadNoLock>
 800a61c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d015      	beq.n	800a650 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800a624:	78fb      	ldrb	r3, [r7, #3]
 800a626:	4618      	mov	r0, r3
 800a628:	f001 f94e 	bl	800b8c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800a62c:	e010      	b.n	800a650 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800a62e:	78fb      	ldrb	r3, [r7, #3]
 800a630:	b25b      	sxtb	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	da0e      	bge.n	800a654 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a636:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <_HandleIncomingPacket+0xdc>)
 800a638:	7e1b      	ldrb	r3, [r3, #24]
 800a63a:	4618      	mov	r0, r3
 800a63c:	1cfb      	adds	r3, r7, #3
 800a63e:	2201      	movs	r2, #1
 800a640:	4619      	mov	r1, r3
 800a642:	f7ff fd6b 	bl	800a11c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800a646:	e005      	b.n	800a654 <_HandleIncomingPacket+0xd0>
    }
  }
 800a648:	bf00      	nop
 800a64a:	e004      	b.n	800a656 <_HandleIncomingPacket+0xd2>
      break;
 800a64c:	bf00      	nop
 800a64e:	e002      	b.n	800a656 <_HandleIncomingPacket+0xd2>
      break;
 800a650:	bf00      	nop
 800a652:	e000      	b.n	800a656 <_HandleIncomingPacket+0xd2>
      break;
 800a654:	bf00      	nop
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20011570 	.word	0x20011570

0800a664 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800a664:	b580      	push	{r7, lr}
 800a666:	b08c      	sub	sp, #48	; 0x30
 800a668:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800a66a:	2301      	movs	r3, #1
 800a66c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800a66e:	1d3b      	adds	r3, r7, #4
 800a670:	3301      	adds	r3, #1
 800a672:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a678:	4b31      	ldr	r3, [pc, #196]	; (800a740 <_TrySendOverflowPacket+0xdc>)
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a67e:	e00b      	b.n	800a698 <_TrySendOverflowPacket+0x34>
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	b2da      	uxtb	r2, r3
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	1c59      	adds	r1, r3, #1
 800a688:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a68a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	09db      	lsrs	r3, r3, #7
 800a696:	62bb      	str	r3, [r7, #40]	; 0x28
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	2b7f      	cmp	r3, #127	; 0x7f
 800a69c:	d8f0      	bhi.n	800a680 <_TrySendOverflowPacket+0x1c>
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a6ae:	4b25      	ldr	r3, [pc, #148]	; (800a744 <_TrySendOverflowPacket+0xe0>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a6b4:	4b22      	ldr	r3, [pc, #136]	; (800a740 <_TrySendOverflowPacket+0xdc>)
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	e00b      	b.n	800a6e0 <_TrySendOverflowPacket+0x7c>
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	1c59      	adds	r1, r3, #1
 800a6d0:	6279      	str	r1, [r7, #36]	; 0x24
 800a6d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a6d6:	b2d2      	uxtb	r2, r2
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	09db      	lsrs	r3, r3, #7
 800a6de:	623b      	str	r3, [r7, #32]
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	2b7f      	cmp	r3, #127	; 0x7f
 800a6e4:	d8f0      	bhi.n	800a6c8 <_TrySendOverflowPacket+0x64>
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	627a      	str	r2, [r7, #36]	; 0x24
 800a6ec:	6a3a      	ldr	r2, [r7, #32]
 800a6ee:	b2d2      	uxtb	r2, r2
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800a6f6:	4b12      	ldr	r3, [pc, #72]	; (800a740 <_TrySendOverflowPacket+0xdc>)
 800a6f8:	785b      	ldrb	r3, [r3, #1]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	1d3b      	adds	r3, r7, #4
 800a6fe:	69fa      	ldr	r2, [r7, #28]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	461a      	mov	r2, r3
 800a704:	1d3b      	adds	r3, r7, #4
 800a706:	4619      	mov	r1, r3
 800a708:	f7ff fd8e 	bl	800a228 <SEGGER_RTT_WriteSkipNoLock>
 800a70c:	4603      	mov	r3, r0
 800a70e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a716:	4a0a      	ldr	r2, [pc, #40]	; (800a740 <_TrySendOverflowPacket+0xdc>)
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800a71c:	4b08      	ldr	r3, [pc, #32]	; (800a740 <_TrySendOverflowPacket+0xdc>)
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	3b01      	subs	r3, #1
 800a722:	b2da      	uxtb	r2, r3
 800a724:	4b06      	ldr	r3, [pc, #24]	; (800a740 <_TrySendOverflowPacket+0xdc>)
 800a726:	701a      	strb	r2, [r3, #0]
 800a728:	e004      	b.n	800a734 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800a72a:	4b05      	ldr	r3, [pc, #20]	; (800a740 <_TrySendOverflowPacket+0xdc>)
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	3301      	adds	r3, #1
 800a730:	4a03      	ldr	r2, [pc, #12]	; (800a740 <_TrySendOverflowPacket+0xdc>)
 800a732:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800a734:	693b      	ldr	r3, [r7, #16]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3730      	adds	r7, #48	; 0x30
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20011570 	.word	0x20011570
 800a744:	e0001004 	.word	0xe0001004

0800a748 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08a      	sub	sp, #40	; 0x28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800a754:	4b98      	ldr	r3, [pc, #608]	; (800a9b8 <_SendPacket+0x270>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d010      	beq.n	800a77e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800a75c:	4b96      	ldr	r3, [pc, #600]	; (800a9b8 <_SendPacket+0x270>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 812d 	beq.w	800a9c0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800a766:	4b94      	ldr	r3, [pc, #592]	; (800a9b8 <_SendPacket+0x270>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d109      	bne.n	800a782 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800a76e:	f7ff ff79 	bl	800a664 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800a772:	4b91      	ldr	r3, [pc, #580]	; (800a9b8 <_SendPacket+0x270>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b01      	cmp	r3, #1
 800a778:	f040 8124 	bne.w	800a9c4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800a77c:	e001      	b.n	800a782 <_SendPacket+0x3a>
    goto Send;
 800a77e:	bf00      	nop
 800a780:	e000      	b.n	800a784 <_SendPacket+0x3c>
Send:
 800a782:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b1f      	cmp	r3, #31
 800a788:	d809      	bhi.n	800a79e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800a78a:	4b8b      	ldr	r3, [pc, #556]	; (800a9b8 <_SendPacket+0x270>)
 800a78c:	69da      	ldr	r2, [r3, #28]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	fa22 f303 	lsr.w	r3, r2, r3
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 8115 	bne.w	800a9c8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b17      	cmp	r3, #23
 800a7a2:	d807      	bhi.n	800a7b4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	701a      	strb	r2, [r3, #0]
 800a7b2:	e0c4      	b.n	800a93e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	2b7f      	cmp	r3, #127	; 0x7f
 800a7c0:	d912      	bls.n	800a7e8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	09da      	lsrs	r2, r3, #7
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	b2d2      	uxtb	r2, r2
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	3a01      	subs	r2, #1
 800a7da:	60fa      	str	r2, [r7, #12]
 800a7dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	701a      	strb	r2, [r3, #0]
 800a7e6:	e006      	b.n	800a7f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	60fb      	str	r3, [r7, #12]
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b7e      	cmp	r3, #126	; 0x7e
 800a7fa:	d807      	bhi.n	800a80c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	60fb      	str	r3, [r7, #12]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	b2da      	uxtb	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	701a      	strb	r2, [r3, #0]
 800a80a:	e098      	b.n	800a93e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a812:	d212      	bcs.n	800a83a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	09da      	lsrs	r2, r3, #7
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3b01      	subs	r3, #1
 800a81c:	60fb      	str	r3, [r7, #12]
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	3a01      	subs	r2, #1
 800a82c:	60fa      	str	r2, [r7, #12]
 800a82e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a832:	b2da      	uxtb	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	701a      	strb	r2, [r3, #0]
 800a838:	e081      	b.n	800a93e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a840:	d21d      	bcs.n	800a87e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	0b9a      	lsrs	r2, r3, #14
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3b01      	subs	r3, #1
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	b2d2      	uxtb	r2, r2
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	09db      	lsrs	r3, r3, #7
 800a856:	b2db      	uxtb	r3, r3
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	3a01      	subs	r2, #1
 800a85c:	60fa      	str	r2, [r7, #12]
 800a85e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a862:	b2da      	uxtb	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	3a01      	subs	r2, #1
 800a870:	60fa      	str	r2, [r7, #12]
 800a872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a876:	b2da      	uxtb	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	701a      	strb	r2, [r3, #0]
 800a87c:	e05f      	b.n	800a93e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a884:	d228      	bcs.n	800a8d8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	0d5a      	lsrs	r2, r3, #21
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	b2d2      	uxtb	r2, r2
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	0b9b      	lsrs	r3, r3, #14
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	3a01      	subs	r2, #1
 800a8a0:	60fa      	str	r2, [r7, #12]
 800a8a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	09db      	lsrs	r3, r3, #7
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	3a01      	subs	r2, #1
 800a8b6:	60fa      	str	r2, [r7, #12]
 800a8b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	3a01      	subs	r2, #1
 800a8ca:	60fa      	str	r2, [r7, #12]
 800a8cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	e032      	b.n	800a93e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	0f1a      	lsrs	r2, r3, #28
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	0d5b      	lsrs	r3, r3, #21
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	3a01      	subs	r2, #1
 800a8f2:	60fa      	str	r2, [r7, #12]
 800a8f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	0b9b      	lsrs	r3, r3, #14
 800a902:	b2db      	uxtb	r3, r3
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	3a01      	subs	r2, #1
 800a908:	60fa      	str	r2, [r7, #12]
 800a90a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	09db      	lsrs	r3, r3, #7
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	3a01      	subs	r2, #1
 800a91e:	60fa      	str	r2, [r7, #12]
 800a920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a924:	b2da      	uxtb	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	3a01      	subs	r2, #1
 800a932:	60fa      	str	r2, [r7, #12]
 800a934:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a93e:	4b1f      	ldr	r3, [pc, #124]	; (800a9bc <_SendPacket+0x274>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a944:	4b1c      	ldr	r3, [pc, #112]	; (800a9b8 <_SendPacket+0x270>)
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	69ba      	ldr	r2, [r7, #24]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	623b      	str	r3, [r7, #32]
 800a956:	e00b      	b.n	800a970 <_SendPacket+0x228>
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	1c59      	adds	r1, r3, #1
 800a960:	6279      	str	r1, [r7, #36]	; 0x24
 800a962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	701a      	strb	r2, [r3, #0]
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	09db      	lsrs	r3, r3, #7
 800a96e:	623b      	str	r3, [r7, #32]
 800a970:	6a3b      	ldr	r3, [r7, #32]
 800a972:	2b7f      	cmp	r3, #127	; 0x7f
 800a974:	d8f0      	bhi.n	800a958 <_SendPacket+0x210>
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	627a      	str	r2, [r7, #36]	; 0x24
 800a97c:	6a3a      	ldr	r2, [r7, #32]
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800a986:	4b0c      	ldr	r3, [pc, #48]	; (800a9b8 <_SendPacket+0x270>)
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	4618      	mov	r0, r3
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	461a      	mov	r2, r3
 800a994:	68f9      	ldr	r1, [r7, #12]
 800a996:	f7ff fc47 	bl	800a228 <SEGGER_RTT_WriteSkipNoLock>
 800a99a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d003      	beq.n	800a9aa <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a9a2:	4a05      	ldr	r2, [pc, #20]	; (800a9b8 <_SendPacket+0x270>)
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	60d3      	str	r3, [r2, #12]
 800a9a8:	e00f      	b.n	800a9ca <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800a9aa:	4b03      	ldr	r3, [pc, #12]	; (800a9b8 <_SendPacket+0x270>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	4b01      	ldr	r3, [pc, #4]	; (800a9b8 <_SendPacket+0x270>)
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	e008      	b.n	800a9ca <_SendPacket+0x282>
 800a9b8:	20011570 	.word	0x20011570
 800a9bc:	e0001004 	.word	0xe0001004
    goto SendDone;
 800a9c0:	bf00      	nop
 800a9c2:	e002      	b.n	800a9ca <_SendPacket+0x282>
      goto SendDone;
 800a9c4:	bf00      	nop
 800a9c6:	e000      	b.n	800a9ca <_SendPacket+0x282>
      goto SendDone;
 800a9c8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a9ca:	4b14      	ldr	r3, [pc, #80]	; (800aa1c <_SendPacket+0x2d4>)
 800a9cc:	7e1b      	ldrb	r3, [r3, #24]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4a13      	ldr	r2, [pc, #76]	; (800aa20 <_SendPacket+0x2d8>)
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	440b      	add	r3, r1
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	4413      	add	r3, r2
 800a9dc:	336c      	adds	r3, #108	; 0x6c
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <_SendPacket+0x2d4>)
 800a9e2:	7e1b      	ldrb	r3, [r3, #24]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	490e      	ldr	r1, [pc, #56]	; (800aa20 <_SendPacket+0x2d8>)
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	4403      	add	r3, r0
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	440b      	add	r3, r1
 800a9f2:	3370      	adds	r3, #112	; 0x70
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d00b      	beq.n	800aa12 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a9fa:	4b08      	ldr	r3, [pc, #32]	; (800aa1c <_SendPacket+0x2d4>)
 800a9fc:	789b      	ldrb	r3, [r3, #2]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d107      	bne.n	800aa12 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800aa02:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <_SendPacket+0x2d4>)
 800aa04:	2201      	movs	r2, #1
 800aa06:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800aa08:	f7ff fdbc 	bl	800a584 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800aa0c:	4b03      	ldr	r3, [pc, #12]	; (800aa1c <_SendPacket+0x2d4>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800aa12:	bf00      	nop
 800aa14:	3728      	adds	r7, #40	; 0x28
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20011570 	.word	0x20011570
 800aa20:	20010cb0 	.word	0x20010cb0

0800aa24 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af02      	add	r7, sp, #8
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800aa32:	2300      	movs	r3, #0
 800aa34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa38:	4917      	ldr	r1, [pc, #92]	; (800aa98 <SEGGER_SYSVIEW_Init+0x74>)
 800aa3a:	4818      	ldr	r0, [pc, #96]	; (800aa9c <SEGGER_SYSVIEW_Init+0x78>)
 800aa3c:	f7ff fc76 	bl	800a32c <SEGGER_RTT_AllocUpBuffer>
 800aa40:	4603      	mov	r3, r0
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	4b16      	ldr	r3, [pc, #88]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa46:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800aa48:	4b15      	ldr	r3, [pc, #84]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa4a:	785a      	ldrb	r2, [r3, #1]
 800aa4c:	4b14      	ldr	r3, [pc, #80]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa4e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800aa50:	4b13      	ldr	r3, [pc, #76]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa52:	7e1b      	ldrb	r3, [r3, #24]
 800aa54:	4618      	mov	r0, r3
 800aa56:	2300      	movs	r3, #0
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	2308      	movs	r3, #8
 800aa5c:	4a11      	ldr	r2, [pc, #68]	; (800aaa4 <SEGGER_SYSVIEW_Init+0x80>)
 800aa5e:	490f      	ldr	r1, [pc, #60]	; (800aa9c <SEGGER_SYSVIEW_Init+0x78>)
 800aa60:	f7ff fce8 	bl	800a434 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800aa64:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800aa6a:	4b0f      	ldr	r3, [pc, #60]	; (800aaa8 <SEGGER_SYSVIEW_Init+0x84>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a0c      	ldr	r2, [pc, #48]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa70:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800aa72:	4a0b      	ldr	r2, [pc, #44]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800aa78:	4a09      	ldr	r2, [pc, #36]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800aa7e:	4a08      	ldr	r2, [pc, #32]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800aa84:	4a06      	ldr	r2, [pc, #24]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800aa90:	bf00      	nop
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20011168 	.word	0x20011168
 800aa9c:	0800bff0 	.word	0x0800bff0
 800aaa0:	20011570 	.word	0x20011570
 800aaa4:	20011568 	.word	0x20011568
 800aaa8:	e0001004 	.word	0xe0001004

0800aaac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800aab4:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6113      	str	r3, [r2, #16]
}
 800aaba:	bf00      	nop
 800aabc:	370c      	adds	r7, #12
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	20011570 	.word	0x20011570

0800aacc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800aad4:	f3ef 8311 	mrs	r3, BASEPRI
 800aad8:	f04f 0120 	mov.w	r1, #32
 800aadc:	f381 8811 	msr	BASEPRI, r1
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	4808      	ldr	r0, [pc, #32]	; (800ab04 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800aae4:	f7ff fd42 	bl	800a56c <_PreparePacket>
 800aae8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	68b8      	ldr	r0, [r7, #8]
 800aaf0:	f7ff fe2a 	bl	800a748 <_SendPacket>
  RECORD_END();
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f383 8811 	msr	BASEPRI, r3
}
 800aafa:	bf00      	nop
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	200115a0 	.word	0x200115a0

0800ab08 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ab12:	f3ef 8311 	mrs	r3, BASEPRI
 800ab16:	f04f 0120 	mov.w	r1, #32
 800ab1a:	f381 8811 	msr	BASEPRI, r1
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	4816      	ldr	r0, [pc, #88]	; (800ab7c <SEGGER_SYSVIEW_RecordU32+0x74>)
 800ab22:	f7ff fd23 	bl	800a56c <_PreparePacket>
 800ab26:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	61bb      	str	r3, [r7, #24]
 800ab34:	e00b      	b.n	800ab4e <SEGGER_SYSVIEW_RecordU32+0x46>
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	1c59      	adds	r1, r3, #1
 800ab3e:	61f9      	str	r1, [r7, #28]
 800ab40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab44:	b2d2      	uxtb	r2, r2
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	09db      	lsrs	r3, r3, #7
 800ab4c:	61bb      	str	r3, [r7, #24]
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	2b7f      	cmp	r3, #127	; 0x7f
 800ab52:	d8f0      	bhi.n	800ab36 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	61fa      	str	r2, [r7, #28]
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	b2d2      	uxtb	r2, r2
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	6938      	ldr	r0, [r7, #16]
 800ab6a:	f7ff fded 	bl	800a748 <_SendPacket>
  RECORD_END();
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f383 8811 	msr	BASEPRI, r3
}
 800ab74:	bf00      	nop
 800ab76:	3720      	adds	r7, #32
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	200115a0 	.word	0x200115a0

0800ab80 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b08c      	sub	sp, #48	; 0x30
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ab8c:	f3ef 8311 	mrs	r3, BASEPRI
 800ab90:	f04f 0120 	mov.w	r1, #32
 800ab94:	f381 8811 	msr	BASEPRI, r1
 800ab98:	61fb      	str	r3, [r7, #28]
 800ab9a:	4825      	ldr	r0, [pc, #148]	; (800ac30 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800ab9c:	f7ff fce6 	bl	800a56c <_PreparePacket>
 800aba0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	62bb      	str	r3, [r7, #40]	; 0x28
 800abae:	e00b      	b.n	800abc8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb6:	1c59      	adds	r1, r3, #1
 800abb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800abba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc4:	09db      	lsrs	r3, r3, #7
 800abc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	2b7f      	cmp	r3, #127	; 0x7f
 800abcc:	d8f0      	bhi.n	800abb0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd6:	b2d2      	uxtb	r2, r2
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	623b      	str	r3, [r7, #32]
 800abe6:	e00b      	b.n	800ac00 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	b2da      	uxtb	r2, r3
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	1c59      	adds	r1, r3, #1
 800abf0:	6279      	str	r1, [r7, #36]	; 0x24
 800abf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800abf6:	b2d2      	uxtb	r2, r2
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	09db      	lsrs	r3, r3, #7
 800abfe:	623b      	str	r3, [r7, #32]
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	2b7f      	cmp	r3, #127	; 0x7f
 800ac04:	d8f0      	bhi.n	800abe8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	627a      	str	r2, [r7, #36]	; 0x24
 800ac0c:	6a3a      	ldr	r2, [r7, #32]
 800ac0e:	b2d2      	uxtb	r2, r2
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac14:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	6979      	ldr	r1, [r7, #20]
 800ac1a:	69b8      	ldr	r0, [r7, #24]
 800ac1c:	f7ff fd94 	bl	800a748 <_SendPacket>
  RECORD_END();
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	f383 8811 	msr	BASEPRI, r3
}
 800ac26:	bf00      	nop
 800ac28:	3730      	adds	r7, #48	; 0x30
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	200115a0 	.word	0x200115a0

0800ac34 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08e      	sub	sp, #56	; 0x38
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800ac42:	f3ef 8311 	mrs	r3, BASEPRI
 800ac46:	f04f 0120 	mov.w	r1, #32
 800ac4a:	f381 8811 	msr	BASEPRI, r1
 800ac4e:	61fb      	str	r3, [r7, #28]
 800ac50:	4832      	ldr	r0, [pc, #200]	; (800ad1c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800ac52:	f7ff fc8b 	bl	800a56c <_PreparePacket>
 800ac56:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	633b      	str	r3, [r7, #48]	; 0x30
 800ac64:	e00b      	b.n	800ac7e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6c:	1c59      	adds	r1, r3, #1
 800ac6e:	6379      	str	r1, [r7, #52]	; 0x34
 800ac70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	09db      	lsrs	r3, r3, #7
 800ac7c:	633b      	str	r3, [r7, #48]	; 0x30
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	2b7f      	cmp	r3, #127	; 0x7f
 800ac82:	d8f0      	bhi.n	800ac66 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800ac84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	637a      	str	r2, [r7, #52]	; 0x34
 800ac8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	701a      	strb	r2, [r3, #0]
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac9c:	e00b      	b.n	800acb6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca4:	1c59      	adds	r1, r3, #1
 800aca6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800aca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800acac:	b2d2      	uxtb	r2, r2
 800acae:	701a      	strb	r2, [r3, #0]
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	09db      	lsrs	r3, r3, #7
 800acb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	2b7f      	cmp	r3, #127	; 0x7f
 800acba:	d8f0      	bhi.n	800ac9e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	627b      	str	r3, [r7, #36]	; 0x24
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	623b      	str	r3, [r7, #32]
 800acd4:	e00b      	b.n	800acee <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	1c59      	adds	r1, r3, #1
 800acde:	6279      	str	r1, [r7, #36]	; 0x24
 800ace0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ace4:	b2d2      	uxtb	r2, r2
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	09db      	lsrs	r3, r3, #7
 800acec:	623b      	str	r3, [r7, #32]
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	2b7f      	cmp	r3, #127	; 0x7f
 800acf2:	d8f0      	bhi.n	800acd6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	627a      	str	r2, [r7, #36]	; 0x24
 800acfa:	6a3a      	ldr	r2, [r7, #32]
 800acfc:	b2d2      	uxtb	r2, r2
 800acfe:	701a      	strb	r2, [r3, #0]
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	6979      	ldr	r1, [r7, #20]
 800ad08:	69b8      	ldr	r0, [r7, #24]
 800ad0a:	f7ff fd1d 	bl	800a748 <_SendPacket>
  RECORD_END();
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	f383 8811 	msr	BASEPRI, r3
}
 800ad14:	bf00      	nop
 800ad16:	3738      	adds	r7, #56	; 0x38
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	200115a0 	.word	0x200115a0

0800ad20 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b090      	sub	sp, #64	; 0x40
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ad2e:	f3ef 8311 	mrs	r3, BASEPRI
 800ad32:	f04f 0120 	mov.w	r1, #32
 800ad36:	f381 8811 	msr	BASEPRI, r1
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	4840      	ldr	r0, [pc, #256]	; (800ae40 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800ad3e:	f7ff fc15 	bl	800a56c <_PreparePacket>
 800ad42:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad50:	e00b      	b.n	800ad6a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad58:	1c59      	adds	r1, r3, #1
 800ad5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ad5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad60:	b2d2      	uxtb	r2, r2
 800ad62:	701a      	strb	r2, [r3, #0]
 800ad64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad66:	09db      	lsrs	r3, r3, #7
 800ad68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	2b7f      	cmp	r3, #127	; 0x7f
 800ad6e:	d8f0      	bhi.n	800ad52 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800ad70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ad76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad78:	b2d2      	uxtb	r2, r2
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	633b      	str	r3, [r7, #48]	; 0x30
 800ad88:	e00b      	b.n	800ada2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad90:	1c59      	adds	r1, r3, #1
 800ad92:	6379      	str	r1, [r7, #52]	; 0x34
 800ad94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad98:	b2d2      	uxtb	r2, r2
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	09db      	lsrs	r3, r3, #7
 800ada0:	633b      	str	r3, [r7, #48]	; 0x30
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	2b7f      	cmp	r3, #127	; 0x7f
 800ada6:	d8f0      	bhi.n	800ad8a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ada8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	637a      	str	r2, [r7, #52]	; 0x34
 800adae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb0:	b2d2      	uxtb	r2, r2
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800adc0:	e00b      	b.n	800adda <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	1c59      	adds	r1, r3, #1
 800adca:	62f9      	str	r1, [r7, #44]	; 0x2c
 800adcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800add0:	b2d2      	uxtb	r2, r2
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add6:	09db      	lsrs	r3, r3, #7
 800add8:	62bb      	str	r3, [r7, #40]	; 0x28
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	2b7f      	cmp	r3, #127	; 0x7f
 800adde:	d8f0      	bhi.n	800adc2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ade6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ade8:	b2d2      	uxtb	r2, r2
 800adea:	701a      	strb	r2, [r3, #0]
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	627b      	str	r3, [r7, #36]	; 0x24
 800adf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adf6:	623b      	str	r3, [r7, #32]
 800adf8:	e00b      	b.n	800ae12 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae00:	1c59      	adds	r1, r3, #1
 800ae02:	6279      	str	r1, [r7, #36]	; 0x24
 800ae04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	701a      	strb	r2, [r3, #0]
 800ae0c:	6a3b      	ldr	r3, [r7, #32]
 800ae0e:	09db      	lsrs	r3, r3, #7
 800ae10:	623b      	str	r3, [r7, #32]
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	2b7f      	cmp	r3, #127	; 0x7f
 800ae16:	d8f0      	bhi.n	800adfa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	627a      	str	r2, [r7, #36]	; 0x24
 800ae1e:	6a3a      	ldr	r2, [r7, #32]
 800ae20:	b2d2      	uxtb	r2, r2
 800ae22:	701a      	strb	r2, [r3, #0]
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	6979      	ldr	r1, [r7, #20]
 800ae2c:	69b8      	ldr	r0, [r7, #24]
 800ae2e:	f7ff fc8b 	bl	800a748 <_SendPacket>
  RECORD_END();
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	f383 8811 	msr	BASEPRI, r3
}
 800ae38:	bf00      	nop
 800ae3a:	3740      	adds	r7, #64	; 0x40
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	200115a0 	.word	0x200115a0

0800ae44 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b092      	sub	sp, #72	; 0x48
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800ae52:	f3ef 8311 	mrs	r3, BASEPRI
 800ae56:	f04f 0120 	mov.w	r1, #32
 800ae5a:	f381 8811 	msr	BASEPRI, r1
 800ae5e:	61fb      	str	r3, [r7, #28]
 800ae60:	484e      	ldr	r0, [pc, #312]	; (800af9c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800ae62:	f7ff fb83 	bl	800a56c <_PreparePacket>
 800ae66:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	643b      	str	r3, [r7, #64]	; 0x40
 800ae74:	e00b      	b.n	800ae8e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800ae76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae7c:	1c59      	adds	r1, r3, #1
 800ae7e:	6479      	str	r1, [r7, #68]	; 0x44
 800ae80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae84:	b2d2      	uxtb	r2, r2
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae8a:	09db      	lsrs	r3, r3, #7
 800ae8c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae90:	2b7f      	cmp	r3, #127	; 0x7f
 800ae92:	d8f0      	bhi.n	800ae76 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800ae94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae96:	1c5a      	adds	r2, r3, #1
 800ae98:	647a      	str	r2, [r7, #68]	; 0x44
 800ae9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae9c:	b2d2      	uxtb	r2, r2
 800ae9e:	701a      	strb	r2, [r3, #0]
 800aea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aea2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeac:	e00b      	b.n	800aec6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb4:	1c59      	adds	r1, r3, #1
 800aeb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800aeb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aebc:	b2d2      	uxtb	r2, r2
 800aebe:	701a      	strb	r2, [r3, #0]
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	09db      	lsrs	r3, r3, #7
 800aec4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec8:	2b7f      	cmp	r3, #127	; 0x7f
 800aeca:	d8f0      	bhi.n	800aeae <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800aecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aece:	1c5a      	adds	r2, r3, #1
 800aed0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800aed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aed4:	b2d2      	uxtb	r2, r2
 800aed6:	701a      	strb	r2, [r3, #0]
 800aed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	637b      	str	r3, [r7, #52]	; 0x34
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	633b      	str	r3, [r7, #48]	; 0x30
 800aee4:	e00b      	b.n	800aefe <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeec:	1c59      	adds	r1, r3, #1
 800aeee:	6379      	str	r1, [r7, #52]	; 0x34
 800aef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aef4:	b2d2      	uxtb	r2, r2
 800aef6:	701a      	strb	r2, [r3, #0]
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	09db      	lsrs	r3, r3, #7
 800aefc:	633b      	str	r3, [r7, #48]	; 0x30
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	2b7f      	cmp	r3, #127	; 0x7f
 800af02:	d8f0      	bhi.n	800aee6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800af04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	637a      	str	r2, [r7, #52]	; 0x34
 800af0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af0c:	b2d2      	uxtb	r2, r2
 800af0e:	701a      	strb	r2, [r3, #0]
 800af10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800af1c:	e00b      	b.n	800af36 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800af1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af20:	b2da      	uxtb	r2, r3
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	1c59      	adds	r1, r3, #1
 800af26:	62f9      	str	r1, [r7, #44]	; 0x2c
 800af28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af2c:	b2d2      	uxtb	r2, r2
 800af2e:	701a      	strb	r2, [r3, #0]
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	09db      	lsrs	r3, r3, #7
 800af34:	62bb      	str	r3, [r7, #40]	; 0x28
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	2b7f      	cmp	r3, #127	; 0x7f
 800af3a:	d8f0      	bhi.n	800af1e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800af3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	701a      	strb	r2, [r3, #0]
 800af48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	627b      	str	r3, [r7, #36]	; 0x24
 800af50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af52:	623b      	str	r3, [r7, #32]
 800af54:	e00b      	b.n	800af6e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	1c59      	adds	r1, r3, #1
 800af5e:	6279      	str	r1, [r7, #36]	; 0x24
 800af60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af64:	b2d2      	uxtb	r2, r2
 800af66:	701a      	strb	r2, [r3, #0]
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	09db      	lsrs	r3, r3, #7
 800af6c:	623b      	str	r3, [r7, #32]
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	2b7f      	cmp	r3, #127	; 0x7f
 800af72:	d8f0      	bhi.n	800af56 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	1c5a      	adds	r2, r3, #1
 800af78:	627a      	str	r2, [r7, #36]	; 0x24
 800af7a:	6a3a      	ldr	r2, [r7, #32]
 800af7c:	b2d2      	uxtb	r2, r2
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	6979      	ldr	r1, [r7, #20]
 800af88:	69b8      	ldr	r0, [r7, #24]
 800af8a:	f7ff fbdd 	bl	800a748 <_SendPacket>
  RECORD_END();
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	f383 8811 	msr	BASEPRI, r3
}
 800af94:	bf00      	nop
 800af96:	3748      	adds	r7, #72	; 0x48
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	200115a0 	.word	0x200115a0

0800afa0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	; 0x30
 800afa4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800afa6:	4b58      	ldr	r3, [pc, #352]	; (800b108 <SEGGER_SYSVIEW_Start+0x168>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800afac:	f3ef 8311 	mrs	r3, BASEPRI
 800afb0:	f04f 0120 	mov.w	r1, #32
 800afb4:	f381 8811 	msr	BASEPRI, r1
 800afb8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800afba:	4b53      	ldr	r3, [pc, #332]	; (800b108 <SEGGER_SYSVIEW_Start+0x168>)
 800afbc:	785b      	ldrb	r3, [r3, #1]
 800afbe:	220a      	movs	r2, #10
 800afc0:	4952      	ldr	r1, [pc, #328]	; (800b10c <SEGGER_SYSVIEW_Start+0x16c>)
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff f930 	bl	800a228 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800afce:	200a      	movs	r0, #10
 800afd0:	f7ff fd7c 	bl	800aacc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800afd4:	f3ef 8311 	mrs	r3, BASEPRI
 800afd8:	f04f 0120 	mov.w	r1, #32
 800afdc:	f381 8811 	msr	BASEPRI, r1
 800afe0:	60bb      	str	r3, [r7, #8]
 800afe2:	484b      	ldr	r0, [pc, #300]	; (800b110 <SEGGER_SYSVIEW_Start+0x170>)
 800afe4:	f7ff fac2 	bl	800a56c <_PreparePacket>
 800afe8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aff2:	4b45      	ldr	r3, [pc, #276]	; (800b108 <SEGGER_SYSVIEW_Start+0x168>)
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	62bb      	str	r3, [r7, #40]	; 0x28
 800aff8:	e00b      	b.n	800b012 <SEGGER_SYSVIEW_Start+0x72>
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	b2da      	uxtb	r2, r3
 800affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b000:	1c59      	adds	r1, r3, #1
 800b002:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b004:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b008:	b2d2      	uxtb	r2, r2
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	09db      	lsrs	r3, r3, #7
 800b010:	62bb      	str	r3, [r7, #40]	; 0x28
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	2b7f      	cmp	r3, #127	; 0x7f
 800b016:	d8f0      	bhi.n	800affa <SEGGER_SYSVIEW_Start+0x5a>
 800b018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b01e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b026:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	627b      	str	r3, [r7, #36]	; 0x24
 800b02c:	4b36      	ldr	r3, [pc, #216]	; (800b108 <SEGGER_SYSVIEW_Start+0x168>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	623b      	str	r3, [r7, #32]
 800b032:	e00b      	b.n	800b04c <SEGGER_SYSVIEW_Start+0xac>
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	b2da      	uxtb	r2, r3
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	1c59      	adds	r1, r3, #1
 800b03c:	6279      	str	r1, [r7, #36]	; 0x24
 800b03e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b042:	b2d2      	uxtb	r2, r2
 800b044:	701a      	strb	r2, [r3, #0]
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	09db      	lsrs	r3, r3, #7
 800b04a:	623b      	str	r3, [r7, #32]
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	2b7f      	cmp	r3, #127	; 0x7f
 800b050:	d8f0      	bhi.n	800b034 <SEGGER_SYSVIEW_Start+0x94>
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	627a      	str	r2, [r7, #36]	; 0x24
 800b058:	6a3a      	ldr	r2, [r7, #32]
 800b05a:	b2d2      	uxtb	r2, r2
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b060:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	61fb      	str	r3, [r7, #28]
 800b066:	4b28      	ldr	r3, [pc, #160]	; (800b108 <SEGGER_SYSVIEW_Start+0x168>)
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	e00b      	b.n	800b086 <SEGGER_SYSVIEW_Start+0xe6>
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	b2da      	uxtb	r2, r3
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	1c59      	adds	r1, r3, #1
 800b076:	61f9      	str	r1, [r7, #28]
 800b078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b07c:	b2d2      	uxtb	r2, r2
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	09db      	lsrs	r3, r3, #7
 800b084:	61bb      	str	r3, [r7, #24]
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	2b7f      	cmp	r3, #127	; 0x7f
 800b08a:	d8f0      	bhi.n	800b06e <SEGGER_SYSVIEW_Start+0xce>
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	61fa      	str	r2, [r7, #28]
 800b092:	69ba      	ldr	r2, [r7, #24]
 800b094:	b2d2      	uxtb	r2, r2
 800b096:	701a      	strb	r2, [r3, #0]
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	613b      	str	r3, [r7, #16]
 800b0a4:	e00b      	b.n	800b0be <SEGGER_SYSVIEW_Start+0x11e>
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	1c59      	adds	r1, r3, #1
 800b0ae:	6179      	str	r1, [r7, #20]
 800b0b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b0b4:	b2d2      	uxtb	r2, r2
 800b0b6:	701a      	strb	r2, [r3, #0]
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	09db      	lsrs	r3, r3, #7
 800b0bc:	613b      	str	r3, [r7, #16]
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2b7f      	cmp	r3, #127	; 0x7f
 800b0c2:	d8f0      	bhi.n	800b0a6 <SEGGER_SYSVIEW_Start+0x106>
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	617a      	str	r2, [r7, #20]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	b2d2      	uxtb	r2, r2
 800b0ce:	701a      	strb	r2, [r3, #0]
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b0d4:	2218      	movs	r2, #24
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7ff fb35 	bl	800a748 <_SendPacket>
      RECORD_END();
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b0e4:	4b08      	ldr	r3, [pc, #32]	; (800b108 <SEGGER_SYSVIEW_Start+0x168>)
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800b0ec:	4b06      	ldr	r3, [pc, #24]	; (800b108 <SEGGER_SYSVIEW_Start+0x168>)
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800b0f2:	f000 f9eb 	bl	800b4cc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800b0f6:	f000 f9b1 	bl	800b45c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800b0fa:	f000 fc83 	bl	800ba04 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800b0fe:	bf00      	nop
 800b100:	3730      	adds	r7, #48	; 0x30
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20011570 	.word	0x20011570
 800b10c:	0800c094 	.word	0x0800c094
 800b110:	200115a0 	.word	0x200115a0

0800b114 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b11a:	f3ef 8311 	mrs	r3, BASEPRI
 800b11e:	f04f 0120 	mov.w	r1, #32
 800b122:	f381 8811 	msr	BASEPRI, r1
 800b126:	607b      	str	r3, [r7, #4]
 800b128:	480b      	ldr	r0, [pc, #44]	; (800b158 <SEGGER_SYSVIEW_Stop+0x44>)
 800b12a:	f7ff fa1f 	bl	800a56c <_PreparePacket>
 800b12e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800b130:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <SEGGER_SYSVIEW_Stop+0x48>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d007      	beq.n	800b148 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800b138:	220b      	movs	r2, #11
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6838      	ldr	r0, [r7, #0]
 800b13e:	f7ff fb03 	bl	800a748 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800b142:	4b06      	ldr	r3, [pc, #24]	; (800b15c <SEGGER_SYSVIEW_Stop+0x48>)
 800b144:	2200      	movs	r2, #0
 800b146:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f383 8811 	msr	BASEPRI, r3
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	200115a0 	.word	0x200115a0
 800b15c:	20011570 	.word	0x20011570

0800b160 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800b160:	b580      	push	{r7, lr}
 800b162:	b08c      	sub	sp, #48	; 0x30
 800b164:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b166:	f3ef 8311 	mrs	r3, BASEPRI
 800b16a:	f04f 0120 	mov.w	r1, #32
 800b16e:	f381 8811 	msr	BASEPRI, r1
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	4845      	ldr	r0, [pc, #276]	; (800b28c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800b176:	f7ff f9f9 	bl	800a56c <_PreparePacket>
 800b17a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b184:	4b42      	ldr	r3, [pc, #264]	; (800b290 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	62bb      	str	r3, [r7, #40]	; 0x28
 800b18a:	e00b      	b.n	800b1a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	1c59      	adds	r1, r3, #1
 800b194:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a0:	09db      	lsrs	r3, r3, #7
 800b1a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	2b7f      	cmp	r3, #127	; 0x7f
 800b1a8:	d8f0      	bhi.n	800b18c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1b2:	b2d2      	uxtb	r2, r2
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1be:	4b34      	ldr	r3, [pc, #208]	; (800b290 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	623b      	str	r3, [r7, #32]
 800b1c4:	e00b      	b.n	800b1de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	1c59      	adds	r1, r3, #1
 800b1ce:	6279      	str	r1, [r7, #36]	; 0x24
 800b1d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b1d4:	b2d2      	uxtb	r2, r2
 800b1d6:	701a      	strb	r2, [r3, #0]
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	09db      	lsrs	r3, r3, #7
 800b1dc:	623b      	str	r3, [r7, #32]
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	2b7f      	cmp	r3, #127	; 0x7f
 800b1e2:	d8f0      	bhi.n	800b1c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	627a      	str	r2, [r7, #36]	; 0x24
 800b1ea:	6a3a      	ldr	r2, [r7, #32]
 800b1ec:	b2d2      	uxtb	r2, r2
 800b1ee:	701a      	strb	r2, [r3, #0]
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	61fb      	str	r3, [r7, #28]
 800b1f8:	4b25      	ldr	r3, [pc, #148]	; (800b290 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	61bb      	str	r3, [r7, #24]
 800b1fe:	e00b      	b.n	800b218 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	b2da      	uxtb	r2, r3
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	1c59      	adds	r1, r3, #1
 800b208:	61f9      	str	r1, [r7, #28]
 800b20a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b20e:	b2d2      	uxtb	r2, r2
 800b210:	701a      	strb	r2, [r3, #0]
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	09db      	lsrs	r3, r3, #7
 800b216:	61bb      	str	r3, [r7, #24]
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	2b7f      	cmp	r3, #127	; 0x7f
 800b21c:	d8f0      	bhi.n	800b200 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	61fa      	str	r2, [r7, #28]
 800b224:	69ba      	ldr	r2, [r7, #24]
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	617b      	str	r3, [r7, #20]
 800b232:	2300      	movs	r3, #0
 800b234:	613b      	str	r3, [r7, #16]
 800b236:	e00b      	b.n	800b250 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	1c59      	adds	r1, r3, #1
 800b240:	6179      	str	r1, [r7, #20]
 800b242:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b246:	b2d2      	uxtb	r2, r2
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	09db      	lsrs	r3, r3, #7
 800b24e:	613b      	str	r3, [r7, #16]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	2b7f      	cmp	r3, #127	; 0x7f
 800b254:	d8f0      	bhi.n	800b238 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	617a      	str	r2, [r7, #20]
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	b2d2      	uxtb	r2, r2
 800b260:	701a      	strb	r2, [r3, #0]
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b266:	2218      	movs	r2, #24
 800b268:	6879      	ldr	r1, [r7, #4]
 800b26a:	68b8      	ldr	r0, [r7, #8]
 800b26c:	f7ff fa6c 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b276:	4b06      	ldr	r3, [pc, #24]	; (800b290 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800b27e:	4b04      	ldr	r3, [pc, #16]	; (800b290 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	4798      	blx	r3
  }
}
 800b284:	bf00      	nop
 800b286:	3730      	adds	r7, #48	; 0x30
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200115a0 	.word	0x200115a0
 800b290:	20011570 	.word	0x20011570

0800b294 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800b294:	b580      	push	{r7, lr}
 800b296:	b092      	sub	sp, #72	; 0x48
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800b29c:	f3ef 8311 	mrs	r3, BASEPRI
 800b2a0:	f04f 0120 	mov.w	r1, #32
 800b2a4:	f381 8811 	msr	BASEPRI, r1
 800b2a8:	617b      	str	r3, [r7, #20]
 800b2aa:	486a      	ldr	r0, [pc, #424]	; (800b454 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800b2ac:	f7ff f95e 	bl	800a56c <_PreparePacket>
 800b2b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	4b66      	ldr	r3, [pc, #408]	; (800b458 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800b2c6:	e00b      	b.n	800b2e0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800b2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ce:	1c59      	adds	r1, r3, #1
 800b2d0:	6479      	str	r1, [r7, #68]	; 0x44
 800b2d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b2d6:	b2d2      	uxtb	r2, r2
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2dc:	09db      	lsrs	r3, r3, #7
 800b2de:	643b      	str	r3, [r7, #64]	; 0x40
 800b2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e2:	2b7f      	cmp	r3, #127	; 0x7f
 800b2e4:	d8f0      	bhi.n	800b2c8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800b2e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2e8:	1c5a      	adds	r2, r3, #1
 800b2ea:	647a      	str	r2, [r7, #68]	; 0x44
 800b2ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]
 800b2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800b300:	e00b      	b.n	800b31a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	b2da      	uxtb	r2, r3
 800b306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b308:	1c59      	adds	r1, r3, #1
 800b30a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b30c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b310:	b2d2      	uxtb	r2, r2
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	09db      	lsrs	r3, r3, #7
 800b318:	63bb      	str	r3, [r7, #56]	; 0x38
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	2b7f      	cmp	r3, #127	; 0x7f
 800b31e:	d8f0      	bhi.n	800b302 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800b320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b328:	b2d2      	uxtb	r2, r2
 800b32a:	701a      	strb	r2, [r3, #0]
 800b32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b32e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	2220      	movs	r2, #32
 800b336:	4619      	mov	r1, r3
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f7ff f8c7 	bl	800a4cc <_EncodeStr>
 800b33e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800b340:	2209      	movs	r2, #9
 800b342:	68f9      	ldr	r1, [r7, #12]
 800b344:	6938      	ldr	r0, [r7, #16]
 800b346:	f7ff f9ff 	bl	800a748 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	637b      	str	r3, [r7, #52]	; 0x34
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	4b40      	ldr	r3, [pc, #256]	; (800b458 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	633b      	str	r3, [r7, #48]	; 0x30
 800b35e:	e00b      	b.n	800b378 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	b2da      	uxtb	r2, r3
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	1c59      	adds	r1, r3, #1
 800b368:	6379      	str	r1, [r7, #52]	; 0x34
 800b36a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	09db      	lsrs	r3, r3, #7
 800b376:	633b      	str	r3, [r7, #48]	; 0x30
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	2b7f      	cmp	r3, #127	; 0x7f
 800b37c:	d8f0      	bhi.n	800b360 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800b37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	637a      	str	r2, [r7, #52]	; 0x34
 800b384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	62bb      	str	r3, [r7, #40]	; 0x28
 800b398:	e00b      	b.n	800b3b2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	1c59      	adds	r1, r3, #1
 800b3a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b3a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3a8:	b2d2      	uxtb	r2, r2
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	09db      	lsrs	r3, r3, #7
 800b3b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	2b7f      	cmp	r3, #127	; 0x7f
 800b3b6:	d8f0      	bhi.n	800b39a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800b3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	701a      	strb	r2, [r3, #0]
 800b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	623b      	str	r3, [r7, #32]
 800b3d2:	e00b      	b.n	800b3ec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	1c59      	adds	r1, r3, #1
 800b3dc:	6279      	str	r1, [r7, #36]	; 0x24
 800b3de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	09db      	lsrs	r3, r3, #7
 800b3ea:	623b      	str	r3, [r7, #32]
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	2b7f      	cmp	r3, #127	; 0x7f
 800b3f0:	d8f0      	bhi.n	800b3d4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	627a      	str	r2, [r7, #36]	; 0x24
 800b3f8:	6a3a      	ldr	r2, [r7, #32]
 800b3fa:	b2d2      	uxtb	r2, r2
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	61fb      	str	r3, [r7, #28]
 800b406:	2300      	movs	r3, #0
 800b408:	61bb      	str	r3, [r7, #24]
 800b40a:	e00b      	b.n	800b424 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	1c59      	adds	r1, r3, #1
 800b414:	61f9      	str	r1, [r7, #28]
 800b416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b41a:	b2d2      	uxtb	r2, r2
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	09db      	lsrs	r3, r3, #7
 800b422:	61bb      	str	r3, [r7, #24]
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	2b7f      	cmp	r3, #127	; 0x7f
 800b428:	d8f0      	bhi.n	800b40c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	61fa      	str	r2, [r7, #28]
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	b2d2      	uxtb	r2, r2
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800b43a:	2215      	movs	r2, #21
 800b43c:	68f9      	ldr	r1, [r7, #12]
 800b43e:	6938      	ldr	r0, [r7, #16]
 800b440:	f7ff f982 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	f383 8811 	msr	BASEPRI, r3
}
 800b44a:	bf00      	nop
 800b44c:	3748      	adds	r7, #72	; 0x48
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	200115a0 	.word	0x200115a0
 800b458:	20011570 	.word	0x20011570

0800b45c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800b460:	4b07      	ldr	r3, [pc, #28]	; (800b480 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d008      	beq.n	800b47a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800b468:	4b05      	ldr	r3, [pc, #20]	; (800b480 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d003      	beq.n	800b47a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800b472:	4b03      	ldr	r3, [pc, #12]	; (800b480 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	4798      	blx	r3
  }
}
 800b47a:	bf00      	nop
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20011570 	.word	0x20011570

0800b484 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b48c:	f3ef 8311 	mrs	r3, BASEPRI
 800b490:	f04f 0120 	mov.w	r1, #32
 800b494:	f381 8811 	msr	BASEPRI, r1
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	480b      	ldr	r0, [pc, #44]	; (800b4c8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800b49c:	f7ff f866 	bl	800a56c <_PreparePacket>
 800b4a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b4a2:	2280      	movs	r2, #128	; 0x80
 800b4a4:	6879      	ldr	r1, [r7, #4]
 800b4a6:	6938      	ldr	r0, [r7, #16]
 800b4a8:	f7ff f810 	bl	800a4cc <_EncodeStr>
 800b4ac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800b4ae:	220e      	movs	r2, #14
 800b4b0:	68f9      	ldr	r1, [r7, #12]
 800b4b2:	6938      	ldr	r0, [r7, #16]
 800b4b4:	f7ff f948 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f383 8811 	msr	BASEPRI, r3
}
 800b4be:	bf00      	nop
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	200115a0 	.word	0x200115a0

0800b4cc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800b4cc:	b590      	push	{r4, r7, lr}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800b4d2:	4b15      	ldr	r3, [pc, #84]	; (800b528 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d01a      	beq.n	800b510 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800b4da:	4b13      	ldr	r3, [pc, #76]	; (800b528 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d015      	beq.n	800b510 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800b4e4:	4b10      	ldr	r3, [pc, #64]	; (800b528 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4798      	blx	r3
 800b4ec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b4f0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800b4f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4f6:	f04f 0200 	mov.w	r2, #0
 800b4fa:	f04f 0300 	mov.w	r3, #0
 800b4fe:	000a      	movs	r2, r1
 800b500:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b502:	4613      	mov	r3, r2
 800b504:	461a      	mov	r2, r3
 800b506:	4621      	mov	r1, r4
 800b508:	200d      	movs	r0, #13
 800b50a:	f7ff fb39 	bl	800ab80 <SEGGER_SYSVIEW_RecordU32x2>
 800b50e:	e006      	b.n	800b51e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4619      	mov	r1, r3
 800b516:	200c      	movs	r0, #12
 800b518:	f7ff faf6 	bl	800ab08 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800b51c:	bf00      	nop
 800b51e:	bf00      	nop
 800b520:	370c      	adds	r7, #12
 800b522:	46bd      	mov	sp, r7
 800b524:	bd90      	pop	{r4, r7, pc}
 800b526:	bf00      	nop
 800b528:	20011570 	.word	0x20011570
 800b52c:	e0001004 	.word	0xe0001004

0800b530 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b536:	f3ef 8311 	mrs	r3, BASEPRI
 800b53a:	f04f 0120 	mov.w	r1, #32
 800b53e:	f381 8811 	msr	BASEPRI, r1
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	4819      	ldr	r0, [pc, #100]	; (800b5ac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800b546:	f7ff f811 	bl	800a56c <_PreparePacket>
 800b54a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800b550:	4b17      	ldr	r3, [pc, #92]	; (800b5b0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b558:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	617b      	str	r3, [r7, #20]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	613b      	str	r3, [r7, #16]
 800b562:	e00b      	b.n	800b57c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	b2da      	uxtb	r2, r3
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	1c59      	adds	r1, r3, #1
 800b56c:	6179      	str	r1, [r7, #20]
 800b56e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b572:	b2d2      	uxtb	r2, r2
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	09db      	lsrs	r3, r3, #7
 800b57a:	613b      	str	r3, [r7, #16]
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2b7f      	cmp	r3, #127	; 0x7f
 800b580:	d8f0      	bhi.n	800b564 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	617a      	str	r2, [r7, #20]
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	b2d2      	uxtb	r2, r2
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800b592:	2202      	movs	r2, #2
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	68b8      	ldr	r0, [r7, #8]
 800b598:	f7ff f8d6 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f383 8811 	msr	BASEPRI, r3
}
 800b5a2:	bf00      	nop
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	200115a0 	.word	0x200115a0
 800b5b0:	e000ed04 	.word	0xe000ed04

0800b5b4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b5ba:	f3ef 8311 	mrs	r3, BASEPRI
 800b5be:	f04f 0120 	mov.w	r1, #32
 800b5c2:	f381 8811 	msr	BASEPRI, r1
 800b5c6:	607b      	str	r3, [r7, #4]
 800b5c8:	4807      	ldr	r0, [pc, #28]	; (800b5e8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800b5ca:	f7fe ffcf 	bl	800a56c <_PreparePacket>
 800b5ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6838      	ldr	r0, [r7, #0]
 800b5d6:	f7ff f8b7 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f383 8811 	msr	BASEPRI, r3
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	200115a0 	.word	0x200115a0

0800b5ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b5f2:	f3ef 8311 	mrs	r3, BASEPRI
 800b5f6:	f04f 0120 	mov.w	r1, #32
 800b5fa:	f381 8811 	msr	BASEPRI, r1
 800b5fe:	607b      	str	r3, [r7, #4]
 800b600:	4807      	ldr	r0, [pc, #28]	; (800b620 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800b602:	f7fe ffb3 	bl	800a56c <_PreparePacket>
 800b606:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800b608:	2212      	movs	r2, #18
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6838      	ldr	r0, [r7, #0]
 800b60e:	f7ff f89b 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f383 8811 	msr	BASEPRI, r3
}
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	200115a0 	.word	0x200115a0

0800b624 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b62a:	f3ef 8311 	mrs	r3, BASEPRI
 800b62e:	f04f 0120 	mov.w	r1, #32
 800b632:	f381 8811 	msr	BASEPRI, r1
 800b636:	607b      	str	r3, [r7, #4]
 800b638:	4807      	ldr	r0, [pc, #28]	; (800b658 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800b63a:	f7fe ff97 	bl	800a56c <_PreparePacket>
 800b63e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800b640:	2211      	movs	r2, #17
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6838      	ldr	r0, [r7, #0]
 800b646:	f7ff f87f 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f383 8811 	msr	BASEPRI, r3
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	200115a0 	.word	0x200115a0

0800b65c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b664:	f3ef 8311 	mrs	r3, BASEPRI
 800b668:	f04f 0120 	mov.w	r1, #32
 800b66c:	f381 8811 	msr	BASEPRI, r1
 800b670:	617b      	str	r3, [r7, #20]
 800b672:	4819      	ldr	r0, [pc, #100]	; (800b6d8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800b674:	f7fe ff7a 	bl	800a56c <_PreparePacket>
 800b678:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b67e:	4b17      	ldr	r3, [pc, #92]	; (800b6dc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	61fb      	str	r3, [r7, #28]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	61bb      	str	r3, [r7, #24]
 800b690:	e00b      	b.n	800b6aa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	b2da      	uxtb	r2, r3
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	1c59      	adds	r1, r3, #1
 800b69a:	61f9      	str	r1, [r7, #28]
 800b69c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b6a0:	b2d2      	uxtb	r2, r2
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	09db      	lsrs	r3, r3, #7
 800b6a8:	61bb      	str	r3, [r7, #24]
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	2b7f      	cmp	r3, #127	; 0x7f
 800b6ae:	d8f0      	bhi.n	800b692 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	61fa      	str	r2, [r7, #28]
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	b2d2      	uxtb	r2, r2
 800b6ba:	701a      	strb	r2, [r3, #0]
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800b6c0:	2208      	movs	r2, #8
 800b6c2:	68f9      	ldr	r1, [r7, #12]
 800b6c4:	6938      	ldr	r0, [r7, #16]
 800b6c6:	f7ff f83f 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f383 8811 	msr	BASEPRI, r3
}
 800b6d0:	bf00      	nop
 800b6d2:	3720      	adds	r7, #32
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	200115a0 	.word	0x200115a0
 800b6dc:	20011570 	.word	0x20011570

0800b6e0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b6e8:	f3ef 8311 	mrs	r3, BASEPRI
 800b6ec:	f04f 0120 	mov.w	r1, #32
 800b6f0:	f381 8811 	msr	BASEPRI, r1
 800b6f4:	617b      	str	r3, [r7, #20]
 800b6f6:	4819      	ldr	r0, [pc, #100]	; (800b75c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800b6f8:	f7fe ff38 	bl	800a56c <_PreparePacket>
 800b6fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b702:	4b17      	ldr	r3, [pc, #92]	; (800b760 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	61fb      	str	r3, [r7, #28]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	61bb      	str	r3, [r7, #24]
 800b714:	e00b      	b.n	800b72e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	1c59      	adds	r1, r3, #1
 800b71e:	61f9      	str	r1, [r7, #28]
 800b720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b724:	b2d2      	uxtb	r2, r2
 800b726:	701a      	strb	r2, [r3, #0]
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	09db      	lsrs	r3, r3, #7
 800b72c:	61bb      	str	r3, [r7, #24]
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	2b7f      	cmp	r3, #127	; 0x7f
 800b732:	d8f0      	bhi.n	800b716 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	1c5a      	adds	r2, r3, #1
 800b738:	61fa      	str	r2, [r7, #28]
 800b73a:	69ba      	ldr	r2, [r7, #24]
 800b73c:	b2d2      	uxtb	r2, r2
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800b744:	2204      	movs	r2, #4
 800b746:	68f9      	ldr	r1, [r7, #12]
 800b748:	6938      	ldr	r0, [r7, #16]
 800b74a:	f7fe fffd 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f383 8811 	msr	BASEPRI, r3
}
 800b754:	bf00      	nop
 800b756:	3720      	adds	r7, #32
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	200115a0 	.word	0x200115a0
 800b760:	20011570 	.word	0x20011570

0800b764 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b76c:	f3ef 8311 	mrs	r3, BASEPRI
 800b770:	f04f 0120 	mov.w	r1, #32
 800b774:	f381 8811 	msr	BASEPRI, r1
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	4819      	ldr	r0, [pc, #100]	; (800b7e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800b77c:	f7fe fef6 	bl	800a56c <_PreparePacket>
 800b780:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b786:	4b17      	ldr	r3, [pc, #92]	; (800b7e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	61fb      	str	r3, [r7, #28]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	61bb      	str	r3, [r7, #24]
 800b798:	e00b      	b.n	800b7b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	1c59      	adds	r1, r3, #1
 800b7a2:	61f9      	str	r1, [r7, #28]
 800b7a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b7a8:	b2d2      	uxtb	r2, r2
 800b7aa:	701a      	strb	r2, [r3, #0]
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	09db      	lsrs	r3, r3, #7
 800b7b0:	61bb      	str	r3, [r7, #24]
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b7f      	cmp	r3, #127	; 0x7f
 800b7b6:	d8f0      	bhi.n	800b79a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	61fa      	str	r2, [r7, #28]
 800b7be:	69ba      	ldr	r2, [r7, #24]
 800b7c0:	b2d2      	uxtb	r2, r2
 800b7c2:	701a      	strb	r2, [r3, #0]
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800b7c8:	2206      	movs	r2, #6
 800b7ca:	68f9      	ldr	r1, [r7, #12]
 800b7cc:	6938      	ldr	r0, [r7, #16]
 800b7ce:	f7fe ffbb 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f383 8811 	msr	BASEPRI, r3
}
 800b7d8:	bf00      	nop
 800b7da:	3720      	adds	r7, #32
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	200115a0 	.word	0x200115a0
 800b7e4:	20011570 	.word	0x20011570

0800b7e8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08a      	sub	sp, #40	; 0x28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b7f2:	f3ef 8311 	mrs	r3, BASEPRI
 800b7f6:	f04f 0120 	mov.w	r1, #32
 800b7fa:	f381 8811 	msr	BASEPRI, r1
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	4827      	ldr	r0, [pc, #156]	; (800b8a0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800b802:	f7fe feb3 	bl	800a56c <_PreparePacket>
 800b806:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b80c:	4b25      	ldr	r3, [pc, #148]	; (800b8a4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	627b      	str	r3, [r7, #36]	; 0x24
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	623b      	str	r3, [r7, #32]
 800b81e:	e00b      	b.n	800b838 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	b2da      	uxtb	r2, r3
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	1c59      	adds	r1, r3, #1
 800b828:	6279      	str	r1, [r7, #36]	; 0x24
 800b82a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b82e:	b2d2      	uxtb	r2, r2
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	09db      	lsrs	r3, r3, #7
 800b836:	623b      	str	r3, [r7, #32]
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	2b7f      	cmp	r3, #127	; 0x7f
 800b83c:	d8f0      	bhi.n	800b820 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	1c5a      	adds	r2, r3, #1
 800b842:	627a      	str	r2, [r7, #36]	; 0x24
 800b844:	6a3a      	ldr	r2, [r7, #32]
 800b846:	b2d2      	uxtb	r2, r2
 800b848:	701a      	strb	r2, [r3, #0]
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	61bb      	str	r3, [r7, #24]
 800b856:	e00b      	b.n	800b870 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	1c59      	adds	r1, r3, #1
 800b860:	61f9      	str	r1, [r7, #28]
 800b862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b866:	b2d2      	uxtb	r2, r2
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	09db      	lsrs	r3, r3, #7
 800b86e:	61bb      	str	r3, [r7, #24]
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	2b7f      	cmp	r3, #127	; 0x7f
 800b874:	d8f0      	bhi.n	800b858 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	61fa      	str	r2, [r7, #28]
 800b87c:	69ba      	ldr	r2, [r7, #24]
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800b886:	2207      	movs	r2, #7
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f7fe ff5c 	bl	800a748 <_SendPacket>
  RECORD_END();
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f383 8811 	msr	BASEPRI, r3
}
 800b896:	bf00      	nop
 800b898:	3728      	adds	r7, #40	; 0x28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	200115a0 	.word	0x200115a0
 800b8a4:	20011570 	.word	0x20011570

0800b8a8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800b8b0:	4b04      	ldr	r3, [pc, #16]	; (800b8c4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	1ad3      	subs	r3, r2, r3
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr
 800b8c4:	20011570 	.word	0x20011570

0800b8c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08c      	sub	sp, #48	; 0x30
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800b8d2:	4b3b      	ldr	r3, [pc, #236]	; (800b9c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d06d      	beq.n	800b9b6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800b8da:	4b39      	ldr	r3, [pc, #228]	; (800b9c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e4:	e008      	b.n	800b8f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d007      	beq.n	800b902 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8f8:	79fb      	ldrb	r3, [r7, #7]
 800b8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d3f2      	bcc.n	800b8e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 800b900:	e000      	b.n	800b904 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800b902:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800b904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b906:	2b00      	cmp	r3, #0
 800b908:	d055      	beq.n	800b9b6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b90a:	f3ef 8311 	mrs	r3, BASEPRI
 800b90e:	f04f 0120 	mov.w	r1, #32
 800b912:	f381 8811 	msr	BASEPRI, r1
 800b916:	617b      	str	r3, [r7, #20]
 800b918:	482a      	ldr	r0, [pc, #168]	; (800b9c4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800b91a:	f7fe fe27 	bl	800a56c <_PreparePacket>
 800b91e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	627b      	str	r3, [r7, #36]	; 0x24
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	623b      	str	r3, [r7, #32]
 800b92c:	e00b      	b.n	800b946 <SEGGER_SYSVIEW_SendModule+0x7e>
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	b2da      	uxtb	r2, r3
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	1c59      	adds	r1, r3, #1
 800b936:	6279      	str	r1, [r7, #36]	; 0x24
 800b938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	701a      	strb	r2, [r3, #0]
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	09db      	lsrs	r3, r3, #7
 800b944:	623b      	str	r3, [r7, #32]
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	2b7f      	cmp	r3, #127	; 0x7f
 800b94a:	d8f0      	bhi.n	800b92e <SEGGER_SYSVIEW_SendModule+0x66>
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	627a      	str	r2, [r7, #36]	; 0x24
 800b952:	6a3a      	ldr	r2, [r7, #32]
 800b954:	b2d2      	uxtb	r2, r2
 800b956:	701a      	strb	r2, [r3, #0]
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	61fb      	str	r3, [r7, #28]
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	61bb      	str	r3, [r7, #24]
 800b966:	e00b      	b.n	800b980 <SEGGER_SYSVIEW_SendModule+0xb8>
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	1c59      	adds	r1, r3, #1
 800b970:	61f9      	str	r1, [r7, #28]
 800b972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b976:	b2d2      	uxtb	r2, r2
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	09db      	lsrs	r3, r3, #7
 800b97e:	61bb      	str	r3, [r7, #24]
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	2b7f      	cmp	r3, #127	; 0x7f
 800b984:	d8f0      	bhi.n	800b968 <SEGGER_SYSVIEW_SendModule+0xa0>
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	1c5a      	adds	r2, r3, #1
 800b98a:	61fa      	str	r2, [r7, #28]
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2280      	movs	r2, #128	; 0x80
 800b99c:	4619      	mov	r1, r3
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7fe fd94 	bl	800a4cc <_EncodeStr>
 800b9a4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800b9a6:	2216      	movs	r2, #22
 800b9a8:	68f9      	ldr	r1, [r7, #12]
 800b9aa:	6938      	ldr	r0, [r7, #16]
 800b9ac:	f7fe fecc 	bl	800a748 <_SendPacket>
      RECORD_END();
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800b9b6:	bf00      	nop
 800b9b8:	3730      	adds	r7, #48	; 0x30
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20011598 	.word	0x20011598
 800b9c4:	200115a0 	.word	0x200115a0

0800b9c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00f      	beq.n	800b9f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800b9d6:	4b0a      	ldr	r3, [pc, #40]	; (800ba00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1f2      	bne.n	800b9dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800b9f6:	bf00      	nop
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20011598 	.word	0x20011598

0800ba04 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800ba0a:	f3ef 8311 	mrs	r3, BASEPRI
 800ba0e:	f04f 0120 	mov.w	r1, #32
 800ba12:	f381 8811 	msr	BASEPRI, r1
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	4817      	ldr	r0, [pc, #92]	; (800ba78 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800ba1a:	f7fe fda7 	bl	800a56c <_PreparePacket>
 800ba1e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	617b      	str	r3, [r7, #20]
 800ba28:	4b14      	ldr	r3, [pc, #80]	; (800ba7c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	613b      	str	r3, [r7, #16]
 800ba2e:	e00b      	b.n	800ba48 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	1c59      	adds	r1, r3, #1
 800ba38:	6179      	str	r1, [r7, #20]
 800ba3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	09db      	lsrs	r3, r3, #7
 800ba46:	613b      	str	r3, [r7, #16]
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba4c:	d8f0      	bhi.n	800ba30 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	617a      	str	r2, [r7, #20]
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	b2d2      	uxtb	r2, r2
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800ba5e:	221b      	movs	r2, #27
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	68b8      	ldr	r0, [r7, #8]
 800ba64:	f7fe fe70 	bl	800a748 <_SendPacket>
  RECORD_END();
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f383 8811 	msr	BASEPRI, r3
}
 800ba6e:	bf00      	nop
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	200115a0 	.word	0x200115a0
 800ba7c:	2001159c 	.word	0x2001159c

0800ba80 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b08a      	sub	sp, #40	; 0x28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ba88:	f3ef 8311 	mrs	r3, BASEPRI
 800ba8c:	f04f 0120 	mov.w	r1, #32
 800ba90:	f381 8811 	msr	BASEPRI, r1
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	4827      	ldr	r0, [pc, #156]	; (800bb34 <SEGGER_SYSVIEW_Warn+0xb4>)
 800ba98:	f7fe fd68 	bl	800a56c <_PreparePacket>
 800ba9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ba9e:	2280      	movs	r2, #128	; 0x80
 800baa0:	6879      	ldr	r1, [r7, #4]
 800baa2:	6938      	ldr	r0, [r7, #16]
 800baa4:	f7fe fd12 	bl	800a4cc <_EncodeStr>
 800baa8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	627b      	str	r3, [r7, #36]	; 0x24
 800baae:	2301      	movs	r3, #1
 800bab0:	623b      	str	r3, [r7, #32]
 800bab2:	e00b      	b.n	800bacc <SEGGER_SYSVIEW_Warn+0x4c>
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	1c59      	adds	r1, r3, #1
 800babc:	6279      	str	r1, [r7, #36]	; 0x24
 800babe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bac2:	b2d2      	uxtb	r2, r2
 800bac4:	701a      	strb	r2, [r3, #0]
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	09db      	lsrs	r3, r3, #7
 800baca:	623b      	str	r3, [r7, #32]
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	2b7f      	cmp	r3, #127	; 0x7f
 800bad0:	d8f0      	bhi.n	800bab4 <SEGGER_SYSVIEW_Warn+0x34>
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	627a      	str	r2, [r7, #36]	; 0x24
 800bad8:	6a3a      	ldr	r2, [r7, #32]
 800bada:	b2d2      	uxtb	r2, r2
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	61fb      	str	r3, [r7, #28]
 800bae6:	2300      	movs	r3, #0
 800bae8:	61bb      	str	r3, [r7, #24]
 800baea:	e00b      	b.n	800bb04 <SEGGER_SYSVIEW_Warn+0x84>
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	1c59      	adds	r1, r3, #1
 800baf4:	61f9      	str	r1, [r7, #28]
 800baf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bafa:	b2d2      	uxtb	r2, r2
 800bafc:	701a      	strb	r2, [r3, #0]
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	09db      	lsrs	r3, r3, #7
 800bb02:	61bb      	str	r3, [r7, #24]
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	2b7f      	cmp	r3, #127	; 0x7f
 800bb08:	d8f0      	bhi.n	800baec <SEGGER_SYSVIEW_Warn+0x6c>
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	61fa      	str	r2, [r7, #28]
 800bb10:	69ba      	ldr	r2, [r7, #24]
 800bb12:	b2d2      	uxtb	r2, r2
 800bb14:	701a      	strb	r2, [r3, #0]
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800bb1a:	221a      	movs	r2, #26
 800bb1c:	68f9      	ldr	r1, [r7, #12]
 800bb1e:	6938      	ldr	r0, [r7, #16]
 800bb20:	f7fe fe12 	bl	800a748 <_SendPacket>
  RECORD_END();
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f383 8811 	msr	BASEPRI, r3
}
 800bb2a:	bf00      	nop
 800bb2c:	3728      	adds	r7, #40	; 0x28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	200115a0 	.word	0x200115a0

0800bb38 <__errno>:
 800bb38:	4b01      	ldr	r3, [pc, #4]	; (800bb40 <__errno+0x8>)
 800bb3a:	6818      	ldr	r0, [r3, #0]
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	20000010 	.word	0x20000010

0800bb44 <__libc_init_array>:
 800bb44:	b570      	push	{r4, r5, r6, lr}
 800bb46:	4d0d      	ldr	r5, [pc, #52]	; (800bb7c <__libc_init_array+0x38>)
 800bb48:	4c0d      	ldr	r4, [pc, #52]	; (800bb80 <__libc_init_array+0x3c>)
 800bb4a:	1b64      	subs	r4, r4, r5
 800bb4c:	10a4      	asrs	r4, r4, #2
 800bb4e:	2600      	movs	r6, #0
 800bb50:	42a6      	cmp	r6, r4
 800bb52:	d109      	bne.n	800bb68 <__libc_init_array+0x24>
 800bb54:	4d0b      	ldr	r5, [pc, #44]	; (800bb84 <__libc_init_array+0x40>)
 800bb56:	4c0c      	ldr	r4, [pc, #48]	; (800bb88 <__libc_init_array+0x44>)
 800bb58:	f000 f9b6 	bl	800bec8 <_init>
 800bb5c:	1b64      	subs	r4, r4, r5
 800bb5e:	10a4      	asrs	r4, r4, #2
 800bb60:	2600      	movs	r6, #0
 800bb62:	42a6      	cmp	r6, r4
 800bb64:	d105      	bne.n	800bb72 <__libc_init_array+0x2e>
 800bb66:	bd70      	pop	{r4, r5, r6, pc}
 800bb68:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb6c:	4798      	blx	r3
 800bb6e:	3601      	adds	r6, #1
 800bb70:	e7ee      	b.n	800bb50 <__libc_init_array+0xc>
 800bb72:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb76:	4798      	blx	r3
 800bb78:	3601      	adds	r6, #1
 800bb7a:	e7f2      	b.n	800bb62 <__libc_init_array+0x1e>
 800bb7c:	0800c108 	.word	0x0800c108
 800bb80:	0800c108 	.word	0x0800c108
 800bb84:	0800c108 	.word	0x0800c108
 800bb88:	0800c10c 	.word	0x0800c10c

0800bb8c <__retarget_lock_acquire_recursive>:
 800bb8c:	4770      	bx	lr

0800bb8e <__retarget_lock_release_recursive>:
 800bb8e:	4770      	bx	lr

0800bb90 <malloc>:
 800bb90:	4b02      	ldr	r3, [pc, #8]	; (800bb9c <malloc+0xc>)
 800bb92:	4601      	mov	r1, r0
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	f000 b89d 	b.w	800bcd4 <_malloc_r>
 800bb9a:	bf00      	nop
 800bb9c:	20000010 	.word	0x20000010

0800bba0 <free>:
 800bba0:	4b02      	ldr	r3, [pc, #8]	; (800bbac <free+0xc>)
 800bba2:	4601      	mov	r1, r0
 800bba4:	6818      	ldr	r0, [r3, #0]
 800bba6:	f000 b829 	b.w	800bbfc <_free_r>
 800bbaa:	bf00      	nop
 800bbac:	20000010 	.word	0x20000010

0800bbb0 <memcmp>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	3901      	subs	r1, #1
 800bbb4:	4402      	add	r2, r0
 800bbb6:	4290      	cmp	r0, r2
 800bbb8:	d101      	bne.n	800bbbe <memcmp+0xe>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	e005      	b.n	800bbca <memcmp+0x1a>
 800bbbe:	7803      	ldrb	r3, [r0, #0]
 800bbc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bbc4:	42a3      	cmp	r3, r4
 800bbc6:	d001      	beq.n	800bbcc <memcmp+0x1c>
 800bbc8:	1b18      	subs	r0, r3, r4
 800bbca:	bd10      	pop	{r4, pc}
 800bbcc:	3001      	adds	r0, #1
 800bbce:	e7f2      	b.n	800bbb6 <memcmp+0x6>

0800bbd0 <memcpy>:
 800bbd0:	440a      	add	r2, r1
 800bbd2:	4291      	cmp	r1, r2
 800bbd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bbd8:	d100      	bne.n	800bbdc <memcpy+0xc>
 800bbda:	4770      	bx	lr
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbe6:	4291      	cmp	r1, r2
 800bbe8:	d1f9      	bne.n	800bbde <memcpy+0xe>
 800bbea:	bd10      	pop	{r4, pc}

0800bbec <memset>:
 800bbec:	4402      	add	r2, r0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d100      	bne.n	800bbf6 <memset+0xa>
 800bbf4:	4770      	bx	lr
 800bbf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbfa:	e7f9      	b.n	800bbf0 <memset+0x4>

0800bbfc <_free_r>:
 800bbfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbfe:	2900      	cmp	r1, #0
 800bc00:	d044      	beq.n	800bc8c <_free_r+0x90>
 800bc02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc06:	9001      	str	r0, [sp, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f1a1 0404 	sub.w	r4, r1, #4
 800bc0e:	bfb8      	it	lt
 800bc10:	18e4      	addlt	r4, r4, r3
 800bc12:	f000 f94d 	bl	800beb0 <__malloc_lock>
 800bc16:	4a1e      	ldr	r2, [pc, #120]	; (800bc90 <_free_r+0x94>)
 800bc18:	9801      	ldr	r0, [sp, #4]
 800bc1a:	6813      	ldr	r3, [r2, #0]
 800bc1c:	b933      	cbnz	r3, 800bc2c <_free_r+0x30>
 800bc1e:	6063      	str	r3, [r4, #4]
 800bc20:	6014      	str	r4, [r2, #0]
 800bc22:	b003      	add	sp, #12
 800bc24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc28:	f000 b948 	b.w	800bebc <__malloc_unlock>
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	d908      	bls.n	800bc42 <_free_r+0x46>
 800bc30:	6825      	ldr	r5, [r4, #0]
 800bc32:	1961      	adds	r1, r4, r5
 800bc34:	428b      	cmp	r3, r1
 800bc36:	bf01      	itttt	eq
 800bc38:	6819      	ldreq	r1, [r3, #0]
 800bc3a:	685b      	ldreq	r3, [r3, #4]
 800bc3c:	1949      	addeq	r1, r1, r5
 800bc3e:	6021      	streq	r1, [r4, #0]
 800bc40:	e7ed      	b.n	800bc1e <_free_r+0x22>
 800bc42:	461a      	mov	r2, r3
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	b10b      	cbz	r3, 800bc4c <_free_r+0x50>
 800bc48:	42a3      	cmp	r3, r4
 800bc4a:	d9fa      	bls.n	800bc42 <_free_r+0x46>
 800bc4c:	6811      	ldr	r1, [r2, #0]
 800bc4e:	1855      	adds	r5, r2, r1
 800bc50:	42a5      	cmp	r5, r4
 800bc52:	d10b      	bne.n	800bc6c <_free_r+0x70>
 800bc54:	6824      	ldr	r4, [r4, #0]
 800bc56:	4421      	add	r1, r4
 800bc58:	1854      	adds	r4, r2, r1
 800bc5a:	42a3      	cmp	r3, r4
 800bc5c:	6011      	str	r1, [r2, #0]
 800bc5e:	d1e0      	bne.n	800bc22 <_free_r+0x26>
 800bc60:	681c      	ldr	r4, [r3, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	6053      	str	r3, [r2, #4]
 800bc66:	4421      	add	r1, r4
 800bc68:	6011      	str	r1, [r2, #0]
 800bc6a:	e7da      	b.n	800bc22 <_free_r+0x26>
 800bc6c:	d902      	bls.n	800bc74 <_free_r+0x78>
 800bc6e:	230c      	movs	r3, #12
 800bc70:	6003      	str	r3, [r0, #0]
 800bc72:	e7d6      	b.n	800bc22 <_free_r+0x26>
 800bc74:	6825      	ldr	r5, [r4, #0]
 800bc76:	1961      	adds	r1, r4, r5
 800bc78:	428b      	cmp	r3, r1
 800bc7a:	bf04      	itt	eq
 800bc7c:	6819      	ldreq	r1, [r3, #0]
 800bc7e:	685b      	ldreq	r3, [r3, #4]
 800bc80:	6063      	str	r3, [r4, #4]
 800bc82:	bf04      	itt	eq
 800bc84:	1949      	addeq	r1, r1, r5
 800bc86:	6021      	streq	r1, [r4, #0]
 800bc88:	6054      	str	r4, [r2, #4]
 800bc8a:	e7ca      	b.n	800bc22 <_free_r+0x26>
 800bc8c:	b003      	add	sp, #12
 800bc8e:	bd30      	pop	{r4, r5, pc}
 800bc90:	20011684 	.word	0x20011684

0800bc94 <sbrk_aligned>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	4e0e      	ldr	r6, [pc, #56]	; (800bcd0 <sbrk_aligned+0x3c>)
 800bc98:	460c      	mov	r4, r1
 800bc9a:	6831      	ldr	r1, [r6, #0]
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	b911      	cbnz	r1, 800bca6 <sbrk_aligned+0x12>
 800bca0:	f000 f8f6 	bl	800be90 <_sbrk_r>
 800bca4:	6030      	str	r0, [r6, #0]
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 f8f1 	bl	800be90 <_sbrk_r>
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	d00a      	beq.n	800bcc8 <sbrk_aligned+0x34>
 800bcb2:	1cc4      	adds	r4, r0, #3
 800bcb4:	f024 0403 	bic.w	r4, r4, #3
 800bcb8:	42a0      	cmp	r0, r4
 800bcba:	d007      	beq.n	800bccc <sbrk_aligned+0x38>
 800bcbc:	1a21      	subs	r1, r4, r0
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f000 f8e6 	bl	800be90 <_sbrk_r>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d101      	bne.n	800bccc <sbrk_aligned+0x38>
 800bcc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bccc:	4620      	mov	r0, r4
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	20011688 	.word	0x20011688

0800bcd4 <_malloc_r>:
 800bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd8:	1ccd      	adds	r5, r1, #3
 800bcda:	f025 0503 	bic.w	r5, r5, #3
 800bcde:	3508      	adds	r5, #8
 800bce0:	2d0c      	cmp	r5, #12
 800bce2:	bf38      	it	cc
 800bce4:	250c      	movcc	r5, #12
 800bce6:	2d00      	cmp	r5, #0
 800bce8:	4607      	mov	r7, r0
 800bcea:	db01      	blt.n	800bcf0 <_malloc_r+0x1c>
 800bcec:	42a9      	cmp	r1, r5
 800bcee:	d905      	bls.n	800bcfc <_malloc_r+0x28>
 800bcf0:	230c      	movs	r3, #12
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	2600      	movs	r6, #0
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfc:	4e2e      	ldr	r6, [pc, #184]	; (800bdb8 <_malloc_r+0xe4>)
 800bcfe:	f000 f8d7 	bl	800beb0 <__malloc_lock>
 800bd02:	6833      	ldr	r3, [r6, #0]
 800bd04:	461c      	mov	r4, r3
 800bd06:	bb34      	cbnz	r4, 800bd56 <_malloc_r+0x82>
 800bd08:	4629      	mov	r1, r5
 800bd0a:	4638      	mov	r0, r7
 800bd0c:	f7ff ffc2 	bl	800bc94 <sbrk_aligned>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	4604      	mov	r4, r0
 800bd14:	d14d      	bne.n	800bdb2 <_malloc_r+0xde>
 800bd16:	6834      	ldr	r4, [r6, #0]
 800bd18:	4626      	mov	r6, r4
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	d140      	bne.n	800bda0 <_malloc_r+0xcc>
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	4631      	mov	r1, r6
 800bd22:	4638      	mov	r0, r7
 800bd24:	eb04 0803 	add.w	r8, r4, r3
 800bd28:	f000 f8b2 	bl	800be90 <_sbrk_r>
 800bd2c:	4580      	cmp	r8, r0
 800bd2e:	d13a      	bne.n	800bda6 <_malloc_r+0xd2>
 800bd30:	6821      	ldr	r1, [r4, #0]
 800bd32:	3503      	adds	r5, #3
 800bd34:	1a6d      	subs	r5, r5, r1
 800bd36:	f025 0503 	bic.w	r5, r5, #3
 800bd3a:	3508      	adds	r5, #8
 800bd3c:	2d0c      	cmp	r5, #12
 800bd3e:	bf38      	it	cc
 800bd40:	250c      	movcc	r5, #12
 800bd42:	4629      	mov	r1, r5
 800bd44:	4638      	mov	r0, r7
 800bd46:	f7ff ffa5 	bl	800bc94 <sbrk_aligned>
 800bd4a:	3001      	adds	r0, #1
 800bd4c:	d02b      	beq.n	800bda6 <_malloc_r+0xd2>
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	442b      	add	r3, r5
 800bd52:	6023      	str	r3, [r4, #0]
 800bd54:	e00e      	b.n	800bd74 <_malloc_r+0xa0>
 800bd56:	6822      	ldr	r2, [r4, #0]
 800bd58:	1b52      	subs	r2, r2, r5
 800bd5a:	d41e      	bmi.n	800bd9a <_malloc_r+0xc6>
 800bd5c:	2a0b      	cmp	r2, #11
 800bd5e:	d916      	bls.n	800bd8e <_malloc_r+0xba>
 800bd60:	1961      	adds	r1, r4, r5
 800bd62:	42a3      	cmp	r3, r4
 800bd64:	6025      	str	r5, [r4, #0]
 800bd66:	bf18      	it	ne
 800bd68:	6059      	strne	r1, [r3, #4]
 800bd6a:	6863      	ldr	r3, [r4, #4]
 800bd6c:	bf08      	it	eq
 800bd6e:	6031      	streq	r1, [r6, #0]
 800bd70:	5162      	str	r2, [r4, r5]
 800bd72:	604b      	str	r3, [r1, #4]
 800bd74:	4638      	mov	r0, r7
 800bd76:	f104 060b 	add.w	r6, r4, #11
 800bd7a:	f000 f89f 	bl	800bebc <__malloc_unlock>
 800bd7e:	f026 0607 	bic.w	r6, r6, #7
 800bd82:	1d23      	adds	r3, r4, #4
 800bd84:	1af2      	subs	r2, r6, r3
 800bd86:	d0b6      	beq.n	800bcf6 <_malloc_r+0x22>
 800bd88:	1b9b      	subs	r3, r3, r6
 800bd8a:	50a3      	str	r3, [r4, r2]
 800bd8c:	e7b3      	b.n	800bcf6 <_malloc_r+0x22>
 800bd8e:	6862      	ldr	r2, [r4, #4]
 800bd90:	42a3      	cmp	r3, r4
 800bd92:	bf0c      	ite	eq
 800bd94:	6032      	streq	r2, [r6, #0]
 800bd96:	605a      	strne	r2, [r3, #4]
 800bd98:	e7ec      	b.n	800bd74 <_malloc_r+0xa0>
 800bd9a:	4623      	mov	r3, r4
 800bd9c:	6864      	ldr	r4, [r4, #4]
 800bd9e:	e7b2      	b.n	800bd06 <_malloc_r+0x32>
 800bda0:	4634      	mov	r4, r6
 800bda2:	6876      	ldr	r6, [r6, #4]
 800bda4:	e7b9      	b.n	800bd1a <_malloc_r+0x46>
 800bda6:	230c      	movs	r3, #12
 800bda8:	603b      	str	r3, [r7, #0]
 800bdaa:	4638      	mov	r0, r7
 800bdac:	f000 f886 	bl	800bebc <__malloc_unlock>
 800bdb0:	e7a1      	b.n	800bcf6 <_malloc_r+0x22>
 800bdb2:	6025      	str	r5, [r4, #0]
 800bdb4:	e7de      	b.n	800bd74 <_malloc_r+0xa0>
 800bdb6:	bf00      	nop
 800bdb8:	20011684 	.word	0x20011684

0800bdbc <cleanup_glue>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	6809      	ldr	r1, [r1, #0]
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	b109      	cbz	r1, 800bdca <cleanup_glue+0xe>
 800bdc6:	f7ff fff9 	bl	800bdbc <cleanup_glue>
 800bdca:	4621      	mov	r1, r4
 800bdcc:	4628      	mov	r0, r5
 800bdce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdd2:	f7ff bf13 	b.w	800bbfc <_free_r>
	...

0800bdd8 <_reclaim_reent>:
 800bdd8:	4b2c      	ldr	r3, [pc, #176]	; (800be8c <_reclaim_reent+0xb4>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4283      	cmp	r3, r0
 800bdde:	b570      	push	{r4, r5, r6, lr}
 800bde0:	4604      	mov	r4, r0
 800bde2:	d051      	beq.n	800be88 <_reclaim_reent+0xb0>
 800bde4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bde6:	b143      	cbz	r3, 800bdfa <_reclaim_reent+0x22>
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d14a      	bne.n	800be84 <_reclaim_reent+0xac>
 800bdee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdf0:	6819      	ldr	r1, [r3, #0]
 800bdf2:	b111      	cbz	r1, 800bdfa <_reclaim_reent+0x22>
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7ff ff01 	bl	800bbfc <_free_r>
 800bdfa:	6961      	ldr	r1, [r4, #20]
 800bdfc:	b111      	cbz	r1, 800be04 <_reclaim_reent+0x2c>
 800bdfe:	4620      	mov	r0, r4
 800be00:	f7ff fefc 	bl	800bbfc <_free_r>
 800be04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be06:	b111      	cbz	r1, 800be0e <_reclaim_reent+0x36>
 800be08:	4620      	mov	r0, r4
 800be0a:	f7ff fef7 	bl	800bbfc <_free_r>
 800be0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be10:	b111      	cbz	r1, 800be18 <_reclaim_reent+0x40>
 800be12:	4620      	mov	r0, r4
 800be14:	f7ff fef2 	bl	800bbfc <_free_r>
 800be18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800be1a:	b111      	cbz	r1, 800be22 <_reclaim_reent+0x4a>
 800be1c:	4620      	mov	r0, r4
 800be1e:	f7ff feed 	bl	800bbfc <_free_r>
 800be22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800be24:	b111      	cbz	r1, 800be2c <_reclaim_reent+0x54>
 800be26:	4620      	mov	r0, r4
 800be28:	f7ff fee8 	bl	800bbfc <_free_r>
 800be2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800be2e:	b111      	cbz	r1, 800be36 <_reclaim_reent+0x5e>
 800be30:	4620      	mov	r0, r4
 800be32:	f7ff fee3 	bl	800bbfc <_free_r>
 800be36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800be38:	b111      	cbz	r1, 800be40 <_reclaim_reent+0x68>
 800be3a:	4620      	mov	r0, r4
 800be3c:	f7ff fede 	bl	800bbfc <_free_r>
 800be40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be42:	b111      	cbz	r1, 800be4a <_reclaim_reent+0x72>
 800be44:	4620      	mov	r0, r4
 800be46:	f7ff fed9 	bl	800bbfc <_free_r>
 800be4a:	69a3      	ldr	r3, [r4, #24]
 800be4c:	b1e3      	cbz	r3, 800be88 <_reclaim_reent+0xb0>
 800be4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be50:	4620      	mov	r0, r4
 800be52:	4798      	blx	r3
 800be54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be56:	b1b9      	cbz	r1, 800be88 <_reclaim_reent+0xb0>
 800be58:	4620      	mov	r0, r4
 800be5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be5e:	f7ff bfad 	b.w	800bdbc <cleanup_glue>
 800be62:	5949      	ldr	r1, [r1, r5]
 800be64:	b941      	cbnz	r1, 800be78 <_reclaim_reent+0xa0>
 800be66:	3504      	adds	r5, #4
 800be68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be6a:	2d80      	cmp	r5, #128	; 0x80
 800be6c:	68d9      	ldr	r1, [r3, #12]
 800be6e:	d1f8      	bne.n	800be62 <_reclaim_reent+0x8a>
 800be70:	4620      	mov	r0, r4
 800be72:	f7ff fec3 	bl	800bbfc <_free_r>
 800be76:	e7ba      	b.n	800bdee <_reclaim_reent+0x16>
 800be78:	680e      	ldr	r6, [r1, #0]
 800be7a:	4620      	mov	r0, r4
 800be7c:	f7ff febe 	bl	800bbfc <_free_r>
 800be80:	4631      	mov	r1, r6
 800be82:	e7ef      	b.n	800be64 <_reclaim_reent+0x8c>
 800be84:	2500      	movs	r5, #0
 800be86:	e7ef      	b.n	800be68 <_reclaim_reent+0x90>
 800be88:	bd70      	pop	{r4, r5, r6, pc}
 800be8a:	bf00      	nop
 800be8c:	20000010 	.word	0x20000010

0800be90 <_sbrk_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4d06      	ldr	r5, [pc, #24]	; (800beac <_sbrk_r+0x1c>)
 800be94:	2300      	movs	r3, #0
 800be96:	4604      	mov	r4, r0
 800be98:	4608      	mov	r0, r1
 800be9a:	602b      	str	r3, [r5, #0]
 800be9c:	f7f5 fa00 	bl	80012a0 <_sbrk>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_sbrk_r+0x1a>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_sbrk_r+0x1a>
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	2001168c 	.word	0x2001168c

0800beb0 <__malloc_lock>:
 800beb0:	4801      	ldr	r0, [pc, #4]	; (800beb8 <__malloc_lock+0x8>)
 800beb2:	f7ff be6b 	b.w	800bb8c <__retarget_lock_acquire_recursive>
 800beb6:	bf00      	nop
 800beb8:	20011683 	.word	0x20011683

0800bebc <__malloc_unlock>:
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <__malloc_unlock+0x8>)
 800bebe:	f7ff be66 	b.w	800bb8e <__retarget_lock_release_recursive>
 800bec2:	bf00      	nop
 800bec4:	20011683 	.word	0x20011683

0800bec8 <_init>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	bf00      	nop
 800becc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bece:	bc08      	pop	{r3}
 800bed0:	469e      	mov	lr, r3
 800bed2:	4770      	bx	lr

0800bed4 <_fini>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	bf00      	nop
 800bed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beda:	bc08      	pop	{r3}
 800bedc:	469e      	mov	lr, r3
 800bede:	4770      	bx	lr
