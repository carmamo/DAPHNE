
F446RE_RTOS_LEPTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08009cf4  08009cf4  00019cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e08  08009e08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e10  08009e10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e10  08009e10  00019e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010ba8  20000074  08009e8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010c1c  08009e8c  00020c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020356  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc9  00000000  00000000  000403fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  000440c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  00045ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f71  00000000  00000000  00047368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1aa  00000000  00000000  0004c2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1ad4  00000000  00000000  0006a483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bf57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000726c  00000000  00000000  0014bfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009cdc 	.word	0x08009cdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08009cdc 	.word	0x08009cdc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <lepton_Init>:

static lepton_t dev;


void lepton_Init(I2C_HandleTypeDef *i2c, SPI_HandleTypeDef *spi, UART_HandleTypeDef *uart, GPIO_TypeDef *port, uint16_t pin)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
 8000520:	603b      	str	r3, [r7, #0]
	dev.spiHandle = spi;
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <lepton_Init+0x38>)
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	6053      	str	r3, [r2, #4]
	dev.uartHandle = uart;
 8000528:	4a08      	ldr	r2, [pc, #32]	; (800054c <lepton_Init+0x38>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6113      	str	r3, [r2, #16]
	dev.i2cHandle = i2c;
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <lepton_Init+0x38>)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	6013      	str	r3, [r2, #0]
	dev.CS_port = port;
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <lepton_Init+0x38>)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	6093      	str	r3, [r2, #8]
	dev.CS_pin = pin;
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <lepton_Init+0x38>)
 800053c:	8b3b      	ldrh	r3, [r7, #24]
 800053e:	8193      	strh	r3, [r2, #12]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20000090 	.word	0x20000090

08000550 <lepton_GetReg>:
	array[1] = reg;
	return HAL_I2C_Master_Transmit(dev.i2cHandle, LEPTON_I2C_ADDR, array, 2, 100);
}

HAL_StatusTypeDef lepton_GetReg(uint16_t reg, uint16_t *rxdata)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af04      	add	r7, sp, #16
 8000556:	4603      	mov	r3, r0
 8000558:	6039      	str	r1, [r7, #0]
 800055a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(dev.i2cHandle, LEPTON_I2C_ADDR, reg, 2, (uint8_t *)rxdata, 2, 100);
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <lepton_GetReg+0x50>)
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	88fa      	ldrh	r2, [r7, #6]
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	9302      	str	r3, [sp, #8]
 8000566:	2302      	movs	r3, #2
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2302      	movs	r3, #2
 8000570:	2154      	movs	r1, #84	; 0x54
 8000572:	f002 f871 	bl	8002658 <HAL_I2C_Mem_Read>
 8000576:	4603      	mov	r3, r0
 8000578:	73fb      	strb	r3, [r7, #15]
	*rxdata = (*rxdata >> 8 | *rxdata << 8);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	0a1b      	lsrs	r3, r3, #8
 8000580:	b29b      	uxth	r3, r3
 8000582:	b21a      	sxth	r2, r3
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	b21b      	sxth	r3, r3
 8000590:	b29a      	uxth	r2, r3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	801a      	strh	r2, [r3, #0]
	return status;
 8000596:	7bfb      	ldrb	r3, [r7, #15]

//	lepton_SetReg(reg);
//	return HAL_I2C_Master_Receive(dev.i2cHandle, LEPTON_I2C_ADDR, (uint8_t *)rxdata, 2, 100);

}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000090 	.word	0x20000090

080005a4 <lepton_SetData>:
HAL_StatusTypeDef lepton_SetData(uint8_t *txdata, uint16_t size)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af04      	add	r7, sp, #16
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint16_t *rxdata = (uint16_t *)malloc(sizeof(uint16_t));
 80005b0:	2002      	movs	r0, #2
 80005b2:	f009 fa07 	bl	80099c4 <malloc>
 80005b6:	4603      	mov	r3, r0
 80005b8:	60fb      	str	r3, [r7, #12]

	do
	{
		lepton_GetReg(0x0002, rxdata);
 80005ba:	68f9      	ldr	r1, [r7, #12]
 80005bc:	2002      	movs	r0, #2
 80005be:	f7ff ffc7 	bl	8000550 <lepton_GetReg>
	}
	while(*rxdata & 0x01);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f5      	bne.n	80005ba <lepton_SetData+0x16>

//	HAL_I2C_Master_Transmit(dev.i2cHandle, LEPTON_I2C_ADDR, txdata, size, 100);

	// Write data, 0x0008 Data 0 Address (beginning of data block)
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0008, 2, txdata, size, 100);
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <lepton_SetData+0xa4>)
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	2264      	movs	r2, #100	; 0x64
 80005d6:	9202      	str	r2, [sp, #8]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2302      	movs	r3, #2
 80005e0:	2208      	movs	r2, #8
 80005e2:	2154      	movs	r1, #84	; 0x54
 80005e4:	f001 ff3e 	bl	8002464 <HAL_I2C_Mem_Write>
 80005e8:	4603      	mov	r3, r0
 80005ea:	72fb      	strb	r3, [r7, #11]
	if(status != HAL_OK)
 80005ec:	7afb      	ldrb	r3, [r7, #11]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d004      	beq.n	80005fc <lepton_SetData+0x58>
	{
		free(rxdata);
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f009 f9ee 	bl	80099d4 <free>
		return status;
 80005f8:	7afb      	ldrb	r3, [r7, #11]
 80005fa:	e021      	b.n	8000640 <lepton_SetData+0x9c>
	}

	// Write data length, 0x0006 Data Length Register
	size = size >> 1;
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	085b      	lsrs	r3, r3, #1
 8000600:	b29b      	uxth	r3, r3
 8000602:	807b      	strh	r3, [r7, #2]
	size = (size >> 8 | size << 8);
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b21a      	sxth	r2, r3
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	b21b      	sxth	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b21b      	sxth	r3, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	807b      	strh	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0006, 2, (uint8_t *)&size, 2, 100);
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <lepton_SetData+0xa4>)
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2302      	movs	r3, #2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	1cbb      	adds	r3, r7, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2302      	movs	r3, #2
 800062c:	2206      	movs	r2, #6
 800062e:	2154      	movs	r1, #84	; 0x54
 8000630:	f001 ff18 	bl	8002464 <HAL_I2C_Mem_Write>
 8000634:	4603      	mov	r3, r0
 8000636:	72fb      	strb	r3, [r7, #11]

	free(rxdata);
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f009 f9cb 	bl	80099d4 <free>
	return status;
 800063e:	7afb      	ldrb	r3, [r7, #11]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000090 	.word	0x20000090

0800064c <lepton_command>:
//	*rxdata = (*rxdata >> 8 | *rxdata << 8);
	return status;
}

HAL_StatusTypeDef lepton_command(uint16_t cmd)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af04      	add	r7, sp, #16
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	uint16_t *rxdata = (uint16_t *)malloc(sizeof(uint16_t));
 8000656:	2002      	movs	r0, #2
 8000658:	f009 f9b4 	bl	80099c4 <malloc>
 800065c:	4603      	mov	r3, r0
 800065e:	60fb      	str	r3, [r7, #12]

	do
	{
		lepton_GetReg(0x02, rxdata);
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	2002      	movs	r0, #2
 8000664:	f7ff ff74 	bl	8000550 <lepton_GetReg>
	}
	while(*rxdata & 0x01);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f5      	bne.n	8000660 <lepton_command+0x14>

	free(rxdata);
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f009 f9ad 	bl	80099d4 <free>
	cmd = (cmd >> 8 | cmd << 8);
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	b29b      	uxth	r3, r3
 8000680:	b21a      	sxth	r2, r3
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21b      	sxth	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b21b      	sxth	r3, r3
 800068c:	b29b      	uxth	r3, r3
 800068e:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0004, 2, (uint8_t *)&cmd, 2, 100);
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <lepton_command+0x68>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	2302      	movs	r3, #2
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2302      	movs	r3, #2
 80006a2:	2204      	movs	r2, #4
 80006a4:	2154      	movs	r1, #84	; 0x54
 80006a6:	f001 fedd 	bl	8002464 <HAL_I2C_Mem_Write>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000090 	.word	0x20000090

080006b8 <lepton_vsync>:
	/* 0x0E00 (RAD Module ID) + 0x10 (Command Base - Ctrl enable) + 0x01 (Set) + 0x4000 (Protection Bit) = 0x4E11 */
	return lepton_command(0x4E11);
}

HAL_StatusTypeDef lepton_vsync(bool vsync_enabled)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	uint8_t *data = (uint8_t *)malloc(4*sizeof(uint8_t));
 80006c2:	2004      	movs	r0, #4
 80006c4:	f009 f97e 	bl	80099c4 <malloc>
 80006c8:	4603      	mov	r3, r0
 80006ca:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<4; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	e007      	b.n	80006e2 <lepton_vsync+0x2a>
		{
			data[i] = 0x00;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4413      	add	r3, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<4; i++)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3301      	adds	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	ddf4      	ble.n	80006d2 <lepton_vsync+0x1a>
		}

		if(vsync_enabled) data[1] = 0x05;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d003      	beq.n	80006f6 <lepton_vsync+0x3e>
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	3301      	adds	r3, #1
 80006f2:	2205      	movs	r2, #5
 80006f4:	701a      	strb	r2, [r3, #0]

		lepton_SetData(data, 4);
 80006f6:	2104      	movs	r1, #4
 80006f8:	68b8      	ldr	r0, [r7, #8]
 80006fa:	f7ff ff53 	bl	80005a4 <lepton_SetData>
		free(data);
 80006fe:	68b8      	ldr	r0, [r7, #8]
 8000700:	f009 f968 	bl	80099d4 <free>

		/* 0x0800 (OEM Module ID) + 0x54 (Command Base - Ctrl enable) + 0x01 (Set) + 0x4000 (Protection Bit) = 0x4855 */
		return lepton_command(0x4855);
 8000704:	f644 0055 	movw	r0, #18517	; 0x4855
 8000708:	f7ff ffa0 	bl	800064c <lepton_command>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <send_byte>:


void send_byte(uint8_t data)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(dev.uartHandle, &data, 1, 100);
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <send_byte+0x20>)
 8000724:	6918      	ldr	r0, [r3, #16]
 8000726:	1df9      	adds	r1, r7, #7
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	2201      	movs	r2, #1
 800072c:	f004 faaf 	bl	8004c8e <HAL_UART_Transmit>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000090 	.word	0x20000090

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fe09 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f849 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f96d 	bl	8000a28 <MX_GPIO_Init>
  MX_DMA_Init();
 800074e:	f000 f943 	bl	80009d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000752:	f000 f915 	bl	8000980 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000756:	f000 f8ad 	bl	80008b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800075a:	f000 f8d9 	bl	8000910 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lepton_Init(&hi2c1, &hspi1, &huart2, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 800075e:	2340      	movs	r3, #64	; 0x40
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <main+0x70>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <main+0x74>)
 8000766:	4913      	ldr	r1, [pc, #76]	; (80007b4 <main+0x78>)
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <main+0x7c>)
 800076a:	f7ff fed3 	bl	8000514 <lepton_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800076e:	f005 fadd 	bl	8005d2c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  FramePoolHandle = osMemoryPoolNew(MEMPOOL_OBJECTS, FRAME_SIZE_U8, &FramePool_attributes);
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <main+0x80>)
 8000774:	f242 6170 	movw	r1, #9840	; 0x2670
 8000778:	2004      	movs	r0, #4
 800077a:	f005 fc9d 	bl	80060b8 <osMemoryPoolNew>
 800077e:	4603      	mov	r3, r0
 8000780:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <main+0x84>)
 8000782:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTx */
  uartTxHandle = osThreadNew(prvPrintImageTask, NULL, &uartTx_attributes);
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <main+0x88>)
 8000786:	2100      	movs	r1, #0
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <main+0x8c>)
 800078a:	f005 fb19 	bl	8005dc0 <osThreadNew>
 800078e:	4603      	mov	r3, r0
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <main+0x90>)
 8000792:	6013      	str	r3, [r2, #0]

  /* creation of VoSPI */
  VoSPIHandle = osThreadNew(prvCaptureFramesTask, NULL, &VoSPI_attributes);
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <main+0x94>)
 8000796:	2100      	movs	r1, #0
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <main+0x98>)
 800079a:	f005 fb11 	bl	8005dc0 <osThreadNew>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <main+0x9c>)
 80007a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007a4:	f005 fae6 	bl	8005d74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x6c>
 80007aa:	bf00      	nop
 80007ac:	40020400 	.word	0x40020400
 80007b0:	20000210 	.word	0x20000210
 80007b4:	200000f8 	.word	0x200000f8
 80007b8:	200000a4 	.word	0x200000a4
 80007bc:	08009d70 	.word	0x08009d70
 80007c0:	20009c20 	.word	0x20009c20
 80007c4:	08009d28 	.word	0x08009d28
 80007c8:	08000bd5 	.word	0x08000bd5
 80007cc:	20000254 	.word	0x20000254
 80007d0:	08009d4c 	.word	0x08009d4c
 80007d4:	08000c7d 	.word	0x08000c7d
 80007d8:	20000258 	.word	0x20000258

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	; 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2234      	movs	r2, #52	; 0x34
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f009 f908 	bl	8009a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <SystemClock_Config+0xd0>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a28      	ldr	r2, [pc, #160]	; (80008ac <SystemClock_Config+0xd0>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <SystemClock_Config+0xd0>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <SystemClock_Config+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <SystemClock_Config+0xd4>)
 8000826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <SystemClock_Config+0xd4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000840:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000850:	23a0      	movs	r3, #160	; 0xa0
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fff5 	bl	8003854 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000870:	f000 fab6 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2302      	movs	r3, #2
 800087a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000880:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	2105      	movs	r1, #5
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fc62 	bl	800315c <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800089e:	f000 fa9f 	bl	8000de0 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3750      	adds	r7, #80	; 0x50
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ba:	4a13      	ldr	r2, [pc, #76]	; (8000908 <MX_I2C1_Init+0x54>)
 80008bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_I2C1_Init+0x58>)
 80008c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_I2C1_Init+0x50>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_I2C1_Init+0x50>)
 80008f2:	f001 fc73 	bl	80021dc <HAL_I2C_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008fc:	f000 fa70 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000a4 	.word	0x200000a4
 8000908:	40005400 	.word	0x40005400
 800090c:	000186a0 	.word	0x000186a0

08000910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_SPI1_Init+0x68>)
 8000916:	4a19      	ldr	r2, [pc, #100]	; (800097c <MX_SPI1_Init+0x6c>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI1_Init+0x68>)
 800091c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_SPI1_Init+0x68>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_SPI1_Init+0x68>)
 800092a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800092e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_SPI1_Init+0x68>)
 8000932:	2202      	movs	r2, #2
 8000934:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_SPI1_Init+0x68>)
 8000938:	2201      	movs	r2, #1
 800093a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI1_Init+0x68>)
 800093e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000942:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI1_Init+0x68>)
 8000946:	2208      	movs	r2, #8
 8000948:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_SPI1_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI1_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_SPI1_Init+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI1_Init+0x68>)
 800095e:	220a      	movs	r2, #10
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_SPI1_Init+0x68>)
 8000964:	f003 fa14 	bl	8003d90 <HAL_SPI_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800096e:	f000 fa37 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000f8 	.word	0x200000f8
 800097c:	40013000 	.word	0x40013000

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <MX_USART2_UART_Init+0x54>)
 800098e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a4:	220c      	movs	r2, #12
 80009a6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f004 f91c 	bl	8004bf4 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 fa0d 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000210 	.word	0x20000210
 80009d0:	40004400 	.word	0x40004400
 80009d4:	001e8480 	.word	0x001e8480

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_DMA_Init+0x4c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <MX_DMA_Init+0x4c>)
 80009e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_DMA_Init+0x4c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2105      	movs	r1, #5
 80009fe:	2038      	movs	r0, #56	; 0x38
 8000a00:	f000 fdec 	bl	80015dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a04:	2038      	movs	r0, #56	; 0x38
 8000a06:	f000 fe05 	bl	8001614 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	203b      	movs	r0, #59	; 0x3b
 8000a10:	f000 fde4 	bl	80015dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a14:	203b      	movs	r0, #59	; 0x3b
 8000a16:	f000 fdfd 	bl	8001614 <HAL_NVIC_EnableIRQ>

}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a42      	ldr	r2, [pc, #264]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a3b      	ldr	r2, [pc, #236]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a34      	ldr	r2, [pc, #208]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000ab4:	4827      	ldr	r0, [pc, #156]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000ab6:	f001 fb5f 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2140      	movs	r1, #64	; 0x40
 8000abe:	4826      	ldr	r0, [pc, #152]	; (8000b58 <MX_GPIO_Init+0x130>)
 8000ac0:	f001 fb5a 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4820      	ldr	r0, [pc, #128]	; (8000b5c <MX_GPIO_Init+0x134>)
 8000adc:	f001 f9b8 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLIR_VSYNC_Pin */
  GPIO_InitStruct.Pin = FLIR_VSYNC_Pin;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLIR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4818      	ldr	r0, [pc, #96]	; (8000b58 <MX_GPIO_Init+0x130>)
 8000af8:	f001 f9aa 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLIR_PWR_DWN_L_Pin FLIR_RESET_L_Pin */
  GPIO_InitStruct.Pin = FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin;
 8000afc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	480f      	ldr	r0, [pc, #60]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000b16:	f001 f99b 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b1a:	2340      	movs	r3, #64	; 0x40
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <MX_GPIO_Init+0x130>)
 8000b32:	f001 f98d 	bl	8001e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
 8000b3a:	2028      	movs	r0, #40	; 0x28
 8000b3c:	f000 fd4e 	bl	80015dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b40:	2028      	movs	r0, #40	; 0x28
 8000b42:	f000 fd67 	bl	8001614 <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40020800 	.word	0x40020800

08000b60 <HAL_GPIO_EXTI_Callback>:
 * memory pool. If memory allocation is successful, it starts a DMA
 * transfer to receive data from the hspi1 peripheral and disables the
 * EXTI15_10_IRQn interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == FLIR_VSYNC_Pin)
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b70:	d115      	bne.n	8000b9e <HAL_GPIO_EXTI_Callback+0x3e>
	{
		current_frame = (lepton_frame *)osMemoryPoolAlloc(FramePoolHandle, 0U);
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 fb73 	bl	8006264 <osMemoryPoolAlloc>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b82:	6013      	str	r3, [r2, #0]
		if(current_frame != NULL)
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d008      	beq.n	8000b9e <HAL_GPIO_EXTI_Callback+0x3e>
		{
			osThreadFlagsSet(VoSPIHandle, 0x1U);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f005 f9a6 	bl	8005ee4 <osThreadFlagsSet>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000b98:	2028      	movs	r0, #40	; 0x28
 8000b9a:	f000 fd49 	bl	8001630 <HAL_NVIC_DisableIRQ>
		}
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20009c20 	.word	0x20009c20
 8000bac:	20009c24 	.word	0x20009c24
 8000bb0:	20000258 	.word	0x20000258

08000bb4 <HAL_SPI_RxCpltCallback>:
 * @brief
 *
 * @param hspi
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(VoSPIHandle, 0x2U);
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <HAL_SPI_RxCpltCallback+0x1c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 f98e 	bl	8005ee4 <osThreadFlagsSet>
//	{
//		osMemoryPoolFree(FramePoolHandle, current_frame);
//		current_frame = NULL;
//		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
//	}
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000258 	.word	0x20000258

08000bd4 <prvPrintImageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvPrintImageTask */
void prvPrintImageTask(void *argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		/* Wait for completed frame */
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be0:	2100      	movs	r1, #0
 8000be2:	2001      	movs	r0, #1
 8000be4:	f005 f9cc 	bl	8005f80 <osThreadFlagsWait>

		for(int i = 0; i < 60; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e016      	b.n	8000c1c <prvPrintImageTask+0x48>
		{
			memcpy((void *)&frame_packet[i*80], (void *)complete_frame->y16[i].data, 160);
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <prvPrintImageTask+0x94>)
 8000bfc:	1898      	adds	r0, r3, r2
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <prvPrintImageTask+0x98>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	21a4      	movs	r1, #164	; 0xa4
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	22a0      	movs	r2, #160	; 0xa0
 8000c10:	4619      	mov	r1, r3
 8000c12:	f008 fee7 	bl	80099e4 <memcpy>
		for(int i = 0; i < 60; i++)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2b3b      	cmp	r3, #59	; 0x3b
 8000c20:	dde5      	ble.n	8000bee <prvPrintImageTask+0x1a>
		}

		osMemoryPoolFree(FramePoolHandle, complete_frame);
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <prvPrintImageTask+0x9c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <prvPrintImageTask+0x98>)
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fb8f 	bl	8006350 <osMemoryPoolFree>
		complete_frame = NULL;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <prvPrintImageTask+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

		/* Transmit header */
		send_byte(0xDE);
 8000c38:	20de      	movs	r0, #222	; 0xde
 8000c3a:	f7ff fd6d 	bl	8000718 <send_byte>
		send_byte(0xAD);
 8000c3e:	20ad      	movs	r0, #173	; 0xad
 8000c40:	f7ff fd6a 	bl	8000718 <send_byte>
		send_byte(0xBE);
 8000c44:	20be      	movs	r0, #190	; 0xbe
 8000c46:	f7ff fd67 	bl	8000718 <send_byte>
		send_byte(0xEF);
 8000c4a:	20ef      	movs	r0, #239	; 0xef
 8000c4c:	f7ff fd64 	bl	8000718 <send_byte>

		/* Transmit frame */
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)frame_packet, PACKET_SIZE_U8);
 8000c50:	22a4      	movs	r2, #164	; 0xa4
 8000c52:	4905      	ldr	r1, [pc, #20]	; (8000c68 <prvPrintImageTask+0x94>)
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <prvPrintImageTask+0xa0>)
 8000c56:	f004 f8ac 	bl	8004db2 <HAL_UART_Transmit_IT>


		__HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <prvPrintImageTask+0xa4>)
 8000c5c:	2228      	movs	r2, #40	; 0x28
 8000c5e:	615a      	str	r2, [r3, #20]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c60:	2028      	movs	r0, #40	; 0x28
 8000c62:	f000 fcd7 	bl	8001614 <HAL_NVIC_EnableIRQ>
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000c66:	e7b9      	b.n	8000bdc <prvPrintImageTask+0x8>
 8000c68:	20009c2c 	.word	0x20009c2c
 8000c6c:	20009c28 	.word	0x20009c28
 8000c70:	20009c20 	.word	0x20009c20
 8000c74:	20000210 	.word	0x20000210
 8000c78:	40013c00 	.word	0x40013c00

08000c7c <prvCaptureFramesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvCaptureFramesTask */
void prvCaptureFramesTask(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvCaptureFramesTask */


	HAL_Delay(100);
 8000c84:	2064      	movs	r0, #100	; 0x64
 8000c86:	f000 fba9 	bl	80013dc <HAL_Delay>
	HAL_GPIO_WritePin(FLIR_PWR_DWN_L_GPIO_Port, FLIR_PWR_DWN_L_Pin, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c90:	4841      	ldr	r0, [pc, #260]	; (8000d98 <prvCaptureFramesTask+0x11c>)
 8000c92:	f001 fa71 	bl	8002178 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c96:	2064      	movs	r0, #100	; 0x64
 8000c98:	f000 fba0 	bl	80013dc <HAL_Delay>
	HAL_GPIO_WritePin(FLIR_RESET_L_GPIO_Port, FLIR_RESET_L_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca2:	483d      	ldr	r0, [pc, #244]	; (8000d98 <prvCaptureFramesTask+0x11c>)
 8000ca4:	f001 fa68 	bl	8002178 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8000ca8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cac:	f000 fb96 	bl	80013dc <HAL_Delay>

	lepton_vsync(true);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fd01 	bl	80006b8 <lepton_vsync>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2140      	movs	r1, #64	; 0x40
 8000cba:	4838      	ldr	r0, [pc, #224]	; (8000d9c <prvCaptureFramesTask+0x120>)
 8000cbc:	f001 fa5c 	bl	8002178 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f005 f95a 	bl	8005f80 <osThreadFlagsWait>

		HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame, FRAME_SIZE_U8);
 8000ccc:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f242 6270 	movw	r2, #9840	; 0x2670
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4833      	ldr	r0, [pc, #204]	; (8000da4 <prvCaptureFramesTask+0x128>)
 8000cd8:	f003 f8e4 	bl	8003ea4 <HAL_SPI_Receive_DMA>

		osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f005 f94c 	bl	8005f80 <osThreadFlagsWait>


		if((current_frame->y16[59].header[0] & 0xff) == (FRAME_HEIGHT - 1))
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000cf0:	f8b3 35cc 	ldrh.w	r3, [r3, #1484]	; 0x5cc
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b3b      	cmp	r3, #59	; 0x3b
 8000cf8:	d110      	bne.n	8000d1c <prvCaptureFramesTask+0xa0>
		{
			complete_frame = current_frame;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a2a      	ldr	r2, [pc, #168]	; (8000da8 <prvCaptureFramesTask+0x12c>)
 8000d00:	6013      	str	r3, [r2, #0]
			current_frame = NULL;
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

			lost_frame = 0;
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]

			osThreadFlagsSet(uartTxHandle, 0x1U);
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <prvCaptureFramesTask+0x134>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2101      	movs	r1, #1
 8000d14:	4618      	mov	r0, r3
 8000d16:	f005 f8e5 	bl	8005ee4 <osThreadFlagsSet>
 8000d1a:	e7d1      	b.n	8000cc0 <prvCaptureFramesTask+0x44>

		}
		else
		{
			lost_frame++;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d26:	701a      	strb	r2, [r3, #0]

			if(lost_frame > 9)
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b09      	cmp	r3, #9
 8000d2e:	d921      	bls.n	8000d74 <prvCaptureFramesTask+0xf8>
			{
				// Synchronization Lost
				osDelay(185);
 8000d30:	20b9      	movs	r0, #185	; 0xb9
 8000d32:	f005 f9a6 	bl	8006082 <osDelay>
//					HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame, PACKET_SIZE_U8);
//					osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
//
//				} while((current_frame->y16[0].header[0] & 0xf00) == 0xf00);

				HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame , FRAME_SIZE_U8);
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f242 6270 	movw	r2, #9840	; 0x2670
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <prvCaptureFramesTask+0x128>)
 8000d42:	f003 f8af 	bl	8003ea4 <HAL_SPI_Receive_DMA>

				osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
 8000d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f005 f917 	bl	8005f80 <osThreadFlagsWait>

				complete_frame = current_frame;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <prvCaptureFramesTask+0x12c>)
 8000d58:	6013      	str	r3, [r2, #0]
				current_frame = NULL;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

				lost_frame = 0;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]

				osThreadFlagsSet(uartTxHandle, 0x1U);
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <prvCaptureFramesTask+0x134>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 f8b9 	bl	8005ee4 <osThreadFlagsSet>
 8000d72:	e7a5      	b.n	8000cc0 <prvCaptureFramesTask+0x44>
			}
			else
			{
				osMemoryPoolFree(FramePoolHandle, current_frame);
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <prvCaptureFramesTask+0x138>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f005 fae6 	bl	8006350 <osMemoryPoolFree>
				current_frame = NULL;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
				__HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <prvCaptureFramesTask+0x13c>)
 8000d8c:	2228      	movs	r2, #40	; 0x28
 8000d8e:	615a      	str	r2, [r3, #20]
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d90:	2028      	movs	r0, #40	; 0x28
 8000d92:	f000 fc3f 	bl	8001614 <HAL_NVIC_EnableIRQ>
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000d96:	e793      	b.n	8000cc0 <prvCaptureFramesTask+0x44>
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	20009c24 	.word	0x20009c24
 8000da4:	200000f8 	.word	0x200000f8
 8000da8:	20009c28 	.word	0x20009c28
 8000dac:	20009c1c 	.word	0x20009c1c
 8000db0:	20000254 	.word	0x20000254
 8000db4:	20009c20 	.word	0x20009c20
 8000db8:	40013c00 	.word	0x40013c00

08000dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dce:	f000 fae5 	bl	800139c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010000 	.word	0x40010000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_MspInit+0x54>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_MspInit+0x54>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x54>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_MspInit+0x54>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_MspInit+0x54>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_MspInit+0x54>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	f06f 0001 	mvn.w	r0, #1
 8000e32:	f000 fbd3 	bl	80015dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_I2C_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12c      	bne.n	8000ec0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e88:	2312      	movs	r3, #18
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e94:	2304      	movs	r3, #4
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <HAL_I2C_MspInit+0x8c>)
 8000ea0:	f000 ffd6 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	; (800103c <HAL_SPI_MspInit+0x168>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 809e 	bne.w	8001034 <HAL_SPI_MspInit+0x160>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	4a4f      	ldr	r2, [pc, #316]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f06:	6453      	str	r3, [r2, #68]	; 0x44
 8000f08:	4b4d      	ldr	r3, [pc, #308]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a48      	ldr	r2, [pc, #288]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b46      	ldr	r3, [pc, #280]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f30:	23e0      	movs	r3, #224	; 0xe0
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f40:	2305      	movs	r3, #5
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	483e      	ldr	r0, [pc, #248]	; (8001044 <HAL_SPI_MspInit+0x170>)
 8000f4c:	f000 ff80 	bl	8001e50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f52:	4a3e      	ldr	r2, [pc, #248]	; (800104c <HAL_SPI_MspInit+0x178>)
 8000f54:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f56:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f58:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f5c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f70:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f72:	4b35      	ldr	r3, [pc, #212]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f78:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f80:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f82:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fa6:	4828      	ldr	r0, [pc, #160]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000fa8:	f000 fb50 	bl	800164c <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 8000fb2:	f7ff ff15 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a23      	ldr	r2, [pc, #140]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000fba:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fbc:	4a22      	ldr	r2, [pc, #136]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fc4:	4a23      	ldr	r2, [pc, #140]	; (8001054 <HAL_SPI_MspInit+0x180>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000fce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fd2:	2240      	movs	r2, #64	; 0x40
 8000fd4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8001002:	2204      	movs	r2, #4
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8001008:	2203      	movs	r2, #3
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 800101a:	f000 fb17 	bl	800164c <HAL_DMA_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 8001024:	f7ff fedc 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 800102c:	649a      	str	r2, [r3, #72]	; 0x48
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013000 	.word	0x40013000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000
 8001048:	20000150 	.word	0x20000150
 800104c:	40026410 	.word	0x40026410
 8001050:	200001b0 	.word	0x200001b0
 8001054:	40026458 	.word	0x40026458

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_UART_MspInit+0x94>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d133      	bne.n	80010e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_UART_MspInit+0x98>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_UART_MspInit+0x98>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0x98>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0x98>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0x98>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_UART_MspInit+0x98>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b2:	230c      	movs	r3, #12
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c2:	2307      	movs	r3, #7
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <HAL_UART_MspInit+0x9c>)
 80010ce:	f000 febf 	bl	8001e50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2105      	movs	r1, #5
 80010d6:	2026      	movs	r0, #38	; 0x26
 80010d8:	f000 fa80 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010dc:	2026      	movs	r0, #38	; 0x26
 80010de:	f000 fa99 	bl	8001614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40004400 	.word	0x40004400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_InitTick+0xd4>)
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	4a2e      	ldr	r2, [pc, #184]	; (80011cc <HAL_InitTick+0xd4>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6453      	str	r3, [r2, #68]	; 0x44
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_InitTick+0xd4>)
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001124:	f107 020c 	add.w	r2, r7, #12
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f002 f92e 	bl	8003390 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001134:	f002 f918 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8001138:	4603      	mov	r3, r0
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	4a23      	ldr	r2, [pc, #140]	; (80011d0 <HAL_InitTick+0xd8>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	3b01      	subs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_InitTick+0xdc>)
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_InitTick+0xe0>)
 8001150:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_InitTick+0xdc>)
 8001154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001158:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_InitTick+0xdc>)
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_InitTick+0xdc>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_InitTick+0xdc>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_InitTick+0xdc>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001172:	4818      	ldr	r0, [pc, #96]	; (80011d4 <HAL_InitTick+0xdc>)
 8001174:	f003 fa90 	bl	8004698 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800117e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001182:	2b00      	cmp	r3, #0
 8001184:	d11b      	bne.n	80011be <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <HAL_InitTick+0xdc>)
 8001188:	f003 fae0 	bl	800474c <HAL_TIM_Base_Start_IT>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001196:	2b00      	cmp	r3, #0
 8001198:	d111      	bne.n	80011be <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800119a:	2019      	movs	r0, #25
 800119c:	f000 fa3a 	bl	8001614 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	d808      	bhi.n	80011b8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011a6:	2200      	movs	r2, #0
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	2019      	movs	r0, #25
 80011ac:	f000 fa16 	bl	80015dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_InitTick+0xe4>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e002      	b.n	80011be <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	431bde83 	.word	0x431bde83
 80011d4:	2000c1ac 	.word	0x2000c1ac
 80011d8:	40010000 	.word	0x40010000
 80011dc:	20000004 	.word	0x20000004

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001212:	f003 fb0b 	bl	800482c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000c1ac 	.word	0x2000c1ac

08001220 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <USART2_IRQHandler+0x10>)
 8001226:	f003 fe09 	bl	8004e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000210 	.word	0x20000210

08001234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLIR_VSYNC_Pin);
 8001238:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800123c:	f000 ffb6 	bl	80021ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001240:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001244:	f000 ffb2 	bl	80021ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <DMA2_Stream0_IRQHandler+0x10>)
 8001252:	f000 fb93 	bl	800197c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000150 	.word	0x20000150

08001260 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DMA2_Stream3_IRQHandler+0x10>)
 8001266:	f000 fb89 	bl	800197c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001b0 	.word	0x200001b0

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f008 fb62 	bl	800996c <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20020000 	.word	0x20020000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	2000c1f4 	.word	0x2000c1f4
 80012dc:	20010c20 	.word	0x20010c20

080012e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800133c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001320:	4c0b      	ldr	r4, [pc, #44]	; (8001350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800132e:	f7ff ffd7 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f008 fb21 	bl	8009978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001336:	f7ff fa01 	bl	800073c <main>
  bx  lr    
 800133a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001348:	08009e18 	.word	0x08009e18
  ldr r2, =_sbss
 800134c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001350:	20010c1c 	.word	0x20010c1c

08001354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC_IRQHandler>
	...

08001358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_Init+0x40>)
 8001362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_Init+0x40>)
 800136e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_Init+0x40>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f920 	bl	80015c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	200f      	movs	r0, #15
 8001388:	f7ff feb6 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff fd2e 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023c00 	.word	0x40023c00

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008
 80013c0:	2000c1f8 	.word	0x2000c1f8

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000c1f8 	.word	0x2000c1f8

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff ffee 	bl	80013c4 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_Delay+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffde 	bl	80013c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db12      	blt.n	80014fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	490a      	ldr	r1, [pc, #40]	; (8001508 <__NVIC_DisableIRQ+0x44>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	3320      	adds	r3, #32
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014f0:	f3bf 8f4f 	dsb	sy
}
 80014f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f6:	f3bf 8f6f 	isb	sy
}
 80014fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff28 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ee:	f7ff ff3d 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	6978      	ldr	r0, [r7, #20]
 80015fa:	f7ff ffb1 	bl	8001560 <NVIC_EncodePriority>
 80015fe:	4602      	mov	r2, r0
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff80 	bl	800150c <__NVIC_SetPriority>
}
 800160c:	bf00      	nop
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff30 	bl	8001488 <__NVIC_EnableIRQ>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff40 	bl	80014c4 <__NVIC_DisableIRQ>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff feb4 	bl	80013c4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e099      	b.n	800179c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001688:	e00f      	b.n	80016aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168a:	f7ff fe9b 	bl	80013c4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b05      	cmp	r3, #5
 8001696:	d908      	bls.n	80016aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2220      	movs	r2, #32
 800169c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e078      	b.n	800179c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e8      	bne.n	800168a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_DMA_Init+0x158>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	2b04      	cmp	r3, #4
 8001702:	d107      	bne.n	8001714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4313      	orrs	r3, r2
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4313      	orrs	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f023 0307 	bic.w	r3, r3, #7
 800172a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4313      	orrs	r3, r2
 8001734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	2b04      	cmp	r3, #4
 800173c:	d117      	bne.n	800176e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00e      	beq.n	800176e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fb01 	bl	8001d58 <DMA_CheckFifoParam>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2240      	movs	r2, #64	; 0x40
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800176a:	2301      	movs	r3, #1
 800176c:	e016      	b.n	800179c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fab8 	bl	8001cec <DMA_CalcBaseAndBitshift>
 800177c:	4603      	mov	r3, r0
 800177e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	223f      	movs	r2, #63	; 0x3f
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	f010803f 	.word	0xf010803f

080017a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_DMA_Start_IT+0x26>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e040      	b.n	8001850 <HAL_DMA_Start_IT+0xa8>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d12f      	bne.n	8001842 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2202      	movs	r2, #2
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 fa4a 	bl	8001c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	223f      	movs	r2, #63	; 0x3f
 8001802:	409a      	lsls	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0216 	orr.w	r2, r2, #22
 8001816:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0208 	orr.w	r2, r2, #8
 800182e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e005      	b.n	800184e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800184a:	2302      	movs	r3, #2
 800184c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800184e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001866:	f7ff fdad 	bl	80013c4 <HAL_GetTick>
 800186a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d008      	beq.n	800188a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e052      	b.n	8001930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0216 	bic.w	r2, r2, #22
 8001898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <HAL_DMA_Abort+0x62>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0208 	bic.w	r2, r2, #8
 80018c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018da:	e013      	b.n	8001904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018dc:	f7ff fd72 	bl	80013c4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d90c      	bls.n	8001904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2220      	movs	r2, #32
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2203      	movs	r2, #3
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e015      	b.n	8001930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e4      	bne.n	80018dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	223f      	movs	r2, #63	; 0x3f
 8001918:	409a      	lsls	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d004      	beq.n	8001956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00c      	b.n	8001970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2205      	movs	r2, #5
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001988:	4b8e      	ldr	r3, [pc, #568]	; (8001bc4 <HAL_DMA_IRQHandler+0x248>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a8e      	ldr	r2, [pc, #568]	; (8001bc8 <HAL_DMA_IRQHandler+0x24c>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a6:	2208      	movs	r2, #8
 80019a8:	409a      	lsls	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01a      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0204 	bic.w	r2, r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2208      	movs	r2, #8
 80019d6:	409a      	lsls	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2201      	movs	r2, #1
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d012      	beq.n	8001a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f043 0202 	orr.w	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	2204      	movs	r2, #4
 8001a24:	409a      	lsls	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d012      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00b      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2204      	movs	r2, #4
 8001a42:	409a      	lsls	r2, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	f043 0204 	orr.w	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2210      	movs	r2, #16
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d043      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d03c      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	2210      	movs	r2, #16
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d018      	beq.n	8001abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d108      	bne.n	8001aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d024      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
 8001aaa:	e01f      	b.n	8001aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01b      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e016      	b.n	8001aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0208 	bic.w	r2, r2, #8
 8001ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	2220      	movs	r2, #32
 8001af2:	409a      	lsls	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 808f 	beq.w	8001c1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8087 	beq.w	8001c1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2220      	movs	r2, #32
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d136      	bne.n	8001b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0216 	bic.w	r2, r2, #22
 8001b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <HAL_DMA_IRQHandler+0x1da>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0208 	bic.w	r2, r2, #8
 8001b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	223f      	movs	r2, #63	; 0x3f
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d07e      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
        }
        return;
 8001b92:	e079      	b.n	8001c88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01d      	beq.n	8001bde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10d      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d031      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
 8001bc0:	e02c      	b.n	8001c1c <HAL_DMA_IRQHandler+0x2a0>
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d023      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
 8001bdc:	e01e      	b.n	8001c1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10f      	bne.n	8001c0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0210 	bic.w	r2, r2, #16
 8001bfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d032      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d022      	beq.n	8001c76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2205      	movs	r2, #5
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d307      	bcc.n	8001c64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f2      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x2cc>
 8001c62:	e000      	b.n	8001c66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
 8001c86:	e000      	b.n	8001c8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c88:	bf00      	nop
    }
  }
}
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d108      	bne.n	8001cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cce:	e007      	b.n	8001ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	60da      	str	r2, [r3, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	3b10      	subs	r3, #16
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <DMA_CalcBaseAndBitshift+0x64>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d06:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <DMA_CalcBaseAndBitshift+0x68>)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d909      	bls.n	8001d2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d22:	f023 0303 	bic.w	r3, r3, #3
 8001d26:	1d1a      	adds	r2, r3, #4
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d2c:	e007      	b.n	8001d3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	aaaaaaab 	.word	0xaaaaaaab
 8001d54:	08009da0 	.word	0x08009da0

08001d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d11f      	bne.n	8001db2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d856      	bhi.n	8001e26 <DMA_CheckFifoParam+0xce>
 8001d78:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <DMA_CheckFifoParam+0x28>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001da3 	.word	0x08001da3
 8001d88:	08001d91 	.word	0x08001d91
 8001d8c:	08001e27 	.word	0x08001e27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d046      	beq.n	8001e2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da0:	e043      	b.n	8001e2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001daa:	d140      	bne.n	8001e2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db0:	e03d      	b.n	8001e2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dba:	d121      	bne.n	8001e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d837      	bhi.n	8001e32 <DMA_CheckFifoParam+0xda>
 8001dc2:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <DMA_CheckFifoParam+0x70>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001dd9 	.word	0x08001dd9
 8001dcc:	08001ddf 	.word	0x08001ddf
 8001dd0:	08001dd9 	.word	0x08001dd9
 8001dd4:	08001df1 	.word	0x08001df1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
      break;
 8001ddc:	e030      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d025      	beq.n	8001e36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dee:	e022      	b.n	8001e36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df8:	d11f      	bne.n	8001e3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dfe:	e01c      	b.n	8001e3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d903      	bls.n	8001e0e <DMA_CheckFifoParam+0xb6>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d003      	beq.n	8001e14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e0c:	e018      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
      break;
 8001e12:	e015      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00e      	beq.n	8001e3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
      break;
 8001e24:	e00b      	b.n	8001e3e <DMA_CheckFifoParam+0xe6>
      break;
 8001e26:	bf00      	nop
 8001e28:	e00a      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e008      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e006      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
      break;
 8001e32:	bf00      	nop
 8001e34:	e004      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
      break;
 8001e36:	bf00      	nop
 8001e38:	e002      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e3a:	bf00      	nop
 8001e3c:	e000      	b.n	8001e40 <DMA_CheckFifoParam+0xe8>
      break;
 8001e3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e165      	b.n	8002138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 8154 	bne.w	8002132 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d005      	beq.n	8001ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d130      	bne.n	8001f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80ae 	beq.w	8002132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_GPIO_Init+0x300>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a5c      	ldr	r2, [pc, #368]	; (8002150 <HAL_GPIO_Init+0x300>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <HAL_GPIO_Init+0x300>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff2:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_GPIO_Init+0x304>)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4f      	ldr	r2, [pc, #316]	; (8002158 <HAL_GPIO_Init+0x308>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d025      	beq.n	800206a <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_GPIO_Init+0x30c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01f      	beq.n	8002066 <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4d      	ldr	r2, [pc, #308]	; (8002160 <HAL_GPIO_Init+0x310>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d019      	beq.n	8002062 <HAL_GPIO_Init+0x212>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_GPIO_Init+0x314>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_GPIO_Init+0x318>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00d      	beq.n	800205a <HAL_GPIO_Init+0x20a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_GPIO_Init+0x31c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x206>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x320>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_GPIO_Init+0x202>
 800204e:	2306      	movs	r3, #6
 8002050:	e00c      	b.n	800206c <HAL_GPIO_Init+0x21c>
 8002052:	2307      	movs	r3, #7
 8002054:	e00a      	b.n	800206c <HAL_GPIO_Init+0x21c>
 8002056:	2305      	movs	r3, #5
 8002058:	e008      	b.n	800206c <HAL_GPIO_Init+0x21c>
 800205a:	2304      	movs	r3, #4
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x21c>
 800205e:	2303      	movs	r3, #3
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x21c>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x21c>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x21c>
 800206a:	2300      	movs	r3, #0
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	f002 0203 	and.w	r2, r2, #3
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	4093      	lsls	r3, r2
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800207c:	4935      	ldr	r1, [pc, #212]	; (8002154 <HAL_GPIO_Init+0x304>)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_GPIO_Init+0x324>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ae:	4a31      	ldr	r2, [pc, #196]	; (8002174 <HAL_GPIO_Init+0x324>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x324>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <HAL_GPIO_Init+0x324>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_GPIO_Init+0x324>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002102:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_GPIO_Init+0x324>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_GPIO_Init+0x324>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_GPIO_Init+0x324>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b0f      	cmp	r3, #15
 800213c:	f67f ae96 	bls.w	8001e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40013800 	.word	0x40013800
 8002158:	40020000 	.word	0x40020000
 800215c:	40020400 	.word	0x40020400
 8002160:	40020800 	.word	0x40020800
 8002164:	40020c00 	.word	0x40020c00
 8002168:	40021000 	.word	0x40021000
 800216c:	40021400 	.word	0x40021400
 8002170:	40021800 	.word	0x40021800
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fcc8 	bl	8000b60 <HAL_GPIO_EXTI_Callback>
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e12b      	b.n	8002446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fe1e 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	; 0x24
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800222e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002240:	f001 f87e 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a81      	ldr	r2, [pc, #516]	; (8002450 <HAL_I2C_Init+0x274>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d807      	bhi.n	8002260 <HAL_I2C_Init+0x84>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a80      	ldr	r2, [pc, #512]	; (8002454 <HAL_I2C_Init+0x278>)
 8002254:	4293      	cmp	r3, r2
 8002256:	bf94      	ite	ls
 8002258:	2301      	movls	r3, #1
 800225a:	2300      	movhi	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e006      	b.n	800226e <HAL_I2C_Init+0x92>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a7d      	ldr	r2, [pc, #500]	; (8002458 <HAL_I2C_Init+0x27c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	bf94      	ite	ls
 8002268:	2301      	movls	r3, #1
 800226a:	2300      	movhi	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0e7      	b.n	8002446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a78      	ldr	r2, [pc, #480]	; (800245c <HAL_I2C_Init+0x280>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9b      	lsrs	r3, r3, #18
 8002280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a6a      	ldr	r2, [pc, #424]	; (8002450 <HAL_I2C_Init+0x274>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d802      	bhi.n	80022b0 <HAL_I2C_Init+0xd4>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3301      	adds	r3, #1
 80022ae:	e009      	b.n	80022c4 <HAL_I2C_Init+0xe8>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	4a69      	ldr	r2, [pc, #420]	; (8002460 <HAL_I2C_Init+0x284>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	3301      	adds	r3, #1
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	495c      	ldr	r1, [pc, #368]	; (8002450 <HAL_I2C_Init+0x274>)
 80022e0:	428b      	cmp	r3, r1
 80022e2:	d819      	bhi.n	8002318 <HAL_I2C_Init+0x13c>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e59      	subs	r1, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f2:	1c59      	adds	r1, r3, #1
 80022f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022f8:	400b      	ands	r3, r1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_I2C_Init+0x138>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e59      	subs	r1, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fbb1 f3f3 	udiv	r3, r1, r3
 800230c:	3301      	adds	r3, #1
 800230e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002312:	e051      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002314:	2304      	movs	r3, #4
 8002316:	e04f      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d111      	bne.n	8002344 <HAL_I2C_Init+0x168>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e012      	b.n	800236a <HAL_I2C_Init+0x18e>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	0099      	lsls	r1, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Init+0x196>
 800236e:	2301      	movs	r3, #1
 8002370:	e022      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10e      	bne.n	8002398 <HAL_I2C_Init+0x1bc>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1e58      	subs	r0, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	440b      	add	r3, r1
 8002388:	fbb0 f3f3 	udiv	r3, r0, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002396:	e00f      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	6809      	ldr	r1, [r1, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6911      	ldr	r1, [r2, #16]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68d2      	ldr	r2, [r2, #12]
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	000186a0 	.word	0x000186a0
 8002454:	001e847f 	.word	0x001e847f
 8002458:	003d08ff 	.word	0x003d08ff
 800245c:	431bde83 	.word	0x431bde83
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4603      	mov	r3, r0
 8002474:	817b      	strh	r3, [r7, #10]
 8002476:	460b      	mov	r3, r1
 8002478:	813b      	strh	r3, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800247e:	f7fe ffa1 	bl	80013c4 <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b20      	cmp	r3, #32
 800248e:	f040 80d9 	bne.w	8002644 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2319      	movs	r3, #25
 8002498:	2201      	movs	r2, #1
 800249a:	496d      	ldr	r1, [pc, #436]	; (8002650 <HAL_I2C_Mem_Write+0x1ec>)
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fc7f 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
 80024aa:	e0cc      	b.n	8002646 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Mem_Write+0x56>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e0c5      	b.n	8002646 <HAL_I2C_Mem_Write+0x1e2>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d007      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2221      	movs	r2, #33	; 0x21
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a4d      	ldr	r2, [pc, #308]	; (8002654 <HAL_I2C_Mem_Write+0x1f0>)
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002522:	88f8      	ldrh	r0, [r7, #6]
 8002524:	893a      	ldrh	r2, [r7, #8]
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	4603      	mov	r3, r0
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fab6 	bl	8002aa4 <I2C_RequestMemoryWrite>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d052      	beq.n	80025e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e081      	b.n	8002646 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fd00 	bl	8002f4c <I2C_WaitOnTXEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2b04      	cmp	r3, #4
 8002558:	d107      	bne.n	800256a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002568:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e06b      	b.n	8002646 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d11b      	bne.n	80025e4 <HAL_I2C_Mem_Write+0x180>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d017      	beq.n	80025e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1aa      	bne.n	8002542 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fcec 	bl	8002fce <I2C_WaitOnBTFFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00d      	beq.n	8002618 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b04      	cmp	r3, #4
 8002602:	d107      	bne.n	8002614 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002612:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e016      	b.n	8002646 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	00100002 	.word	0x00100002
 8002654:	ffff0000 	.word	0xffff0000

08002658 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	460b      	mov	r3, r1
 800266c:	813b      	strh	r3, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002672:	f7fe fea7 	bl	80013c4 <HAL_GetTick>
 8002676:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	f040 8208 	bne.w	8002a96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2319      	movs	r3, #25
 800268c:	2201      	movs	r2, #1
 800268e:	497b      	ldr	r1, [pc, #492]	; (800287c <HAL_I2C_Mem_Read+0x224>)
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fb85 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
 800269e:	e1fb      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_I2C_Mem_Read+0x56>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e1f4      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d007      	beq.n	80026d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2222      	movs	r2, #34	; 0x22
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2240      	movs	r2, #64	; 0x40
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4a5b      	ldr	r2, [pc, #364]	; (8002880 <HAL_I2C_Mem_Read+0x228>)
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002716:	88f8      	ldrh	r0, [r7, #6]
 8002718:	893a      	ldrh	r2, [r7, #8]
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	4603      	mov	r3, r0
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fa52 	bl	8002bd0 <I2C_RequestMemoryRead>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e1b0      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	d113      	bne.n	8002766 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	623b      	str	r3, [r7, #32]
 8002752:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e184      	b.n	8002a70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	2b01      	cmp	r3, #1
 800276c:	d11b      	bne.n	80027a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e164      	b.n	8002a70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d11b      	bne.n	80027e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	e144      	b.n	8002a70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027fc:	e138      	b.n	8002a70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	2b03      	cmp	r3, #3
 8002804:	f200 80f1 	bhi.w	80029ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	2b01      	cmp	r3, #1
 800280e:	d123      	bne.n	8002858 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002812:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fc1b 	bl	8003050 <I2C_WaitOnRXNEFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e139      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002856:	e10b      	b.n	8002a70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	2b02      	cmp	r3, #2
 800285e:	d14e      	bne.n	80028fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	2200      	movs	r2, #0
 8002868:	4906      	ldr	r1, [pc, #24]	; (8002884 <HAL_I2C_Mem_Read+0x22c>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa98 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e10e      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
 800287a:	bf00      	nop
 800287c:	00100002 	.word	0x00100002
 8002880:	ffff0000 	.word	0xffff0000
 8002884:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028fc:	e0b8      	b.n	8002a70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	2200      	movs	r2, #0
 8002906:	4966      	ldr	r1, [pc, #408]	; (8002aa0 <HAL_I2C_Mem_Read+0x448>)
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fa49 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0bf      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	2200      	movs	r2, #0
 8002962:	494f      	ldr	r1, [pc, #316]	; (8002aa0 <HAL_I2C_Mem_Read+0x448>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fa1b 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e091      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029e8:	e042      	b.n	8002a70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fb2e 	bl	8003050 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e04c      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d118      	bne.n	8002a70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f47f aec2 	bne.w	80027fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e000      	b.n	8002a98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3728      	adds	r7, #40	; 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	00010004 	.word	0x00010004

08002aa4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	813b      	strh	r3, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002acc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f960 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af4:	d103      	bne.n	8002afe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e05f      	b.n	8002bc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	6a3a      	ldr	r2, [r7, #32]
 8002b16:	492d      	ldr	r1, [pc, #180]	; (8002bcc <I2C_RequestMemoryWrite+0x128>)
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f998 	bl	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e04c      	b.n	8002bc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	6a39      	ldr	r1, [r7, #32]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fa02 	bl	8002f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d107      	bne.n	8002b66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e02b      	b.n	8002bc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b70:	893b      	ldrh	r3, [r7, #8]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	611a      	str	r2, [r3, #16]
 8002b7a:	e021      	b.n	8002bc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b7c:	893b      	ldrh	r3, [r7, #8]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f9dc 	bl	8002f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d107      	bne.n	8002bb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e005      	b.n	8002bc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	00010002 	.word	0x00010002

08002bd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	460b      	mov	r3, r1
 8002be4:	813b      	strh	r3, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f8c2 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c30:	d103      	bne.n	8002c3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0aa      	b.n	8002d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c3e:	897b      	ldrh	r3, [r7, #10]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	4952      	ldr	r1, [pc, #328]	; (8002d9c <I2C_RequestMemoryRead+0x1cc>)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f8fa 	bl	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e097      	b.n	8002d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	6a39      	ldr	r1, [r7, #32]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f964 	bl	8002f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d107      	bne.n	8002ca2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e076      	b.n	8002d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cac:	893b      	ldrh	r3, [r7, #8]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	611a      	str	r2, [r3, #16]
 8002cb6:	e021      	b.n	8002cfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb8:	893b      	ldrh	r3, [r7, #8]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f93e 	bl	8002f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d107      	bne.n	8002cee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e050      	b.n	8002d94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf2:	893b      	ldrh	r3, [r7, #8]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfe:	6a39      	ldr	r1, [r7, #32]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f923 	bl	8002f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d107      	bne.n	8002d24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e035      	b.n	8002d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f82b 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5e:	d103      	bne.n	8002d68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e013      	b.n	8002d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	4906      	ldr	r1, [pc, #24]	; (8002d9c <I2C_RequestMemoryRead+0x1cc>)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f863 	bl	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	00010002 	.word	0x00010002

08002da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db0:	e025      	b.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db8:	d021      	beq.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dba:	f7fe fb03 	bl	80013c4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d116      	bne.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0220 	orr.w	r2, r3, #32
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e023      	b.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d10d      	bne.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4013      	ands	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	e00c      	b.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d0b6      	beq.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e5c:	e051      	b.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d123      	bne.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f043 0204 	orr.w	r2, r3, #4
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e046      	b.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ebc:	d021      	beq.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe fa81 	bl	80013c4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d116      	bne.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e020      	b.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10c      	bne.n	8002f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4013      	ands	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e00b      	b.n	8002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4013      	ands	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d18d      	bne.n	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f58:	e02d      	b.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f8ce 	bl	80030fc <I2C_IsAcknowledgeFailed>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e02d      	b.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f70:	d021      	beq.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fe fa27 	bl	80013c4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e007      	b.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d1ca      	bne.n	8002f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fda:	e02d      	b.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f88d 	bl	80030fc <I2C_IsAcknowledgeFailed>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e02d      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff2:	d021      	beq.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7fe f9e6 	bl	80013c4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d1ca      	bne.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800305c:	e042      	b.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b10      	cmp	r3, #16
 800306a:	d119      	bne.n	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0210 	mvn.w	r2, #16
 8003074:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e029      	b.n	80030f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a0:	f7fe f990 	bl	80013c4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d1b5      	bne.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d11b      	bne.n	800314c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0cc      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b68      	ldr	r3, [pc, #416]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d90c      	bls.n	8003198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d044      	beq.n	800327c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d119      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d003      	beq.n	800321a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003216:	2b03      	cmp	r3, #3
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e067      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4934      	ldr	r1, [pc, #208]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800324c:	f7fe f8ba 	bl	80013c4 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fe f8b6 	bl	80013c4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d20c      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f887 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fef8 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023c00 	.word	0x40023c00
 8003318:	40023800 	.word	0x40023800
 800331c:	08009d88 	.word	0x08009d88
 8003320:	20000000 	.word	0x20000000
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_RCC_GetHCLKFreq+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000

08003340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003344:	f7ff fff0 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	08009d98 	.word	0x08009d98

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800336c:	f7ff ffdc 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0b5b      	lsrs	r3, r3, #13
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4903      	ldr	r1, [pc, #12]	; (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	08009d98 	.word	0x08009d98

08003390 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	220f      	movs	r2, #15
 800339e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0203 	and.w	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	08db      	lsrs	r3, r3, #3
 80033ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCC_GetClockConfig+0x60>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 020f 	and.w	r2, r3, #15
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	601a      	str	r2, [r3, #0]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40023c00 	.word	0x40023c00

080033f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f8:	b0ae      	sub	sp, #184	; 0xb8
 80033fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341a:	4bcb      	ldr	r3, [pc, #812]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b0c      	cmp	r3, #12
 8003424:	f200 8206 	bhi.w	8003834 <HAL_RCC_GetSysClockFreq+0x440>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <HAL_RCC_GetSysClockFreq+0x3c>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003465 	.word	0x08003465
 8003434:	08003835 	.word	0x08003835
 8003438:	08003835 	.word	0x08003835
 800343c:	08003835 	.word	0x08003835
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003835 	.word	0x08003835
 8003448:	08003835 	.word	0x08003835
 800344c:	08003835 	.word	0x08003835
 8003450:	08003475 	.word	0x08003475
 8003454:	08003835 	.word	0x08003835
 8003458:	08003835 	.word	0x08003835
 800345c:	08003835 	.word	0x08003835
 8003460:	08003665 	.word	0x08003665
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4bb9      	ldr	r3, [pc, #740]	; (800374c <HAL_RCC_GetSysClockFreq+0x358>)
 8003466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800346a:	e1e7      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800346c:	4bb8      	ldr	r3, [pc, #736]	; (8003750 <HAL_RCC_GetSysClockFreq+0x35c>)
 800346e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003472:	e1e3      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003474:	4bb4      	ldr	r3, [pc, #720]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800347c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003480:	4bb1      	ldr	r3, [pc, #708]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d071      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348c:	4bae      	ldr	r3, [pc, #696]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003498:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800349c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034b2:	4622      	mov	r2, r4
 80034b4:	462b      	mov	r3, r5
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c4:	0150      	lsls	r0, r2, #5
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4621      	mov	r1, r4
 80034cc:	1a51      	subs	r1, r2, r1
 80034ce:	6439      	str	r1, [r7, #64]	; 0x40
 80034d0:	4629      	mov	r1, r5
 80034d2:	eb63 0301 	sbc.w	r3, r3, r1
 80034d6:	647b      	str	r3, [r7, #68]	; 0x44
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80034e4:	4649      	mov	r1, r9
 80034e6:	018b      	lsls	r3, r1, #6
 80034e8:	4641      	mov	r1, r8
 80034ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ee:	4641      	mov	r1, r8
 80034f0:	018a      	lsls	r2, r1, #6
 80034f2:	4641      	mov	r1, r8
 80034f4:	1a51      	subs	r1, r2, r1
 80034f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80034f8:	4649      	mov	r1, r9
 80034fa:	eb63 0301 	sbc.w	r3, r3, r1
 80034fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800350c:	4649      	mov	r1, r9
 800350e:	00cb      	lsls	r3, r1, #3
 8003510:	4641      	mov	r1, r8
 8003512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003516:	4641      	mov	r1, r8
 8003518:	00ca      	lsls	r2, r1, #3
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	4603      	mov	r3, r0
 8003520:	4622      	mov	r2, r4
 8003522:	189b      	adds	r3, r3, r2
 8003524:	633b      	str	r3, [r7, #48]	; 0x30
 8003526:	462b      	mov	r3, r5
 8003528:	460a      	mov	r2, r1
 800352a:	eb42 0303 	adc.w	r3, r2, r3
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800353c:	4629      	mov	r1, r5
 800353e:	024b      	lsls	r3, r1, #9
 8003540:	4621      	mov	r1, r4
 8003542:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003546:	4621      	mov	r1, r4
 8003548:	024a      	lsls	r2, r1, #9
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800355c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003560:	f7fc fe56 	bl	8000210 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4613      	mov	r3, r2
 800356a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800356e:	e067      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003570:	4b75      	ldr	r3, [pc, #468]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800357c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003588:	67bb      	str	r3, [r7, #120]	; 0x78
 800358a:	2300      	movs	r3, #0
 800358c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800358e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003592:	4622      	mov	r2, r4
 8003594:	462b      	mov	r3, r5
 8003596:	f04f 0000 	mov.w	r0, #0
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	0159      	lsls	r1, r3, #5
 80035a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a4:	0150      	lsls	r0, r2, #5
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4621      	mov	r1, r4
 80035ac:	1a51      	subs	r1, r2, r1
 80035ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80035b0:	4629      	mov	r1, r5
 80035b2:	eb63 0301 	sbc.w	r3, r3, r1
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80035c4:	4649      	mov	r1, r9
 80035c6:	018b      	lsls	r3, r1, #6
 80035c8:	4641      	mov	r1, r8
 80035ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ce:	4641      	mov	r1, r8
 80035d0:	018a      	lsls	r2, r1, #6
 80035d2:	4641      	mov	r1, r8
 80035d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80035d8:	4649      	mov	r1, r9
 80035da:	eb63 0b01 	sbc.w	fp, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f2:	4692      	mov	sl, r2
 80035f4:	469b      	mov	fp, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	eb1a 0303 	adds.w	r3, sl, r3
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	462b      	mov	r3, r5
 8003600:	eb4b 0303 	adc.w	r3, fp, r3
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003612:	4629      	mov	r1, r5
 8003614:	028b      	lsls	r3, r1, #10
 8003616:	4621      	mov	r1, r4
 8003618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800361c:	4621      	mov	r1, r4
 800361e:	028a      	lsls	r2, r1, #10
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003628:	2200      	movs	r2, #0
 800362a:	673b      	str	r3, [r7, #112]	; 0x70
 800362c:	677a      	str	r2, [r7, #116]	; 0x74
 800362e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003632:	f7fc fded 	bl	8000210 <__aeabi_uldivmod>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4613      	mov	r3, r2
 800363c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003640:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003656:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003662:	e0eb      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003664:	4b38      	ldr	r3, [pc, #224]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d06b      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <HAL_RCC_GetSysClockFreq+0x354>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	2200      	movs	r2, #0
 8003684:	66bb      	str	r3, [r7, #104]	; 0x68
 8003686:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368e:	663b      	str	r3, [r7, #96]	; 0x60
 8003690:	2300      	movs	r3, #0
 8003692:	667b      	str	r3, [r7, #100]	; 0x64
 8003694:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003698:	4622      	mov	r2, r4
 800369a:	462b      	mov	r3, r5
 800369c:	f04f 0000 	mov.w	r0, #0
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	0159      	lsls	r1, r3, #5
 80036a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036aa:	0150      	lsls	r0, r2, #5
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4621      	mov	r1, r4
 80036b2:	1a51      	subs	r1, r2, r1
 80036b4:	61b9      	str	r1, [r7, #24]
 80036b6:	4629      	mov	r1, r5
 80036b8:	eb63 0301 	sbc.w	r3, r3, r1
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036ca:	4659      	mov	r1, fp
 80036cc:	018b      	lsls	r3, r1, #6
 80036ce:	4651      	mov	r1, sl
 80036d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036d4:	4651      	mov	r1, sl
 80036d6:	018a      	lsls	r2, r1, #6
 80036d8:	4651      	mov	r1, sl
 80036da:	ebb2 0801 	subs.w	r8, r2, r1
 80036de:	4659      	mov	r1, fp
 80036e0:	eb63 0901 	sbc.w	r9, r3, r1
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036f8:	4690      	mov	r8, r2
 80036fa:	4699      	mov	r9, r3
 80036fc:	4623      	mov	r3, r4
 80036fe:	eb18 0303 	adds.w	r3, r8, r3
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	462b      	mov	r3, r5
 8003706:	eb49 0303 	adc.w	r3, r9, r3
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003718:	4629      	mov	r1, r5
 800371a:	024b      	lsls	r3, r1, #9
 800371c:	4621      	mov	r1, r4
 800371e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003722:	4621      	mov	r1, r4
 8003724:	024a      	lsls	r2, r1, #9
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800372e:	2200      	movs	r2, #0
 8003730:	65bb      	str	r3, [r7, #88]	; 0x58
 8003732:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003734:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003738:	f7fc fd6a 	bl	8000210 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003746:	e065      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x420>
 8003748:	40023800 	.word	0x40023800
 800374c:	00f42400 	.word	0x00f42400
 8003750:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003754:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RCC_GetSysClockFreq+0x458>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	2200      	movs	r2, #0
 800375c:	4618      	mov	r0, r3
 800375e:	4611      	mov	r1, r2
 8003760:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003764:	653b      	str	r3, [r7, #80]	; 0x50
 8003766:	2300      	movs	r3, #0
 8003768:	657b      	str	r3, [r7, #84]	; 0x54
 800376a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800376e:	4642      	mov	r2, r8
 8003770:	464b      	mov	r3, r9
 8003772:	f04f 0000 	mov.w	r0, #0
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	0159      	lsls	r1, r3, #5
 800377c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003780:	0150      	lsls	r0, r2, #5
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4641      	mov	r1, r8
 8003788:	1a51      	subs	r1, r2, r1
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	4649      	mov	r1, r9
 800378e:	eb63 0301 	sbc.w	r3, r3, r1
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037a0:	4659      	mov	r1, fp
 80037a2:	018b      	lsls	r3, r1, #6
 80037a4:	4651      	mov	r1, sl
 80037a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037aa:	4651      	mov	r1, sl
 80037ac:	018a      	lsls	r2, r1, #6
 80037ae:	4651      	mov	r1, sl
 80037b0:	1a54      	subs	r4, r2, r1
 80037b2:	4659      	mov	r1, fp
 80037b4:	eb63 0501 	sbc.w	r5, r3, r1
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	00eb      	lsls	r3, r5, #3
 80037c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c6:	00e2      	lsls	r2, r4, #3
 80037c8:	4614      	mov	r4, r2
 80037ca:	461d      	mov	r5, r3
 80037cc:	4643      	mov	r3, r8
 80037ce:	18e3      	adds	r3, r4, r3
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	464b      	mov	r3, r9
 80037d4:	eb45 0303 	adc.w	r3, r5, r3
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037e6:	4629      	mov	r1, r5
 80037e8:	028b      	lsls	r3, r1, #10
 80037ea:	4621      	mov	r1, r4
 80037ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f0:	4621      	mov	r1, r4
 80037f2:	028a      	lsls	r2, r1, #10
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037fc:	2200      	movs	r2, #0
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003800:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003802:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003806:	f7fc fd03 	bl	8000210 <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4613      	mov	r3, r2
 8003810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003814:	4b0d      	ldr	r3, [pc, #52]	; (800384c <HAL_RCC_GetSysClockFreq+0x458>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0f1b      	lsrs	r3, r3, #28
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003832:	e003      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800383a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003840:	4618      	mov	r0, r3
 8003842:	37b8      	adds	r7, #184	; 0xb8
 8003844:	46bd      	mov	sp, r7
 8003846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	00f42400 	.word	0x00f42400

08003854 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e28d      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8083 	beq.w	800397a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003874:	4b94      	ldr	r3, [pc, #592]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b04      	cmp	r3, #4
 800387e:	d019      	beq.n	80038b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003880:	4b91      	ldr	r3, [pc, #580]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003888:	2b08      	cmp	r3, #8
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800388c:	4b8e      	ldr	r3, [pc, #568]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003898:	d00c      	beq.n	80038b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b8b      	ldr	r3, [pc, #556]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	d112      	bne.n	80038cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a6:	4b88      	ldr	r3, [pc, #544]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b2:	d10b      	bne.n	80038cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	4b84      	ldr	r3, [pc, #528]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05b      	beq.n	8003978 <HAL_RCC_OscConfig+0x124>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d157      	bne.n	8003978 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e25a      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x90>
 80038d6:	4b7c      	ldr	r3, [pc, #496]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a7b      	ldr	r2, [pc, #492]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e01d      	b.n	8003920 <HAL_RCC_OscConfig+0xcc>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0xb4>
 80038ee:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a75      	ldr	r2, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a72      	ldr	r2, [pc, #456]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0xcc>
 8003908:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a6e      	ldr	r2, [pc, #440]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b6c      	ldr	r3, [pc, #432]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6b      	ldr	r2, [pc, #428]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd fd4c 	bl	80013c4 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003930:	f7fd fd48 	bl	80013c4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e21f      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b61      	ldr	r3, [pc, #388]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0xdc>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd fd38 	bl	80013c4 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003958:	f7fd fd34 	bl	80013c4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e20b      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396a:	4b57      	ldr	r3, [pc, #348]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x104>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d06f      	beq.n	8003a66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003986:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003992:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800399a:	2b08      	cmp	r3, #8
 800399c:	d105      	bne.n	80039aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d11c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_RCC_OscConfig+0x186>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e1d3      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4937      	ldr	r1, [pc, #220]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	e03a      	b.n	8003a66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f8:	4b34      	ldr	r3, [pc, #208]	; (8003acc <HAL_RCC_OscConfig+0x278>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fce1 	bl	80013c4 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fd fcdd 	bl	80013c4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e1b4      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4925      	ldr	r1, [pc, #148]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
 8003a38:	e015      	b.n	8003a66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCC_OscConfig+0x278>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd fcc0 	bl	80013c4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fd fcbc 	bl	80013c4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e193      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d036      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd fca0 	bl	80013c4 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fd fc9c 	bl	80013c4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e173      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x234>
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_OscConfig+0x27c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fd fc89 	bl	80013c4 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	e00e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7fd fc85 	bl	80013c4 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d907      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e15c      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	42470000 	.word	0x42470000
 8003ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b8a      	ldr	r3, [pc, #552]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ea      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8097 	beq.w	8003c1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b83      	ldr	r3, [pc, #524]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b7f      	ldr	r3, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a7e      	ldr	r2, [pc, #504]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0e:	4b7c      	ldr	r3, [pc, #496]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b79      	ldr	r3, [pc, #484]	; (8003d04 <HAL_RCC_OscConfig+0x4b0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x4b0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x4b0>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fd fc45 	bl	80013c4 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fd fc41 	bl	80013c4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e118      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x4b0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x31e>
 8003b64:	4b66      	ldr	r3, [pc, #408]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	4a65      	ldr	r2, [pc, #404]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b70:	e01c      	b.n	8003bac <HAL_RCC_OscConfig+0x358>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x340>
 8003b7a:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a60      	ldr	r2, [pc, #384]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	4b5e      	ldr	r3, [pc, #376]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a5d      	ldr	r2, [pc, #372]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0x358>
 8003b94:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a59      	ldr	r2, [pc, #356]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba0:	4b57      	ldr	r3, [pc, #348]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a56      	ldr	r2, [pc, #344]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003ba6:	f023 0304 	bic.w	r3, r3, #4
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fd fc06 	bl	80013c4 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bbc:	f7fd fc02 	bl	80013c4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e0d7      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ee      	beq.n	8003bbc <HAL_RCC_OscConfig+0x368>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd fbf0 	bl	80013c4 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fd fbec 	bl	80013c4 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0c1      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfe:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ee      	bne.n	8003be8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	4a3a      	ldr	r2, [pc, #232]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80ad 	beq.w	8003d80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d060      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d145      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <HAL_RCC_OscConfig+0x4b4>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd fbc0 	bl	80013c4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd fbbc 	bl	80013c4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e093      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	491b      	ldr	r1, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_RCC_OscConfig+0x4b4>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fd fb91 	bl	80013c4 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fd fb8d 	bl	80013c4 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e064      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x452>
 8003cc4:	e05c      	b.n	8003d80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_RCC_OscConfig+0x4b4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fb7a 	bl	80013c4 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fd fb76 	bl	80013c4 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e04d      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x480>
 8003cf2:	e045      	b.n	8003d80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e040      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40007000 	.word	0x40007000
 8003d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_RCC_OscConfig+0x538>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d030      	beq.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d129      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d122      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d119      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	3b01      	subs	r3, #1
 8003d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d10f      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800

08003d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e07b      	b.n	8003e9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d108      	bne.n	8003dbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db2:	d009      	beq.n	8003dc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	61da      	str	r2, [r3, #28]
 8003dba:	e005      	b.n	8003dc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd f876 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	ea42 0103 	orr.w	r1, r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0104 	and.w	r1, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0210 	and.w	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d110      	bne.n	8003ee0 <HAL_SPI_Receive_DMA+0x3c>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f8ac 	bl	8004034 <HAL_SPI_TransmitReceive_DMA>
 8003edc:	4603      	mov	r3, r0
 8003ede:	e09f      	b.n	8004020 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_SPI_Receive_DMA+0x4a>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e098      	b.n	8004020 <HAL_SPI_Receive_DMA+0x17c>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d002      	beq.n	8003f08 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
 8003f04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f06:	e086      	b.n	8004016 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Receive_DMA+0x70>
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f18:	e07d      	b.n	8004016 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	88fa      	ldrh	r2, [r7, #6]
 8003f32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5a:	d10f      	bne.n	8003f7c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <HAL_SPI_Receive_DMA+0x184>)
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <HAL_SPI_Receive_DMA+0x188>)
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <HAL_SPI_Receive_DMA+0x18c>)
 8003f92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f98:	2200      	movs	r2, #0
 8003f9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003fb4:	f7fd fbf8 	bl	80017a8 <HAL_DMA_Start_IT>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003fd6:	e01e      	b.n	8004016 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d007      	beq.n	8003ff6 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0220 	orr.w	r2, r2, #32
 8004004:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	080043c1 	.word	0x080043c1
 800402c:	08004289 	.word	0x08004289
 8004030:	080043f9 	.word	0x080043f9

08004034 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004050:	2302      	movs	r3, #2
 8004052:	e0e3      	b.n	800421c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004062:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800406a:	7dbb      	ldrb	r3, [r7, #22]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d00d      	beq.n	800408c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004076:	d106      	bne.n	8004086 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004080:	7dbb      	ldrb	r3, [r7, #22]
 8004082:	2b04      	cmp	r3, #4
 8004084:	d002      	beq.n	800408c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004086:	2302      	movs	r3, #2
 8004088:	75fb      	strb	r3, [r7, #23]
    goto error;
 800408a:	e0c2      	b.n	8004212 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040a2:	e0b6      	b.n	8004212 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d003      	beq.n	80040b8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2205      	movs	r2, #5
 80040b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	887a      	ldrh	r2, [r7, #2]
 80040ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	887a      	ldrh	r2, [r7, #2]
 80040da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	887a      	ldrh	r2, [r7, #2]
 80040e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d108      	bne.n	800410c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	4a49      	ldr	r2, [pc, #292]	; (8004224 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	4a48      	ldr	r2, [pc, #288]	; (8004228 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c
 800410a:	e007      	b.n	800411c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004110:	4a46      	ldr	r2, [pc, #280]	; (800422c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004118:	4a45      	ldr	r2, [pc, #276]	; (8004230 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800411a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	4a44      	ldr	r2, [pc, #272]	; (8004234 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004122:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	2200      	movs	r2, #0
 800412a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	4619      	mov	r1, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004142:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004144:	f7fd fb30 	bl	80017a8 <HAL_DMA_Start_IT>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f043 0210 	orr.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004166:	e054      	b.n	8004212 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417c:	2200      	movs	r2, #0
 800417e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004184:	2200      	movs	r2, #0
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	2200      	movs	r2, #0
 800418e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	2200      	movs	r2, #0
 8004196:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	4619      	mov	r1, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80041b0:	f7fd fafa 	bl	80017a8 <HAL_DMA_Start_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0210 	orr.w	r2, r3, #16
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80041d2:	e01e      	b.n	8004212 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d007      	beq.n	80041f2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0220 	orr.w	r2, r2, #32
 8004200:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0202 	orr.w	r2, r2, #2
 8004210:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	080043c1 	.word	0x080043c1
 8004228:	08004289 	.word	0x08004289
 800422c:	080043dd 	.word	0x080043dd
 8004230:	08004331 	.word	0x08004331
 8004234:	080043f9 	.word	0x080043f9

08004238 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004296:	f7fd f895 	bl	80013c4 <HAL_GetTick>
 800429a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042aa:	d03b      	beq.n	8004324 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0220 	bic.w	r2, r2, #32
 80042ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10d      	bne.n	80042e0 <SPI_DMAReceiveCplt+0x58>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042cc:	d108      	bne.n	80042e0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0203 	bic.w	r2, r2, #3
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e007      	b.n	80042f0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	2164      	movs	r1, #100	; 0x64
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f927 	bl	8004548 <SPI_EndRxTransaction>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff ffa9 	bl	8004274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004322:	e002      	b.n	800432a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7fc fc45 	bl	8000bb4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800433e:	f7fd f841 	bl	80013c4 <HAL_GetTick>
 8004342:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d02f      	beq.n	80043b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0220 	bic.w	r2, r2, #32
 8004362:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	2164      	movs	r1, #100	; 0x64
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f953 	bl	8004614 <SPI_EndRxTxTransaction>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0203 	bic.w	r2, r2, #3
 800438e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7ff ff61 	bl	8004274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80043b2:	e002      	b.n	80043ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff ff3f 	bl	8004238 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ff3c 	bl	800424c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff ff38 	bl	8004260 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0203 	bic.w	r2, r2, #3
 8004414:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f043 0210 	orr.w	r2, r3, #16
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff ff22 	bl	8004274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004448:	f7fc ffbc 	bl	80013c4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	4413      	add	r3, r2
 8004456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004458:	f7fc ffb4 	bl	80013c4 <HAL_GetTick>
 800445c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800445e:	4b39      	ldr	r3, [pc, #228]	; (8004544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	015b      	lsls	r3, r3, #5
 8004464:	0d1b      	lsrs	r3, r3, #20
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446e:	e054      	b.n	800451a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004476:	d050      	beq.n	800451a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004478:	f7fc ffa4 	bl	80013c4 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	d902      	bls.n	800448e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d13d      	bne.n	800450a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800449c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a6:	d111      	bne.n	80044cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	d004      	beq.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ba:	d107      	bne.n	80044cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d4:	d10f      	bne.n	80044f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e017      	b.n	800453a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	3b01      	subs	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4013      	ands	r3, r2
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	429a      	cmp	r2, r3
 8004536:	d19b      	bne.n	8004470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000000 	.word	0x20000000

08004548 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455c:	d111      	bne.n	8004582 <SPI_EndRxTransaction+0x3a>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004566:	d004      	beq.n	8004572 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004570:	d107      	bne.n	8004582 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004580:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800458a:	d12a      	bne.n	80045e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004594:	d012      	beq.n	80045bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	2180      	movs	r1, #128	; 0x80
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff ff49 	bl	8004438 <SPI_WaitFlagStateUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02d      	beq.n	8004608 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e026      	b.n	800460a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	2101      	movs	r1, #1
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff ff36 	bl	8004438 <SPI_WaitFlagStateUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01a      	beq.n	8004608 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	f043 0220 	orr.w	r2, r3, #32
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e013      	b.n	800460a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2200      	movs	r2, #0
 80045ea:	2101      	movs	r1, #1
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff ff23 	bl	8004438 <SPI_WaitFlagStateUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e000      	b.n	800460a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <SPI_EndRxTxTransaction+0x7c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <SPI_EndRxTxTransaction+0x80>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	0d5b      	lsrs	r3, r3, #21
 800462c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463e:	d112      	bne.n	8004666 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2200      	movs	r2, #0
 8004648:	2180      	movs	r1, #128	; 0x80
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fef4 	bl	8004438 <SPI_WaitFlagStateUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	f043 0220 	orr.w	r2, r3, #32
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3b01      	subs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d0f2      	beq.n	8004666 <SPI_EndRxTxTransaction+0x52>
 8004680:	e000      	b.n	8004684 <SPI_EndRxTxTransaction+0x70>
        break;
 8004682:	bf00      	nop
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000000 	.word	0x20000000
 8004694:	165e9f81 	.word	0x165e9f81

08004698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e041      	b.n	800472e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f839 	bl	8004736 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f000 f9d8 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	d001      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e04e      	b.n	8004802 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a23      	ldr	r2, [pc, #140]	; (8004810 <HAL_TIM_Base_Start_IT+0xc4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478e:	d01d      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <HAL_TIM_Base_Start_IT+0xc8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <HAL_TIM_Base_Start_IT+0xcc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <HAL_TIM_Base_Start_IT+0xd0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <HAL_TIM_Base_Start_IT+0xd4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <HAL_TIM_Base_Start_IT+0xd8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_TIM_Base_Start_IT+0xdc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d111      	bne.n	80047f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b06      	cmp	r3, #6
 80047dc:	d010      	beq.n	8004800 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	e007      	b.n	8004800 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40010400 	.word	0x40010400
 8004824:	40014000 	.word	0x40014000
 8004828:	40001800 	.word	0x40001800

0800482c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0202 	mvn.w	r2, #2
 8004858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8ee 	bl	8004a50 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8e0 	bl	8004a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8f1 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b04      	cmp	r3, #4
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0204 	mvn.w	r2, #4
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8c4 	bl	8004a50 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8b6 	bl	8004a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8c7 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d122      	bne.n	8004930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0208 	mvn.w	r2, #8
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2204      	movs	r2, #4
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f89a 	bl	8004a50 <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f88c 	bl	8004a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f89d 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b10      	cmp	r3, #16
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b10      	cmp	r3, #16
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0210 	mvn.w	r2, #16
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2208      	movs	r2, #8
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f870 	bl	8004a50 <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f862 	bl	8004a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f873 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d10e      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d107      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0201 	mvn.w	r2, #1
 80049a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc fa06 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d10e      	bne.n	80049dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f902 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d10e      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d107      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f838 	bl	8004a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d10e      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d107      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0220 	mvn.w	r2, #32
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8cc 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a40      	ldr	r2, [pc, #256]	; (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d00f      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3d      	ldr	r2, [pc, #244]	; (8004ba4 <TIM_Base_SetConfig+0x118>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3c      	ldr	r2, [pc, #240]	; (8004ba8 <TIM_Base_SetConfig+0x11c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3b      	ldr	r2, [pc, #236]	; (8004bac <TIM_Base_SetConfig+0x120>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3a      	ldr	r2, [pc, #232]	; (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d108      	bne.n	8004ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02b      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d027      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <TIM_Base_SetConfig+0x118>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d023      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2b      	ldr	r2, [pc, #172]	; (8004ba8 <TIM_Base_SetConfig+0x11c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01f      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <TIM_Base_SetConfig+0x120>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01b      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d017      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <TIM_Base_SetConfig+0x128>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <TIM_Base_SetConfig+0x12c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00f      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a26      	ldr	r2, [pc, #152]	; (8004bbc <TIM_Base_SetConfig+0x130>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a25      	ldr	r2, [pc, #148]	; (8004bc0 <TIM_Base_SetConfig+0x134>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <TIM_Base_SetConfig+0x138>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a23      	ldr	r2, [pc, #140]	; (8004bc8 <TIM_Base_SetConfig+0x13c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d103      	bne.n	8004b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	615a      	str	r2, [r3, #20]
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40010400 	.word	0x40010400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800
 8004bc0:	40001800 	.word	0x40001800
 8004bc4:	40001c00 	.word	0x40001c00
 8004bc8:	40002000 	.word	0x40002000

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e03f      	b.n	8004c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fa1c 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2224      	movs	r2, #36	; 0x24
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fdbf 	bl	80057bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b08a      	sub	sp, #40	; 0x28
 8004c92:	af02      	add	r7, sp, #8
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d17c      	bne.n	8004da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_UART_Transmit+0x2c>
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e075      	b.n	8004daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Transmit+0x3e>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e06e      	b.n	8004daa <HAL_UART_Transmit+0x11c>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2221      	movs	r2, #33	; 0x21
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce2:	f7fc fb6f 	bl	80013c4 <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d108      	bne.n	8004d10 <HAL_UART_Transmit+0x82>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e003      	b.n	8004d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d20:	e02a      	b.n	8004d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fb3d 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e036      	b.n	8004daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	3302      	adds	r3, #2
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e007      	b.n	8004d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	3301      	adds	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1cf      	bne.n	8004d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2140      	movs	r1, #64	; 0x40
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fb0d 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e006      	b.n	8004daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d130      	bne.n	8004e2e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Transmit_IT+0x26>
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e029      	b.n	8004e30 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Transmit_IT+0x38>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e022      	b.n	8004e30 <HAL_UART_Transmit_IT+0x7e>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	88fa      	ldrh	r2, [r7, #6]
 8004e02:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2221      	movs	r2, #33	; 0x21
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e28:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e000      	b.n	8004e30 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
  }
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b0ba      	sub	sp, #232	; 0xe8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10f      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x66>
 8004e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fbd3 	bl	8005646 <UART_Receive_IT>
      return;
 8004ea0:	e256      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80de 	beq.w	8005068 <HAL_UART_IRQHandler+0x22c>
 8004eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80d1 	beq.w	8005068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <HAL_UART_IRQHandler+0xae>
 8004ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <HAL_UART_IRQHandler+0xd2>
 8004ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f043 0202 	orr.w	r2, r3, #2
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <HAL_UART_IRQHandler+0xf6>
 8004f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f043 0204 	orr.w	r2, r3, #4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d011      	beq.n	8004f62 <HAL_UART_IRQHandler+0x126>
 8004f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d105      	bne.n	8004f56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f043 0208 	orr.w	r2, r3, #8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 81ed 	beq.w	8005346 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_UART_IRQHandler+0x14e>
 8004f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fb5e 	bl	8005646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x17a>
 8004fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d04f      	beq.n	8005056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa66 	bl	8005488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d141      	bne.n	800504e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3314      	adds	r3, #20
 8004fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800500e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1d9      	bne.n	8004fca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d013      	beq.n	8005046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	4a7d      	ldr	r2, [pc, #500]	; (8005218 <HAL_UART_IRQHandler+0x3dc>)
 8005024:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	4618      	mov	r0, r3
 800502c:	f7fc fc84 	bl	8001938 <HAL_DMA_Abort_IT>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005040:	4610      	mov	r0, r2
 8005042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	e00e      	b.n	8005064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f99a 	bl	8005380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e00a      	b.n	8005064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f996 	bl	8005380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	e006      	b.n	8005064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f992 	bl	8005380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005062:	e170      	b.n	8005346 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	bf00      	nop
    return;
 8005066:	e16e      	b.n	8005346 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 814a 	bne.w	8005306 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8143 	beq.w	8005306 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 813c 	beq.w	8005306 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800508e:	2300      	movs	r3, #0
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	f040 80b4 	bne.w	800521c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8140 	beq.w	800534a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050d2:	429a      	cmp	r2, r3
 80050d4:	f080 8139 	bcs.w	800534a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	f000 8088 	beq.w	80051fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800510c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800511a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800511e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005126:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1d9      	bne.n	80050ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800514a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3314      	adds	r3, #20
 800515a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800515e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005162:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005166:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e1      	bne.n	800513a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3314      	adds	r3, #20
 8005196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800519a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800519c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e3      	bne.n	8005176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80051e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e3      	bne.n	80051bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fc fb2d 	bl	8001858 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005206:	b29b      	uxth	r3, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	b29b      	uxth	r3, r3
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8c0 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005214:	e099      	b.n	800534a <HAL_UART_IRQHandler+0x50e>
 8005216:	bf00      	nop
 8005218:	0800554f 	.word	0x0800554f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005224:	b29b      	uxth	r3, r3
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 808b 	beq.w	800534e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8086 	beq.w	800534e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005266:	647a      	str	r2, [r7, #68]	; 0x44
 8005268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800526c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e3      	bne.n	8005242 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3314      	adds	r3, #20
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	623b      	str	r3, [r7, #32]
   return(result);
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800529e:	633a      	str	r2, [r7, #48]	; 0x30
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e3      	bne.n	800527a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052e4:	61fa      	str	r2, [r7, #28]
 80052e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	617b      	str	r3, [r7, #20]
   return(result);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e3      	bne.n	80052c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f848 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005304:	e023      	b.n	800534e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <HAL_UART_IRQHandler+0x4ea>
 8005312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f929 	bl	8005576 <UART_Transmit_IT>
    return;
 8005324:	e014      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00e      	beq.n	8005350 <HAL_UART_IRQHandler+0x514>
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f969 	bl	8005616 <UART_EndTransmit_IT>
    return;
 8005344:	e004      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
    return;
 8005346:	bf00      	nop
 8005348:	e002      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
      return;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
      return;
 800534e:	bf00      	nop
  }
}
 8005350:	37e8      	adds	r7, #232	; 0xe8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop

08005358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b090      	sub	sp, #64	; 0x40
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053bc:	e050      	b.n	8005460 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c4:	d04c      	beq.n	8005460 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <UART_WaitOnFlagUntilTimeout+0x30>
 80053cc:	f7fb fffa 	bl	80013c4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d8:	429a      	cmp	r2, r3
 80053da:	d241      	bcs.n	8005460 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053fc:	637a      	str	r2, [r7, #52]	; 0x34
 80053fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e5      	bne.n	80053dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3314      	adds	r3, #20
 8005416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	613b      	str	r3, [r7, #16]
   return(result);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	63bb      	str	r3, [r7, #56]	; 0x38
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3314      	adds	r3, #20
 800542e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005430:	623a      	str	r2, [r7, #32]
 8005432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	69f9      	ldr	r1, [r7, #28]
 8005436:	6a3a      	ldr	r2, [r7, #32]
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	61bb      	str	r3, [r7, #24]
   return(result);
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e5      	bne.n	8005410 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e00f      	b.n	8005480 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	429a      	cmp	r2, r3
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	429a      	cmp	r2, r3
 800547c:	d09f      	beq.n	80053be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3740      	adds	r7, #64	; 0x40
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b095      	sub	sp, #84	; 0x54
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	330c      	adds	r3, #12
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054b0:	643a      	str	r2, [r7, #64]	; 0x40
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3314      	adds	r3, #20
 80054ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d119      	bne.n	8005534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f023 0310 	bic.w	r3, r3, #16
 8005516:	647b      	str	r3, [r7, #68]	; 0x44
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330c      	adds	r3, #12
 800551e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005520:	61ba      	str	r2, [r7, #24]
 8005522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6979      	ldr	r1, [r7, #20]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	613b      	str	r3, [r7, #16]
   return(result);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e5      	bne.n	8005500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005542:	bf00      	nop
 8005544:	3754      	adds	r7, #84	; 0x54
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff09 	bl	8005380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b21      	cmp	r3, #33	; 0x21
 8005588:	d13e      	bne.n	8005608 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005592:	d114      	bne.n	80055be <UART_Transmit_IT+0x48>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d110      	bne.n	80055be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	1c9a      	adds	r2, r3, #2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	621a      	str	r2, [r3, #32]
 80055bc:	e008      	b.n	80055d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	1c59      	adds	r1, r3, #1
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6211      	str	r1, [r2, #32]
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4619      	mov	r1, r3
 80055de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10f      	bne.n	8005604 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005602:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	e000      	b.n	800560a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005608:	2302      	movs	r3, #2
  }
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fe8e 	bl	8005358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b08c      	sub	sp, #48	; 0x30
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b22      	cmp	r3, #34	; 0x22
 8005658:	f040 80ab 	bne.w	80057b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005664:	d117      	bne.n	8005696 <UART_Receive_IT+0x50>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d113      	bne.n	8005696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005684:	b29a      	uxth	r2, r3
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	1c9a      	adds	r2, r3, #2
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
 8005694:	e026      	b.n	80056e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d007      	beq.n	80056ba <UART_Receive_IT+0x74>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <UART_Receive_IT+0x82>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e008      	b.n	80056da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4619      	mov	r1, r3
 80056f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d15a      	bne.n	80057ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0220 	bic.w	r2, r2, #32
 8005706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	2b01      	cmp	r3, #1
 8005736:	d135      	bne.n	80057a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f023 0310 	bic.w	r3, r3, #16
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575e:	623a      	str	r2, [r7, #32]
 8005760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	69f9      	ldr	r1, [r7, #28]
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	61bb      	str	r3, [r7, #24]
   return(result);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b10      	cmp	r3, #16
 800577e:	d10a      	bne.n	8005796 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fdf9 	bl	8005394 <HAL_UARTEx_RxEventCallback>
 80057a2:	e002      	b.n	80057aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fde1 	bl	800536c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e002      	b.n	80057b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3730      	adds	r7, #48	; 0x30
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c0:	b0c0      	sub	sp, #256	; 0x100
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d8:	68d9      	ldr	r1, [r3, #12]
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	ea40 0301 	orr.w	r3, r0, r1
 80057e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005814:	f021 010c 	bic.w	r1, r1, #12
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005822:	430b      	orrs	r3, r1
 8005824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005836:	6999      	ldr	r1, [r3, #24]
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	ea40 0301 	orr.w	r3, r0, r1
 8005842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b8f      	ldr	r3, [pc, #572]	; (8005a88 <UART_SetConfig+0x2cc>)
 800584c:	429a      	cmp	r2, r3
 800584e:	d005      	beq.n	800585c <UART_SetConfig+0xa0>
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b8d      	ldr	r3, [pc, #564]	; (8005a8c <UART_SetConfig+0x2d0>)
 8005858:	429a      	cmp	r2, r3
 800585a:	d104      	bne.n	8005866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7fd fd84 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8005860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005864:	e003      	b.n	800586e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005866:	f7fd fd6b 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 800586a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	f040 810c 	bne.w	8005a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005880:	2200      	movs	r2, #0
 8005882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800588a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	1891      	adds	r1, r2, r2
 8005894:	65b9      	str	r1, [r7, #88]	; 0x58
 8005896:	415b      	adcs	r3, r3
 8005898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800589a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800589e:	4621      	mov	r1, r4
 80058a0:	eb12 0801 	adds.w	r8, r2, r1
 80058a4:	4629      	mov	r1, r5
 80058a6:	eb43 0901 	adc.w	r9, r3, r1
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058be:	4690      	mov	r8, r2
 80058c0:	4699      	mov	r9, r3
 80058c2:	4623      	mov	r3, r4
 80058c4:	eb18 0303 	adds.w	r3, r8, r3
 80058c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058cc:	462b      	mov	r3, r5
 80058ce:	eb49 0303 	adc.w	r3, r9, r3
 80058d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058ea:	460b      	mov	r3, r1
 80058ec:	18db      	adds	r3, r3, r3
 80058ee:	653b      	str	r3, [r7, #80]	; 0x50
 80058f0:	4613      	mov	r3, r2
 80058f2:	eb42 0303 	adc.w	r3, r2, r3
 80058f6:	657b      	str	r3, [r7, #84]	; 0x54
 80058f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005900:	f7fa fc86 	bl	8000210 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4b61      	ldr	r3, [pc, #388]	; (8005a90 <UART_SetConfig+0x2d4>)
 800590a:	fba3 2302 	umull	r2, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	011c      	lsls	r4, r3, #4
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800591c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	1891      	adds	r1, r2, r2
 800592a:	64b9      	str	r1, [r7, #72]	; 0x48
 800592c:	415b      	adcs	r3, r3
 800592e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005934:	4641      	mov	r1, r8
 8005936:	eb12 0a01 	adds.w	sl, r2, r1
 800593a:	4649      	mov	r1, r9
 800593c:	eb43 0b01 	adc.w	fp, r3, r1
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800594c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005954:	4692      	mov	sl, r2
 8005956:	469b      	mov	fp, r3
 8005958:	4643      	mov	r3, r8
 800595a:	eb1a 0303 	adds.w	r3, sl, r3
 800595e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005962:	464b      	mov	r3, r9
 8005964:	eb4b 0303 	adc.w	r3, fp, r3
 8005968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800597c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005980:	460b      	mov	r3, r1
 8005982:	18db      	adds	r3, r3, r3
 8005984:	643b      	str	r3, [r7, #64]	; 0x40
 8005986:	4613      	mov	r3, r2
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	647b      	str	r3, [r7, #68]	; 0x44
 800598e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005996:	f7fa fc3b 	bl	8000210 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2301 	umull	r2, r3, r3, r1
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	; 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <UART_SetConfig+0x2d4>)
 80059b8:	fba3 2302 	umull	r2, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c4:	441c      	add	r4, r3
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	63b9      	str	r1, [r7, #56]	; 0x38
 80059e0:	415b      	adcs	r3, r3
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059e8:	4641      	mov	r1, r8
 80059ea:	1851      	adds	r1, r2, r1
 80059ec:	6339      	str	r1, [r7, #48]	; 0x30
 80059ee:	4649      	mov	r1, r9
 80059f0:	414b      	adcs	r3, r1
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a00:	4659      	mov	r1, fp
 8005a02:	00cb      	lsls	r3, r1, #3
 8005a04:	4651      	mov	r1, sl
 8005a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	00ca      	lsls	r2, r1, #3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	4642      	mov	r2, r8
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	18db      	adds	r3, r3, r3
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a42:	4613      	mov	r3, r2
 8005a44:	eb42 0303 	adc.w	r3, r2, r3
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a52:	f7fa fbdd 	bl	8000210 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <UART_SetConfig+0x2d4>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	; 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3332      	adds	r3, #50	; 0x32
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <UART_SetConfig+0x2d4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 0207 	and.w	r2, r3, #7
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4422      	add	r2, r4
 8005a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a84:	e105      	b.n	8005c92 <UART_SetConfig+0x4d6>
 8005a86:	bf00      	nop
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	40011400 	.word	0x40011400
 8005a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	1891      	adds	r1, r2, r2
 8005aac:	6239      	str	r1, [r7, #32]
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	1854      	adds	r4, r2, r1
 8005aba:	4649      	mov	r1, r9
 8005abc:	eb43 0501 	adc.w	r5, r3, r1
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	00eb      	lsls	r3, r5, #3
 8005aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ace:	00e2      	lsls	r2, r4, #3
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	18e3      	adds	r3, r4, r3
 8005ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005adc:	464b      	mov	r3, r9
 8005ade:	eb45 0303 	adc.w	r3, r5, r3
 8005ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b02:	4629      	mov	r1, r5
 8005b04:	008b      	lsls	r3, r1, #2
 8005b06:	4621      	mov	r1, r4
 8005b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	008a      	lsls	r2, r1, #2
 8005b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b14:	f7fa fb7c 	bl	8000210 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b60      	ldr	r3, [pc, #384]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	011c      	lsls	r4, r3, #4
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	1891      	adds	r1, r2, r2
 8005b3e:	61b9      	str	r1, [r7, #24]
 8005b40:	415b      	adcs	r3, r3
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b48:	4641      	mov	r1, r8
 8005b4a:	1851      	adds	r1, r2, r1
 8005b4c:	6139      	str	r1, [r7, #16]
 8005b4e:	4649      	mov	r1, r9
 8005b50:	414b      	adcs	r3, r1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b60:	4659      	mov	r1, fp
 8005b62:	00cb      	lsls	r3, r1, #3
 8005b64:	4651      	mov	r1, sl
 8005b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	00ca      	lsls	r2, r1, #3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	4642      	mov	r2, r8
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	460a      	mov	r2, r1
 8005b80:	eb42 0303 	adc.w	r3, r2, r3
 8005b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	008b      	lsls	r3, r1, #2
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005baa:	4641      	mov	r1, r8
 8005bac:	008a      	lsls	r2, r1, #2
 8005bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bb2:	f7fa fb2d 	bl	8000210 <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	2164      	movs	r1, #100	; 0x64
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	3332      	adds	r3, #50	; 0x32
 8005bce:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bda:	441c      	add	r4, r3
 8005bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be0:	2200      	movs	r2, #0
 8005be2:	673b      	str	r3, [r7, #112]	; 0x70
 8005be4:	677a      	str	r2, [r7, #116]	; 0x74
 8005be6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bea:	4642      	mov	r2, r8
 8005bec:	464b      	mov	r3, r9
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	1851      	adds	r1, r2, r1
 8005bfe:	6039      	str	r1, [r7, #0]
 8005c00:	4649      	mov	r1, r9
 8005c02:	414b      	adcs	r3, r1
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c12:	4659      	mov	r1, fp
 8005c14:	00cb      	lsls	r3, r1, #3
 8005c16:	4651      	mov	r1, sl
 8005c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	00ca      	lsls	r2, r1, #3
 8005c20:	4610      	mov	r0, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	4603      	mov	r3, r0
 8005c26:	4642      	mov	r2, r8
 8005c28:	189b      	adds	r3, r3, r2
 8005c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	460a      	mov	r2, r1
 8005c30:	eb42 0303 	adc.w	r3, r2, r3
 8005c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c40:	667a      	str	r2, [r7, #100]	; 0x64
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c4e:	4649      	mov	r1, r9
 8005c50:	008b      	lsls	r3, r1, #2
 8005c52:	4641      	mov	r1, r8
 8005c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c58:	4641      	mov	r1, r8
 8005c5a:	008a      	lsls	r2, r1, #2
 8005c5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c60:	f7fa fad6 	bl	8000210 <__aeabi_uldivmod>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2164      	movs	r1, #100	; 0x64
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	3332      	adds	r3, #50	; 0x32
 8005c7c:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4422      	add	r2, r4
 8005c90:	609a      	str	r2, [r3, #8]
}
 8005c92:	bf00      	nop
 8005c94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9e:	bf00      	nop
 8005ca0:	51eb851f 	.word	0x51eb851f

08005ca4 <__NVIC_SetPriority>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	db0a      	blt.n	8005cce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	490c      	ldr	r1, [pc, #48]	; (8005cf0 <__NVIC_SetPriority+0x4c>)
 8005cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc2:	0112      	lsls	r2, r2, #4
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ccc:	e00a      	b.n	8005ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4908      	ldr	r1, [pc, #32]	; (8005cf4 <__NVIC_SetPriority+0x50>)
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	3b04      	subs	r3, #4
 8005cdc:	0112      	lsls	r2, r2, #4
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	761a      	strb	r2, [r3, #24]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	e000e100 	.word	0xe000e100
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <SysTick_Handler+0x1c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d00:	f002 faca 	bl	8008298 <xTaskGetSchedulerState>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d001      	beq.n	8005d0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d0a:	f003 fbb5 	bl	8009478 <xPortSysTickHandler>
  }
}
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	e000e010 	.word	0xe000e010

08005d18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	f06f 0004 	mvn.w	r0, #4
 8005d22:	f7ff ffbf 	bl	8005ca4 <__NVIC_SetPriority>
#endif
}
 8005d26:	bf00      	nop
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d32:	f3ef 8305 	mrs	r3, IPSR
 8005d36:	603b      	str	r3, [r7, #0]
  return(result);
 8005d38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d3e:	f06f 0305 	mvn.w	r3, #5
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	e00c      	b.n	8005d60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d46:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <osKernelInitialize+0x44>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d4e:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <osKernelInitialize+0x44>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	607b      	str	r3, [r7, #4]
 8005d58:	e002      	b.n	8005d60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d60:	687b      	ldr	r3, [r7, #4]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	2000c1fc 	.word	0x2000c1fc

08005d74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d7a:	f3ef 8305 	mrs	r3, IPSR
 8005d7e:	603b      	str	r3, [r7, #0]
  return(result);
 8005d80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d86:	f06f 0305 	mvn.w	r3, #5
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e010      	b.n	8005db0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <osKernelStart+0x48>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d109      	bne.n	8005daa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d96:	f7ff ffbf 	bl	8005d18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <osKernelStart+0x48>)
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005da0:	f001 fe1e 	bl	80079e0 <vTaskStartScheduler>
      stat = osOK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	e002      	b.n	8005db0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005db0:	687b      	ldr	r3, [r7, #4]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	2000c1fc 	.word	0x2000c1fc

08005dc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08e      	sub	sp, #56	; 0x38
 8005dc4:	af04      	add	r7, sp, #16
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dd0:	f3ef 8305 	mrs	r3, IPSR
 8005dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8005dd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d17e      	bne.n	8005eda <osThreadNew+0x11a>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d07b      	beq.n	8005eda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005de2:	2380      	movs	r3, #128	; 0x80
 8005de4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005de6:	2318      	movs	r3, #24
 8005de8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d045      	beq.n	8005e86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <osThreadNew+0x48>
        name = attr->name;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <osThreadNew+0x6e>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b38      	cmp	r3, #56	; 0x38
 8005e20:	d805      	bhi.n	8005e2e <osThreadNew+0x6e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <osThreadNew+0x72>
        return (NULL);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e054      	b.n	8005edc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00e      	beq.n	8005e68 <osThreadNew+0xa8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	2bbb      	cmp	r3, #187	; 0xbb
 8005e50:	d90a      	bls.n	8005e68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d006      	beq.n	8005e68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <osThreadNew+0xa8>
        mem = 1;
 8005e62:	2301      	movs	r3, #1
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	e010      	b.n	8005e8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10c      	bne.n	8005e8a <osThreadNew+0xca>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <osThreadNew+0xca>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <osThreadNew+0xca>
          mem = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	e001      	b.n	8005e8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d110      	bne.n	8005eb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e98:	9202      	str	r2, [sp, #8]
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6a3a      	ldr	r2, [r7, #32]
 8005ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f001 fbae 	bl	8007608 <xTaskCreateStatic>
 8005eac:	4603      	mov	r3, r0
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	e013      	b.n	8005eda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d110      	bne.n	8005eda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f107 0310 	add.w	r3, r7, #16
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f001 fbf9 	bl	80076c2 <xTaskCreate>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d001      	beq.n	8005eda <osThreadNew+0x11a>
            hTask = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005eda:	693b      	ldr	r3, [r7, #16]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3728      	adds	r7, #40	; 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <osThreadFlagsSet+0x1a>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	da03      	bge.n	8005f06 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8005efe:	f06f 0303 	mvn.w	r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e035      	b.n	8005f72 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f0c:	f3ef 8305 	mrs	r3, IPSR
 8005f10:	613b      	str	r3, [r7, #16]
  return(result);
 8005f12:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01f      	beq.n	8005f58 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	2201      	movs	r2, #1
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6978      	ldr	r0, [r7, #20]
 8005f2a:	f002 fc5d 	bl	80087e8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005f2e:	f107 030c 	add.w	r3, r7, #12
 8005f32:	2200      	movs	r2, #0
 8005f34:	9200      	str	r2, [sp, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	2100      	movs	r1, #0
 8005f3a:	6978      	ldr	r0, [r7, #20]
 8005f3c:	f002 fc54 	bl	80087e8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d015      	beq.n	8005f72 <osThreadFlagsSet+0x8e>
 8005f46:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <osThreadFlagsSet+0x98>)
 8005f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	e00c      	b.n	8005f72 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6978      	ldr	r0, [r7, #20]
 8005f60:	f002 fb84 	bl	800866c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005f64:	f107 030c 	add.w	r3, r7, #12
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	6978      	ldr	r0, [r7, #20]
 8005f6e:	f002 fb7d 	bl	800866c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	; 0x30
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8c:	f3ef 8305 	mrs	r3, IPSR
 8005f90:	617b      	str	r3, [r7, #20]
  return(result);
 8005f92:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005f98:	f06f 0305 	mvn.w	r3, #5
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9e:	e06b      	b.n	8006078 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da03      	bge.n	8005fae <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005fa6:	f06f 0303 	mvn.w	r3, #3
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fac:	e064      	b.n	8006078 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbc:	e001      	b.n	8005fc2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8005fca:	f001 fe25 	bl	8007c18 <xTaskGetTickCount>
 8005fce:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005fd0:	f107 0210 	add.w	r2, r7, #16
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f002 fae7 	bl	80085ac <xTaskNotifyWait>
 8005fde:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d137      	bne.n	8006056 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8005fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4013      	ands	r3, r2
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00c      	beq.n	800601a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	4013      	ands	r3, r2
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	429a      	cmp	r2, r3
 800600a:	d032      	beq.n	8006072 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10f      	bne.n	8006032 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8006012:	f06f 0302 	mvn.w	r3, #2
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006018:	e02e      	b.n	8006078 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d128      	bne.n	8006076 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d103      	bne.n	8006032 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800602a:	f06f 0302 	mvn.w	r3, #2
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006030:	e022      	b.n	8006078 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8006032:	f001 fdf1 	bl	8007c18 <xTaskGetTickCount>
 8006036:	4602      	mov	r2, r0
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	429a      	cmp	r2, r3
 8006044:	d902      	bls.n	800604c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
 800604a:	e00e      	b.n	800606a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
 8006054:	e009      	b.n	800606a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d103      	bne.n	8006064 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800605c:	f06f 0302 	mvn.w	r3, #2
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006062:	e002      	b.n	800606a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8006064:	f06f 0301 	mvn.w	r3, #1
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1af      	bne.n	8005fd0 <osThreadFlagsWait+0x50>
 8006070:	e002      	b.n	8006078 <osThreadFlagsWait+0xf8>
            break;
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <osThreadFlagsWait+0xf8>
            break;
 8006076:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800607a:	4618      	mov	r0, r3
 800607c:	3730      	adds	r7, #48	; 0x30
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800608a:	f3ef 8305 	mrs	r3, IPSR
 800608e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006090:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <osDelay+0x1c>
    stat = osErrorISR;
 8006096:	f06f 0305 	mvn.w	r3, #5
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e007      	b.n	80060ae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <osDelay+0x2c>
      vTaskDelay(ticks);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 fc65 	bl	8007978 <vTaskDelay>
    }
  }

  return (stat);
 80060ae:	68fb      	ldr	r3, [r7, #12]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c4:	f3ef 8305 	mrs	r3, IPSR
 80060c8:	613b      	str	r3, [r7, #16]
  return(result);
 80060ca:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <osMemoryPoolNew+0x1e>
    mp = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
 80060d4:	e0be      	b.n	8006254 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <osMemoryPoolNew+0x2a>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <osMemoryPoolNew+0x30>
    mp = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
 80060e6:	e0b5      	b.n	8006254 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	3303      	adds	r3, #3
 80060f0:	f023 0203 	bic.w	r2, r3, #3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	fb02 f303 	mul.w	r3, r2, r3
 80060fa:	617b      	str	r3, [r7, #20]

    name = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006104:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 8006106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d038      	beq.n	8006184 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <osMemoryPoolNew+0x68>
        name = attr->name;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d006      	beq.n	8006136 <osMemoryPoolNew+0x7e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b73      	cmp	r3, #115	; 0x73
 800612e:	d902      	bls.n	8006136 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 8006130:	2301      	movs	r3, #1
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	e009      	b.n	800614a <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <osMemoryPoolNew+0x92>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <osMemoryPoolNew+0xa8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d102      	bne.n	8006160 <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	e015      	b.n	800618c <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d011      	beq.n	800618c <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	429a      	cmp	r2, r3
 800617c:	d806      	bhi.n	800618c <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 800617e:	2301      	movs	r3, #1
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	e003      	b.n	800618c <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 8006192:	2074      	movs	r0, #116	; 0x74
 8006194:	f003 fa00 	bl	8009598 <pvPortMalloc>
 8006198:	6278      	str	r0, [r7, #36]	; 0x24
 800619a:	e002      	b.n	80061a2 <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	3324      	adds	r3, #36	; 0x24
 80061ac:	461a      	mov	r2, r3
 80061ae:	68f9      	ldr	r1, [r7, #12]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fb9e 	bl	80068f2 <xQueueCreateCountingSemaphoreStatic>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00d      	beq.n	80061e0 <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 80061ca:	6978      	ldr	r0, [r7, #20]
 80061cc:	f003 f9e4 	bl	8009598 <pvPortMalloc>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	e003      	b.n	80061e0 <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d02b      	beq.n	800623e <osMemoryPoolNew+0x186>
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d027      	beq.n	800623e <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	2200      	movs	r2, #0
 8006210:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	4a12      	ldr	r2, [pc, #72]	; (8006260 <osMemoryPoolNew+0x1a8>)
 8006216:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f043 0201 	orr.w	r2, r3, #1
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d111      	bne.n	8006254 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f043 0202 	orr.w	r2, r3, #2
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 800623c:	e00a      	b.n	8006254 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <osMemoryPoolNew+0x198>
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 800624a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800624c:	f003 fa70 	bl	8009730 <vPortFree>
      }
      mp = NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006256:	4618      	mov	r0, r3
 8006258:	3728      	adds	r7, #40	; 0x28
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	5eed0000 	.word	0x5eed0000

08006264 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	; 0x28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 8006274:	2300      	movs	r3, #0
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
 8006278:	e062      	b.n	8006340 <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	4b31      	ldr	r3, [pc, #196]	; (800634c <osMemoryPoolAlloc+0xe8>)
 8006288:	4013      	ands	r3, r2
 800628a:	4a30      	ldr	r2, [pc, #192]	; (800634c <osMemoryPoolAlloc+0xe8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d157      	bne.n	8006340 <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006290:	f3ef 8305 	mrs	r3, IPSR
 8006294:	61bb      	str	r3, [r7, #24]
  return(result);
 8006296:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 8006298:	2b00      	cmp	r3, #0
 800629a:	d032      	beq.n	8006302 <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d14e      	bne.n	8006340 <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 ff6a 	bl	8007184 <xQueueReceiveFromISR>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d144      	bne.n	8006340 <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	6a1a      	ldr	r2, [r3, #32]
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <osMemoryPoolAlloc+0xe8>)
 80062bc:	4013      	ands	r3, r2
 80062be:	4a23      	ldr	r2, [pc, #140]	; (800634c <osMemoryPoolAlloc+0xe8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d13d      	bne.n	8006340 <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062c4:	f3ef 8211 	mrs	r2, BASEPRI
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	617a      	str	r2, [r7, #20]
 80062da:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062dc:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 80062de:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 80062e0:	6a38      	ldr	r0, [r7, #32]
 80062e2:	f000 f8ef 	bl	80064c4 <AllocBlock>
 80062e6:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d103      	bne.n	80062f6 <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 80062ee:	6a38      	ldr	r0, [r7, #32]
 80062f0:	f000 f8c6 	bl	8006480 <CreateBlock>
 80062f4:	6278      	str	r0, [r7, #36]	; 0x24
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006300:	e01e      	b.n	8006340 <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fe2f 	bl	8006f6c <xQueueSemaphoreTake>
 800630e:	4603      	mov	r3, r0
 8006310:	2b01      	cmp	r3, #1
 8006312:	d115      	bne.n	8006340 <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <osMemoryPoolAlloc+0xe8>)
 800631a:	4013      	ands	r3, r2
 800631c:	4a0b      	ldr	r2, [pc, #44]	; (800634c <osMemoryPoolAlloc+0xe8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d10e      	bne.n	8006340 <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 8006322:	f003 f817 	bl	8009354 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 8006326:	6a38      	ldr	r0, [r7, #32]
 8006328:	f000 f8cc 	bl	80064c4 <AllocBlock>
 800632c:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d103      	bne.n	800633c <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 8006334:	6a38      	ldr	r0, [r7, #32]
 8006336:	f000 f8a3 	bl	8006480 <CreateBlock>
 800633a:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 800633c:	f003 f83a 	bl	80093b4 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006342:	4618      	mov	r0, r3
 8006344:	3728      	adds	r7, #40	; 0x28
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	5eed0000 	.word	0x5eed0000

08006350 <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	; 0x28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <osMemoryPoolFree+0x16>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 8006366:	f06f 0303 	mvn.w	r3, #3
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	e07f      	b.n	800646e <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	6a1a      	ldr	r2, [r3, #32]
 8006376:	4b40      	ldr	r3, [pc, #256]	; (8006478 <osMemoryPoolFree+0x128>)
 8006378:	4013      	ands	r3, r2
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <osMemoryPoolFree+0x128>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 8006380:	f06f 0302 	mvn.w	r3, #2
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
 8006386:	e072      	b.n	800646e <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d308      	bcc.n	80063a4 <osMemoryPoolFree+0x54>
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d903      	bls.n	80063ac <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 80063a4:	f06f 0303 	mvn.w	r3, #3
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	e060      	b.n	800646e <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b0:	f3ef 8305 	mrs	r3, IPSR
 80063b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80063b6:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d03b      	beq.n	8006434 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 ff7d 	bl	80072c0 <uxQueueMessagesWaitingFromISR>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d103      	bne.n	80063d8 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 80063d0:	f06f 0302 	mvn.w	r3, #2
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	e04a      	b.n	800646e <osMemoryPoolFree+0x11e>
	__asm volatile
 80063d8:	f3ef 8211 	mrs	r2, BASEPRI
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	613a      	str	r2, [r7, #16]
 80063ee:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 80063f0:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 80063f2:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6a38      	ldr	r0, [r7, #32]
 80063f8:	f000 f87c 	bl	80064f4 <FreeBlock>
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f383 8811 	msr	BASEPRI, r3
}
 8006406:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f107 0208 	add.w	r2, r7, #8
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fc3b 	bl	8006c92 <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d025      	beq.n	800646e <osMemoryPoolFree+0x11e>
 8006422:	4b16      	ldr	r3, [pc, #88]	; (800647c <osMemoryPoolFree+0x12c>)
 8006424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	e01c      	b.n	800646e <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 ff23 	bl	8007284 <uxQueueMessagesWaiting>
 800643e:	4602      	mov	r2, r0
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	d103      	bne.n	8006450 <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 8006448:	f06f 0302 	mvn.w	r3, #2
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
 800644e:	e00e      	b.n	800646e <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 8006450:	f002 ff80 	bl	8009354 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6a38      	ldr	r0, [r7, #32]
 8006458:	f000 f84c 	bl	80064f4 <FreeBlock>

          taskEXIT_CRITICAL();
 800645c:	f002 ffaa 	bl	80093b4 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	6858      	ldr	r0, [r3, #4]
 8006464:	2300      	movs	r3, #0
 8006466:	2200      	movs	r2, #0
 8006468:	2100      	movs	r1, #0
 800646a:	f000 fa79 	bl	8006960 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006470:	4618      	mov	r0, r3
 8006472:	3728      	adds	r7, #40	; 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	5eed0000 	.word	0x5eed0000
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	d20e      	bcs.n	80064b6 <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	69c9      	ldr	r1, [r1, #28]
 80064a4:	fb01 f303 	mul.w	r3, r1, r3
 80064a8:	4413      	add	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	61da      	str	r2, [r3, #28]
  }

  return (p);
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
  }

  return (p);
 80064e6:	68fb      	ldr	r3, [r7, #12]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a07      	ldr	r2, [pc, #28]	; (8006548 <vApplicationGetIdleTaskMemory+0x2c>)
 800652c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4a06      	ldr	r2, [pc, #24]	; (800654c <vApplicationGetIdleTaskMemory+0x30>)
 8006532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2280      	movs	r2, #128	; 0x80
 8006538:	601a      	str	r2, [r3, #0]
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	2000c200 	.word	0x2000c200
 800654c:	2000c2bc 	.word	0x2000c2bc

08006550 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a07      	ldr	r2, [pc, #28]	; (800657c <vApplicationGetTimerTaskMemory+0x2c>)
 8006560:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4a06      	ldr	r2, [pc, #24]	; (8006580 <vApplicationGetTimerTaskMemory+0x30>)
 8006566:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800656e:	601a      	str	r2, [r3, #0]
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	2000c4bc 	.word	0x2000c4bc
 8006580:	2000c578 	.word	0x2000c578

08006584 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f103 0208 	add.w	r2, r3, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800659c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f103 0208 	add.w	r2, r3, #8
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f103 0208 	add.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
}
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800663c:	d103      	bne.n	8006646 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e00c      	b.n	8006660 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3308      	adds	r3, #8
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	e002      	b.n	8006654 <vListInsert+0x2e>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	429a      	cmp	r2, r3
 800665e:	d2f6      	bcs.n	800664e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	601a      	str	r2, [r3, #0]
}
 800668c:	bf00      	nop
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6892      	ldr	r2, [r2, #8]
 80066ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6852      	ldr	r2, [r2, #4]
 80066b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d103      	bne.n	80066cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	1e5a      	subs	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <xQueueGenericReset+0x2a>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60bb      	str	r3, [r7, #8]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006716:	f002 fe1d 	bl	8009354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	441a      	add	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	3b01      	subs	r3, #1
 8006748:	68f9      	ldr	r1, [r7, #12]
 800674a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	441a      	add	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	22ff      	movs	r2, #255	; 0xff
 800675a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	22ff      	movs	r2, #255	; 0xff
 8006762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d114      	bne.n	8006796 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01a      	beq.n	80067aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3310      	adds	r3, #16
 8006778:	4618      	mov	r0, r3
 800677a:	f001 fbcb 	bl	8007f14 <xTaskRemoveFromEventList>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d012      	beq.n	80067aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <xQueueGenericReset+0xcc>)
 8006786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	e009      	b.n	80067aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3310      	adds	r3, #16
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fef2 	bl	8006584 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3324      	adds	r3, #36	; 0x24
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff feed 	bl	8006584 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067aa:	f002 fe03 	bl	80093b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067ae:	2301      	movs	r3, #1
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08e      	sub	sp, #56	; 0x38
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <xQueueGenericCreateStatic+0x52>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <xQueueGenericCreateStatic+0x56>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <xQueueGenericCreateStatic+0x58>
 8006812:	2300      	movs	r3, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	623b      	str	r3, [r7, #32]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <xQueueGenericCreateStatic+0x7e>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <xQueueGenericCreateStatic+0x82>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <xQueueGenericCreateStatic+0x84>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	61fb      	str	r3, [r7, #28]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800685a:	2350      	movs	r3, #80	; 0x50
 800685c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b50      	cmp	r3, #80	; 0x50
 8006862:	d00a      	beq.n	800687a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	61bb      	str	r3, [r7, #24]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800687a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00d      	beq.n	80068a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800688e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4613      	mov	r3, r2
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f805 	bl	80068ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3730      	adds	r7, #48	; 0x30
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d103      	bne.n	80068c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e002      	b.n	80068ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068da:	2101      	movs	r1, #1
 80068dc:	69b8      	ldr	r0, [r7, #24]
 80068de:	f7ff ff05 	bl	80066ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b08a      	sub	sp, #40	; 0x28
 80068f6:	af02      	add	r7, sp, #8
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	61bb      	str	r3, [r7, #24]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	429a      	cmp	r2, r3
 8006920:	d90a      	bls.n	8006938 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	617b      	str	r3, [r7, #20]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006938:	2302      	movs	r3, #2
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	2100      	movs	r1, #0
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff ff3a 	bl	80067bc <xQueueGenericCreateStatic>
 8006948:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006956:	69fb      	ldr	r3, [r7, #28]
	}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	; 0x38
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800696e:	2300      	movs	r3, #0
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <xQueueGenericSend+0x32>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <xQueueGenericSend+0x40>
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <xQueueGenericSend+0x44>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <xQueueGenericSend+0x46>
 80069a4:	2300      	movs	r3, #0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <xQueueGenericSend+0x60>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d103      	bne.n	80069ce <xQueueGenericSend+0x6e>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <xQueueGenericSend+0x72>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <xQueueGenericSend+0x74>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xQueueGenericSend+0x8e>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	623b      	str	r3, [r7, #32]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ee:	f001 fc53 	bl	8008298 <xTaskGetSchedulerState>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d102      	bne.n	80069fe <xQueueGenericSend+0x9e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <xQueueGenericSend+0xa2>
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <xQueueGenericSend+0xa4>
 8006a02:	2300      	movs	r3, #0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <xQueueGenericSend+0xbe>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	61fb      	str	r3, [r7, #28]
}
 8006a1a:	bf00      	nop
 8006a1c:	e7fe      	b.n	8006a1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a1e:	f002 fc99 	bl	8009354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <xQueueGenericSend+0xd4>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d129      	bne.n	8006a88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a3a:	f000 fc77 	bl	800732c <prvCopyDataToQueue>
 8006a3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d010      	beq.n	8006a6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	3324      	adds	r3, #36	; 0x24
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 fa61 	bl	8007f14 <xTaskRemoveFromEventList>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d013      	beq.n	8006a80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a58:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <xQueueGenericSend+0x1f8>)
 8006a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	e00a      	b.n	8006a80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a70:	4b39      	ldr	r3, [pc, #228]	; (8006b58 <xQueueGenericSend+0x1f8>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a80:	f002 fc98 	bl	80093b4 <vPortExitCritical>
				return pdPASS;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e063      	b.n	8006b50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d103      	bne.n	8006a96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a8e:	f002 fc91 	bl	80093b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e05c      	b.n	8006b50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d106      	bne.n	8006aaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a9c:	f107 0314 	add.w	r3, r7, #20
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 fa9b 	bl	8007fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aaa:	f002 fc83 	bl	80093b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aae:	f001 f807 	bl	8007ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ab2:	f002 fc4f 	bl	8009354 <vPortEnterCritical>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac2:	d103      	bne.n	8006acc <xQueueGenericSend+0x16c>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad8:	d103      	bne.n	8006ae2 <xQueueGenericSend+0x182>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae2:	f002 fc67 	bl	80093b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ae6:	1d3a      	adds	r2, r7, #4
 8006ae8:	f107 0314 	add.w	r3, r7, #20
 8006aec:	4611      	mov	r1, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 fa8a 	bl	8008008 <xTaskCheckForTimeOut>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d124      	bne.n	8006b44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006afc:	f000 fd0e 	bl	800751c <prvIsQueueFull>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d018      	beq.n	8006b38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	3310      	adds	r3, #16
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 f9b0 	bl	8007e74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b16:	f000 fc99 	bl	800744c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b1a:	f000 ffdf 	bl	8007adc <xTaskResumeAll>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f47f af7c 	bne.w	8006a1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <xQueueGenericSend+0x1f8>)
 8006b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	e772      	b.n	8006a1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b3a:	f000 fc87 	bl	800744c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b3e:	f000 ffcd 	bl	8007adc <xTaskResumeAll>
 8006b42:	e76c      	b.n	8006a1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b46:	f000 fc81 	bl	800744c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b4a:	f000 ffc7 	bl	8007adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3738      	adds	r7, #56	; 0x38
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b090      	sub	sp, #64	; 0x40
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <xQueueGenericSendFromISR+0x3c>
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <xQueueGenericSendFromISR+0x40>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <xQueueGenericSendFromISR+0x42>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bb4:	bf00      	nop
 8006bb6:	e7fe      	b.n	8006bb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d103      	bne.n	8006bc6 <xQueueGenericSendFromISR+0x6a>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <xQueueGenericSendFromISR+0x6e>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <xQueueGenericSendFromISR+0x70>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	623b      	str	r3, [r7, #32]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006be6:	f002 fc97 	bl	8009518 <vPortValidateInterruptPriority>
	__asm volatile
 8006bea:	f3ef 8211 	mrs	r2, BASEPRI
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	61fa      	str	r2, [r7, #28]
 8006c00:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006c02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d302      	bcc.n	8006c18 <xQueueGenericSendFromISR+0xbc>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d12f      	bne.n	8006c78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c2e:	f000 fb7d 	bl	800732c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3a:	d112      	bne.n	8006c62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d016      	beq.n	8006c72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	3324      	adds	r3, #36	; 0x24
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 f963 	bl	8007f14 <xTaskRemoveFromEventList>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00e      	beq.n	8006c72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e007      	b.n	8006c72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c66:	3301      	adds	r3, #1
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	b25a      	sxtb	r2, r3
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c72:	2301      	movs	r3, #1
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c76:	e001      	b.n	8006c7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f383 8811 	msr	BASEPRI, r3
}
 8006c86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3740      	adds	r7, #64	; 0x40
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b08e      	sub	sp, #56	; 0x38
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	623b      	str	r3, [r7, #32]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <xQueueGiveFromISR+0x48>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	61fb      	str	r3, [r7, #28]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d103      	bne.n	8006cea <xQueueGiveFromISR+0x58>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <xQueueGiveFromISR+0x5c>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <xQueueGiveFromISR+0x5e>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	61bb      	str	r3, [r7, #24]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d0a:	f002 fc05 	bl	8009518 <vPortValidateInterruptPriority>
	__asm volatile
 8006d0e:	f3ef 8211 	mrs	r2, BASEPRI
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	617a      	str	r2, [r7, #20]
 8006d24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006d26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d22b      	bcs.n	8006d92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d54:	d112      	bne.n	8006d7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	3324      	adds	r3, #36	; 0x24
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 f8d6 	bl	8007f14 <xTaskRemoveFromEventList>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00e      	beq.n	8006d8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e007      	b.n	8006d8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d80:	3301      	adds	r3, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	b25a      	sxtb	r2, r3
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d90:	e001      	b.n	8006d96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f383 8811 	msr	BASEPRI, r3
}
 8006da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3738      	adds	r7, #56	; 0x38
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08c      	sub	sp, #48	; 0x30
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <xQueueReceive+0x30>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	623b      	str	r3, [r7, #32]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <xQueueReceive+0x3e>
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <xQueueReceive+0x42>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <xQueueReceive+0x44>
 8006dee:	2300      	movs	r3, #0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xQueueReceive+0x5e>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	61fb      	str	r3, [r7, #28]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e0a:	f001 fa45 	bl	8008298 <xTaskGetSchedulerState>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <xQueueReceive+0x6e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <xQueueReceive+0x72>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueReceive+0x74>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <xQueueReceive+0x8e>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61bb      	str	r3, [r7, #24]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e3a:	f002 fa8b 	bl	8009354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d01f      	beq.n	8006e8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4e:	f000 fad7 	bl	8007400 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	1e5a      	subs	r2, r3, #1
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00f      	beq.n	8006e82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	3310      	adds	r3, #16
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 f854 	bl	8007f14 <xTaskRemoveFromEventList>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e72:	4b3d      	ldr	r3, [pc, #244]	; (8006f68 <xQueueReceive+0x1bc>)
 8006e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e82:	f002 fa97 	bl	80093b4 <vPortExitCritical>
				return pdPASS;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e069      	b.n	8006f5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d103      	bne.n	8006e98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e90:	f002 fa90 	bl	80093b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e062      	b.n	8006f5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e9e:	f107 0310 	add.w	r3, r7, #16
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f001 f89a 	bl	8007fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eac:	f002 fa82 	bl	80093b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eb0:	f000 fe06 	bl	8007ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eb4:	f002 fa4e 	bl	8009354 <vPortEnterCritical>
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ebe:	b25b      	sxtb	r3, r3
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec4:	d103      	bne.n	8006ece <xQueueReceive+0x122>
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eda:	d103      	bne.n	8006ee4 <xQueueReceive+0x138>
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ee4:	f002 fa66 	bl	80093b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ee8:	1d3a      	adds	r2, r7, #4
 8006eea:	f107 0310 	add.w	r3, r7, #16
 8006eee:	4611      	mov	r1, r2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 f889 	bl	8008008 <xTaskCheckForTimeOut>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d123      	bne.n	8006f44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006efe:	f000 faf7 	bl	80074f0 <prvIsQueueEmpty>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d017      	beq.n	8006f38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	3324      	adds	r3, #36	; 0x24
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 ffaf 	bl	8007e74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f18:	f000 fa98 	bl	800744c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f1c:	f000 fdde 	bl	8007adc <xTaskResumeAll>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d189      	bne.n	8006e3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f26:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <xQueueReceive+0x1bc>)
 8006f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	e780      	b.n	8006e3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f3a:	f000 fa87 	bl	800744c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f3e:	f000 fdcd 	bl	8007adc <xTaskResumeAll>
 8006f42:	e77a      	b.n	8006e3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f46:	f000 fa81 	bl	800744c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f4a:	f000 fdc7 	bl	8007adc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f50:	f000 face 	bl	80074f0 <prvIsQueueEmpty>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f43f af6f 	beq.w	8006e3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3730      	adds	r7, #48	; 0x30
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08e      	sub	sp, #56	; 0x38
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	623b      	str	r3, [r7, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	61fb      	str	r3, [r7, #28]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fbc:	f001 f96c 	bl	8008298 <xTaskGetSchedulerState>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <xQueueSemaphoreTake+0x60>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <xQueueSemaphoreTake+0x64>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <xQueueSemaphoreTake+0x66>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	61bb      	str	r3, [r7, #24]
}
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fec:	f002 f9b2 	bl	8009354 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d024      	beq.n	8007046 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	1e5a      	subs	r2, r3, #1
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800700c:	f001 faba 	bl	8008584 <pvTaskIncrementMutexHeldCount>
 8007010:	4602      	mov	r2, r0
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00f      	beq.n	800703e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	3310      	adds	r3, #16
 8007022:	4618      	mov	r0, r3
 8007024:	f000 ff76 	bl	8007f14 <xTaskRemoveFromEventList>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800702e:	4b54      	ldr	r3, [pc, #336]	; (8007180 <xQueueSemaphoreTake+0x214>)
 8007030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800703e:	f002 f9b9 	bl	80093b4 <vPortExitCritical>
				return pdPASS;
 8007042:	2301      	movs	r3, #1
 8007044:	e097      	b.n	8007176 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d111      	bne.n	8007070 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	617b      	str	r3, [r7, #20]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007068:	f002 f9a4 	bl	80093b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800706c:	2300      	movs	r3, #0
 800706e:	e082      	b.n	8007176 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007076:	f107 030c 	add.w	r3, r7, #12
 800707a:	4618      	mov	r0, r3
 800707c:	f000 ffae 	bl	8007fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007080:	2301      	movs	r3, #1
 8007082:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007084:	f002 f996 	bl	80093b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007088:	f000 fd1a 	bl	8007ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800708c:	f002 f962 	bl	8009354 <vPortEnterCritical>
 8007090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007096:	b25b      	sxtb	r3, r3
 8007098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800709c:	d103      	bne.n	80070a6 <xQueueSemaphoreTake+0x13a>
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b2:	d103      	bne.n	80070bc <xQueueSemaphoreTake+0x150>
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070bc:	f002 f97a 	bl	80093b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070c0:	463a      	mov	r2, r7
 80070c2:	f107 030c 	add.w	r3, r7, #12
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 ff9d 	bl	8008008 <xTaskCheckForTimeOut>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d132      	bne.n	800713a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070d6:	f000 fa0b 	bl	80074f0 <prvIsQueueEmpty>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d026      	beq.n	800712e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80070e8:	f002 f934 	bl	8009354 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 f8ef 	bl	80082d4 <xTaskPriorityInherit>
 80070f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80070f8:	f002 f95c 	bl	80093b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	3324      	adds	r3, #36	; 0x24
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	4611      	mov	r1, r2
 8007104:	4618      	mov	r0, r3
 8007106:	f000 feb5 	bl	8007e74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800710a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800710c:	f000 f99e 	bl	800744c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007110:	f000 fce4 	bl	8007adc <xTaskResumeAll>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	f47f af68 	bne.w	8006fec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800711c:	4b18      	ldr	r3, [pc, #96]	; (8007180 <xQueueSemaphoreTake+0x214>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	e75e      	b.n	8006fec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800712e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007130:	f000 f98c 	bl	800744c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007134:	f000 fcd2 	bl	8007adc <xTaskResumeAll>
 8007138:	e758      	b.n	8006fec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800713a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800713c:	f000 f986 	bl	800744c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007140:	f000 fccc 	bl	8007adc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007146:	f000 f9d3 	bl	80074f0 <prvIsQueueEmpty>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	f43f af4d 	beq.w	8006fec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00d      	beq.n	8007174 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007158:	f002 f8fc 	bl	8009354 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800715c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800715e:	f000 f8cd 	bl	80072fc <prvGetDisinheritPriorityAfterTimeout>
 8007162:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800716a:	4618      	mov	r0, r3
 800716c:	f001 f988 	bl	8008480 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007170:	f002 f920 	bl	80093b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007176:	4618      	mov	r0, r3
 8007178:	3738      	adds	r7, #56	; 0x38
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08e      	sub	sp, #56	; 0x38
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	623b      	str	r3, [r7, #32]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d103      	bne.n	80071be <xQueueReceiveFromISR+0x3a>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <xQueueReceiveFromISR+0x3e>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <xQueueReceiveFromISR+0x40>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	61fb      	str	r3, [r7, #28]
}
 80071da:	bf00      	nop
 80071dc:	e7fe      	b.n	80071dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071de:	f002 f99b 	bl	8009518 <vPortValidateInterruptPriority>
	__asm volatile
 80071e2:	f3ef 8211 	mrs	r2, BASEPRI
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	61ba      	str	r2, [r7, #24]
 80071f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80071fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d02f      	beq.n	800726a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007218:	f000 f8f2 	bl	8007400 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007224:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800722c:	d112      	bne.n	8007254 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d016      	beq.n	8007264 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	3310      	adds	r3, #16
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fe6a 	bl	8007f14 <xTaskRemoveFromEventList>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00e      	beq.n	8007264 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	e007      	b.n	8007264 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007258:	3301      	adds	r3, #1
 800725a:	b2db      	uxtb	r3, r3
 800725c:	b25a      	sxtb	r2, r3
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007264:	2301      	movs	r3, #1
 8007266:	637b      	str	r3, [r7, #52]	; 0x34
 8007268:	e001      	b.n	800726e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800726a:	2300      	movs	r3, #0
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f383 8811 	msr	BASEPRI, r3
}
 8007278:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800727a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800727c:	4618      	mov	r0, r3
 800727e:	3738      	adds	r7, #56	; 0x38
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	60bb      	str	r3, [r7, #8]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80072a8:	f002 f854 	bl	8009354 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80072b2:	f002 f87f 	bl	80093b4 <vPortExitCritical>

	return uxReturn;
 80072b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60fb      	str	r3, [r7, #12]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80072ee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80072f0:	4618      	mov	r0, r3
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e001      	b.n	800731e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800731e:	68fb      	ldr	r3, [r7, #12]
	}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10d      	bne.n	8007366 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d14d      	bne.n	80073ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	4618      	mov	r0, r3
 8007358:	f001 f824 	bl	80083a4 <xTaskPriorityDisinherit>
 800735c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	609a      	str	r2, [r3, #8]
 8007364:	e043      	b.n	80073ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d119      	bne.n	80073a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6858      	ldr	r0, [r3, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	461a      	mov	r2, r3
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	f002 fb34 	bl	80099e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	441a      	add	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	429a      	cmp	r2, r3
 8007394:	d32b      	bcc.n	80073ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	605a      	str	r2, [r3, #4]
 800739e:	e026      	b.n	80073ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	68d8      	ldr	r0, [r3, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	461a      	mov	r2, r3
 80073aa:	68b9      	ldr	r1, [r7, #8]
 80073ac:	f002 fb1a 	bl	80099e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	425b      	negs	r3, r3
 80073ba:	441a      	add	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d207      	bcs.n	80073dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	425b      	negs	r3, r3
 80073d6:	441a      	add	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d105      	bne.n	80073ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073f6:	697b      	ldr	r3, [r7, #20]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d018      	beq.n	8007444 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	441a      	add	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	429a      	cmp	r2, r3
 800742a:	d303      	bcc.n	8007434 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68d9      	ldr	r1, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	461a      	mov	r2, r3
 800743e:	6838      	ldr	r0, [r7, #0]
 8007440:	f002 fad0 	bl	80099e4 <memcpy>
	}
}
 8007444:	bf00      	nop
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007454:	f001 ff7e 	bl	8009354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800745e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007460:	e011      	b.n	8007486 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	d012      	beq.n	8007490 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3324      	adds	r3, #36	; 0x24
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fd50 	bl	8007f14 <xTaskRemoveFromEventList>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800747a:	f000 fe27 	bl	80080cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	3b01      	subs	r3, #1
 8007482:	b2db      	uxtb	r3, r3
 8007484:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dce9      	bgt.n	8007462 <prvUnlockQueue+0x16>
 800748e:	e000      	b.n	8007492 <prvUnlockQueue+0x46>
					break;
 8007490:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	22ff      	movs	r2, #255	; 0xff
 8007496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800749a:	f001 ff8b 	bl	80093b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800749e:	f001 ff59 	bl	8009354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074aa:	e011      	b.n	80074d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d012      	beq.n	80074da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3310      	adds	r3, #16
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fd2b 	bl	8007f14 <xTaskRemoveFromEventList>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074c4:	f000 fe02 	bl	80080cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dce9      	bgt.n	80074ac <prvUnlockQueue+0x60>
 80074d8:	e000      	b.n	80074dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	22ff      	movs	r2, #255	; 0xff
 80074e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074e4:	f001 ff66 	bl	80093b4 <vPortExitCritical>
}
 80074e8:	bf00      	nop
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074f8:	f001 ff2c 	bl	8009354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	2b00      	cmp	r3, #0
 8007502:	d102      	bne.n	800750a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e001      	b.n	800750e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800750e:	f001 ff51 	bl	80093b4 <vPortExitCritical>

	return xReturn;
 8007512:	68fb      	ldr	r3, [r7, #12]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007524:	f001 ff16 	bl	8009354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007530:	429a      	cmp	r2, r3
 8007532:	d102      	bne.n	800753a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007534:	2301      	movs	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e001      	b.n	800753e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800753e:	f001 ff39 	bl	80093b4 <vPortExitCritical>

	return xReturn;
 8007542:	68fb      	ldr	r3, [r7, #12]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e014      	b.n	8007586 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800755c:	4a0f      	ldr	r2, [pc, #60]	; (800759c <vQueueAddToRegistry+0x50>)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10b      	bne.n	8007580 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007568:	490c      	ldr	r1, [pc, #48]	; (800759c <vQueueAddToRegistry+0x50>)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007572:	4a0a      	ldr	r2, [pc, #40]	; (800759c <vQueueAddToRegistry+0x50>)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800757e:	e006      	b.n	800758e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3301      	adds	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b07      	cmp	r3, #7
 800758a:	d9e7      	bls.n	800755c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	2000c978 	.word	0x2000c978

080075a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075b0:	f001 fed0 	bl	8009354 <vPortEnterCritical>
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075ba:	b25b      	sxtb	r3, r3
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c0:	d103      	bne.n	80075ca <vQueueWaitForMessageRestricted+0x2a>
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075d0:	b25b      	sxtb	r3, r3
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075d6:	d103      	bne.n	80075e0 <vQueueWaitForMessageRestricted+0x40>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e0:	f001 fee8 	bl	80093b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d106      	bne.n	80075fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	3324      	adds	r3, #36	; 0x24
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fc61 	bl	8007ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075fa:	6978      	ldr	r0, [r7, #20]
 80075fc:	f7ff ff26 	bl	800744c <prvUnlockQueue>
	}
 8007600:	bf00      	nop
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08e      	sub	sp, #56	; 0x38
 800760c:	af04      	add	r7, sp, #16
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <xTaskCreateStatic+0x2a>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	623b      	str	r3, [r7, #32]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <xTaskCreateStatic+0x46>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	61fb      	str	r3, [r7, #28]
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800764e:	23bc      	movs	r3, #188	; 0xbc
 8007650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2bbc      	cmp	r3, #188	; 0xbc
 8007656:	d00a      	beq.n	800766e <xTaskCreateStatic+0x66>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	61bb      	str	r3, [r7, #24]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800766e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01e      	beq.n	80076b4 <xTaskCreateStatic+0xac>
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01b      	beq.n	80076b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007684:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	2202      	movs	r2, #2
 800768a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800768e:	2300      	movs	r3, #0
 8007690:	9303      	str	r3, [sp, #12]
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	9302      	str	r3, [sp, #8]
 8007696:	f107 0314 	add.w	r3, r7, #20
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f850 	bl	800774c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ae:	f000 f8f3 	bl	8007898 <prvAddNewTaskToReadyList>
 80076b2:	e001      	b.n	80076b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076b8:	697b      	ldr	r3, [r7, #20]
	}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3728      	adds	r7, #40	; 0x28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b08c      	sub	sp, #48	; 0x30
 80076c6:	af04      	add	r7, sp, #16
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	4613      	mov	r3, r2
 80076d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 ff5e 	bl	8009598 <pvPortMalloc>
 80076dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00e      	beq.n	8007702 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076e4:	20bc      	movs	r0, #188	; 0xbc
 80076e6:	f001 ff57 	bl	8009598 <pvPortMalloc>
 80076ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
 80076f8:	e005      	b.n	8007706 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076fa:	6978      	ldr	r0, [r7, #20]
 80076fc:	f002 f818 	bl	8009730 <vPortFree>
 8007700:	e001      	b.n	8007706 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007714:	88fa      	ldrh	r2, [r7, #6]
 8007716:	2300      	movs	r3, #0
 8007718:	9303      	str	r3, [sp, #12]
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	9302      	str	r3, [sp, #8]
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f80e 	bl	800774c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007730:	69f8      	ldr	r0, [r7, #28]
 8007732:	f000 f8b1 	bl	8007898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007736:	2301      	movs	r3, #1
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	e002      	b.n	8007742 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800773c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007740:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007742:	69bb      	ldr	r3, [r7, #24]
	}
 8007744:	4618      	mov	r0, r3
 8007746:	3720      	adds	r7, #32
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	461a      	mov	r2, r3
 8007764:	21a5      	movs	r1, #165	; 0xa5
 8007766:	f002 f94b 	bl	8009a00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007774:	3b01      	subs	r3, #1
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f023 0307 	bic.w	r3, r3, #7
 8007782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	617b      	str	r3, [r7, #20]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01f      	beq.n	80077ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077aa:	2300      	movs	r3, #0
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e012      	b.n	80077d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	7819      	ldrb	r1, [r3, #0]
 80077b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	3334      	adds	r3, #52	; 0x34
 80077c0:	460a      	mov	r2, r1
 80077c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d006      	beq.n	80077de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	3301      	adds	r3, #1
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b0f      	cmp	r3, #15
 80077da:	d9e9      	bls.n	80077b0 <prvInitialiseNewTask+0x64>
 80077dc:	e000      	b.n	80077e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80077de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077e8:	e003      	b.n	80077f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	2b37      	cmp	r3, #55	; 0x37
 80077f6:	d901      	bls.n	80077fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077f8:	2337      	movs	r3, #55	; 0x37
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007800:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007806:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	2200      	movs	r2, #0
 800780c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fed6 	bl	80065c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	3318      	adds	r3, #24
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe fed1 	bl	80065c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007826:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	2200      	movs	r2, #0
 8007844:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	3354      	adds	r3, #84	; 0x54
 800784c:	2260      	movs	r2, #96	; 0x60
 800784e:	2100      	movs	r1, #0
 8007850:	4618      	mov	r0, r3
 8007852:	f002 f8d5 	bl	8009a00 <memset>
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	4a0c      	ldr	r2, [pc, #48]	; (800788c <prvInitialiseNewTask+0x140>)
 800785a:	659a      	str	r2, [r3, #88]	; 0x58
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <prvInitialiseNewTask+0x144>)
 8007860:	65da      	str	r2, [r3, #92]	; 0x5c
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	4a0b      	ldr	r2, [pc, #44]	; (8007894 <prvInitialiseNewTask+0x148>)
 8007866:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	69b8      	ldr	r0, [r7, #24]
 800786e:	f001 fc41 	bl	80090f4 <pxPortInitialiseStack>
 8007872:	4602      	mov	r2, r0
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007882:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007884:	bf00      	nop
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	08009dc8 	.word	0x08009dc8
 8007890:	08009de8 	.word	0x08009de8
 8007894:	08009da8 	.word	0x08009da8

08007898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078a0:	f001 fd58 	bl	8009354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078a4:	4b2d      	ldr	r3, [pc, #180]	; (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	4a2c      	ldr	r2, [pc, #176]	; (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ae:	4b2c      	ldr	r3, [pc, #176]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078b6:	4a2a      	ldr	r2, [pc, #168]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078bc:	4b27      	ldr	r3, [pc, #156]	; (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d110      	bne.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078c4:	f000 fc26 	bl	8008114 <prvInitialiseTaskLists>
 80078c8:	e00d      	b.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ca:	4b26      	ldr	r3, [pc, #152]	; (8007964 <prvAddNewTaskToReadyList+0xcc>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078d2:	4b23      	ldr	r3, [pc, #140]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	429a      	cmp	r2, r3
 80078de:	d802      	bhi.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078e0:	4a1f      	ldr	r2, [pc, #124]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078e6:	4b20      	ldr	r3, [pc, #128]	; (8007968 <prvAddNewTaskToReadyList+0xd0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <prvAddNewTaskToReadyList+0xd0>)
 80078ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078f0:	4b1d      	ldr	r3, [pc, #116]	; (8007968 <prvAddNewTaskToReadyList+0xd0>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	4b1b      	ldr	r3, [pc, #108]	; (800796c <prvAddNewTaskToReadyList+0xd4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d903      	bls.n	800790c <prvAddNewTaskToReadyList+0x74>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	4a18      	ldr	r2, [pc, #96]	; (800796c <prvAddNewTaskToReadyList+0xd4>)
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4a15      	ldr	r2, [pc, #84]	; (8007970 <prvAddNewTaskToReadyList+0xd8>)
 800791a:	441a      	add	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe fe5b 	bl	80065de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007928:	f001 fd44 	bl	80093b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800792c:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <prvAddNewTaskToReadyList+0xcc>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00e      	beq.n	8007952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007934:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	429a      	cmp	r2, r3
 8007940:	d207      	bcs.n	8007952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007942:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <prvAddNewTaskToReadyList+0xdc>)
 8007944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	2000ce8c 	.word	0x2000ce8c
 8007960:	2000c9b8 	.word	0x2000c9b8
 8007964:	2000ce98 	.word	0x2000ce98
 8007968:	2000cea8 	.word	0x2000cea8
 800796c:	2000ce94 	.word	0x2000ce94
 8007970:	2000c9bc 	.word	0x2000c9bc
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d017      	beq.n	80079ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <vTaskDelay+0x60>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <vTaskDelay+0x30>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	60bb      	str	r3, [r7, #8]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079a8:	f000 f88a 	bl	8007ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079ac:	2100      	movs	r1, #0
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fffe 	bl	80089b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079b4:	f000 f892 	bl	8007adc <xTaskResumeAll>
 80079b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d107      	bne.n	80079d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079c0:	4b06      	ldr	r3, [pc, #24]	; (80079dc <vTaskDelay+0x64>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079d0:	bf00      	nop
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	2000ceb4 	.word	0x2000ceb4
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	; 0x28
 80079e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079ee:	463a      	mov	r2, r7
 80079f0:	1d39      	adds	r1, r7, #4
 80079f2:	f107 0308 	add.w	r3, r7, #8
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fd90 	bl	800651c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	9202      	str	r2, [sp, #8]
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	2300      	movs	r3, #0
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	460a      	mov	r2, r1
 8007a0e:	4924      	ldr	r1, [pc, #144]	; (8007aa0 <vTaskStartScheduler+0xc0>)
 8007a10:	4824      	ldr	r0, [pc, #144]	; (8007aa4 <vTaskStartScheduler+0xc4>)
 8007a12:	f7ff fdf9 	bl	8007608 <xTaskCreateStatic>
 8007a16:	4603      	mov	r3, r0
 8007a18:	4a23      	ldr	r2, [pc, #140]	; (8007aa8 <vTaskStartScheduler+0xc8>)
 8007a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a1c:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <vTaskStartScheduler+0xc8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a24:	2301      	movs	r3, #1
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	e001      	b.n	8007a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d102      	bne.n	8007a3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a34:	f001 f810 	bl	8008a58 <xTimerCreateTimerTask>
 8007a38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d11b      	bne.n	8007a78 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	613b      	str	r3, [r7, #16]
}
 8007a52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a54:	4b15      	ldr	r3, [pc, #84]	; (8007aac <vTaskStartScheduler+0xcc>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3354      	adds	r3, #84	; 0x54
 8007a5a:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <vTaskStartScheduler+0xd0>)
 8007a5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a5e:	4b15      	ldr	r3, [pc, #84]	; (8007ab4 <vTaskStartScheduler+0xd4>)
 8007a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a66:	4b14      	ldr	r3, [pc, #80]	; (8007ab8 <vTaskStartScheduler+0xd8>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a6c:	4b13      	ldr	r3, [pc, #76]	; (8007abc <vTaskStartScheduler+0xdc>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a72:	f001 fbcd 	bl	8009210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a76:	e00e      	b.n	8007a96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a7e:	d10a      	bne.n	8007a96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	60fb      	str	r3, [r7, #12]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <vTaskStartScheduler+0xb4>
}
 8007a96:	bf00      	nop
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08009d10 	.word	0x08009d10
 8007aa4:	080080e5 	.word	0x080080e5
 8007aa8:	2000ceb0 	.word	0x2000ceb0
 8007aac:	2000c9b8 	.word	0x2000c9b8
 8007ab0:	20000010 	.word	0x20000010
 8007ab4:	2000ceac 	.word	0x2000ceac
 8007ab8:	2000ce98 	.word	0x2000ce98
 8007abc:	2000ce90 	.word	0x2000ce90

08007ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ac4:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <vTaskSuspendAll+0x18>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a03      	ldr	r2, [pc, #12]	; (8007ad8 <vTaskSuspendAll+0x18>)
 8007acc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ace:	bf00      	nop
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	2000ceb4 	.word	0x2000ceb4

08007adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aea:	4b42      	ldr	r3, [pc, #264]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <xTaskResumeAll+0x2c>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	603b      	str	r3, [r7, #0]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b08:	f001 fc24 	bl	8009354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b0c:	4b39      	ldr	r3, [pc, #228]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	4a38      	ldr	r2, [pc, #224]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b16:	4b37      	ldr	r3, [pc, #220]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d162      	bne.n	8007be4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b1e:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <xTaskResumeAll+0x11c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d05e      	beq.n	8007be4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b26:	e02f      	b.n	8007b88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	4b34      	ldr	r3, [pc, #208]	; (8007bfc <xTaskResumeAll+0x120>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3318      	adds	r3, #24
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fdaf 	bl	8006698 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fdaa 	bl	8006698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	4b2d      	ldr	r3, [pc, #180]	; (8007c00 <xTaskResumeAll+0x124>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d903      	bls.n	8007b58 <xTaskResumeAll+0x7c>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	4a2a      	ldr	r2, [pc, #168]	; (8007c00 <xTaskResumeAll+0x124>)
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <xTaskResumeAll+0x128>)
 8007b66:	441a      	add	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f7fe fd35 	bl	80065de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4b23      	ldr	r3, [pc, #140]	; (8007c08 <xTaskResumeAll+0x12c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <xTaskResumeAll+0x130>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b88:	4b1c      	ldr	r3, [pc, #112]	; (8007bfc <xTaskResumeAll+0x120>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1cb      	bne.n	8007b28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b96:	f000 fb5f 	bl	8008258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b9a:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <xTaskResumeAll+0x134>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d010      	beq.n	8007bc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ba6:	f000 f847 	bl	8007c38 <xTaskIncrementTick>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007bb0:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <xTaskResumeAll+0x130>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f1      	bne.n	8007ba6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007bc2:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <xTaskResumeAll+0x134>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bc8:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <xTaskResumeAll+0x130>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bd4:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <xTaskResumeAll+0x138>)
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007be4:	f001 fbe6 	bl	80093b4 <vPortExitCritical>

	return xAlreadyYielded;
 8007be8:	68bb      	ldr	r3, [r7, #8]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	2000ceb4 	.word	0x2000ceb4
 8007bf8:	2000ce8c 	.word	0x2000ce8c
 8007bfc:	2000ce4c 	.word	0x2000ce4c
 8007c00:	2000ce94 	.word	0x2000ce94
 8007c04:	2000c9bc 	.word	0x2000c9bc
 8007c08:	2000c9b8 	.word	0x2000c9b8
 8007c0c:	2000cea0 	.word	0x2000cea0
 8007c10:	2000ce9c 	.word	0x2000ce9c
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <xTaskGetTickCount+0x1c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c24:	687b      	ldr	r3, [r7, #4]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	2000ce90 	.word	0x2000ce90

08007c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c42:	4b4f      	ldr	r3, [pc, #316]	; (8007d80 <xTaskIncrementTick+0x148>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f040 808f 	bne.w	8007d6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c4c:	4b4d      	ldr	r3, [pc, #308]	; (8007d84 <xTaskIncrementTick+0x14c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3301      	adds	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c54:	4a4b      	ldr	r2, [pc, #300]	; (8007d84 <xTaskIncrementTick+0x14c>)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d120      	bne.n	8007ca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c60:	4b49      	ldr	r3, [pc, #292]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	603b      	str	r3, [r7, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <xTaskIncrementTick+0x46>
 8007c80:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	4b41      	ldr	r3, [pc, #260]	; (8007d8c <xTaskIncrementTick+0x154>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4a3f      	ldr	r2, [pc, #252]	; (8007d8c <xTaskIncrementTick+0x154>)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <xTaskIncrementTick+0x158>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	4a3d      	ldr	r2, [pc, #244]	; (8007d90 <xTaskIncrementTick+0x158>)
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	f000 fadb 	bl	8008258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ca2:	4b3c      	ldr	r3, [pc, #240]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d349      	bcc.n	8007d40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cac:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d104      	bne.n	8007cc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb6:	4b37      	ldr	r3, [pc, #220]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cbc:	601a      	str	r2, [r3, #0]
					break;
 8007cbe:	e03f      	b.n	8007d40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc0:	4b31      	ldr	r3, [pc, #196]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d203      	bcs.n	8007ce0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cd8:	4a2e      	ldr	r2, [pc, #184]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cde:	e02f      	b.n	8007d40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fcd7 	bl	8006698 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	3318      	adds	r3, #24
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fcce 	bl	8006698 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d00:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <xTaskIncrementTick+0x160>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d903      	bls.n	8007d10 <xTaskIncrementTick+0xd8>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4a22      	ldr	r2, [pc, #136]	; (8007d98 <xTaskIncrementTick+0x160>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	; (8007d9c <xTaskIncrementTick+0x164>)
 8007d1e:	441a      	add	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fe fc59 	bl	80065de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <xTaskIncrementTick+0x168>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d3b8      	bcc.n	8007cac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d3e:	e7b5      	b.n	8007cac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d40:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <xTaskIncrementTick+0x168>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d46:	4915      	ldr	r1, [pc, #84]	; (8007d9c <xTaskIncrementTick+0x164>)
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d901      	bls.n	8007d5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d5c:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <xTaskIncrementTick+0x16c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	e004      	b.n	8007d74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <xTaskIncrementTick+0x170>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <xTaskIncrementTick+0x170>)
 8007d72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d74:	697b      	ldr	r3, [r7, #20]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	2000ceb4 	.word	0x2000ceb4
 8007d84:	2000ce90 	.word	0x2000ce90
 8007d88:	2000ce44 	.word	0x2000ce44
 8007d8c:	2000ce48 	.word	0x2000ce48
 8007d90:	2000cea4 	.word	0x2000cea4
 8007d94:	2000ceac 	.word	0x2000ceac
 8007d98:	2000ce94 	.word	0x2000ce94
 8007d9c:	2000c9bc 	.word	0x2000c9bc
 8007da0:	2000c9b8 	.word	0x2000c9b8
 8007da4:	2000cea0 	.word	0x2000cea0
 8007da8:	2000ce9c 	.word	0x2000ce9c

08007dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007db2:	4b2a      	ldr	r3, [pc, #168]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dba:	4b29      	ldr	r3, [pc, #164]	; (8007e60 <vTaskSwitchContext+0xb4>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dc0:	e046      	b.n	8007e50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007dc2:	4b27      	ldr	r3, [pc, #156]	; (8007e60 <vTaskSwitchContext+0xb4>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc8:	4b26      	ldr	r3, [pc, #152]	; (8007e64 <vTaskSwitchContext+0xb8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	e010      	b.n	8007df2 <vTaskSwitchContext+0x46>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <vTaskSwitchContext+0x40>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	607b      	str	r3, [r7, #4]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <vTaskSwitchContext+0x3e>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	491d      	ldr	r1, [pc, #116]	; (8007e68 <vTaskSwitchContext+0xbc>)
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0e4      	beq.n	8007dd0 <vTaskSwitchContext+0x24>
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <vTaskSwitchContext+0xbc>)
 8007e12:	4413      	add	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	605a      	str	r2, [r3, #4]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	3308      	adds	r3, #8
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d104      	bne.n	8007e36 <vTaskSwitchContext+0x8a>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	605a      	str	r2, [r3, #4]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	4a0b      	ldr	r2, [pc, #44]	; (8007e6c <vTaskSwitchContext+0xc0>)
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	4a08      	ldr	r2, [pc, #32]	; (8007e64 <vTaskSwitchContext+0xb8>)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e46:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <vTaskSwitchContext+0xc0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3354      	adds	r3, #84	; 0x54
 8007e4c:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <vTaskSwitchContext+0xc4>)
 8007e4e:	6013      	str	r3, [r2, #0]
}
 8007e50:	bf00      	nop
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	2000ceb4 	.word	0x2000ceb4
 8007e60:	2000cea0 	.word	0x2000cea0
 8007e64:	2000ce94 	.word	0x2000ce94
 8007e68:	2000c9bc 	.word	0x2000c9bc
 8007e6c:	2000c9b8 	.word	0x2000c9b8
 8007e70:	20000010 	.word	0x20000010

08007e74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	60fb      	str	r3, [r7, #12]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <vTaskPlaceOnEventList+0x44>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3318      	adds	r3, #24
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fe fbbf 	bl	8006626 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	6838      	ldr	r0, [r7, #0]
 8007eac:	f000 fd80 	bl	80089b0 <prvAddCurrentTaskToDelayedList>
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	2000c9b8 	.word	0x2000c9b8

08007ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	617b      	str	r3, [r7, #20]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3318      	adds	r3, #24
 8007eea:	4619      	mov	r1, r3
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f7fe fb76 	bl	80065de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007efc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	68b8      	ldr	r0, [r7, #8]
 8007f02:	f000 fd55 	bl	80089b0 <prvAddCurrentTaskToDelayedList>
	}
 8007f06:	bf00      	nop
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	2000c9b8 	.word	0x2000c9b8

08007f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	60fb      	str	r3, [r7, #12]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	3318      	adds	r3, #24
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fe fba7 	bl	8006698 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4a:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <xTaskRemoveFromEventList+0xb0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d11d      	bne.n	8007f8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fb9e 	bl	8006698 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f60:	4b19      	ldr	r3, [pc, #100]	; (8007fc8 <xTaskRemoveFromEventList+0xb4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d903      	bls.n	8007f70 <xTaskRemoveFromEventList+0x5c>
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	4a16      	ldr	r2, [pc, #88]	; (8007fc8 <xTaskRemoveFromEventList+0xb4>)
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4a13      	ldr	r2, [pc, #76]	; (8007fcc <xTaskRemoveFromEventList+0xb8>)
 8007f7e:	441a      	add	r2, r3
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f7fe fb29 	bl	80065de <vListInsertEnd>
 8007f8c:	e005      	b.n	8007f9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	3318      	adds	r3, #24
 8007f92:	4619      	mov	r1, r3
 8007f94:	480e      	ldr	r0, [pc, #56]	; (8007fd0 <xTaskRemoveFromEventList+0xbc>)
 8007f96:	f7fe fb22 	bl	80065de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <xTaskRemoveFromEventList+0xc0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d905      	bls.n	8007fb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <xTaskRemoveFromEventList+0xc4>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	e001      	b.n	8007fb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fb8:	697b      	ldr	r3, [r7, #20]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	2000ceb4 	.word	0x2000ceb4
 8007fc8:	2000ce94 	.word	0x2000ce94
 8007fcc:	2000c9bc 	.word	0x2000c9bc
 8007fd0:	2000ce4c 	.word	0x2000ce4c
 8007fd4:	2000c9b8 	.word	0x2000c9b8
 8007fd8:	2000cea0 	.word	0x2000cea0

08007fdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fe4:	4b06      	ldr	r3, [pc, #24]	; (8008000 <vTaskInternalSetTimeOutState+0x24>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <vTaskInternalSetTimeOutState+0x28>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	605a      	str	r2, [r3, #4]
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	2000cea4 	.word	0x2000cea4
 8008004:	2000ce90 	.word	0x2000ce90

08008008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10a      	bne.n	800802e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	613b      	str	r3, [r7, #16]
}
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60fb      	str	r3, [r7, #12]
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800804a:	f001 f983 	bl	8009354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800804e:	4b1d      	ldr	r3, [pc, #116]	; (80080c4 <xTaskCheckForTimeOut+0xbc>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008066:	d102      	bne.n	800806e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008068:	2300      	movs	r3, #0
 800806a:	61fb      	str	r3, [r7, #28]
 800806c:	e023      	b.n	80080b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <xTaskCheckForTimeOut+0xc0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d007      	beq.n	800808a <xTaskCheckForTimeOut+0x82>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	429a      	cmp	r2, r3
 8008082:	d302      	bcc.n	800808a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008084:	2301      	movs	r3, #1
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	e015      	b.n	80080b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	429a      	cmp	r2, r3
 8008092:	d20b      	bcs.n	80080ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	1ad2      	subs	r2, r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff ff9b 	bl	8007fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080a6:	2300      	movs	r3, #0
 80080a8:	61fb      	str	r3, [r7, #28]
 80080aa:	e004      	b.n	80080b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080b2:	2301      	movs	r3, #1
 80080b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080b6:	f001 f97d 	bl	80093b4 <vPortExitCritical>

	return xReturn;
 80080ba:	69fb      	ldr	r3, [r7, #28]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3720      	adds	r7, #32
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	2000ce90 	.word	0x2000ce90
 80080c8:	2000cea4 	.word	0x2000cea4

080080cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080d0:	4b03      	ldr	r3, [pc, #12]	; (80080e0 <vTaskMissedYield+0x14>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	601a      	str	r2, [r3, #0]
}
 80080d6:	bf00      	nop
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	2000cea0 	.word	0x2000cea0

080080e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080ec:	f000 f852 	bl	8008194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <prvIdleTask+0x28>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d9f9      	bls.n	80080ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <prvIdleTask+0x2c>)
 80080fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008108:	e7f0      	b.n	80080ec <prvIdleTask+0x8>
 800810a:	bf00      	nop
 800810c:	2000c9bc 	.word	0x2000c9bc
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
 800811e:	e00c      	b.n	800813a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4a12      	ldr	r2, [pc, #72]	; (8008174 <prvInitialiseTaskLists+0x60>)
 800812c:	4413      	add	r3, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fa28 	bl	8006584 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3301      	adds	r3, #1
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b37      	cmp	r3, #55	; 0x37
 800813e:	d9ef      	bls.n	8008120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008140:	480d      	ldr	r0, [pc, #52]	; (8008178 <prvInitialiseTaskLists+0x64>)
 8008142:	f7fe fa1f 	bl	8006584 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008146:	480d      	ldr	r0, [pc, #52]	; (800817c <prvInitialiseTaskLists+0x68>)
 8008148:	f7fe fa1c 	bl	8006584 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800814c:	480c      	ldr	r0, [pc, #48]	; (8008180 <prvInitialiseTaskLists+0x6c>)
 800814e:	f7fe fa19 	bl	8006584 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008152:	480c      	ldr	r0, [pc, #48]	; (8008184 <prvInitialiseTaskLists+0x70>)
 8008154:	f7fe fa16 	bl	8006584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008158:	480b      	ldr	r0, [pc, #44]	; (8008188 <prvInitialiseTaskLists+0x74>)
 800815a:	f7fe fa13 	bl	8006584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800815e:	4b0b      	ldr	r3, [pc, #44]	; (800818c <prvInitialiseTaskLists+0x78>)
 8008160:	4a05      	ldr	r2, [pc, #20]	; (8008178 <prvInitialiseTaskLists+0x64>)
 8008162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008164:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <prvInitialiseTaskLists+0x7c>)
 8008166:	4a05      	ldr	r2, [pc, #20]	; (800817c <prvInitialiseTaskLists+0x68>)
 8008168:	601a      	str	r2, [r3, #0]
}
 800816a:	bf00      	nop
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	2000c9bc 	.word	0x2000c9bc
 8008178:	2000ce1c 	.word	0x2000ce1c
 800817c:	2000ce30 	.word	0x2000ce30
 8008180:	2000ce4c 	.word	0x2000ce4c
 8008184:	2000ce60 	.word	0x2000ce60
 8008188:	2000ce78 	.word	0x2000ce78
 800818c:	2000ce44 	.word	0x2000ce44
 8008190:	2000ce48 	.word	0x2000ce48

08008194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800819a:	e019      	b.n	80081d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800819c:	f001 f8da 	bl	8009354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081a0:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <prvCheckTasksWaitingTermination+0x50>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3304      	adds	r3, #4
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe fa73 	bl	8006698 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081b2:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <prvCheckTasksWaitingTermination+0x54>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	4a0b      	ldr	r2, [pc, #44]	; (80081e8 <prvCheckTasksWaitingTermination+0x54>)
 80081ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081bc:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <prvCheckTasksWaitingTermination+0x58>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <prvCheckTasksWaitingTermination+0x58>)
 80081c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081c6:	f001 f8f5 	bl	80093b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f810 	bl	80081f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081d0:	4b06      	ldr	r3, [pc, #24]	; (80081ec <prvCheckTasksWaitingTermination+0x58>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e1      	bne.n	800819c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	2000ce60 	.word	0x2000ce60
 80081e8:	2000ce8c 	.word	0x2000ce8c
 80081ec:	2000ce74 	.word	0x2000ce74

080081f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3354      	adds	r3, #84	; 0x54
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 fcf5 	bl	8009bec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008208:	2b00      	cmp	r3, #0
 800820a:	d108      	bne.n	800821e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	4618      	mov	r0, r3
 8008212:	f001 fa8d 	bl	8009730 <vPortFree>
				vPortFree( pxTCB );
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 fa8a 	bl	8009730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800821c:	e018      	b.n	8008250 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008224:	2b01      	cmp	r3, #1
 8008226:	d103      	bne.n	8008230 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fa81 	bl	8009730 <vPortFree>
	}
 800822e:	e00f      	b.n	8008250 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008236:	2b02      	cmp	r3, #2
 8008238:	d00a      	beq.n	8008250 <prvDeleteTCB+0x60>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	60fb      	str	r3, [r7, #12]
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <prvDeleteTCB+0x5e>
	}
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800825e:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <prvResetNextTaskUnblockTime+0x38>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <prvResetNextTaskUnblockTime+0x3c>)
 800826a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800826e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008270:	e008      	b.n	8008284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <prvResetNextTaskUnblockTime+0x38>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4a04      	ldr	r2, [pc, #16]	; (8008294 <prvResetNextTaskUnblockTime+0x3c>)
 8008282:	6013      	str	r3, [r2, #0]
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	2000ce44 	.word	0x2000ce44
 8008294:	2000ceac 	.word	0x2000ceac

08008298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800829e:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <xTaskGetSchedulerState+0x34>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d102      	bne.n	80082ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082a6:	2301      	movs	r3, #1
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	e008      	b.n	80082be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ac:	4b08      	ldr	r3, [pc, #32]	; (80082d0 <xTaskGetSchedulerState+0x38>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082b4:	2302      	movs	r3, #2
 80082b6:	607b      	str	r3, [r7, #4]
 80082b8:	e001      	b.n	80082be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082be:	687b      	ldr	r3, [r7, #4]
	}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	2000ce98 	.word	0x2000ce98
 80082d0:	2000ceb4 	.word	0x2000ceb4

080082d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d051      	beq.n	800838e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ee:	4b2a      	ldr	r3, [pc, #168]	; (8008398 <xTaskPriorityInherit+0xc4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d241      	bcs.n	800837c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	db06      	blt.n	800830e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008300:	4b25      	ldr	r3, [pc, #148]	; (8008398 <xTaskPriorityInherit+0xc4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	6959      	ldr	r1, [r3, #20]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4a1f      	ldr	r2, [pc, #124]	; (800839c <xTaskPriorityInherit+0xc8>)
 8008320:	4413      	add	r3, r2
 8008322:	4299      	cmp	r1, r3
 8008324:	d122      	bne.n	800836c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3304      	adds	r3, #4
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe f9b4 	bl	8006698 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008330:	4b19      	ldr	r3, [pc, #100]	; (8008398 <xTaskPriorityInherit+0xc4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833e:	4b18      	ldr	r3, [pc, #96]	; (80083a0 <xTaskPriorityInherit+0xcc>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	429a      	cmp	r2, r3
 8008344:	d903      	bls.n	800834e <xTaskPriorityInherit+0x7a>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <xTaskPriorityInherit+0xcc>)
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4a10      	ldr	r2, [pc, #64]	; (800839c <xTaskPriorityInherit+0xc8>)
 800835c:	441a      	add	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	3304      	adds	r3, #4
 8008362:	4619      	mov	r1, r3
 8008364:	4610      	mov	r0, r2
 8008366:	f7fe f93a 	bl	80065de <vListInsertEnd>
 800836a:	e004      	b.n	8008376 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800836c:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <xTaskPriorityInherit+0xc4>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008376:	2301      	movs	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e008      	b.n	800838e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <xTaskPriorityInherit+0xc4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	429a      	cmp	r2, r3
 8008388:	d201      	bcs.n	800838e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800838a:	2301      	movs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800838e:	68fb      	ldr	r3, [r7, #12]
	}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	2000c9b8 	.word	0x2000c9b8
 800839c:	2000c9bc 	.word	0x2000c9bc
 80083a0:	2000ce94 	.word	0x2000ce94

080083a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d056      	beq.n	8008468 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083ba:	4b2e      	ldr	r3, [pc, #184]	; (8008474 <xTaskPriorityDisinherit+0xd0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d00a      	beq.n	80083da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	60fb      	str	r3, [r7, #12]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10a      	bne.n	80083f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	60bb      	str	r3, [r7, #8]
}
 80083f4:	bf00      	nop
 80083f6:	e7fe      	b.n	80083f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fc:	1e5a      	subs	r2, r3, #1
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840a:	429a      	cmp	r2, r3
 800840c:	d02c      	beq.n	8008468 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008412:	2b00      	cmp	r3, #0
 8008414:	d128      	bne.n	8008468 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	3304      	adds	r3, #4
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe f93c 	bl	8006698 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008438:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <xTaskPriorityDisinherit+0xd4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d903      	bls.n	8008448 <xTaskPriorityDisinherit+0xa4>
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <xTaskPriorityDisinherit+0xd4>)
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4a09      	ldr	r2, [pc, #36]	; (800847c <xTaskPriorityDisinherit+0xd8>)
 8008456:	441a      	add	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	3304      	adds	r3, #4
 800845c:	4619      	mov	r1, r3
 800845e:	4610      	mov	r0, r2
 8008460:	f7fe f8bd 	bl	80065de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008464:	2301      	movs	r3, #1
 8008466:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008468:	697b      	ldr	r3, [r7, #20]
	}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	2000c9b8 	.word	0x2000c9b8
 8008478:	2000ce94 	.word	0x2000ce94
 800847c:	2000c9bc 	.word	0x2000c9bc

08008480 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800848e:	2301      	movs	r3, #1
 8008490:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d06a      	beq.n	800856e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	60fb      	str	r3, [r7, #12]
}
 80084b2:	bf00      	nop
 80084b4:	e7fe      	b.n	80084b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d902      	bls.n	80084c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	61fb      	str	r3, [r7, #28]
 80084c4:	e002      	b.n	80084cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	69fa      	ldr	r2, [r7, #28]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d04b      	beq.n	800856e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d146      	bne.n	800856e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80084e0:	4b25      	ldr	r3, [pc, #148]	; (8008578 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d10a      	bne.n	8008500 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	60bb      	str	r3, [r7, #8]
}
 80084fc:	bf00      	nop
 80084fe:	e7fe      	b.n	80084fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	2b00      	cmp	r3, #0
 8008512:	db04      	blt.n	800851e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	6959      	ldr	r1, [r3, #20]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4a13      	ldr	r2, [pc, #76]	; (800857c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800852e:	4413      	add	r3, r2
 8008530:	4299      	cmp	r1, r3
 8008532:	d11c      	bne.n	800856e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	3304      	adds	r3, #4
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe f8ad 	bl	8006698 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d903      	bls.n	8008552 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	4a0c      	ldr	r2, [pc, #48]	; (8008580 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4a07      	ldr	r2, [pc, #28]	; (800857c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008560:	441a      	add	r2, r3
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	3304      	adds	r3, #4
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f7fe f838 	bl	80065de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800856e:	bf00      	nop
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	2000c9b8 	.word	0x2000c9b8
 800857c:	2000c9bc 	.word	0x2000c9bc
 8008580:	2000ce94 	.word	0x2000ce94

08008584 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008588:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008596:	3201      	adds	r2, #1
 8008598:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800859a:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800859c:	681b      	ldr	r3, [r3, #0]
	}
 800859e:	4618      	mov	r0, r3
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	2000c9b8 	.word	0x2000c9b8

080085ac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80085ba:	f000 fecb 	bl	8009354 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80085be:	4b29      	ldr	r3, [pc, #164]	; (8008664 <xTaskNotifyWait+0xb8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d01c      	beq.n	8008606 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80085cc:	4b25      	ldr	r3, [pc, #148]	; (8008664 <xTaskNotifyWait+0xb8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	43d2      	mvns	r2, r2
 80085d8:	400a      	ands	r2, r1
 80085da:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80085de:	4b21      	ldr	r3, [pc, #132]	; (8008664 <xTaskNotifyWait+0xb8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085ee:	2101      	movs	r1, #1
 80085f0:	6838      	ldr	r0, [r7, #0]
 80085f2:	f000 f9dd 	bl	80089b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80085f6:	4b1c      	ldr	r3, [pc, #112]	; (8008668 <xTaskNotifyWait+0xbc>)
 80085f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008606:	f000 fed5 	bl	80093b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800860a:	f000 fea3 	bl	8009354 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008614:	4b13      	ldr	r3, [pc, #76]	; (8008664 <xTaskNotifyWait+0xb8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008620:	4b10      	ldr	r3, [pc, #64]	; (8008664 <xTaskNotifyWait+0xb8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b02      	cmp	r3, #2
 800862c:	d002      	beq.n	8008634 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e00a      	b.n	800864a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008634:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <xTaskNotifyWait+0xb8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	43d2      	mvns	r2, r2
 8008640:	400a      	ands	r2, r1
 8008642:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8008646:	2301      	movs	r3, #1
 8008648:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800864a:	4b06      	ldr	r3, [pc, #24]	; (8008664 <xTaskNotifyWait+0xb8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8008654:	f000 feae 	bl	80093b4 <vPortExitCritical>

		return xReturn;
 8008658:	697b      	ldr	r3, [r7, #20]
	}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000c9b8 	.word	0x2000c9b8
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	4613      	mov	r3, r2
 800867a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800867c:	2301      	movs	r3, #1
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <xTaskGenericNotify+0x30>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	61bb      	str	r3, [r7, #24]
}
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80086a0:	f000 fe58 	bl	8009354 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80086ba:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d82d      	bhi.n	8008726 <xTaskGenericNotify+0xba>
 80086ca:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <xTaskGenericNotify+0x64>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	08008749 	.word	0x08008749
 80086d4:	080086e5 	.word	0x080086e5
 80086d8:	080086f7 	.word	0x080086f7
 80086dc:	08008707 	.word	0x08008707
 80086e0:	08008711 	.word	0x08008711
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80086f4:	e02b      	b.n	800874e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008704:	e023      	b.n	800874e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800870e:	e01e      	b.n	800874e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008710:	7ffb      	ldrb	r3, [r7, #31]
 8008712:	2b02      	cmp	r3, #2
 8008714:	d004      	beq.n	8008720 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800871e:	e016      	b.n	800874e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8008720:	2300      	movs	r3, #0
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008724:	e013      	b.n	800874e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800872c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008730:	d00c      	beq.n	800874c <xTaskGenericNotify+0xe0>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	617b      	str	r3, [r7, #20]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <xTaskGenericNotify+0xda>
					break;
 8008748:	bf00      	nop
 800874a:	e000      	b.n	800874e <xTaskGenericNotify+0xe2>

					break;
 800874c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800874e:	7ffb      	ldrb	r3, [r7, #31]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d13a      	bne.n	80087ca <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	3304      	adds	r3, #4
 8008758:	4618      	mov	r0, r3
 800875a:	f7fd ff9d 	bl	8006698 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008762:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <xTaskGenericNotify+0x16c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d903      	bls.n	8008772 <xTaskGenericNotify+0x106>
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	4a1a      	ldr	r2, [pc, #104]	; (80087d8 <xTaskGenericNotify+0x16c>)
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4a17      	ldr	r2, [pc, #92]	; (80087dc <xTaskGenericNotify+0x170>)
 8008780:	441a      	add	r2, r3
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f7fd ff28 	bl	80065de <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <xTaskGenericNotify+0x140>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	613b      	str	r3, [r7, #16]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	4b0b      	ldr	r3, [pc, #44]	; (80087e0 <xTaskGenericNotify+0x174>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d907      	bls.n	80087ca <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80087ba:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <xTaskGenericNotify+0x178>)
 80087bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80087ca:	f000 fdf3 	bl	80093b4 <vPortExitCritical>

		return xReturn;
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3728      	adds	r7, #40	; 0x28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	2000ce94 	.word	0x2000ce94
 80087dc:	2000c9bc 	.word	0x2000c9bc
 80087e0:	2000c9b8 	.word	0x2000c9b8
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08e      	sub	sp, #56	; 0x38
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	4613      	mov	r3, r2
 80087f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80087f8:	2301      	movs	r3, #1
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008818:	f000 fe7e 	bl	8009518 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008820:	f3ef 8211 	mrs	r2, BASEPRI
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	623a      	str	r2, [r7, #32]
 8008836:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008838:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d004      	beq.n	800884c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	2202      	movs	r2, #2
 800885a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	2b04      	cmp	r3, #4
 8008862:	d82f      	bhi.n	80088c4 <xTaskGenericNotifyFromISR+0xdc>
 8008864:	a201      	add	r2, pc, #4	; (adr r2, 800886c <xTaskGenericNotifyFromISR+0x84>)
 8008866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886a:	bf00      	nop
 800886c:	080088e7 	.word	0x080088e7
 8008870:	08008881 	.word	0x08008881
 8008874:	08008893 	.word	0x08008893
 8008878:	080088a3 	.word	0x080088a3
 800887c:	080088ad 	.word	0x080088ad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	431a      	orrs	r2, r3
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008890:	e02c      	b.n	80088ec <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80088a0:	e024      	b.n	80088ec <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80088aa:	e01f      	b.n	80088ec <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80088ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d004      	beq.n	80088be <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80088bc:	e016      	b.n	80088ec <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80088be:	2300      	movs	r3, #0
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80088c2:	e013      	b.n	80088ec <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ce:	d00c      	beq.n	80088ea <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	61bb      	str	r3, [r7, #24]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80088e6:	bf00      	nop
 80088e8:	e000      	b.n	80088ec <xTaskGenericNotifyFromISR+0x104>
					break;
 80088ea:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80088ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d146      	bne.n	8008982 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00a      	beq.n	8008912 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	617b      	str	r3, [r7, #20]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008912:	4b21      	ldr	r3, [pc, #132]	; (8008998 <xTaskGenericNotifyFromISR+0x1b0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d11d      	bne.n	8008956 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	3304      	adds	r3, #4
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd feba 	bl	8006698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008928:	4b1c      	ldr	r3, [pc, #112]	; (800899c <xTaskGenericNotifyFromISR+0x1b4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	429a      	cmp	r2, r3
 800892e:	d903      	bls.n	8008938 <xTaskGenericNotifyFromISR+0x150>
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	4a19      	ldr	r2, [pc, #100]	; (800899c <xTaskGenericNotifyFromISR+0x1b4>)
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4a16      	ldr	r2, [pc, #88]	; (80089a0 <xTaskGenericNotifyFromISR+0x1b8>)
 8008946:	441a      	add	r2, r3
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	3304      	adds	r3, #4
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f7fd fe45 	bl	80065de <vListInsertEnd>
 8008954:	e005      	b.n	8008962 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	3318      	adds	r3, #24
 800895a:	4619      	mov	r1, r3
 800895c:	4811      	ldr	r0, [pc, #68]	; (80089a4 <xTaskGenericNotifyFromISR+0x1bc>)
 800895e:	f7fd fe3e 	bl	80065de <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008966:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <xTaskGenericNotifyFromISR+0x1c0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	429a      	cmp	r2, r3
 800896e:	d908      	bls.n	8008982 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <xTaskGenericNotifyFromISR+0x1c4>)
 800897e:	2201      	movs	r2, #1
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f383 8811 	msr	BASEPRI, r3
}
 800898c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008990:	4618      	mov	r0, r3
 8008992:	3738      	adds	r7, #56	; 0x38
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	2000ceb4 	.word	0x2000ceb4
 800899c:	2000ce94 	.word	0x2000ce94
 80089a0:	2000c9bc 	.word	0x2000c9bc
 80089a4:	2000ce4c 	.word	0x2000ce4c
 80089a8:	2000c9b8 	.word	0x2000c9b8
 80089ac:	2000cea0 	.word	0x2000cea0

080089b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089ba:	4b21      	ldr	r3, [pc, #132]	; (8008a40 <prvAddCurrentTaskToDelayedList+0x90>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089c0:	4b20      	ldr	r3, [pc, #128]	; (8008a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3304      	adds	r3, #4
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fd fe66 	bl	8006698 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d2:	d10a      	bne.n	80089ea <prvAddCurrentTaskToDelayedList+0x3a>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089da:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4819      	ldr	r0, [pc, #100]	; (8008a48 <prvAddCurrentTaskToDelayedList+0x98>)
 80089e4:	f7fd fdfb 	bl	80065de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089e8:	e026      	b.n	8008a38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4413      	add	r3, r2
 80089f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089f2:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d209      	bcs.n	8008a16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f7fd fe09 	bl	8006626 <vListInsert>
}
 8008a14:	e010      	b.n	8008a38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a16:	4b0e      	ldr	r3, [pc, #56]	; (8008a50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4619      	mov	r1, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	f7fd fdff 	bl	8006626 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d202      	bcs.n	8008a38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a32:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	6013      	str	r3, [r2, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	2000ce90 	.word	0x2000ce90
 8008a44:	2000c9b8 	.word	0x2000c9b8
 8008a48:	2000ce78 	.word	0x2000ce78
 8008a4c:	2000ce48 	.word	0x2000ce48
 8008a50:	2000ce44 	.word	0x2000ce44
 8008a54:	2000ceac 	.word	0x2000ceac

08008a58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	; 0x28
 8008a5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a62:	f000 fb07 	bl	8009074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a66:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <xTimerCreateTimerTask+0x80>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d021      	beq.n	8008ab2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a76:	1d3a      	adds	r2, r7, #4
 8008a78:	f107 0108 	add.w	r1, r7, #8
 8008a7c:	f107 030c 	add.w	r3, r7, #12
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fd fd65 	bl	8006550 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	9202      	str	r2, [sp, #8]
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	2302      	movs	r3, #2
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	2300      	movs	r3, #0
 8008a96:	460a      	mov	r2, r1
 8008a98:	4910      	ldr	r1, [pc, #64]	; (8008adc <xTimerCreateTimerTask+0x84>)
 8008a9a:	4811      	ldr	r0, [pc, #68]	; (8008ae0 <xTimerCreateTimerTask+0x88>)
 8008a9c:	f7fe fdb4 	bl	8007608 <xTaskCreateStatic>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	4a10      	ldr	r2, [pc, #64]	; (8008ae4 <xTimerCreateTimerTask+0x8c>)
 8008aa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008aa6:	4b0f      	ldr	r3, [pc, #60]	; (8008ae4 <xTimerCreateTimerTask+0x8c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	613b      	str	r3, [r7, #16]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ace:	697b      	ldr	r3, [r7, #20]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	2000cee8 	.word	0x2000cee8
 8008adc:	08009d18 	.word	0x08009d18
 8008ae0:	08008c1d 	.word	0x08008c1d
 8008ae4:	2000ceec 	.word	0x2000ceec

08008ae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	623b      	str	r3, [r7, #32]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b16:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <xTimerGenericCommand+0x98>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d02a      	beq.n	8008b74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b05      	cmp	r3, #5
 8008b2e:	dc18      	bgt.n	8008b62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b30:	f7ff fbb2 	bl	8008298 <xTaskGetSchedulerState>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d109      	bne.n	8008b4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b3a:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <xTimerGenericCommand+0x98>)
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	f107 0110 	add.w	r1, r7, #16
 8008b42:	2300      	movs	r3, #0
 8008b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b46:	f7fd ff0b 	bl	8006960 <xQueueGenericSend>
 8008b4a:	6278      	str	r0, [r7, #36]	; 0x24
 8008b4c:	e012      	b.n	8008b74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b4e:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <xTimerGenericCommand+0x98>)
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f107 0110 	add.w	r1, r7, #16
 8008b56:	2300      	movs	r3, #0
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f7fd ff01 	bl	8006960 <xQueueGenericSend>
 8008b5e:	6278      	str	r0, [r7, #36]	; 0x24
 8008b60:	e008      	b.n	8008b74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b62:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <xTimerGenericCommand+0x98>)
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	f107 0110 	add.w	r1, r7, #16
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	f7fd fff5 	bl	8006b5c <xQueueGenericSendFromISR>
 8008b72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3728      	adds	r7, #40	; 0x28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	2000cee8 	.word	0x2000cee8

08008b84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8e:	4b22      	ldr	r3, [pc, #136]	; (8008c18 <prvProcessExpiredTimer+0x94>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fd fd7b 	bl	8006698 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ba8:	f003 0304 	and.w	r3, r3, #4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d022      	beq.n	8008bf6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	18d1      	adds	r1, r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	6978      	ldr	r0, [r7, #20]
 8008bbe:	f000 f8d1 	bl	8008d64 <prvInsertTimerInActiveList>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01f      	beq.n	8008c08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	6978      	ldr	r0, [r7, #20]
 8008bd4:	f7ff ff88 	bl	8008ae8 <xTimerGenericCommand>
 8008bd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d113      	bne.n	8008c08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60fb      	str	r3, [r7, #12]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bfc:	f023 0301 	bic.w	r3, r3, #1
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	6978      	ldr	r0, [r7, #20]
 8008c0e:	4798      	blx	r3
}
 8008c10:	bf00      	nop
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	2000cee0 	.word	0x2000cee0

08008c1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c24:	f107 0308 	add.w	r3, r7, #8
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 f857 	bl	8008cdc <prvGetNextExpireTime>
 8008c2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4619      	mov	r1, r3
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 f803 	bl	8008c40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c3a:	f000 f8d5 	bl	8008de8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c3e:	e7f1      	b.n	8008c24 <prvTimerTask+0x8>

08008c40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c4a:	f7fe ff39 	bl	8007ac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c4e:	f107 0308 	add.w	r3, r7, #8
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f866 	bl	8008d24 <prvSampleTimeNow>
 8008c58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d130      	bne.n	8008cc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10a      	bne.n	8008c7c <prvProcessTimerOrBlockTask+0x3c>
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d806      	bhi.n	8008c7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c6e:	f7fe ff35 	bl	8007adc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff ff85 	bl	8008b84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c7a:	e024      	b.n	8008cc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d008      	beq.n	8008c94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c82:	4b13      	ldr	r3, [pc, #76]	; (8008cd0 <prvProcessTimerOrBlockTask+0x90>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <prvProcessTimerOrBlockTask+0x50>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e000      	b.n	8008c92 <prvProcessTimerOrBlockTask+0x52>
 8008c90:	2300      	movs	r3, #0
 8008c92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c94:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <prvProcessTimerOrBlockTask+0x94>)
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f7fe fc7d 	bl	80075a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008ca6:	f7fe ff19 	bl	8007adc <xTaskResumeAll>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008cb0:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <prvProcessTimerOrBlockTask+0x98>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	f3bf 8f6f 	isb	sy
}
 8008cc0:	e001      	b.n	8008cc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008cc2:	f7fe ff0b 	bl	8007adc <xTaskResumeAll>
}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	2000cee4 	.word	0x2000cee4
 8008cd4:	2000cee8 	.word	0x2000cee8
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ce4:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <prvGetNextExpireTime+0x44>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <prvGetNextExpireTime+0x16>
 8008cee:	2201      	movs	r2, #1
 8008cf0:	e000      	b.n	8008cf4 <prvGetNextExpireTime+0x18>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d105      	bne.n	8008d0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <prvGetNextExpireTime+0x44>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	e001      	b.n	8008d10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d10:	68fb      	ldr	r3, [r7, #12]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	2000cee0 	.word	0x2000cee0

08008d24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d2c:	f7fe ff74 	bl	8007c18 <xTaskGetTickCount>
 8008d30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d32:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <prvSampleTimeNow+0x3c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d205      	bcs.n	8008d48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d3c:	f000 f936 	bl	8008fac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	e002      	b.n	8008d4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d4e:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <prvSampleTimeNow+0x3c>)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d54:	68fb      	ldr	r3, [r7, #12]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	2000cef0 	.word	0x2000cef0

08008d64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d72:	2300      	movs	r3, #0
 8008d74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d812      	bhi.n	8008db0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	1ad2      	subs	r2, r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d302      	bcc.n	8008d9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	e01b      	b.n	8008dd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <prvInsertTimerInActiveList+0x7c>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f7fd fc3c 	bl	8006626 <vListInsert>
 8008dae:	e012      	b.n	8008dd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d206      	bcs.n	8008dc6 <prvInsertTimerInActiveList+0x62>
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d302      	bcc.n	8008dc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	e007      	b.n	8008dd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dc6:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <prvInsertTimerInActiveList+0x80>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7fd fc28 	bl	8006626 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008dd6:	697b      	ldr	r3, [r7, #20]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	2000cee4 	.word	0x2000cee4
 8008de4:	2000cee0 	.word	0x2000cee0

08008de8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08e      	sub	sp, #56	; 0x38
 8008dec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dee:	e0ca      	b.n	8008f86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	da18      	bge.n	8008e28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008df6:	1d3b      	adds	r3, r7, #4
 8008df8:	3304      	adds	r3, #4
 8008dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10a      	bne.n	8008e18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	61fb      	str	r3, [r7, #28]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e1e:	6850      	ldr	r0, [r2, #4]
 8008e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e22:	6892      	ldr	r2, [r2, #8]
 8008e24:	4611      	mov	r1, r2
 8008e26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f2c0 80aa 	blt.w	8008f84 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d004      	beq.n	8008e46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fd fc29 	bl	8006698 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e46:	463b      	mov	r3, r7
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff ff6b 	bl	8008d24 <prvSampleTimeNow>
 8008e4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b09      	cmp	r3, #9
 8008e54:	f200 8097 	bhi.w	8008f86 <prvProcessReceivedCommands+0x19e>
 8008e58:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <prvProcessReceivedCommands+0x78>)
 8008e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5e:	bf00      	nop
 8008e60:	08008e89 	.word	0x08008e89
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008e89 	.word	0x08008e89
 8008e6c:	08008efd 	.word	0x08008efd
 8008e70:	08008f11 	.word	0x08008f11
 8008e74:	08008f5b 	.word	0x08008f5b
 8008e78:	08008e89 	.word	0x08008e89
 8008e7c:	08008e89 	.word	0x08008e89
 8008e80:	08008efd 	.word	0x08008efd
 8008e84:	08008f11 	.word	0x08008f11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e8e:	f043 0301 	orr.w	r3, r3, #1
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	18d1      	adds	r1, r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea8:	f7ff ff5c 	bl	8008d64 <prvInsertTimerInActiveList>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d069      	beq.n	8008f86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d05e      	beq.n	8008f86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	441a      	add	r2, r3
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eda:	f7ff fe05 	bl	8008ae8 <xTimerGenericCommand>
 8008ede:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d14f      	bne.n	8008f86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	61bb      	str	r3, [r7, #24]
}
 8008ef8:	bf00      	nop
 8008efa:	e7fe      	b.n	8008efa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f02:	f023 0301 	bic.w	r3, r3, #1
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008f0e:	e03a      	b.n	8008f86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	617b      	str	r3, [r7, #20]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	18d1      	adds	r1, r2, r3
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f54:	f7ff ff06 	bl	8008d64 <prvInsertTimerInActiveList>
					break;
 8008f58:	e015      	b.n	8008f86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d103      	bne.n	8008f70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f6a:	f000 fbe1 	bl	8009730 <vPortFree>
 8008f6e:	e00a      	b.n	8008f86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f76:	f023 0301 	bic.w	r3, r3, #1
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f82:	e000      	b.n	8008f86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f86:	4b08      	ldr	r3, [pc, #32]	; (8008fa8 <prvProcessReceivedCommands+0x1c0>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	1d39      	adds	r1, r7, #4
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fd ff0c 	bl	8006dac <xQueueReceive>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f47f af2a 	bne.w	8008df0 <prvProcessReceivedCommands+0x8>
	}
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	3730      	adds	r7, #48	; 0x30
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	2000cee8 	.word	0x2000cee8

08008fac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fb2:	e048      	b.n	8009046 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fb4:	4b2d      	ldr	r3, [pc, #180]	; (800906c <prvSwitchTimerLists+0xc0>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fbe:	4b2b      	ldr	r3, [pc, #172]	; (800906c <prvSwitchTimerLists+0xc0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fd fb63 	bl	8006698 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d02e      	beq.n	8009046 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	4413      	add	r3, r2
 8008ff0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d90e      	bls.n	8009018 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009006:	4b19      	ldr	r3, [pc, #100]	; (800906c <prvSwitchTimerLists+0xc0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3304      	adds	r3, #4
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f7fd fb08 	bl	8006626 <vListInsert>
 8009016:	e016      	b.n	8009046 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009018:	2300      	movs	r3, #0
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	2300      	movs	r3, #0
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	2100      	movs	r1, #0
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7ff fd60 	bl	8008ae8 <xTimerGenericCommand>
 8009028:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	603b      	str	r3, [r7, #0]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009046:	4b09      	ldr	r3, [pc, #36]	; (800906c <prvSwitchTimerLists+0xc0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1b1      	bne.n	8008fb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009050:	4b06      	ldr	r3, [pc, #24]	; (800906c <prvSwitchTimerLists+0xc0>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009056:	4b06      	ldr	r3, [pc, #24]	; (8009070 <prvSwitchTimerLists+0xc4>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a04      	ldr	r2, [pc, #16]	; (800906c <prvSwitchTimerLists+0xc0>)
 800905c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800905e:	4a04      	ldr	r2, [pc, #16]	; (8009070 <prvSwitchTimerLists+0xc4>)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	6013      	str	r3, [r2, #0]
}
 8009064:	bf00      	nop
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	2000cee0 	.word	0x2000cee0
 8009070:	2000cee4 	.word	0x2000cee4

08009074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800907a:	f000 f96b 	bl	8009354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800907e:	4b15      	ldr	r3, [pc, #84]	; (80090d4 <prvCheckForValidListAndQueue+0x60>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d120      	bne.n	80090c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009086:	4814      	ldr	r0, [pc, #80]	; (80090d8 <prvCheckForValidListAndQueue+0x64>)
 8009088:	f7fd fa7c 	bl	8006584 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800908c:	4813      	ldr	r0, [pc, #76]	; (80090dc <prvCheckForValidListAndQueue+0x68>)
 800908e:	f7fd fa79 	bl	8006584 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009092:	4b13      	ldr	r3, [pc, #76]	; (80090e0 <prvCheckForValidListAndQueue+0x6c>)
 8009094:	4a10      	ldr	r2, [pc, #64]	; (80090d8 <prvCheckForValidListAndQueue+0x64>)
 8009096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009098:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <prvCheckForValidListAndQueue+0x70>)
 800909a:	4a10      	ldr	r2, [pc, #64]	; (80090dc <prvCheckForValidListAndQueue+0x68>)
 800909c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800909e:	2300      	movs	r3, #0
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <prvCheckForValidListAndQueue+0x74>)
 80090a4:	4a11      	ldr	r2, [pc, #68]	; (80090ec <prvCheckForValidListAndQueue+0x78>)
 80090a6:	2110      	movs	r1, #16
 80090a8:	200a      	movs	r0, #10
 80090aa:	f7fd fb87 	bl	80067bc <xQueueGenericCreateStatic>
 80090ae:	4603      	mov	r3, r0
 80090b0:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <prvCheckForValidListAndQueue+0x60>)
 80090b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80090b4:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <prvCheckForValidListAndQueue+0x60>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <prvCheckForValidListAndQueue+0x60>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	490b      	ldr	r1, [pc, #44]	; (80090f0 <prvCheckForValidListAndQueue+0x7c>)
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fa42 	bl	800754c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090c8:	f000 f974 	bl	80093b4 <vPortExitCritical>
}
 80090cc:	bf00      	nop
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	2000cee8 	.word	0x2000cee8
 80090d8:	2000ceb8 	.word	0x2000ceb8
 80090dc:	2000cecc 	.word	0x2000cecc
 80090e0:	2000cee0 	.word	0x2000cee0
 80090e4:	2000cee4 	.word	0x2000cee4
 80090e8:	2000cf94 	.word	0x2000cf94
 80090ec:	2000cef4 	.word	0x2000cef4
 80090f0:	08009d20 	.word	0x08009d20

080090f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3b04      	subs	r3, #4
 8009104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800910c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3b04      	subs	r3, #4
 8009112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f023 0201 	bic.w	r2, r3, #1
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3b04      	subs	r3, #4
 8009122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009124:	4a0c      	ldr	r2, [pc, #48]	; (8009158 <pxPortInitialiseStack+0x64>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3b14      	subs	r3, #20
 800912e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3b04      	subs	r3, #4
 800913a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f06f 0202 	mvn.w	r2, #2
 8009142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3b20      	subs	r3, #32
 8009148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800914a:	68fb      	ldr	r3, [r7, #12]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	0800915d 	.word	0x0800915d

0800915c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009166:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <prvTaskExitError+0x54>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800916e:	d00a      	beq.n	8009186 <prvTaskExitError+0x2a>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60fb      	str	r3, [r7, #12]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <prvTaskExitError+0x28>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60bb      	str	r3, [r7, #8]
}
 8009198:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800919a:	bf00      	nop
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0fc      	beq.n	800919c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	2000000c 	.word	0x2000000c
	...

080091c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091c0:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <pxCurrentTCBConst2>)
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	6808      	ldr	r0, [r1, #0]
 80091c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ca:	f380 8809 	msr	PSP, r0
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f04f 0000 	mov.w	r0, #0
 80091d6:	f380 8811 	msr	BASEPRI, r0
 80091da:	4770      	bx	lr
 80091dc:	f3af 8000 	nop.w

080091e0 <pxCurrentTCBConst2>:
 80091e0:	2000c9b8 	.word	0x2000c9b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop

080091e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091e8:	4808      	ldr	r0, [pc, #32]	; (800920c <prvPortStartFirstTask+0x24>)
 80091ea:	6800      	ldr	r0, [r0, #0]
 80091ec:	6800      	ldr	r0, [r0, #0]
 80091ee:	f380 8808 	msr	MSP, r0
 80091f2:	f04f 0000 	mov.w	r0, #0
 80091f6:	f380 8814 	msr	CONTROL, r0
 80091fa:	b662      	cpsie	i
 80091fc:	b661      	cpsie	f
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	df00      	svc	0
 8009208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800920a:	bf00      	nop
 800920c:	e000ed08 	.word	0xe000ed08

08009210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009216:	4b46      	ldr	r3, [pc, #280]	; (8009330 <xPortStartScheduler+0x120>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a46      	ldr	r2, [pc, #280]	; (8009334 <xPortStartScheduler+0x124>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d10a      	bne.n	8009236 <xPortStartScheduler+0x26>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	613b      	str	r3, [r7, #16]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009236:	4b3e      	ldr	r3, [pc, #248]	; (8009330 <xPortStartScheduler+0x120>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a3f      	ldr	r2, [pc, #252]	; (8009338 <xPortStartScheduler+0x128>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d10a      	bne.n	8009256 <xPortStartScheduler+0x46>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	60fb      	str	r3, [r7, #12]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009256:	4b39      	ldr	r3, [pc, #228]	; (800933c <xPortStartScheduler+0x12c>)
 8009258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	22ff      	movs	r2, #255	; 0xff
 8009266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009278:	b2da      	uxtb	r2, r3
 800927a:	4b31      	ldr	r3, [pc, #196]	; (8009340 <xPortStartScheduler+0x130>)
 800927c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800927e:	4b31      	ldr	r3, [pc, #196]	; (8009344 <xPortStartScheduler+0x134>)
 8009280:	2207      	movs	r2, #7
 8009282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009284:	e009      	b.n	800929a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009286:	4b2f      	ldr	r3, [pc, #188]	; (8009344 <xPortStartScheduler+0x134>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3b01      	subs	r3, #1
 800928c:	4a2d      	ldr	r2, [pc, #180]	; (8009344 <xPortStartScheduler+0x134>)
 800928e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	b2db      	uxtb	r3, r3
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	b2db      	uxtb	r3, r3
 8009298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800929a:	78fb      	ldrb	r3, [r7, #3]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	d0ef      	beq.n	8009286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092a6:	4b27      	ldr	r3, [pc, #156]	; (8009344 <xPortStartScheduler+0x134>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f1c3 0307 	rsb	r3, r3, #7
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d00a      	beq.n	80092c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	60bb      	str	r3, [r7, #8]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092c8:	4b1e      	ldr	r3, [pc, #120]	; (8009344 <xPortStartScheduler+0x134>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	4a1d      	ldr	r2, [pc, #116]	; (8009344 <xPortStartScheduler+0x134>)
 80092d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092d2:	4b1c      	ldr	r3, [pc, #112]	; (8009344 <xPortStartScheduler+0x134>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092da:	4a1a      	ldr	r2, [pc, #104]	; (8009344 <xPortStartScheduler+0x134>)
 80092dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092e6:	4b18      	ldr	r3, [pc, #96]	; (8009348 <xPortStartScheduler+0x138>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a17      	ldr	r2, [pc, #92]	; (8009348 <xPortStartScheduler+0x138>)
 80092ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092f2:	4b15      	ldr	r3, [pc, #84]	; (8009348 <xPortStartScheduler+0x138>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a14      	ldr	r2, [pc, #80]	; (8009348 <xPortStartScheduler+0x138>)
 80092f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092fe:	f000 f8dd 	bl	80094bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009302:	4b12      	ldr	r3, [pc, #72]	; (800934c <xPortStartScheduler+0x13c>)
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009308:	f000 f8fc 	bl	8009504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800930c:	4b10      	ldr	r3, [pc, #64]	; (8009350 <xPortStartScheduler+0x140>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a0f      	ldr	r2, [pc, #60]	; (8009350 <xPortStartScheduler+0x140>)
 8009312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009318:	f7ff ff66 	bl	80091e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800931c:	f7fe fd46 	bl	8007dac <vTaskSwitchContext>
	prvTaskExitError();
 8009320:	f7ff ff1c 	bl	800915c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	e000ed00 	.word	0xe000ed00
 8009334:	410fc271 	.word	0x410fc271
 8009338:	410fc270 	.word	0x410fc270
 800933c:	e000e400 	.word	0xe000e400
 8009340:	2000cfe4 	.word	0x2000cfe4
 8009344:	2000cfe8 	.word	0x2000cfe8
 8009348:	e000ed20 	.word	0xe000ed20
 800934c:	2000000c 	.word	0x2000000c
 8009350:	e000ef34 	.word	0xe000ef34

08009354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	607b      	str	r3, [r7, #4]
}
 800936c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800936e:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <vPortEnterCritical+0x58>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	4a0d      	ldr	r2, [pc, #52]	; (80093ac <vPortEnterCritical+0x58>)
 8009376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009378:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <vPortEnterCritical+0x58>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d10f      	bne.n	80093a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009380:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <vPortEnterCritical+0x5c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	603b      	str	r3, [r7, #0]
}
 800939c:	bf00      	nop
 800939e:	e7fe      	b.n	800939e <vPortEnterCritical+0x4a>
	}
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	2000000c 	.word	0x2000000c
 80093b0:	e000ed04 	.word	0xe000ed04

080093b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093ba:	4b12      	ldr	r3, [pc, #72]	; (8009404 <vPortExitCritical+0x50>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <vPortExitCritical+0x24>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	607b      	str	r3, [r7, #4]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093d8:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <vPortExitCritical+0x50>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3b01      	subs	r3, #1
 80093de:	4a09      	ldr	r2, [pc, #36]	; (8009404 <vPortExitCritical+0x50>)
 80093e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093e2:	4b08      	ldr	r3, [pc, #32]	; (8009404 <vPortExitCritical+0x50>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d105      	bne.n	80093f6 <vPortExitCritical+0x42>
 80093ea:	2300      	movs	r3, #0
 80093ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	f383 8811 	msr	BASEPRI, r3
}
 80093f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	2000000c 	.word	0x2000000c
	...

08009410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009410:	f3ef 8009 	mrs	r0, PSP
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	4b15      	ldr	r3, [pc, #84]	; (8009470 <pxCurrentTCBConst>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	f01e 0f10 	tst.w	lr, #16
 8009420:	bf08      	it	eq
 8009422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942a:	6010      	str	r0, [r2, #0]
 800942c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009434:	f380 8811 	msr	BASEPRI, r0
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f7fe fcb4 	bl	8007dac <vTaskSwitchContext>
 8009444:	f04f 0000 	mov.w	r0, #0
 8009448:	f380 8811 	msr	BASEPRI, r0
 800944c:	bc09      	pop	{r0, r3}
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	6808      	ldr	r0, [r1, #0]
 8009452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009456:	f01e 0f10 	tst.w	lr, #16
 800945a:	bf08      	it	eq
 800945c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009460:	f380 8809 	msr	PSP, r0
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	f3af 8000 	nop.w

08009470 <pxCurrentTCBConst>:
 8009470:	2000c9b8 	.word	0x2000c9b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009474:	bf00      	nop
 8009476:	bf00      	nop

08009478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009492:	f7fe fbd1 	bl	8007c38 <xTaskIncrementTick>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800949c:	4b06      	ldr	r3, [pc, #24]	; (80094b8 <xPortSysTickHandler+0x40>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	2300      	movs	r3, #0
 80094a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	f383 8811 	msr	BASEPRI, r3
}
 80094ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	e000ed04 	.word	0xe000ed04

080094bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094c0:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <vPortSetupTimerInterrupt+0x34>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094c6:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <vPortSetupTimerInterrupt+0x38>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094cc:	4b0a      	ldr	r3, [pc, #40]	; (80094f8 <vPortSetupTimerInterrupt+0x3c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a0a      	ldr	r2, [pc, #40]	; (80094fc <vPortSetupTimerInterrupt+0x40>)
 80094d2:	fba2 2303 	umull	r2, r3, r2, r3
 80094d6:	099b      	lsrs	r3, r3, #6
 80094d8:	4a09      	ldr	r2, [pc, #36]	; (8009500 <vPortSetupTimerInterrupt+0x44>)
 80094da:	3b01      	subs	r3, #1
 80094dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094de:	4b04      	ldr	r3, [pc, #16]	; (80094f0 <vPortSetupTimerInterrupt+0x34>)
 80094e0:	2207      	movs	r2, #7
 80094e2:	601a      	str	r2, [r3, #0]
}
 80094e4:	bf00      	nop
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	e000e010 	.word	0xe000e010
 80094f4:	e000e018 	.word	0xe000e018
 80094f8:	20000000 	.word	0x20000000
 80094fc:	10624dd3 	.word	0x10624dd3
 8009500:	e000e014 	.word	0xe000e014

08009504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009514 <vPortEnableVFP+0x10>
 8009508:	6801      	ldr	r1, [r0, #0]
 800950a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800950e:	6001      	str	r1, [r0, #0]
 8009510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009512:	bf00      	nop
 8009514:	e000ed88 	.word	0xe000ed88

08009518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800951e:	f3ef 8305 	mrs	r3, IPSR
 8009522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b0f      	cmp	r3, #15
 8009528:	d914      	bls.n	8009554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800952a:	4a17      	ldr	r2, [pc, #92]	; (8009588 <vPortValidateInterruptPriority+0x70>)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009534:	4b15      	ldr	r3, [pc, #84]	; (800958c <vPortValidateInterruptPriority+0x74>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	7afa      	ldrb	r2, [r7, #11]
 800953a:	429a      	cmp	r2, r3
 800953c:	d20a      	bcs.n	8009554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	607b      	str	r3, [r7, #4]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009554:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <vPortValidateInterruptPriority+0x78>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800955c:	4b0d      	ldr	r3, [pc, #52]	; (8009594 <vPortValidateInterruptPriority+0x7c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d90a      	bls.n	800957a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	603b      	str	r3, [r7, #0]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <vPortValidateInterruptPriority+0x60>
	}
 800957a:	bf00      	nop
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	e000e3f0 	.word	0xe000e3f0
 800958c:	2000cfe4 	.word	0x2000cfe4
 8009590:	e000ed0c 	.word	0xe000ed0c
 8009594:	2000cfe8 	.word	0x2000cfe8

08009598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08a      	sub	sp, #40	; 0x28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095a4:	f7fe fa8c 	bl	8007ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095a8:	4b5b      	ldr	r3, [pc, #364]	; (8009718 <pvPortMalloc+0x180>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095b0:	f000 f920 	bl	80097f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095b4:	4b59      	ldr	r3, [pc, #356]	; (800971c <pvPortMalloc+0x184>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4013      	ands	r3, r2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 8093 	bne.w	80096e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01d      	beq.n	8009604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095c8:	2208      	movs	r2, #8
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4413      	add	r3, r2
 80095ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d014      	beq.n	8009604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f023 0307 	bic.w	r3, r3, #7
 80095e0:	3308      	adds	r3, #8
 80095e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <pvPortMalloc+0x6c>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	617b      	str	r3, [r7, #20]
}
 8009600:	bf00      	nop
 8009602:	e7fe      	b.n	8009602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d06e      	beq.n	80096e8 <pvPortMalloc+0x150>
 800960a:	4b45      	ldr	r3, [pc, #276]	; (8009720 <pvPortMalloc+0x188>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d869      	bhi.n	80096e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009614:	4b43      	ldr	r3, [pc, #268]	; (8009724 <pvPortMalloc+0x18c>)
 8009616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009618:	4b42      	ldr	r3, [pc, #264]	; (8009724 <pvPortMalloc+0x18c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800961e:	e004      	b.n	800962a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	429a      	cmp	r2, r3
 8009632:	d903      	bls.n	800963c <pvPortMalloc+0xa4>
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f1      	bne.n	8009620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800963c:	4b36      	ldr	r3, [pc, #216]	; (8009718 <pvPortMalloc+0x180>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009642:	429a      	cmp	r2, r3
 8009644:	d050      	beq.n	80096e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2208      	movs	r2, #8
 800964c:	4413      	add	r3, r2
 800964e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	2308      	movs	r3, #8
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	429a      	cmp	r2, r3
 8009666:	d91f      	bls.n	80096a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4413      	add	r3, r2
 800966e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	f003 0307 	and.w	r3, r3, #7
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <pvPortMalloc+0xf8>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	613b      	str	r3, [r7, #16]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	1ad2      	subs	r2, r2, r3
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096a2:	69b8      	ldr	r0, [r7, #24]
 80096a4:	f000 f908 	bl	80098b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096a8:	4b1d      	ldr	r3, [pc, #116]	; (8009720 <pvPortMalloc+0x188>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	4a1b      	ldr	r2, [pc, #108]	; (8009720 <pvPortMalloc+0x188>)
 80096b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096b6:	4b1a      	ldr	r3, [pc, #104]	; (8009720 <pvPortMalloc+0x188>)
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	4b1b      	ldr	r3, [pc, #108]	; (8009728 <pvPortMalloc+0x190>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d203      	bcs.n	80096ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096c2:	4b17      	ldr	r3, [pc, #92]	; (8009720 <pvPortMalloc+0x188>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a18      	ldr	r2, [pc, #96]	; (8009728 <pvPortMalloc+0x190>)
 80096c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	4b13      	ldr	r3, [pc, #76]	; (800971c <pvPortMalloc+0x184>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	431a      	orrs	r2, r3
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <pvPortMalloc+0x194>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3301      	adds	r3, #1
 80096e4:	4a11      	ldr	r2, [pc, #68]	; (800972c <pvPortMalloc+0x194>)
 80096e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096e8:	f7fe f9f8 	bl	8007adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00a      	beq.n	800970c <pvPortMalloc+0x174>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	60fb      	str	r3, [r7, #12]
}
 8009708:	bf00      	nop
 800970a:	e7fe      	b.n	800970a <pvPortMalloc+0x172>
	return pvReturn;
 800970c:	69fb      	ldr	r3, [r7, #28]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3728      	adds	r7, #40	; 0x28
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20010bf4 	.word	0x20010bf4
 800971c:	20010c08 	.word	0x20010c08
 8009720:	20010bf8 	.word	0x20010bf8
 8009724:	20010bec 	.word	0x20010bec
 8009728:	20010bfc 	.word	0x20010bfc
 800972c:	20010c00 	.word	0x20010c00

08009730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d04d      	beq.n	80097de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009742:	2308      	movs	r3, #8
 8009744:	425b      	negs	r3, r3
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	4413      	add	r3, r2
 800974a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	4b24      	ldr	r3, [pc, #144]	; (80097e8 <vPortFree+0xb8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4013      	ands	r3, r2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10a      	bne.n	8009774 <vPortFree+0x44>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	60fb      	str	r3, [r7, #12]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <vPortFree+0x62>
	__asm volatile
 800977c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	60bb      	str	r3, [r7, #8]
}
 800978e:	bf00      	nop
 8009790:	e7fe      	b.n	8009790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <vPortFree+0xb8>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4013      	ands	r3, r2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01e      	beq.n	80097de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d11a      	bne.n	80097de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	4b0e      	ldr	r3, [pc, #56]	; (80097e8 <vPortFree+0xb8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	43db      	mvns	r3, r3
 80097b2:	401a      	ands	r2, r3
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097b8:	f7fe f982 	bl	8007ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <vPortFree+0xbc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4413      	add	r3, r2
 80097c6:	4a09      	ldr	r2, [pc, #36]	; (80097ec <vPortFree+0xbc>)
 80097c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097ca:	6938      	ldr	r0, [r7, #16]
 80097cc:	f000 f874 	bl	80098b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80097d0:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <vPortFree+0xc0>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	4a06      	ldr	r2, [pc, #24]	; (80097f0 <vPortFree+0xc0>)
 80097d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80097da:	f7fe f97f 	bl	8007adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097de:	bf00      	nop
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20010c08 	.word	0x20010c08
 80097ec:	20010bf8 	.word	0x20010bf8
 80097f0:	20010c04 	.word	0x20010c04

080097f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009800:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <prvHeapInit+0xac>)
 8009802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00c      	beq.n	8009828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3307      	adds	r3, #7
 8009812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0307 	bic.w	r3, r3, #7
 800981a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <prvHeapInit+0xac>)
 8009824:	4413      	add	r3, r2
 8009826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800982c:	4a1d      	ldr	r2, [pc, #116]	; (80098a4 <prvHeapInit+0xb0>)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <prvHeapInit+0xb0>)
 8009834:	2200      	movs	r2, #0
 8009836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	4413      	add	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009840:	2208      	movs	r2, #8
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	1a9b      	subs	r3, r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0307 	bic.w	r3, r3, #7
 800984e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4a15      	ldr	r2, [pc, #84]	; (80098a8 <prvHeapInit+0xb4>)
 8009854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009856:	4b14      	ldr	r3, [pc, #80]	; (80098a8 <prvHeapInit+0xb4>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2200      	movs	r2, #0
 800985c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800985e:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <prvHeapInit+0xb4>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009874:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <prvHeapInit+0xb4>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <prvHeapInit+0xb8>)
 8009882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4a09      	ldr	r2, [pc, #36]	; (80098b0 <prvHeapInit+0xbc>)
 800988a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800988c:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <prvHeapInit+0xc0>)
 800988e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009892:	601a      	str	r2, [r3, #0]
}
 8009894:	bf00      	nop
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	2000cfec 	.word	0x2000cfec
 80098a4:	20010bec 	.word	0x20010bec
 80098a8:	20010bf4 	.word	0x20010bf4
 80098ac:	20010bfc 	.word	0x20010bfc
 80098b0:	20010bf8 	.word	0x20010bf8
 80098b4:	20010c08 	.word	0x20010c08

080098b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098c0:	4b28      	ldr	r3, [pc, #160]	; (8009964 <prvInsertBlockIntoFreeList+0xac>)
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	e002      	b.n	80098cc <prvInsertBlockIntoFreeList+0x14>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d8f7      	bhi.n	80098c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	4413      	add	r3, r2
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d108      	bne.n	80098fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	441a      	add	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	441a      	add	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	429a      	cmp	r2, r3
 800990c:	d118      	bne.n	8009940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	4b15      	ldr	r3, [pc, #84]	; (8009968 <prvInsertBlockIntoFreeList+0xb0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d00d      	beq.n	8009936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	441a      	add	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	e008      	b.n	8009948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009936:	4b0c      	ldr	r3, [pc, #48]	; (8009968 <prvInsertBlockIntoFreeList+0xb0>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e003      	b.n	8009948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d002      	beq.n	8009956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20010bec 	.word	0x20010bec
 8009968:	20010bf4 	.word	0x20010bf4

0800996c <__errno>:
 800996c:	4b01      	ldr	r3, [pc, #4]	; (8009974 <__errno+0x8>)
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	20000010 	.word	0x20000010

08009978 <__libc_init_array>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	4d0d      	ldr	r5, [pc, #52]	; (80099b0 <__libc_init_array+0x38>)
 800997c:	4c0d      	ldr	r4, [pc, #52]	; (80099b4 <__libc_init_array+0x3c>)
 800997e:	1b64      	subs	r4, r4, r5
 8009980:	10a4      	asrs	r4, r4, #2
 8009982:	2600      	movs	r6, #0
 8009984:	42a6      	cmp	r6, r4
 8009986:	d109      	bne.n	800999c <__libc_init_array+0x24>
 8009988:	4d0b      	ldr	r5, [pc, #44]	; (80099b8 <__libc_init_array+0x40>)
 800998a:	4c0c      	ldr	r4, [pc, #48]	; (80099bc <__libc_init_array+0x44>)
 800998c:	f000 f9a6 	bl	8009cdc <_init>
 8009990:	1b64      	subs	r4, r4, r5
 8009992:	10a4      	asrs	r4, r4, #2
 8009994:	2600      	movs	r6, #0
 8009996:	42a6      	cmp	r6, r4
 8009998:	d105      	bne.n	80099a6 <__libc_init_array+0x2e>
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a0:	4798      	blx	r3
 80099a2:	3601      	adds	r6, #1
 80099a4:	e7ee      	b.n	8009984 <__libc_init_array+0xc>
 80099a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099aa:	4798      	blx	r3
 80099ac:	3601      	adds	r6, #1
 80099ae:	e7f2      	b.n	8009996 <__libc_init_array+0x1e>
 80099b0:	08009e10 	.word	0x08009e10
 80099b4:	08009e10 	.word	0x08009e10
 80099b8:	08009e10 	.word	0x08009e10
 80099bc:	08009e14 	.word	0x08009e14

080099c0 <__retarget_lock_acquire_recursive>:
 80099c0:	4770      	bx	lr

080099c2 <__retarget_lock_release_recursive>:
 80099c2:	4770      	bx	lr

080099c4 <malloc>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <malloc+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f000 b88d 	b.w	8009ae8 <_malloc_r>
 80099ce:	bf00      	nop
 80099d0:	20000010 	.word	0x20000010

080099d4 <free>:
 80099d4:	4b02      	ldr	r3, [pc, #8]	; (80099e0 <free+0xc>)
 80099d6:	4601      	mov	r1, r0
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	f000 b819 	b.w	8009a10 <_free_r>
 80099de:	bf00      	nop
 80099e0:	20000010 	.word	0x20000010

080099e4 <memcpy>:
 80099e4:	440a      	add	r2, r1
 80099e6:	4291      	cmp	r1, r2
 80099e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80099ec:	d100      	bne.n	80099f0 <memcpy+0xc>
 80099ee:	4770      	bx	lr
 80099f0:	b510      	push	{r4, lr}
 80099f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099fa:	4291      	cmp	r1, r2
 80099fc:	d1f9      	bne.n	80099f2 <memcpy+0xe>
 80099fe:	bd10      	pop	{r4, pc}

08009a00 <memset>:
 8009a00:	4402      	add	r2, r0
 8009a02:	4603      	mov	r3, r0
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d100      	bne.n	8009a0a <memset+0xa>
 8009a08:	4770      	bx	lr
 8009a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a0e:	e7f9      	b.n	8009a04 <memset+0x4>

08009a10 <_free_r>:
 8009a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a12:	2900      	cmp	r1, #0
 8009a14:	d044      	beq.n	8009aa0 <_free_r+0x90>
 8009a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a1a:	9001      	str	r0, [sp, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a22:	bfb8      	it	lt
 8009a24:	18e4      	addlt	r4, r4, r3
 8009a26:	f000 f94d 	bl	8009cc4 <__malloc_lock>
 8009a2a:	4a1e      	ldr	r2, [pc, #120]	; (8009aa4 <_free_r+0x94>)
 8009a2c:	9801      	ldr	r0, [sp, #4]
 8009a2e:	6813      	ldr	r3, [r2, #0]
 8009a30:	b933      	cbnz	r3, 8009a40 <_free_r+0x30>
 8009a32:	6063      	str	r3, [r4, #4]
 8009a34:	6014      	str	r4, [r2, #0]
 8009a36:	b003      	add	sp, #12
 8009a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a3c:	f000 b948 	b.w	8009cd0 <__malloc_unlock>
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	d908      	bls.n	8009a56 <_free_r+0x46>
 8009a44:	6825      	ldr	r5, [r4, #0]
 8009a46:	1961      	adds	r1, r4, r5
 8009a48:	428b      	cmp	r3, r1
 8009a4a:	bf01      	itttt	eq
 8009a4c:	6819      	ldreq	r1, [r3, #0]
 8009a4e:	685b      	ldreq	r3, [r3, #4]
 8009a50:	1949      	addeq	r1, r1, r5
 8009a52:	6021      	streq	r1, [r4, #0]
 8009a54:	e7ed      	b.n	8009a32 <_free_r+0x22>
 8009a56:	461a      	mov	r2, r3
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	b10b      	cbz	r3, 8009a60 <_free_r+0x50>
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	d9fa      	bls.n	8009a56 <_free_r+0x46>
 8009a60:	6811      	ldr	r1, [r2, #0]
 8009a62:	1855      	adds	r5, r2, r1
 8009a64:	42a5      	cmp	r5, r4
 8009a66:	d10b      	bne.n	8009a80 <_free_r+0x70>
 8009a68:	6824      	ldr	r4, [r4, #0]
 8009a6a:	4421      	add	r1, r4
 8009a6c:	1854      	adds	r4, r2, r1
 8009a6e:	42a3      	cmp	r3, r4
 8009a70:	6011      	str	r1, [r2, #0]
 8009a72:	d1e0      	bne.n	8009a36 <_free_r+0x26>
 8009a74:	681c      	ldr	r4, [r3, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	6053      	str	r3, [r2, #4]
 8009a7a:	4421      	add	r1, r4
 8009a7c:	6011      	str	r1, [r2, #0]
 8009a7e:	e7da      	b.n	8009a36 <_free_r+0x26>
 8009a80:	d902      	bls.n	8009a88 <_free_r+0x78>
 8009a82:	230c      	movs	r3, #12
 8009a84:	6003      	str	r3, [r0, #0]
 8009a86:	e7d6      	b.n	8009a36 <_free_r+0x26>
 8009a88:	6825      	ldr	r5, [r4, #0]
 8009a8a:	1961      	adds	r1, r4, r5
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	bf04      	itt	eq
 8009a90:	6819      	ldreq	r1, [r3, #0]
 8009a92:	685b      	ldreq	r3, [r3, #4]
 8009a94:	6063      	str	r3, [r4, #4]
 8009a96:	bf04      	itt	eq
 8009a98:	1949      	addeq	r1, r1, r5
 8009a9a:	6021      	streq	r1, [r4, #0]
 8009a9c:	6054      	str	r4, [r2, #4]
 8009a9e:	e7ca      	b.n	8009a36 <_free_r+0x26>
 8009aa0:	b003      	add	sp, #12
 8009aa2:	bd30      	pop	{r4, r5, pc}
 8009aa4:	20010c10 	.word	0x20010c10

08009aa8 <sbrk_aligned>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4e0e      	ldr	r6, [pc, #56]	; (8009ae4 <sbrk_aligned+0x3c>)
 8009aac:	460c      	mov	r4, r1
 8009aae:	6831      	ldr	r1, [r6, #0]
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	b911      	cbnz	r1, 8009aba <sbrk_aligned+0x12>
 8009ab4:	f000 f8f6 	bl	8009ca4 <_sbrk_r>
 8009ab8:	6030      	str	r0, [r6, #0]
 8009aba:	4621      	mov	r1, r4
 8009abc:	4628      	mov	r0, r5
 8009abe:	f000 f8f1 	bl	8009ca4 <_sbrk_r>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	d00a      	beq.n	8009adc <sbrk_aligned+0x34>
 8009ac6:	1cc4      	adds	r4, r0, #3
 8009ac8:	f024 0403 	bic.w	r4, r4, #3
 8009acc:	42a0      	cmp	r0, r4
 8009ace:	d007      	beq.n	8009ae0 <sbrk_aligned+0x38>
 8009ad0:	1a21      	subs	r1, r4, r0
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f000 f8e6 	bl	8009ca4 <_sbrk_r>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d101      	bne.n	8009ae0 <sbrk_aligned+0x38>
 8009adc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	20010c14 	.word	0x20010c14

08009ae8 <_malloc_r>:
 8009ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aec:	1ccd      	adds	r5, r1, #3
 8009aee:	f025 0503 	bic.w	r5, r5, #3
 8009af2:	3508      	adds	r5, #8
 8009af4:	2d0c      	cmp	r5, #12
 8009af6:	bf38      	it	cc
 8009af8:	250c      	movcc	r5, #12
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	4607      	mov	r7, r0
 8009afe:	db01      	blt.n	8009b04 <_malloc_r+0x1c>
 8009b00:	42a9      	cmp	r1, r5
 8009b02:	d905      	bls.n	8009b10 <_malloc_r+0x28>
 8009b04:	230c      	movs	r3, #12
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	2600      	movs	r6, #0
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b10:	4e2e      	ldr	r6, [pc, #184]	; (8009bcc <_malloc_r+0xe4>)
 8009b12:	f000 f8d7 	bl	8009cc4 <__malloc_lock>
 8009b16:	6833      	ldr	r3, [r6, #0]
 8009b18:	461c      	mov	r4, r3
 8009b1a:	bb34      	cbnz	r4, 8009b6a <_malloc_r+0x82>
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4638      	mov	r0, r7
 8009b20:	f7ff ffc2 	bl	8009aa8 <sbrk_aligned>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	4604      	mov	r4, r0
 8009b28:	d14d      	bne.n	8009bc6 <_malloc_r+0xde>
 8009b2a:	6834      	ldr	r4, [r6, #0]
 8009b2c:	4626      	mov	r6, r4
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	d140      	bne.n	8009bb4 <_malloc_r+0xcc>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	4631      	mov	r1, r6
 8009b36:	4638      	mov	r0, r7
 8009b38:	eb04 0803 	add.w	r8, r4, r3
 8009b3c:	f000 f8b2 	bl	8009ca4 <_sbrk_r>
 8009b40:	4580      	cmp	r8, r0
 8009b42:	d13a      	bne.n	8009bba <_malloc_r+0xd2>
 8009b44:	6821      	ldr	r1, [r4, #0]
 8009b46:	3503      	adds	r5, #3
 8009b48:	1a6d      	subs	r5, r5, r1
 8009b4a:	f025 0503 	bic.w	r5, r5, #3
 8009b4e:	3508      	adds	r5, #8
 8009b50:	2d0c      	cmp	r5, #12
 8009b52:	bf38      	it	cc
 8009b54:	250c      	movcc	r5, #12
 8009b56:	4629      	mov	r1, r5
 8009b58:	4638      	mov	r0, r7
 8009b5a:	f7ff ffa5 	bl	8009aa8 <sbrk_aligned>
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d02b      	beq.n	8009bba <_malloc_r+0xd2>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	442b      	add	r3, r5
 8009b66:	6023      	str	r3, [r4, #0]
 8009b68:	e00e      	b.n	8009b88 <_malloc_r+0xa0>
 8009b6a:	6822      	ldr	r2, [r4, #0]
 8009b6c:	1b52      	subs	r2, r2, r5
 8009b6e:	d41e      	bmi.n	8009bae <_malloc_r+0xc6>
 8009b70:	2a0b      	cmp	r2, #11
 8009b72:	d916      	bls.n	8009ba2 <_malloc_r+0xba>
 8009b74:	1961      	adds	r1, r4, r5
 8009b76:	42a3      	cmp	r3, r4
 8009b78:	6025      	str	r5, [r4, #0]
 8009b7a:	bf18      	it	ne
 8009b7c:	6059      	strne	r1, [r3, #4]
 8009b7e:	6863      	ldr	r3, [r4, #4]
 8009b80:	bf08      	it	eq
 8009b82:	6031      	streq	r1, [r6, #0]
 8009b84:	5162      	str	r2, [r4, r5]
 8009b86:	604b      	str	r3, [r1, #4]
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f104 060b 	add.w	r6, r4, #11
 8009b8e:	f000 f89f 	bl	8009cd0 <__malloc_unlock>
 8009b92:	f026 0607 	bic.w	r6, r6, #7
 8009b96:	1d23      	adds	r3, r4, #4
 8009b98:	1af2      	subs	r2, r6, r3
 8009b9a:	d0b6      	beq.n	8009b0a <_malloc_r+0x22>
 8009b9c:	1b9b      	subs	r3, r3, r6
 8009b9e:	50a3      	str	r3, [r4, r2]
 8009ba0:	e7b3      	b.n	8009b0a <_malloc_r+0x22>
 8009ba2:	6862      	ldr	r2, [r4, #4]
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	bf0c      	ite	eq
 8009ba8:	6032      	streq	r2, [r6, #0]
 8009baa:	605a      	strne	r2, [r3, #4]
 8009bac:	e7ec      	b.n	8009b88 <_malloc_r+0xa0>
 8009bae:	4623      	mov	r3, r4
 8009bb0:	6864      	ldr	r4, [r4, #4]
 8009bb2:	e7b2      	b.n	8009b1a <_malloc_r+0x32>
 8009bb4:	4634      	mov	r4, r6
 8009bb6:	6876      	ldr	r6, [r6, #4]
 8009bb8:	e7b9      	b.n	8009b2e <_malloc_r+0x46>
 8009bba:	230c      	movs	r3, #12
 8009bbc:	603b      	str	r3, [r7, #0]
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f000 f886 	bl	8009cd0 <__malloc_unlock>
 8009bc4:	e7a1      	b.n	8009b0a <_malloc_r+0x22>
 8009bc6:	6025      	str	r5, [r4, #0]
 8009bc8:	e7de      	b.n	8009b88 <_malloc_r+0xa0>
 8009bca:	bf00      	nop
 8009bcc:	20010c10 	.word	0x20010c10

08009bd0 <cleanup_glue>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	6809      	ldr	r1, [r1, #0]
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	b109      	cbz	r1, 8009bde <cleanup_glue+0xe>
 8009bda:	f7ff fff9 	bl	8009bd0 <cleanup_glue>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4628      	mov	r0, r5
 8009be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009be6:	f7ff bf13 	b.w	8009a10 <_free_r>
	...

08009bec <_reclaim_reent>:
 8009bec:	4b2c      	ldr	r3, [pc, #176]	; (8009ca0 <_reclaim_reent+0xb4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4283      	cmp	r3, r0
 8009bf2:	b570      	push	{r4, r5, r6, lr}
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	d051      	beq.n	8009c9c <_reclaim_reent+0xb0>
 8009bf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009bfa:	b143      	cbz	r3, 8009c0e <_reclaim_reent+0x22>
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d14a      	bne.n	8009c98 <_reclaim_reent+0xac>
 8009c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c04:	6819      	ldr	r1, [r3, #0]
 8009c06:	b111      	cbz	r1, 8009c0e <_reclaim_reent+0x22>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f7ff ff01 	bl	8009a10 <_free_r>
 8009c0e:	6961      	ldr	r1, [r4, #20]
 8009c10:	b111      	cbz	r1, 8009c18 <_reclaim_reent+0x2c>
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7ff fefc 	bl	8009a10 <_free_r>
 8009c18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c1a:	b111      	cbz	r1, 8009c22 <_reclaim_reent+0x36>
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f7ff fef7 	bl	8009a10 <_free_r>
 8009c22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c24:	b111      	cbz	r1, 8009c2c <_reclaim_reent+0x40>
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7ff fef2 	bl	8009a10 <_free_r>
 8009c2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009c2e:	b111      	cbz	r1, 8009c36 <_reclaim_reent+0x4a>
 8009c30:	4620      	mov	r0, r4
 8009c32:	f7ff feed 	bl	8009a10 <_free_r>
 8009c36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009c38:	b111      	cbz	r1, 8009c40 <_reclaim_reent+0x54>
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f7ff fee8 	bl	8009a10 <_free_r>
 8009c40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009c42:	b111      	cbz	r1, 8009c4a <_reclaim_reent+0x5e>
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7ff fee3 	bl	8009a10 <_free_r>
 8009c4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009c4c:	b111      	cbz	r1, 8009c54 <_reclaim_reent+0x68>
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f7ff fede 	bl	8009a10 <_free_r>
 8009c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c56:	b111      	cbz	r1, 8009c5e <_reclaim_reent+0x72>
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f7ff fed9 	bl	8009a10 <_free_r>
 8009c5e:	69a3      	ldr	r3, [r4, #24]
 8009c60:	b1e3      	cbz	r3, 8009c9c <_reclaim_reent+0xb0>
 8009c62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c64:	4620      	mov	r0, r4
 8009c66:	4798      	blx	r3
 8009c68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c6a:	b1b9      	cbz	r1, 8009c9c <_reclaim_reent+0xb0>
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c72:	f7ff bfad 	b.w	8009bd0 <cleanup_glue>
 8009c76:	5949      	ldr	r1, [r1, r5]
 8009c78:	b941      	cbnz	r1, 8009c8c <_reclaim_reent+0xa0>
 8009c7a:	3504      	adds	r5, #4
 8009c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7e:	2d80      	cmp	r5, #128	; 0x80
 8009c80:	68d9      	ldr	r1, [r3, #12]
 8009c82:	d1f8      	bne.n	8009c76 <_reclaim_reent+0x8a>
 8009c84:	4620      	mov	r0, r4
 8009c86:	f7ff fec3 	bl	8009a10 <_free_r>
 8009c8a:	e7ba      	b.n	8009c02 <_reclaim_reent+0x16>
 8009c8c:	680e      	ldr	r6, [r1, #0]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f7ff febe 	bl	8009a10 <_free_r>
 8009c94:	4631      	mov	r1, r6
 8009c96:	e7ef      	b.n	8009c78 <_reclaim_reent+0x8c>
 8009c98:	2500      	movs	r5, #0
 8009c9a:	e7ef      	b.n	8009c7c <_reclaim_reent+0x90>
 8009c9c:	bd70      	pop	{r4, r5, r6, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20000010 	.word	0x20000010

08009ca4 <_sbrk_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d06      	ldr	r5, [pc, #24]	; (8009cc0 <_sbrk_r+0x1c>)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4604      	mov	r4, r0
 8009cac:	4608      	mov	r0, r1
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	f7f7 fae0 	bl	8001274 <_sbrk>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_sbrk_r+0x1a>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_sbrk_r+0x1a>
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	20010c18 	.word	0x20010c18

08009cc4 <__malloc_lock>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__malloc_lock+0x8>)
 8009cc6:	f7ff be7b 	b.w	80099c0 <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	20010c0c 	.word	0x20010c0c

08009cd0 <__malloc_unlock>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__malloc_unlock+0x8>)
 8009cd2:	f7ff be76 	b.w	80099c2 <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	20010c0c 	.word	0x20010c0c

08009cdc <_init>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	bf00      	nop
 8009ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce2:	bc08      	pop	{r3}
 8009ce4:	469e      	mov	lr, r3
 8009ce6:	4770      	bx	lr

08009ce8 <_fini>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	bf00      	nop
 8009cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cee:	bc08      	pop	{r3}
 8009cf0:	469e      	mov	lr, r3
 8009cf2:	4770      	bx	lr
