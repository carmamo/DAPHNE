
F446RE_RTOS_LEPTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006e20  08006e20  00016e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f64  08006f64  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f6c  08006f6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c40  20000074  08006fe8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cb4  08006fe8  00024cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed75  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e6  00000000  00000000  0003ee19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00042800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  00044170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000409e  00000000  00000000  000459b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0d3  00000000  00000000  00049a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e067b  00000000  00000000  00066b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014719c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000703c  00000000  00000000  001471ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e08 	.word	0x08006e08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006e08 	.word	0x08006e08

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fcce 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f846 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f96a 	bl	80007f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f940 	bl	80007a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f914 	bl	8000754 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800052c:	f000 f8ac 	bl	8000688 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000530:	f000 f8d8 	bl	80006e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f003 fce2 	bl	8003efc <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  FramePoolHandle = osMemoryPoolNew(4, sizeof(lepton_frame), &FramePool_attributes);
 8000538:	4a11      	ldr	r2, [pc, #68]	; (8000580 <main+0x6c>)
 800053a:	f242 6170 	movw	r1, #9840	; 0x2670
 800053e:	2004      	movs	r0, #4
 8000540:	f003 fdd4 	bl	80040ec <osMemoryPoolNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <main+0x70>)
 8000548:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800054a:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <main+0x74>)
 800054c:	2100      	movs	r1, #0
 800054e:	480f      	ldr	r0, [pc, #60]	; (800058c <main+0x78>)
 8000550:	f003 fd1e 	bl	8003f90 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <main+0x7c>)
 8000558:	6013      	str	r3, [r2, #0]

  /* creation of uart_tx */
  uart_txHandle = osThreadNew(prvPrintImageTask, NULL, &uart_tx_attributes);
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <main+0x80>)
 800055c:	2100      	movs	r1, #0
 800055e:	480e      	ldr	r0, [pc, #56]	; (8000598 <main+0x84>)
 8000560:	f003 fd16 	bl	8003f90 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <main+0x88>)
 8000568:	6013      	str	r3, [r2, #0]

  /* creation of VoSPI */
  VoSPIHandle = osThreadNew(prvCaptureFramesTask, NULL, &VoSPI_attributes);
 800056a:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <main+0x8c>)
 800056c:	2100      	movs	r1, #0
 800056e:	480d      	ldr	r0, [pc, #52]	; (80005a4 <main+0x90>)
 8000570:	f003 fd0e 	bl	8003f90 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <main+0x94>)
 8000578:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057a:	f003 fce3 	bl	8003f44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057e:	e7fe      	b.n	800057e <main+0x6a>
 8000580:	08006ecc 	.word	0x08006ecc
 8000584:	2000024c 	.word	0x2000024c
 8000588:	08006e60 	.word	0x08006e60
 800058c:	08000965 	.word	0x08000965
 8000590:	20000240 	.word	0x20000240
 8000594:	08006e84 	.word	0x08006e84
 8000598:	08000975 	.word	0x08000975
 800059c:	20000244 	.word	0x20000244
 80005a0:	08006ea8 	.word	0x08006ea8
 80005a4:	08000985 	.word	0x08000985
 80005a8:	20000248 	.word	0x20000248

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2234      	movs	r2, #52	; 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 fb5a 	bl	8006c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <SystemClock_Config+0xd4>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <SystemClock_Config+0xd4>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xd4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f8:	4a22      	ldr	r2, [pc, #136]	; (8000684 <SystemClock_Config+0xd8>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <SystemClock_Config+0xd8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000624:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000628:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800062a:	2304      	movs	r3, #4
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000632:	2302      	movs	r3, #2
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4618      	mov	r0, r3
 800063c:	f001 ff88 	bl	8002550 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000646:	f000 f9c5 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fbf6 	bl	8001e58 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000672:	f000 f9af 	bl	80009d4 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f001 fa83 	bl	8001bd0 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f980 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000090 	.word	0x20000090
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_SPI1_Init+0x68>)
 80006ea:	4a19      	ldr	r2, [pc, #100]	; (8000750 <MX_SPI1_Init+0x6c>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_SPI1_Init+0x68>)
 80006f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_SPI1_Init+0x68>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_SPI1_Init+0x68>)
 80006fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000702:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI1_Init+0x68>)
 8000706:	2202      	movs	r2, #2
 8000708:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_SPI1_Init+0x68>)
 800070c:	2201      	movs	r2, #1
 800070e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI1_Init+0x68>)
 8000712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000716:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI1_Init+0x68>)
 800071a:	2208      	movs	r2, #8
 800071c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_SPI1_Init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI1_Init+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_SPI1_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI1_Init+0x68>)
 8000732:	220a      	movs	r2, #10
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_SPI1_Init+0x68>)
 8000738:	f002 f9a8 	bl	8002a8c <HAL_SPI_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000742:	f000 f947 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000e4 	.word	0x200000e4
 8000750:	40013000 	.word	0x40013000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USART2_UART_Init+0x48>)
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2625000;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART2_UART_Init+0x48>)
 8000760:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 8000762:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_USART2_UART_Init+0x48>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x48>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_USART2_UART_Init+0x48>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x48>)
 8000778:	220c      	movs	r2, #12
 800077a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_USART2_UART_Init+0x48>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x48>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_USART2_UART_Init+0x48>)
 800078a:	f003 f8b1 	bl	80038f0 <HAL_UART_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000794:	f000 f91e 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200001fc 	.word	0x200001fc
 80007a0:	40004400 	.word	0x40004400
 80007a4:	00280de8 	.word	0x00280de8

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2105      	movs	r1, #5
 80007ce:	2038      	movs	r0, #56	; 0x38
 80007d0:	f000 fc90 	bl	80010f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007d4:	2038      	movs	r0, #56	; 0x38
 80007d6:	f000 fca9 	bl	800112c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2105      	movs	r1, #5
 80007de:	203b      	movs	r0, #59	; 0x3b
 80007e0:	f000 fc88 	bl	80010f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007e4:	203b      	movs	r0, #59	; 0x3b
 80007e6:	f000 fca1 	bl	800112c <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b43      	ldr	r3, [pc, #268]	; (8000920 <MX_GPIO_Init+0x128>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a42      	ldr	r2, [pc, #264]	; (8000920 <MX_GPIO_Init+0x128>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b40      	ldr	r3, [pc, #256]	; (8000920 <MX_GPIO_Init+0x128>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b3c      	ldr	r3, [pc, #240]	; (8000920 <MX_GPIO_Init+0x128>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a3b      	ldr	r2, [pc, #236]	; (8000920 <MX_GPIO_Init+0x128>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b39      	ldr	r3, [pc, #228]	; (8000920 <MX_GPIO_Init+0x128>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b35      	ldr	r3, [pc, #212]	; (8000920 <MX_GPIO_Init+0x128>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a34      	ldr	r2, [pc, #208]	; (8000920 <MX_GPIO_Init+0x128>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <MX_GPIO_Init+0x128>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <MX_GPIO_Init+0x128>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <MX_GPIO_Init+0x128>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_GPIO_Init+0x128>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000884:	4827      	ldr	r0, [pc, #156]	; (8000924 <MX_GPIO_Init+0x12c>)
 8000886:	f001 f971 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2140      	movs	r1, #64	; 0x40
 800088e:	4826      	ldr	r0, [pc, #152]	; (8000928 <MX_GPIO_Init+0x130>)
 8000890:	f001 f96c 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4820      	ldr	r0, [pc, #128]	; (800092c <MX_GPIO_Init+0x134>)
 80008ac:	f000 ffca 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLIR_VSYNC_Pin */
  GPIO_InitStruct.Pin = FLIR_VSYNC_Pin;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLIR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <MX_GPIO_Init+0x130>)
 80008c8:	f000 ffbc 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLIR_PWR_DWN_L_Pin FLIR_RESET_L_Pin */
  GPIO_InitStruct.Pin = FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin;
 80008cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480f      	ldr	r0, [pc, #60]	; (8000924 <MX_GPIO_Init+0x12c>)
 80008e6:	f000 ffad 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_GPIO_Init+0x130>)
 8000902:	f000 ff9f 	bl	8001844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2105      	movs	r1, #5
 800090a:	2028      	movs	r0, #40	; 0x28
 800090c:	f000 fbf2 	bl	80010f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000910:	2028      	movs	r0, #40	; 0x28
 8000912:	f000 fc0b 	bl	800112c <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000
 8000928:	40020400 	.word	0x40020400
 800092c:	40020800 	.word	0x40020800

08000930 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == FLIR_VSYNC_Pin)
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000940:	d102      	bne.n	8000948 <HAL_GPIO_EXTI_Callback+0x18>
	{

		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000942:	2028      	movs	r0, #40	; 0x28
 8000944:	f000 fc00 	bl	8001148 <HAL_NVIC_DisableIRQ>
	}
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

//	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f003 fba1 	bl	80040b4 <osDelay>
 8000972:	e7fb      	b.n	800096c <StartDefaultTask+0x8>

08000974 <prvPrintImageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvPrintImageTask */
void prvPrintImageTask(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvPrintImageTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f003 fb99 	bl	80040b4 <osDelay>
 8000982:	e7fb      	b.n	800097c <prvPrintImageTask+0x8>

08000984 <prvCaptureFramesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvCaptureFramesTask */
void prvCaptureFramesTask(void *argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0ac      	sub	sp, #176	; 0xb0
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvCaptureFramesTask */
	vospi_packet paquete;
	lepton_frame *frame;

	__HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <prvCaptureFramesTask+0x24>)
 800098e:	2228      	movs	r2, #40	; 0x28
 8000990:	615a      	str	r2, [r3, #20]
	/* Infinite loop */
	for(;;)
	{
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)&frame, sizeof(frame));
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2204      	movs	r2, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <prvCaptureFramesTask+0x28>)
 800099c:	f002 f900 	bl	8002ba0 <HAL_SPI_Receive_DMA>

		osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f003 fb87 	bl	80040b4 <osDelay>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)&frame, sizeof(frame));
 80009a6:	e7f4      	b.n	8000992 <prvCaptureFramesTask+0xe>
 80009a8:	40013c00 	.word	0x40013c00
 80009ac:	200000e4 	.word	0x200000e4

080009b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009c2:	f000 fa9b 	bl	8000efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010000 	.word	0x40010000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <HAL_MspInit+0x54>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_MspInit+0x54>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f000 fb65 	bl	80010f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_I2C_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12c      	bne.n	8000ab4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <HAL_I2C_MspInit+0x8c>)
 8000a94:	f000 fed6 	bl	8001844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a52      	ldr	r2, [pc, #328]	; (8000c30 <HAL_SPI_MspInit+0x168>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 809e 	bne.w	8000c28 <HAL_SPI_MspInit+0x160>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	4b50      	ldr	r3, [pc, #320]	; (8000c34 <HAL_SPI_MspInit+0x16c>)
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	4a4f      	ldr	r2, [pc, #316]	; (8000c34 <HAL_SPI_MspInit+0x16c>)
 8000af6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000afa:	6453      	str	r3, [r2, #68]	; 0x44
 8000afc:	4b4d      	ldr	r3, [pc, #308]	; (8000c34 <HAL_SPI_MspInit+0x16c>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <HAL_SPI_MspInit+0x16c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a48      	ldr	r2, [pc, #288]	; (8000c34 <HAL_SPI_MspInit+0x16c>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b46      	ldr	r3, [pc, #280]	; (8000c34 <HAL_SPI_MspInit+0x16c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b24:	23e0      	movs	r3, #224	; 0xe0
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b34:	2305      	movs	r3, #5
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	483e      	ldr	r0, [pc, #248]	; (8000c38 <HAL_SPI_MspInit+0x170>)
 8000b40:	f000 fe80 	bl	8001844 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000b44:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b46:	4a3e      	ldr	r2, [pc, #248]	; (8000c40 <HAL_SPI_MspInit+0x178>)
 8000b48:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000b4a:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b4c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b50:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5e:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b64:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b66:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b6c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b74:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000b76:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b9a:	4828      	ldr	r0, [pc, #160]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000b9c:	f000 fae2 	bl	8001164 <HAL_DMA_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 8000ba6:	f7ff ff15 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000bae:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bb0:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_SPI_MspInit+0x174>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bb8:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <HAL_SPI_MspInit+0x180>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bbe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bc6:	2240      	movs	r2, #64	; 0x40
 8000bc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bde:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000c0e:	f000 faa9 	bl	8001164 <HAL_DMA_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 8000c18:	f7ff fedc 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000c20:	649a      	str	r2, [r3, #72]	; 0x48
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_SPI_MspInit+0x17c>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40013000 	.word	0x40013000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	2000013c 	.word	0x2000013c
 8000c40:	40026410 	.word	0x40026410
 8000c44:	2000019c 	.word	0x2000019c
 8000c48:	40026458 	.word	0x40026458

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12b      	bne.n	8000cc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000cc2:	f000 fdbf 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <HAL_InitTick+0xd0>)
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf4:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <HAL_InitTick+0xd0>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <HAL_InitTick+0xd0>)
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d08:	f107 020c 	add.w	r2, r7, #12
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f9ba 	bl	800208c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d18:	f001 f9a4 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 8000d1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <HAL_InitTick+0xd4>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d2c:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <HAL_InitTick+0xd8>)
 8000d2e:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_InitTick+0xdc>)
 8000d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_InitTick+0xd8>)
 8000d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d3a:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <HAL_InitTick+0xd8>)
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_InitTick+0xd8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_InitTick+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_InitTick+0xd8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d52:	4818      	ldr	r0, [pc, #96]	; (8000db4 <HAL_InitTick+0xd8>)
 8000d54:	f002 fb1e 	bl	8003394 <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11b      	bne.n	8000d9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d66:	4813      	ldr	r0, [pc, #76]	; (8000db4 <HAL_InitTick+0xd8>)
 8000d68:	f002 fb6e 	bl	8003448 <HAL_TIM_Base_Start_IT>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d111      	bne.n	8000d9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d7a:	2019      	movs	r0, #25
 8000d7c:	f000 f9d6 	bl	800112c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	d808      	bhi.n	8000d98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d86:	2200      	movs	r2, #0
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	2019      	movs	r0, #25
 8000d8c:	f000 f9b2 	bl	80010f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_InitTick+0xe0>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e002      	b.n	8000d9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3730      	adds	r7, #48	; 0x30
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	20000250 	.word	0x20000250
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000df2:	f002 fb99 	bl	8003528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000250 	.word	0x20000250

08000e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLIR_VSYNC_Pin);
 8000e04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e08:	f000 feca 	bl	8001ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e10:	f000 fec6 	bl	8001ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA2_Stream0_IRQHandler+0x10>)
 8000e1e:	f000 faa7 	bl	8001370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000013c 	.word	0x2000013c

08000e2c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA2_Stream3_IRQHandler+0x10>)
 8000e32:	f000 fa9d 	bl	8001370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000019c 	.word	0x2000019c

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd7 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f005 febb 	bl	8006c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fb3d 	bl	8000514 <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ea8:	08006f74 	.word	0x08006f74
  ldr r2, =_sbss
 8000eac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000eb0:	20004cb4 	.word	0x20004cb4

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8fc 	bl	80010de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f7ff fef8 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff fd78 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000298 	.word	0x20000298

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000298 	.word	0x20000298

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db12      	blt.n	8001014 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	490a      	ldr	r1, [pc, #40]	; (8001020 <__NVIC_DisableIRQ+0x44>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	3320      	adds	r3, #32
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
}
 800100c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100e:	f3bf 8f6f 	isb	sy
}
 8001012:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff28 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001106:	f7ff ff3d 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 800110a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff ffb1 	bl	8001078 <NVIC_EncodePriority>
 8001116:	4602      	mov	r2, r0
 8001118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff80 	bl	8001024 <__NVIC_SetPriority>
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff30 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff40 	bl	8000fdc <__NVIC_DisableIRQ>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff fed8 	bl	8000f24 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e099      	b.n	80012b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a0:	e00f      	b.n	80011c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a2:	f7ff febf 	bl	8000f24 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d908      	bls.n	80011c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2220      	movs	r2, #32
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2203      	movs	r2, #3
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e078      	b.n	80012b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e8      	bne.n	80011a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <HAL_DMA_Init+0x158>)
 80011dc:	4013      	ands	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	2b04      	cmp	r3, #4
 800121a:	d107      	bne.n	800122c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4313      	orrs	r3, r2
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4313      	orrs	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f023 0307 	bic.w	r3, r3, #7
 8001242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	4313      	orrs	r3, r2
 800124c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2b04      	cmp	r3, #4
 8001254:	d117      	bne.n	8001286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4313      	orrs	r3, r2
 800125e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00e      	beq.n	8001286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 fa6f 	bl	800174c <DMA_CheckFifoParam>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2240      	movs	r2, #64	; 0x40
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001282:	2301      	movs	r3, #1
 8001284:	e016      	b.n	80012b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 fa26 	bl	80016e0 <DMA_CalcBaseAndBitshift>
 8001294:	4603      	mov	r3, r0
 8001296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129c:	223f      	movs	r2, #63	; 0x3f
 800129e:	409a      	lsls	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	f010803f 	.word	0xf010803f

080012c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_DMA_Start_IT+0x26>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e040      	b.n	8001368 <HAL_DMA_Start_IT+0xa8>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d12f      	bne.n	800135a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2202      	movs	r2, #2
 80012fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 f9b8 	bl	8001684 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	223f      	movs	r2, #63	; 0x3f
 800131a:	409a      	lsls	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0216 	orr.w	r2, r2, #22
 800132e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0208 	orr.w	r2, r2, #8
 8001346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e005      	b.n	8001366 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001362:	2302      	movs	r3, #2
 8001364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001366:	7dfb      	ldrb	r3, [r7, #23]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800137c:	4b8e      	ldr	r3, [pc, #568]	; (80015b8 <HAL_DMA_IRQHandler+0x248>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a8e      	ldr	r2, [pc, #568]	; (80015bc <HAL_DMA_IRQHandler+0x24c>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	0a9b      	lsrs	r3, r3, #10
 8001388:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	2208      	movs	r2, #8
 800139c:	409a      	lsls	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d01a      	beq.n	80013dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0204 	bic.w	r2, r2, #4
 80013c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c8:	2208      	movs	r2, #8
 80013ca:	409a      	lsls	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e0:	2201      	movs	r2, #1
 80013e2:	409a      	lsls	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d012      	beq.n	8001412 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fe:	2201      	movs	r2, #1
 8001400:	409a      	lsls	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140a:	f043 0202 	orr.w	r2, r3, #2
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	2204      	movs	r2, #4
 8001418:	409a      	lsls	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d012      	beq.n	8001448 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00b      	beq.n	8001448 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	2204      	movs	r2, #4
 8001436:	409a      	lsls	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	f043 0204 	orr.w	r2, r3, #4
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2210      	movs	r2, #16
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d043      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d03c      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	2210      	movs	r2, #16
 800146c:	409a      	lsls	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d018      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d024      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	4798      	blx	r3
 800149e:	e01f      	b.n	80014e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
 80014b0:	e016      	b.n	80014e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d107      	bne.n	80014d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0208 	bic.w	r2, r2, #8
 80014ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	2220      	movs	r2, #32
 80014e6:	409a      	lsls	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 808f 	beq.w	8001610 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 8087 	beq.w	8001610 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	2220      	movs	r2, #32
 8001508:	409a      	lsls	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b05      	cmp	r3, #5
 8001518:	d136      	bne.n	8001588 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0216 	bic.w	r2, r2, #22
 8001528:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001538:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <HAL_DMA_IRQHandler+0x1da>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0208 	bic.w	r2, r2, #8
 8001558:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	223f      	movs	r2, #63	; 0x3f
 8001560:	409a      	lsls	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157a:	2b00      	cmp	r3, #0
 800157c:	d07e      	beq.n	800167c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
        }
        return;
 8001586:	e079      	b.n	800167c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01d      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10d      	bne.n	80015c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d031      	beq.n	8001610 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
 80015b4:	e02c      	b.n	8001610 <HAL_DMA_IRQHandler+0x2a0>
 80015b6:	bf00      	nop
 80015b8:	20000000 	.word	0x20000000
 80015bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d023      	beq.n	8001610 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
 80015d0:	e01e      	b.n	8001610 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10f      	bne.n	8001600 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0210 	bic.w	r2, r2, #16
 80015ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	2b00      	cmp	r3, #0
 8001616:	d032      	beq.n	800167e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d022      	beq.n	800166a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2205      	movs	r2, #5
 8001628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	3301      	adds	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	d307      	bcc.n	8001658 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f2      	bne.n	800163c <HAL_DMA_IRQHandler+0x2cc>
 8001656:	e000      	b.n	800165a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001658:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
 800167a:	e000      	b.n	800167e <HAL_DMA_IRQHandler+0x30e>
        return;
 800167c:	bf00      	nop
    }
  }
}
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b40      	cmp	r3, #64	; 0x40
 80016b0:	d108      	bne.n	80016c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016c2:	e007      	b.n	80016d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	60da      	str	r2, [r3, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3b10      	subs	r3, #16
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <DMA_CalcBaseAndBitshift+0x64>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <DMA_CalcBaseAndBitshift+0x68>)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d909      	bls.n	8001722 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	1d1a      	adds	r2, r3, #4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	659a      	str	r2, [r3, #88]	; 0x58
 8001720:	e007      	b.n	8001732 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800172a:	f023 0303 	bic.w	r3, r3, #3
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	aaaaaaab 	.word	0xaaaaaaab
 8001748:	08006efc 	.word	0x08006efc

0800174c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d11f      	bne.n	80017a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d856      	bhi.n	800181a <DMA_CheckFifoParam+0xce>
 800176c:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <DMA_CheckFifoParam+0x28>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	08001785 	.word	0x08001785
 8001778:	08001797 	.word	0x08001797
 800177c:	08001785 	.word	0x08001785
 8001780:	0800181b 	.word	0x0800181b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d046      	beq.n	800181e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001794:	e043      	b.n	800181e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800179e:	d140      	bne.n	8001822 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017a4:	e03d      	b.n	8001822 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ae:	d121      	bne.n	80017f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d837      	bhi.n	8001826 <DMA_CheckFifoParam+0xda>
 80017b6:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <DMA_CheckFifoParam+0x70>)
 80017b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080017d3 	.word	0x080017d3
 80017c4:	080017cd 	.word	0x080017cd
 80017c8:	080017e5 	.word	0x080017e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
      break;
 80017d0:	e030      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d025      	beq.n	800182a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e2:	e022      	b.n	800182a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017ec:	d11f      	bne.n	800182e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017f2:	e01c      	b.n	800182e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d903      	bls.n	8001802 <DMA_CheckFifoParam+0xb6>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d003      	beq.n	8001808 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001800:	e018      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
      break;
 8001806:	e015      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00e      	beq.n	8001832 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
      break;
 8001818:	e00b      	b.n	8001832 <DMA_CheckFifoParam+0xe6>
      break;
 800181a:	bf00      	nop
 800181c:	e00a      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
      break;
 800181e:	bf00      	nop
 8001820:	e008      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
      break;
 8001822:	bf00      	nop
 8001824:	e006      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
      break;
 8001826:	bf00      	nop
 8001828:	e004      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
      break;
 800182a:	bf00      	nop
 800182c:	e002      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
      break;   
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <DMA_CheckFifoParam+0xe8>
      break;
 8001832:	bf00      	nop
    }
  } 
  
  return status; 
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e165      	b.n	8001b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8154 	bne.w	8001b26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80ae 	beq.w	8001b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_GPIO_Init+0x300>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_GPIO_Init+0x300>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <HAL_GPIO_Init+0x300>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_GPIO_Init+0x304>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4f      	ldr	r2, [pc, #316]	; (8001b4c <HAL_GPIO_Init+0x308>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x21a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4e      	ldr	r2, [pc, #312]	; (8001b50 <HAL_GPIO_Init+0x30c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x216>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_GPIO_Init+0x314>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4b      	ldr	r2, [pc, #300]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x20a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <HAL_GPIO_Init+0x31c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a49      	ldr	r2, [pc, #292]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x202>
 8001a42:	2306      	movs	r3, #6
 8001a44:	e00c      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a46:	2307      	movs	r3, #7
 8001a48:	e00a      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa2:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b20:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f67f ae96 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40021400 	.word	0x40021400
 8001b64:	40021800 	.word	0x40021800
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe feb6 	bl	8000930 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40013c00 	.word	0x40013c00

08001bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e12b      	b.n	8001e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe ff1e 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c34:	f000 fa02 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4a81      	ldr	r2, [pc, #516]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d807      	bhi.n	8001c54 <HAL_I2C_Init+0x84>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <HAL_I2C_Init+0x278>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf94      	ite	ls
 8001c4c:	2301      	movls	r3, #1
 8001c4e:	2300      	movhi	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e006      	b.n	8001c62 <HAL_I2C_Init+0x92>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a7d      	ldr	r2, [pc, #500]	; (8001e4c <HAL_I2C_Init+0x27c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bf94      	ite	ls
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	2300      	movhi	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0e7      	b.n	8001e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a78      	ldr	r2, [pc, #480]	; (8001e50 <HAL_I2C_Init+0x280>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a6a      	ldr	r2, [pc, #424]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_I2C_Init+0xd4>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	e009      	b.n	8001cb8 <HAL_I2C_Init+0xe8>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_I2C_Init+0x284>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	495c      	ldr	r1, [pc, #368]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	d819      	bhi.n	8001d0c <HAL_I2C_Init+0x13c>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e59      	subs	r1, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce6:	1c59      	adds	r1, r3, #1
 8001ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cec:	400b      	ands	r3, r1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_I2C_Init+0x138>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e59      	subs	r1, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d06:	e051      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e04f      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d111      	bne.n	8001d38 <HAL_I2C_Init+0x168>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e58      	subs	r0, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e012      	b.n	8001d5e <HAL_I2C_Init+0x18e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	0099      	lsls	r1, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Init+0x196>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e022      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <HAL_I2C_Init+0x1bc>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e58      	subs	r0, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	0099      	lsls	r1, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	6809      	ldr	r1, [r1, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6911      	ldr	r1, [r2, #16]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68d2      	ldr	r2, [r2, #12]
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	000186a0 	.word	0x000186a0
 8001e48:	001e847f 	.word	0x001e847f
 8001e4c:	003d08ff 	.word	0x003d08ff
 8001e50:	431bde83 	.word	0x431bde83
 8001e54:	10624dd3 	.word	0x10624dd3

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0cc      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d90c      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d044      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d119      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e067      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4934      	ldr	r1, [pc, #208]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7fe ffec 	bl	8000f24 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7fe ffe8 	bl	8000f24 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d20c      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f887 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	490a      	ldr	r1, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fe6c 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00
 8002014:	40023800 	.word	0x40023800
 8002018:	08006ee4 	.word	0x08006ee4
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	; (8002060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	08006ef4 	.word	0x08006ef4

08002064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002068:	f7ff ffdc 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0b5b      	lsrs	r3, r3, #13
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	08006ef4 	.word	0x08006ef4

0800208c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	220f      	movs	r2, #15
 800209a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCC_GetClockConfig+0x60>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f4:	b0ae      	sub	sp, #184	; 0xb8
 80020f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002116:	4bcb      	ldr	r3, [pc, #812]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b0c      	cmp	r3, #12
 8002120:	f200 8206 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x440>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	08002161 	.word	0x08002161
 8002130:	08002531 	.word	0x08002531
 8002134:	08002531 	.word	0x08002531
 8002138:	08002531 	.word	0x08002531
 800213c:	08002169 	.word	0x08002169
 8002140:	08002531 	.word	0x08002531
 8002144:	08002531 	.word	0x08002531
 8002148:	08002531 	.word	0x08002531
 800214c:	08002171 	.word	0x08002171
 8002150:	08002531 	.word	0x08002531
 8002154:	08002531 	.word	0x08002531
 8002158:	08002531 	.word	0x08002531
 800215c:	08002361 	.word	0x08002361
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4bb9      	ldr	r3, [pc, #740]	; (8002448 <HAL_RCC_GetSysClockFreq+0x358>)
 8002162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002166:	e1e7      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4bb8      	ldr	r3, [pc, #736]	; (800244c <HAL_RCC_GetSysClockFreq+0x35c>)
 800216a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800216e:	e1e3      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4bb4      	ldr	r3, [pc, #720]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217c:	4bb1      	ldr	r3, [pc, #708]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d071      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002188:	4bae      	ldr	r3, [pc, #696]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	2200      	movs	r2, #0
 8002190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002194:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800219c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021ae:	4622      	mov	r2, r4
 80021b0:	462b      	mov	r3, r5
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	0159      	lsls	r1, r3, #5
 80021bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c0:	0150      	lsls	r0, r2, #5
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4621      	mov	r1, r4
 80021c8:	1a51      	subs	r1, r2, r1
 80021ca:	6439      	str	r1, [r7, #64]	; 0x40
 80021cc:	4629      	mov	r1, r5
 80021ce:	eb63 0301 	sbc.w	r3, r3, r1
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80021e0:	4649      	mov	r1, r9
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	4641      	mov	r1, r8
 80021e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ea:	4641      	mov	r1, r8
 80021ec:	018a      	lsls	r2, r1, #6
 80021ee:	4641      	mov	r1, r8
 80021f0:	1a51      	subs	r1, r2, r1
 80021f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80021f4:	4649      	mov	r1, r9
 80021f6:	eb63 0301 	sbc.w	r3, r3, r1
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002208:	4649      	mov	r1, r9
 800220a:	00cb      	lsls	r3, r1, #3
 800220c:	4641      	mov	r1, r8
 800220e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002212:	4641      	mov	r1, r8
 8002214:	00ca      	lsls	r2, r1, #3
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	4603      	mov	r3, r0
 800221c:	4622      	mov	r2, r4
 800221e:	189b      	adds	r3, r3, r2
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
 8002222:	462b      	mov	r3, r5
 8002224:	460a      	mov	r2, r1
 8002226:	eb42 0303 	adc.w	r3, r2, r3
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002238:	4629      	mov	r1, r5
 800223a:	024b      	lsls	r3, r1, #9
 800223c:	4621      	mov	r1, r4
 800223e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002242:	4621      	mov	r1, r4
 8002244:	024a      	lsls	r2, r1, #9
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224e:	2200      	movs	r2, #0
 8002250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002254:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002258:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800225c:	f7fd ffd8 	bl	8000210 <__aeabi_uldivmod>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4613      	mov	r3, r2
 8002266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800226a:	e067      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226c:	4b75      	ldr	r3, [pc, #468]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	2200      	movs	r2, #0
 8002274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002278:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800227c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002284:	67bb      	str	r3, [r7, #120]	; 0x78
 8002286:	2300      	movs	r3, #0
 8002288:	67fb      	str	r3, [r7, #124]	; 0x7c
 800228a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800228e:	4622      	mov	r2, r4
 8002290:	462b      	mov	r3, r5
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	0159      	lsls	r1, r3, #5
 800229c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a0:	0150      	lsls	r0, r2, #5
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4621      	mov	r1, r4
 80022a8:	1a51      	subs	r1, r2, r1
 80022aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80022ac:	4629      	mov	r1, r5
 80022ae:	eb63 0301 	sbc.w	r3, r3, r1
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80022c0:	4649      	mov	r1, r9
 80022c2:	018b      	lsls	r3, r1, #6
 80022c4:	4641      	mov	r1, r8
 80022c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ca:	4641      	mov	r1, r8
 80022cc:	018a      	lsls	r2, r1, #6
 80022ce:	4641      	mov	r1, r8
 80022d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80022d4:	4649      	mov	r1, r9
 80022d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ee:	4692      	mov	sl, r2
 80022f0:	469b      	mov	fp, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	eb1a 0303 	adds.w	r3, sl, r3
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	462b      	mov	r3, r5
 80022fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800230e:	4629      	mov	r1, r5
 8002310:	028b      	lsls	r3, r1, #10
 8002312:	4621      	mov	r1, r4
 8002314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002318:	4621      	mov	r1, r4
 800231a:	028a      	lsls	r2, r1, #10
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002324:	2200      	movs	r2, #0
 8002326:	673b      	str	r3, [r7, #112]	; 0x70
 8002328:	677a      	str	r2, [r7, #116]	; 0x74
 800232a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800232e:	f7fd ff6f 	bl	8000210 <__aeabi_uldivmod>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4613      	mov	r3, r2
 8002338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800233c:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	3301      	adds	r3, #1
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800234e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800235e:	e0eb      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002360:	4b38      	ldr	r3, [pc, #224]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d06b      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002378:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	2200      	movs	r2, #0
 8002380:	66bb      	str	r3, [r7, #104]	; 0x68
 8002382:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238a:	663b      	str	r3, [r7, #96]	; 0x60
 800238c:	2300      	movs	r3, #0
 800238e:	667b      	str	r3, [r7, #100]	; 0x64
 8002390:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002394:	4622      	mov	r2, r4
 8002396:	462b      	mov	r3, r5
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	0159      	lsls	r1, r3, #5
 80023a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a6:	0150      	lsls	r0, r2, #5
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4621      	mov	r1, r4
 80023ae:	1a51      	subs	r1, r2, r1
 80023b0:	61b9      	str	r1, [r7, #24]
 80023b2:	4629      	mov	r1, r5
 80023b4:	eb63 0301 	sbc.w	r3, r3, r1
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023c6:	4659      	mov	r1, fp
 80023c8:	018b      	lsls	r3, r1, #6
 80023ca:	4651      	mov	r1, sl
 80023cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d0:	4651      	mov	r1, sl
 80023d2:	018a      	lsls	r2, r1, #6
 80023d4:	4651      	mov	r1, sl
 80023d6:	ebb2 0801 	subs.w	r8, r2, r1
 80023da:	4659      	mov	r1, fp
 80023dc:	eb63 0901 	sbc.w	r9, r3, r1
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023f4:	4690      	mov	r8, r2
 80023f6:	4699      	mov	r9, r3
 80023f8:	4623      	mov	r3, r4
 80023fa:	eb18 0303 	adds.w	r3, r8, r3
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	462b      	mov	r3, r5
 8002402:	eb49 0303 	adc.w	r3, r9, r3
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002414:	4629      	mov	r1, r5
 8002416:	024b      	lsls	r3, r1, #9
 8002418:	4621      	mov	r1, r4
 800241a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800241e:	4621      	mov	r1, r4
 8002420:	024a      	lsls	r2, r1, #9
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800242a:	2200      	movs	r2, #0
 800242c:	65bb      	str	r3, [r7, #88]	; 0x58
 800242e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002430:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002434:	f7fd feec 	bl	8000210 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4613      	mov	r3, r2
 800243e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002442:	e065      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x420>
 8002444:	40023800 	.word	0x40023800
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_RCC_GetSysClockFreq+0x458>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	2200      	movs	r2, #0
 8002458:	4618      	mov	r0, r3
 800245a:	4611      	mov	r1, r2
 800245c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002460:	653b      	str	r3, [r7, #80]	; 0x50
 8002462:	2300      	movs	r3, #0
 8002464:	657b      	str	r3, [r7, #84]	; 0x54
 8002466:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800246a:	4642      	mov	r2, r8
 800246c:	464b      	mov	r3, r9
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800247c:	0150      	lsls	r0, r2, #5
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4641      	mov	r1, r8
 8002484:	1a51      	subs	r1, r2, r1
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	4649      	mov	r1, r9
 800248a:	eb63 0301 	sbc.w	r3, r3, r1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800249c:	4659      	mov	r1, fp
 800249e:	018b      	lsls	r3, r1, #6
 80024a0:	4651      	mov	r1, sl
 80024a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a6:	4651      	mov	r1, sl
 80024a8:	018a      	lsls	r2, r1, #6
 80024aa:	4651      	mov	r1, sl
 80024ac:	1a54      	subs	r4, r2, r1
 80024ae:	4659      	mov	r1, fp
 80024b0:	eb63 0501 	sbc.w	r5, r3, r1
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	00eb      	lsls	r3, r5, #3
 80024be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c2:	00e2      	lsls	r2, r4, #3
 80024c4:	4614      	mov	r4, r2
 80024c6:	461d      	mov	r5, r3
 80024c8:	4643      	mov	r3, r8
 80024ca:	18e3      	adds	r3, r4, r3
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	464b      	mov	r3, r9
 80024d0:	eb45 0303 	adc.w	r3, r5, r3
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e2:	4629      	mov	r1, r5
 80024e4:	028b      	lsls	r3, r1, #10
 80024e6:	4621      	mov	r1, r4
 80024e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024ec:	4621      	mov	r1, r4
 80024ee:	028a      	lsls	r2, r1, #10
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f8:	2200      	movs	r2, #0
 80024fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80024fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002502:	f7fd fe85 	bl	8000210 <__aeabi_uldivmod>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4613      	mov	r3, r2
 800250c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_RCC_GetSysClockFreq+0x458>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0f1b      	lsrs	r3, r3, #28
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800251e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800252e:	e003      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002536:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800253c:	4618      	mov	r0, r3
 800253e:	37b8      	adds	r7, #184	; 0xb8
 8002540:	46bd      	mov	sp, r7
 8002542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	00f42400 	.word	0x00f42400

08002550 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e28d      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8083 	beq.w	8002676 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002570:	4b94      	ldr	r3, [pc, #592]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b04      	cmp	r3, #4
 800257a:	d019      	beq.n	80025b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800257c:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002584:	2b08      	cmp	r3, #8
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002588:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002594:	d00c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002596:	4b8b      	ldr	r3, [pc, #556]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d112      	bne.n	80025c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ae:	d10b      	bne.n	80025c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	4b84      	ldr	r3, [pc, #528]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d05b      	beq.n	8002674 <HAL_RCC_OscConfig+0x124>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d157      	bne.n	8002674 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e25a      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d0:	d106      	bne.n	80025e0 <HAL_RCC_OscConfig+0x90>
 80025d2:	4b7c      	ldr	r3, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7b      	ldr	r2, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e01d      	b.n	800261c <HAL_RCC_OscConfig+0xcc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0xb4>
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a75      	ldr	r2, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xcc>
 8002604:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6e      	ldr	r2, [pc, #440]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6b      	ldr	r2, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fc7e 	bl	8000f24 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fc7a 	bl	8000f24 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e21f      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b61      	ldr	r3, [pc, #388]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0xdc>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fc6a 	bl	8000f24 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002654:	f7fe fc66 	bl	8000f24 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e20b      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x104>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d06f      	beq.n	8002762 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002682:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b00      	cmp	r3, #0
 800268c:	d017      	beq.n	80026be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800268e:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002696:	2b08      	cmp	r3, #8
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800269a:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d11c      	bne.n	80026ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x186>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1d3      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4937      	ldr	r1, [pc, #220]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	e03a      	b.n	8002762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_OscConfig+0x278>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fc13 	bl	8000f24 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002702:	f7fe fc0f 	bl	8000f24 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1b4      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4925      	ldr	r1, [pc, #148]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_OscConfig+0x278>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fbf2 	bl	8000f24 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002744:	f7fe fbee 	bl	8000f24 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e193      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d036      	beq.n	80027dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_RCC_OscConfig+0x27c>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fbd2 	bl	8000f24 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002784:	f7fe fbce 	bl	8000f24 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e173      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x234>
 80027a2:	e01b      	b.n	80027dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x27c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe fbbb 	bl	8000f24 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	e00e      	b.n	80027d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b2:	f7fe fbb7 	bl	8000f24 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d907      	bls.n	80027d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e15c      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	42470000 	.word	0x42470000
 80027cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b8a      	ldr	r3, [pc, #552]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ea      	bne.n	80027b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8097 	beq.w	8002918 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b83      	ldr	r3, [pc, #524]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	4b7f      	ldr	r3, [pc, #508]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a7e      	ldr	r2, [pc, #504]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b7c      	ldr	r3, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b79      	ldr	r3, [pc, #484]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7fe fb77 	bl	8000f24 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fe fb73 	bl	8000f24 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e118      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x31e>
 8002860:	4b66      	ldr	r3, [pc, #408]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a65      	ldr	r2, [pc, #404]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	e01c      	b.n	80028a8 <HAL_RCC_OscConfig+0x358>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x340>
 8002876:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a60      	ldr	r2, [pc, #384]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
 8002882:	4b5e      	ldr	r3, [pc, #376]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0x358>
 8002890:	4b5a      	ldr	r3, [pc, #360]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	4a59      	ldr	r2, [pc, #356]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6713      	str	r3, [r2, #112]	; 0x70
 800289c:	4b57      	ldr	r3, [pc, #348]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a56      	ldr	r2, [pc, #344]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d015      	beq.n	80028dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe fb38 	bl	8000f24 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fb34 	bl	8000f24 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0d7      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ee      	beq.n	80028b8 <HAL_RCC_OscConfig+0x368>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe fb22 	bl	8000f24 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe fb1e 	bl	8000f24 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0c1      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	4b40      	ldr	r3, [pc, #256]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ee      	bne.n	80028e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	4a3a      	ldr	r2, [pc, #232]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80ad 	beq.w	8002a7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b08      	cmp	r3, #8
 800292c:	d060      	beq.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d145      	bne.n	80029c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <HAL_RCC_OscConfig+0x4b4>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe faf2 	bl	8000f24 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe faee 	bl	8000f24 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e093      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	3b01      	subs	r3, #1
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	071b      	lsls	r3, r3, #28
 800298e:	491b      	ldr	r1, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x4b4>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fac3 	bl	8000f24 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe fabf 	bl	8000f24 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e064      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x452>
 80029c0:	e05c      	b.n	8002a7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_RCC_OscConfig+0x4b4>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe faac 	bl	8000f24 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe faa8 	bl	8000f24 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04d      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x480>
 80029ee:	e045      	b.n	8002a7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e040      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000
 8002a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_RCC_OscConfig+0x538>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d030      	beq.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d129      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d122      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d119      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	3b01      	subs	r3, #1
 8002a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d10f      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07b      	b.n	8002b96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d108      	bne.n	8002ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aae:	d009      	beq.n	8002ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
 8002ab6:	e005      	b.n	8002ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fd fff2 	bl	8000ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	f003 0104 	and.w	r1, r3, #4
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f003 0210 	and.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d110      	bne.n	8002bdc <HAL_SPI_Receive_DMA+0x3c>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc2:	d10b      	bne.n	8002bdc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f8ac 	bl	8002d30 <HAL_SPI_TransmitReceive_DMA>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	e09f      	b.n	8002d1c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_SPI_Receive_DMA+0x4a>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e098      	b.n	8002d1c <HAL_SPI_Receive_DMA+0x17c>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c02:	e086      	b.n	8002d12 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_Receive_DMA+0x70>
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c14:	e07d      	b.n	8002d12 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	88fa      	ldrh	r2, [r7, #6]
 8002c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c56:	d10f      	bne.n	8002c78 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7c:	4a29      	ldr	r2, [pc, #164]	; (8002d24 <HAL_SPI_Receive_DMA+0x184>)
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <HAL_SPI_Receive_DMA+0x188>)
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <HAL_SPI_Receive_DMA+0x18c>)
 8002c8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c94:	2200      	movs	r2, #0
 8002c96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002cb0:	f7fe fb06 	bl	80012c0 <HAL_DMA_Start_IT>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f043 0210 	orr.w	r2, r3, #16
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002cd2:	e01e      	b.n	8002d12 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d007      	beq.n	8002cf2 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0220 	orr.w	r2, r2, #32
 8002d00:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	080030bd 	.word	0x080030bd
 8002d28:	08002f85 	.word	0x08002f85
 8002d2c:	080030f5 	.word	0x080030f5

08002d30 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0e3      	b.n	8002f18 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d5e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002d66:	7dbb      	ldrb	r3, [r7, #22]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d00d      	beq.n	8002d88 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d72:	d106      	bne.n	8002d82 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002d7c:	7dbb      	ldrb	r3, [r7, #22]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d002      	beq.n	8002d88 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d86:	e0c2      	b.n	8002f0e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d9e:	e0b6      	b.n	8002f0e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d003      	beq.n	8002db4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2205      	movs	r2, #5
 8002db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	887a      	ldrh	r2, [r7, #2]
 8002dca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	887a      	ldrh	r2, [r7, #2]
 8002dd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	887a      	ldrh	r2, [r7, #2]
 8002ddc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d108      	bne.n	8002e08 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	4a49      	ldr	r2, [pc, #292]	; (8002f20 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	4a48      	ldr	r2, [pc, #288]	; (8002f24 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e06:	e007      	b.n	8002e18 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002e16:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	4a44      	ldr	r2, [pc, #272]	; (8002f30 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002e1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e24:	2200      	movs	r2, #0
 8002e26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	4619      	mov	r1, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e40:	f7fe fa3e 	bl	80012c0 <HAL_DMA_Start_IT>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f043 0210 	orr.w	r2, r3, #16
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002e62:	e054      	b.n	8002f0e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e78:	2200      	movs	r2, #0
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	2200      	movs	r2, #0
 8002e82:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e88:	2200      	movs	r2, #0
 8002e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e90:	2200      	movs	r2, #0
 8002e92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002eac:	f7fe fa08 	bl	80012c0 <HAL_DMA_Start_IT>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002ece:	e01e      	b.n	8002f0e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	2b40      	cmp	r3, #64	; 0x40
 8002edc:	d007      	beq.n	8002eee <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eec:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0220 	orr.w	r2, r2, #32
 8002efc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0202 	orr.w	r2, r2, #2
 8002f0c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	080030bd 	.word	0x080030bd
 8002f24:	08002f85 	.word	0x08002f85
 8002f28:	080030d9 	.word	0x080030d9
 8002f2c:	0800302d 	.word	0x0800302d
 8002f30:	080030f5 	.word	0x080030f5

08002f34 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f92:	f7fd ffc7 	bl	8000f24 <HAL_GetTick>
 8002f96:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa6:	d03b      	beq.n	8003020 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0220 	bic.w	r2, r2, #32
 8002fb6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10d      	bne.n	8002fdc <SPI_DMAReceiveCplt+0x58>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fc8:	d108      	bne.n	8002fdc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0203 	bic.w	r2, r2, #3
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	e007      	b.n	8002fec <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	2164      	movs	r1, #100	; 0x64
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f927 	bl	8003244 <SPI_EndRxTransaction>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff ffa9 	bl	8002f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800301e:	e002      	b.n	8003026 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7fd fc95 	bl	8000950 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800303a:	f7fd ff73 	bl	8000f24 <HAL_GetTick>
 800303e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304e:	d02f      	beq.n	80030b0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0220 	bic.w	r2, r2, #32
 800305e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	2164      	movs	r1, #100	; 0x64
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f953 	bl	8003310 <SPI_EndRxTxTransaction>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0203 	bic.w	r2, r2, #3
 800308a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff ff61 	bl	8002f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80030ae:	e002      	b.n	80030b6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7ff ff3f 	bl	8002f34 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff ff3c 	bl	8002f48 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff ff38 	bl	8002f5c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0203 	bic.w	r2, r2, #3
 8003110:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff ff22 	bl	8002f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	4613      	mov	r3, r2
 8003142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003144:	f7fd feee 	bl	8000f24 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4413      	add	r3, r2
 8003152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003154:	f7fd fee6 	bl	8000f24 <HAL_GetTick>
 8003158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800315a:	4b39      	ldr	r3, [pc, #228]	; (8003240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	015b      	lsls	r3, r3, #5
 8003160:	0d1b      	lsrs	r3, r3, #20
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	fb02 f303 	mul.w	r3, r2, r3
 8003168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800316a:	e054      	b.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003172:	d050      	beq.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003174:	f7fd fed6 	bl	8000f24 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	429a      	cmp	r2, r3
 8003182:	d902      	bls.n	800318a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d13d      	bne.n	8003206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a2:	d111      	bne.n	80031c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ac:	d004      	beq.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d107      	bne.n	80031c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d0:	d10f      	bne.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e017      	b.n	8003236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3b01      	subs	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	429a      	cmp	r2, r3
 8003232:	d19b      	bne.n	800316c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000

08003244 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003258:	d111      	bne.n	800327e <SPI_EndRxTransaction+0x3a>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003262:	d004      	beq.n	800326e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	d107      	bne.n	800327e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003286:	d12a      	bne.n	80032de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003290:	d012      	beq.n	80032b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2200      	movs	r2, #0
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff ff49 	bl	8003134 <SPI_WaitFlagStateUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d02d      	beq.n	8003304 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e026      	b.n	8003306 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	2101      	movs	r1, #1
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff ff36 	bl	8003134 <SPI_WaitFlagStateUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01a      	beq.n	8003304 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e013      	b.n	8003306 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2101      	movs	r1, #1
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff ff23 	bl	8003134 <SPI_WaitFlagStateUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e000      	b.n	8003306 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <SPI_EndRxTxTransaction+0x7c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <SPI_EndRxTxTransaction+0x80>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0d5b      	lsrs	r3, r3, #21
 8003328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333a:	d112      	bne.n	8003362 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff fef4 	bl	8003134 <SPI_WaitFlagStateUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e00f      	b.n	8003382 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3b01      	subs	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	d0f2      	beq.n	8003362 <SPI_EndRxTxTransaction+0x52>
 800337c:	e000      	b.n	8003380 <SPI_EndRxTxTransaction+0x70>
        break;
 800337e:	bf00      	nop
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000
 8003390:	165e9f81 	.word	0x165e9f81

08003394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e041      	b.n	800342a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f839 	bl	8003432 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 f9d8 	bl	8003788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d001      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e04e      	b.n	80034fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a23      	ldr	r2, [pc, #140]	; (800350c <HAL_TIM_Base_Start_IT+0xc4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d022      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d01d      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_TIM_Base_Start_IT+0xc8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_TIM_Base_Start_IT+0xcc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_TIM_Base_Start_IT+0xd0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_TIM_Base_Start_IT+0xd4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_TIM_Base_Start_IT+0xd8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_TIM_Base_Start_IT+0xdc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d010      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	e007      	b.n	80034fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40010400 	.word	0x40010400
 8003520:	40014000 	.word	0x40014000
 8003524:	40001800 	.word	0x40001800

08003528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0202 	mvn.w	r2, #2
 8003554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8ee 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8e0 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8f1 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0204 	mvn.w	r2, #4
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8c4 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8b6 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8c7 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0208 	mvn.w	r2, #8
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f89a 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f88c 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f89d 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b10      	cmp	r3, #16
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b10      	cmp	r3, #16
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0210 	mvn.w	r2, #16
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2208      	movs	r2, #8
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f870 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f862 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f873 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10e      	bne.n	80036ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d107      	bne.n	80036ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0201 	mvn.w	r2, #1
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd f982 	bl	80009b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b80      	cmp	r3, #128	; 0x80
 80036b8:	d10e      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d107      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f902 	bl	80038dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d10e      	bne.n	8003704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f838 	bl	8003774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b20      	cmp	r3, #32
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0220 	mvn.w	r2, #32
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8cc 	bl	80038c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a40      	ldr	r2, [pc, #256]	; (800389c <TIM_Base_SetConfig+0x114>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <TIM_Base_SetConfig+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d00f      	beq.n	80037c8 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3d      	ldr	r2, [pc, #244]	; (80038a0 <TIM_Base_SetConfig+0x118>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3c      	ldr	r2, [pc, #240]	; (80038a4 <TIM_Base_SetConfig+0x11c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <TIM_Base_SetConfig+0x40>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3b      	ldr	r2, [pc, #236]	; (80038a8 <TIM_Base_SetConfig+0x120>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_Base_SetConfig+0x40>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3a      	ldr	r2, [pc, #232]	; (80038ac <TIM_Base_SetConfig+0x124>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a2f      	ldr	r2, [pc, #188]	; (800389c <TIM_Base_SetConfig+0x114>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02b      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d027      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2c      	ldr	r2, [pc, #176]	; (80038a0 <TIM_Base_SetConfig+0x118>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d023      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a2b      	ldr	r2, [pc, #172]	; (80038a4 <TIM_Base_SetConfig+0x11c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01f      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <TIM_Base_SetConfig+0x120>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01b      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a29      	ldr	r2, [pc, #164]	; (80038ac <TIM_Base_SetConfig+0x124>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d017      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <TIM_Base_SetConfig+0x128>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d013      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <TIM_Base_SetConfig+0x12c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00f      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <TIM_Base_SetConfig+0x130>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00b      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <TIM_Base_SetConfig+0x134>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d007      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <TIM_Base_SetConfig+0x138>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <TIM_Base_SetConfig+0x13c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d108      	bne.n	800384c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <TIM_Base_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_Base_SetConfig+0xf8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a0c      	ldr	r2, [pc, #48]	; (80038ac <TIM_Base_SetConfig+0x124>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d103      	bne.n	8003888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	615a      	str	r2, [r3, #20]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40010000 	.word	0x40010000
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800
 80038a8:	40000c00 	.word	0x40000c00
 80038ac:	40010400 	.word	0x40010400
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800
 80038bc:	40001800 	.word	0x40001800
 80038c0:	40001c00 	.word	0x40001c00
 80038c4:	40002000 	.word	0x40002000

080038c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e03f      	b.n	8003982 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd f998 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f829 	bl	800398c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800398c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003990:	b0c0      	sub	sp, #256	; 0x100
 8003992:	af00      	add	r7, sp, #0
 8003994:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	68d9      	ldr	r1, [r3, #12]
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	ea40 0301 	orr.w	r3, r0, r1
 80039b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039e4:	f021 010c 	bic.w	r1, r1, #12
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039f2:	430b      	orrs	r3, r1
 80039f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	6999      	ldr	r1, [r3, #24]
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	ea40 0301 	orr.w	r3, r0, r1
 8003a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b8f      	ldr	r3, [pc, #572]	; (8003c58 <UART_SetConfig+0x2cc>)
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d005      	beq.n	8003a2c <UART_SetConfig+0xa0>
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b8d      	ldr	r3, [pc, #564]	; (8003c5c <UART_SetConfig+0x2d0>)
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d104      	bne.n	8003a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe fb1a 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 8003a30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a34:	e003      	b.n	8003a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a36:	f7fe fb01 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8003a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a48:	f040 810c 	bne.w	8003c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a50:	2200      	movs	r2, #0
 8003a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a5e:	4622      	mov	r2, r4
 8003a60:	462b      	mov	r3, r5
 8003a62:	1891      	adds	r1, r2, r2
 8003a64:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a66:	415b      	adcs	r3, r3
 8003a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a6e:	4621      	mov	r1, r4
 8003a70:	eb12 0801 	adds.w	r8, r2, r1
 8003a74:	4629      	mov	r1, r5
 8003a76:	eb43 0901 	adc.w	r9, r3, r1
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8e:	4690      	mov	r8, r2
 8003a90:	4699      	mov	r9, r3
 8003a92:	4623      	mov	r3, r4
 8003a94:	eb18 0303 	adds.w	r3, r8, r3
 8003a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	eb49 0303 	adc.w	r3, r9, r3
 8003aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aba:	460b      	mov	r3, r1
 8003abc:	18db      	adds	r3, r3, r3
 8003abe:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	eb42 0303 	adc.w	r3, r2, r3
 8003ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ad0:	f7fc fb9e 	bl	8000210 <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <UART_SetConfig+0x2d4>)
 8003ada:	fba3 2302 	umull	r2, r3, r3, r2
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	011c      	lsls	r4, r3, #4
 8003ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003af4:	4642      	mov	r2, r8
 8003af6:	464b      	mov	r3, r9
 8003af8:	1891      	adds	r1, r2, r2
 8003afa:	64b9      	str	r1, [r7, #72]	; 0x48
 8003afc:	415b      	adcs	r3, r3
 8003afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b04:	4641      	mov	r1, r8
 8003b06:	eb12 0a01 	adds.w	sl, r2, r1
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b24:	4692      	mov	sl, r2
 8003b26:	469b      	mov	fp, r3
 8003b28:	4643      	mov	r3, r8
 8003b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b32:	464b      	mov	r3, r9
 8003b34:	eb4b 0303 	adc.w	r3, fp, r3
 8003b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b50:	460b      	mov	r3, r1
 8003b52:	18db      	adds	r3, r3, r3
 8003b54:	643b      	str	r3, [r7, #64]	; 0x40
 8003b56:	4613      	mov	r3, r2
 8003b58:	eb42 0303 	adc.w	r3, r2, r3
 8003b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b66:	f7fc fb53 	bl	8000210 <__aeabi_uldivmod>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <UART_SetConfig+0x2d4>)
 8003b72:	fba3 2301 	umull	r2, r3, r3, r1
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	2264      	movs	r2, #100	; 0x64
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	1acb      	subs	r3, r1, r3
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b86:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <UART_SetConfig+0x2d4>)
 8003b88:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b94:	441c      	add	r4, r3
 8003b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ba8:	4642      	mov	r2, r8
 8003baa:	464b      	mov	r3, r9
 8003bac:	1891      	adds	r1, r2, r2
 8003bae:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bb0:	415b      	adcs	r3, r3
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bb8:	4641      	mov	r1, r8
 8003bba:	1851      	adds	r1, r2, r1
 8003bbc:	6339      	str	r1, [r7, #48]	; 0x30
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	414b      	adcs	r3, r1
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bd0:	4659      	mov	r1, fp
 8003bd2:	00cb      	lsls	r3, r1, #3
 8003bd4:	4651      	mov	r1, sl
 8003bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bda:	4651      	mov	r1, sl
 8003bdc:	00ca      	lsls	r2, r1, #3
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	4642      	mov	r2, r8
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bec:	464b      	mov	r3, r9
 8003bee:	460a      	mov	r2, r1
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	18db      	adds	r3, r3, r3
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c12:	4613      	mov	r3, r2
 8003c14:	eb42 0303 	adc.w	r3, r2, r3
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c22:	f7fc faf5 	bl	8000210 <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <UART_SetConfig+0x2d4>)
 8003c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	2164      	movs	r1, #100	; 0x64
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	3332      	adds	r3, #50	; 0x32
 8003c3e:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <UART_SetConfig+0x2d4>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	f003 0207 	and.w	r2, r3, #7
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4422      	add	r2, r4
 8003c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c54:	e105      	b.n	8003e62 <UART_SetConfig+0x4d6>
 8003c56:	bf00      	nop
 8003c58:	40011000 	.word	0x40011000
 8003c5c:	40011400 	.word	0x40011400
 8003c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c76:	4642      	mov	r2, r8
 8003c78:	464b      	mov	r3, r9
 8003c7a:	1891      	adds	r1, r2, r2
 8003c7c:	6239      	str	r1, [r7, #32]
 8003c7e:	415b      	adcs	r3, r3
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c86:	4641      	mov	r1, r8
 8003c88:	1854      	adds	r4, r2, r1
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	eb43 0501 	adc.w	r5, r3, r1
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	00eb      	lsls	r3, r5, #3
 8003c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c9e:	00e2      	lsls	r2, r4, #3
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	4643      	mov	r3, r8
 8003ca6:	18e3      	adds	r3, r4, r3
 8003ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cac:	464b      	mov	r3, r9
 8003cae:	eb45 0303 	adc.w	r3, r5, r3
 8003cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	008b      	lsls	r3, r1, #2
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cdc:	4621      	mov	r1, r4
 8003cde:	008a      	lsls	r2, r1, #2
 8003ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ce4:	f7fc fa94 	bl	8000210 <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4b60      	ldr	r3, [pc, #384]	; (8003e70 <UART_SetConfig+0x4e4>)
 8003cee:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	011c      	lsls	r4, r3, #4
 8003cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	61b9      	str	r1, [r7, #24]
 8003d10:	415b      	adcs	r3, r3
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d18:	4641      	mov	r1, r8
 8003d1a:	1851      	adds	r1, r2, r1
 8003d1c:	6139      	str	r1, [r7, #16]
 8003d1e:	4649      	mov	r1, r9
 8003d20:	414b      	adcs	r3, r1
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d30:	4659      	mov	r1, fp
 8003d32:	00cb      	lsls	r3, r1, #3
 8003d34:	4651      	mov	r1, sl
 8003d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	00ca      	lsls	r2, r1, #3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	4642      	mov	r2, r8
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	460a      	mov	r2, r1
 8003d50:	eb42 0303 	adc.w	r3, r2, r3
 8003d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d70:	4649      	mov	r1, r9
 8003d72:	008b      	lsls	r3, r1, #2
 8003d74:	4641      	mov	r1, r8
 8003d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	008a      	lsls	r2, r1, #2
 8003d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d82:	f7fc fa45 	bl	8000210 <__aeabi_uldivmod>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <UART_SetConfig+0x4e4>)
 8003d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	2164      	movs	r1, #100	; 0x64
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	3332      	adds	r3, #50	; 0x32
 8003d9e:	4a34      	ldr	r2, [pc, #208]	; (8003e70 <UART_SetConfig+0x4e4>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003daa:	441c      	add	r4, r3
 8003dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db0:	2200      	movs	r2, #0
 8003db2:	673b      	str	r3, [r7, #112]	; 0x70
 8003db4:	677a      	str	r2, [r7, #116]	; 0x74
 8003db6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dba:	4642      	mov	r2, r8
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	1891      	adds	r1, r2, r2
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	415b      	adcs	r3, r3
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dca:	4641      	mov	r1, r8
 8003dcc:	1851      	adds	r1, r2, r1
 8003dce:	6039      	str	r1, [r7, #0]
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	414b      	adcs	r3, r1
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003de2:	4659      	mov	r1, fp
 8003de4:	00cb      	lsls	r3, r1, #3
 8003de6:	4651      	mov	r1, sl
 8003de8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dec:	4651      	mov	r1, sl
 8003dee:	00ca      	lsls	r2, r1, #3
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	4603      	mov	r3, r0
 8003df6:	4642      	mov	r2, r8
 8003df8:	189b      	adds	r3, r3, r2
 8003dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	460a      	mov	r2, r1
 8003e00:	eb42 0303 	adc.w	r3, r2, r3
 8003e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e10:	667a      	str	r2, [r7, #100]	; 0x64
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e1e:	4649      	mov	r1, r9
 8003e20:	008b      	lsls	r3, r1, #2
 8003e22:	4641      	mov	r1, r8
 8003e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e28:	4641      	mov	r1, r8
 8003e2a:	008a      	lsls	r2, r1, #2
 8003e2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e30:	f7fc f9ee 	bl	8000210 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <UART_SetConfig+0x4e4>)
 8003e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2164      	movs	r1, #100	; 0x64
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	; 0x32
 8003e4c:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <UART_SetConfig+0x4e4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 020f 	and.w	r2, r3, #15
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4422      	add	r2, r4
 8003e60:	609a      	str	r2, [r3, #8]
}
 8003e62:	bf00      	nop
 8003e64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6e:	bf00      	nop
 8003e70:	51eb851f 	.word	0x51eb851f

08003e74 <__NVIC_SetPriority>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db0a      	blt.n	8003e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	490c      	ldr	r1, [pc, #48]	; (8003ec0 <__NVIC_SetPriority+0x4c>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	440b      	add	r3, r1
 8003e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e9c:	e00a      	b.n	8003eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4908      	ldr	r1, [pc, #32]	; (8003ec4 <__NVIC_SetPriority+0x50>)
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	761a      	strb	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000e100 	.word	0xe000e100
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <SysTick_Handler+0x1c>)
 8003ece:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ed0:	f001 fe34 	bl	8005b3c <xTaskGetSchedulerState>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d001      	beq.n	8003ede <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003eda:	f002 fc1d 	bl	8006718 <xPortSysTickHandler>
  }
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	e000e010 	.word	0xe000e010

08003ee8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003eec:	2100      	movs	r1, #0
 8003eee:	f06f 0004 	mvn.w	r0, #4
 8003ef2:	f7ff ffbf 	bl	8003e74 <__NVIC_SetPriority>
#endif
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f02:	f3ef 8305 	mrs	r3, IPSR
 8003f06:	603b      	str	r3, [r7, #0]
  return(result);
 8003f08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f0e:	f06f 0305 	mvn.w	r3, #5
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	e00c      	b.n	8003f30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <osKernelInitialize+0x44>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <osKernelInitialize+0x44>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	e002      	b.n	8003f30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f30:	687b      	ldr	r3, [r7, #4]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	2000029c 	.word	0x2000029c

08003f44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f4a:	f3ef 8305 	mrs	r3, IPSR
 8003f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f56:	f06f 0305 	mvn.w	r3, #5
 8003f5a:	607b      	str	r3, [r7, #4]
 8003f5c:	e010      	b.n	8003f80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <osKernelStart+0x48>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d109      	bne.n	8003f7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f66:	f7ff ffbf 	bl	8003ee8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <osKernelStart+0x48>)
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f70:	f001 f988 	bl	8005284 <vTaskStartScheduler>
      stat = osOK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	e002      	b.n	8003f80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f80:	687b      	ldr	r3, [r7, #4]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000029c 	.word	0x2000029c

08003f90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08e      	sub	sp, #56	; 0x38
 8003f94:	af04      	add	r7, sp, #16
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa0:	f3ef 8305 	mrs	r3, IPSR
 8003fa4:	617b      	str	r3, [r7, #20]
  return(result);
 8003fa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d17e      	bne.n	80040aa <osThreadNew+0x11a>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d07b      	beq.n	80040aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003fb6:	2318      	movs	r3, #24
 8003fb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d045      	beq.n	8004056 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <osThreadNew+0x48>
        name = attr->name;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <osThreadNew+0x6e>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b38      	cmp	r3, #56	; 0x38
 8003ff0:	d805      	bhi.n	8003ffe <osThreadNew+0x6e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <osThreadNew+0x72>
        return (NULL);
 8003ffe:	2300      	movs	r3, #0
 8004000:	e054      	b.n	80040ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00e      	beq.n	8004038 <osThreadNew+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2bbb      	cmp	r3, #187	; 0xbb
 8004020:	d90a      	bls.n	8004038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <osThreadNew+0xa8>
        mem = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e010      	b.n	800405a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10c      	bne.n	800405a <osThreadNew+0xca>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d108      	bne.n	800405a <osThreadNew+0xca>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <osThreadNew+0xca>
          mem = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e001      	b.n	800405a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d110      	bne.n	8004082 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004068:	9202      	str	r2, [sp, #8]
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6a3a      	ldr	r2, [r7, #32]
 8004074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 ff18 	bl	8004eac <xTaskCreateStatic>
 800407c:	4603      	mov	r3, r0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	e013      	b.n	80040aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d110      	bne.n	80040aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	b29a      	uxth	r2, r3
 800408c:	f107 0310 	add.w	r3, r7, #16
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 ff63 	bl	8004f66 <xTaskCreate>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d001      	beq.n	80040aa <osThreadNew+0x11a>
            hTask = NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040aa:	693b      	ldr	r3, [r7, #16]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3728      	adds	r7, #40	; 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040bc:	f3ef 8305 	mrs	r3, IPSR
 80040c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80040c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <osDelay+0x1c>
    stat = osErrorISR;
 80040c8:	f06f 0305 	mvn.w	r3, #5
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e007      	b.n	80040e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f001 f89e 	bl	800521c <vTaskDelay>
    }
  }

  return (stat);
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040f8:	f3ef 8305 	mrs	r3, IPSR
 80040fc:	613b      	str	r3, [r7, #16]
  return(result);
 80040fe:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <osMemoryPoolNew+0x1e>
    mp = NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	e0be      	b.n	8004288 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <osMemoryPoolNew+0x2a>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <osMemoryPoolNew+0x30>
    mp = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	e0b5      	b.n	8004288 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3303      	adds	r3, #3
 8004124:	f023 0203 	bic.w	r2, r3, #3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	617b      	str	r3, [r7, #20]

    name = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004138:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800413e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d038      	beq.n	80041b8 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <osMemoryPoolNew+0x68>
        name = attr->name;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d006      	beq.n	800416a <osMemoryPoolNew+0x7e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b73      	cmp	r3, #115	; 0x73
 8004162:	d902      	bls.n	800416a <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 8004164:	2301      	movs	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e009      	b.n	800417e <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <osMemoryPoolNew+0x92>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <osMemoryPoolNew+0xa8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e015      	b.n	80041c0 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d011      	beq.n	80041c0 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d806      	bhi.n	80041c0 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	e003      	b.n	80041c0 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 80041c6:	2074      	movs	r0, #116	; 0x74
 80041c8:	f002 fb36 	bl	8006838 <pvPortMalloc>
 80041cc:	6278      	str	r0, [r7, #36]	; 0x24
 80041ce:	e002      	b.n	80041d6 <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01b      	beq.n	8004214 <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	3324      	adds	r3, #36	; 0x24
 80041e0:	461a      	mov	r2, r3
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fa42 	bl	800466e <xQueueCreateCountingSemaphoreStatic>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 80041fe:	6978      	ldr	r0, [r7, #20]
 8004200:	f002 fb1a 	bl	8006838 <pvPortMalloc>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	e003      	b.n	8004214 <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	2b00      	cmp	r3, #0
 8004218:	d02b      	beq.n	8004272 <osMemoryPoolNew+0x186>
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d027      	beq.n	8004272 <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	6a3a      	ldr	r2, [r7, #32]
 8004232:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	4a12      	ldr	r2, [pc, #72]	; (8004294 <osMemoryPoolNew+0x1a8>)
 800424a:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d111      	bne.n	8004288 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f043 0202 	orr.w	r2, r3, #2
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 8004270:	e00a      	b.n	8004288 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <osMemoryPoolNew+0x198>
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 800427e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004280:	f002 fba6 	bl	80069d0 <vPortFree>
      }
      mp = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800428a:	4618      	mov	r0, r3
 800428c:	3728      	adds	r7, #40	; 0x28
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	5eed0000 	.word	0x5eed0000

08004298 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80042a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4a06      	ldr	r2, [pc, #24]	; (80042c8 <vApplicationGetIdleTaskMemory+0x30>)
 80042ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	601a      	str	r2, [r3, #0]
}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	200002a0 	.word	0x200002a0
 80042c8:	2000035c 	.word	0x2000035c

080042cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80042dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4a06      	ldr	r2, [pc, #24]	; (80042fc <vApplicationGetTimerTaskMemory+0x30>)
 80042e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042ea:	601a      	str	r2, [r3, #0]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	2000055c 	.word	0x2000055c
 80042fc:	20000618 	.word	0x20000618

08004300 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f103 0208 	add.w	r2, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004318:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f103 0208 	add.w	r2, r3, #8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f103 0208 	add.w	r2, r3, #8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b8:	d103      	bne.n	80043c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e00c      	b.n	80043dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3308      	adds	r3, #8
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e002      	b.n	80043d0 <vListInsert+0x2e>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d2f6      	bcs.n	80043ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6892      	ldr	r2, [r2, #8]
 800442a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6852      	ldr	r2, [r2, #4]
 8004434:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d103      	bne.n	8004448 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004492:	f002 f8af 	bl	80065f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	68f9      	ldr	r1, [r7, #12]
 80044a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	441a      	add	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	3b01      	subs	r3, #1
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	22ff      	movs	r2, #255	; 0xff
 80044d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	22ff      	movs	r2, #255	; 0xff
 80044de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d114      	bne.n	8004512 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01a      	beq.n	8004526 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3310      	adds	r3, #16
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 f95f 	bl	80057b8 <xTaskRemoveFromEventList>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <xQueueGenericReset+0xcc>)
 8004502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	e009      	b.n	8004526 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3310      	adds	r3, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fef2 	bl	8004300 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3324      	adds	r3, #36	; 0x24
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff feed 	bl	8004300 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004526:	f002 f895 	bl	8006654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800452a:	2301      	movs	r3, #1
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08e      	sub	sp, #56	; 0x38
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <xQueueGenericCreateStatic+0x52>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <xQueueGenericCreateStatic+0x56>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <xQueueGenericCreateStatic+0x58>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	623b      	str	r3, [r7, #32]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <xQueueGenericCreateStatic+0x7e>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <xQueueGenericCreateStatic+0x82>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueGenericCreateStatic+0x84>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	61fb      	str	r3, [r7, #28]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045d6:	2350      	movs	r3, #80	; 0x50
 80045d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b50      	cmp	r3, #80	; 0x50
 80045de:	d00a      	beq.n	80045f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	61bb      	str	r3, [r7, #24]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800460a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f805 	bl	8004628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004620:	4618      	mov	r0, r3
 8004622:	3730      	adds	r7, #48	; 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e002      	b.n	800464a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004656:	2101      	movs	r1, #1
 8004658:	69b8      	ldr	r0, [r7, #24]
 800465a:	f7ff ff05 	bl	8004468 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800466e:	b580      	push	{r7, lr}
 8004670:	b08a      	sub	sp, #40	; 0x28
 8004672:	af02      	add	r7, sp, #8
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	61bb      	str	r3, [r7, #24]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	429a      	cmp	r2, r3
 800469c:	d90a      	bls.n	80046b4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	617b      	str	r3, [r7, #20]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80046b4:	2302      	movs	r3, #2
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff ff3a 	bl	8004538 <xQueueGenericCreateStatic>
 80046c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80046d2:	69fb      	ldr	r3, [r7, #28]
	}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08e      	sub	sp, #56	; 0x38
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046ea:	2300      	movs	r3, #0
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueGenericSend+0x32>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d103      	bne.n	800471c <xQueueGenericSend+0x40>
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <xQueueGenericSend+0x44>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <xQueueGenericSend+0x46>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <xQueueGenericSend+0x60>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d103      	bne.n	800474a <xQueueGenericSend+0x6e>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <xQueueGenericSend+0x72>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueGenericSend+0x74>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xQueueGenericSend+0x8e>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	623b      	str	r3, [r7, #32]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800476a:	f001 f9e7 	bl	8005b3c <xTaskGetSchedulerState>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <xQueueGenericSend+0x9e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <xQueueGenericSend+0xa2>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <xQueueGenericSend+0xa4>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <xQueueGenericSend+0xbe>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	61fb      	str	r3, [r7, #28]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800479a:	f001 ff2b 	bl	80065f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d302      	bcc.n	80047b0 <xQueueGenericSend+0xd4>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d129      	bne.n	8004804 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b6:	f000 fa0b 	bl	8004bd0 <prvCopyDataToQueue>
 80047ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d010      	beq.n	80047e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	3324      	adds	r3, #36	; 0x24
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fff5 	bl	80057b8 <xTaskRemoveFromEventList>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <xQueueGenericSend+0x1f8>)
 80047d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	e00a      	b.n	80047fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047ec:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <xQueueGenericSend+0x1f8>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047fc:	f001 ff2a 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 8004800:	2301      	movs	r3, #1
 8004802:	e063      	b.n	80048cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800480a:	f001 ff23 	bl	8006654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800480e:	2300      	movs	r3, #0
 8004810:	e05c      	b.n	80048cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f82f 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004826:	f001 ff15 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800482a:	f000 fd9b 	bl	8005364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800482e:	f001 fee1 	bl	80065f4 <vPortEnterCritical>
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004838:	b25b      	sxtb	r3, r3
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483e:	d103      	bne.n	8004848 <xQueueGenericSend+0x16c>
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800484e:	b25b      	sxtb	r3, r3
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004854:	d103      	bne.n	800485e <xQueueGenericSend+0x182>
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485e:	f001 fef9 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004862:	1d3a      	adds	r2, r7, #4
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f001 f81e 	bl	80058ac <xTaskCheckForTimeOut>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d124      	bne.n	80048c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004878:	f000 faa2 	bl	8004dc0 <prvIsQueueFull>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d018      	beq.n	80048b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	3310      	adds	r3, #16
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 ff44 	bl	8005718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004892:	f000 fa2d 	bl	8004cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004896:	f000 fd73 	bl	8005380 <xTaskResumeAll>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f af7c 	bne.w	800479a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <xQueueGenericSend+0x1f8>)
 80048a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	e772      	b.n	800479a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b6:	f000 fa1b 	bl	8004cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ba:	f000 fd61 	bl	8005380 <xTaskResumeAll>
 80048be:	e76c      	b.n	800479a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048c2:	f000 fa15 	bl	8004cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048c6:	f000 fd5b 	bl	8005380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3738      	adds	r7, #56	; 0x38
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b090      	sub	sp, #64	; 0x40
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <xQueueGenericSendFromISR+0x3c>
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <xQueueGenericSendFromISR+0x40>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <xQueueGenericSendFromISR+0x42>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d103      	bne.n	8004942 <xQueueGenericSendFromISR+0x6a>
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <xQueueGenericSendFromISR+0x6e>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <xQueueGenericSendFromISR+0x70>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	623b      	str	r3, [r7, #32]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004962:	f001 ff29 	bl	80067b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004966:	f3ef 8211 	mrs	r2, BASEPRI
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800497e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <xQueueGenericSendFromISR+0xbc>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d12f      	bne.n	80049f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049aa:	f000 f911 	bl	8004bd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b6:	d112      	bne.n	80049de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d016      	beq.n	80049ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fef7 	bl	80057b8 <xTaskRemoveFromEventList>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00e      	beq.n	80049ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e007      	b.n	80049ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049e2:	3301      	adds	r3, #1
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	b25a      	sxtb	r2, r3
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049ee:	2301      	movs	r3, #1
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049f2:	e001      	b.n	80049f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3740      	adds	r7, #64	; 0x40
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	; 0x30
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <xQueueReceive+0x30>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	623b      	str	r3, [r7, #32]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <xQueueReceive+0x3e>
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <xQueueReceive+0x42>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <xQueueReceive+0x44>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xQueueReceive+0x5e>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	61fb      	str	r3, [r7, #28]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a6e:	f001 f865 	bl	8005b3c <xTaskGetSchedulerState>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <xQueueReceive+0x6e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <xQueueReceive+0x72>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <xQueueReceive+0x74>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <xQueueReceive+0x8e>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	61bb      	str	r3, [r7, #24]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a9e:	f001 fda9 	bl	80065f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01f      	beq.n	8004aee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab2:	f000 f8f7 	bl	8004ca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	1e5a      	subs	r2, r3, #1
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00f      	beq.n	8004ae6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	3310      	adds	r3, #16
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fe74 	bl	80057b8 <xTaskRemoveFromEventList>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ad6:	4b3d      	ldr	r3, [pc, #244]	; (8004bcc <xQueueReceive+0x1bc>)
 8004ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ae6:	f001 fdb5 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e069      	b.n	8004bc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d103      	bne.n	8004afc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004af4:	f001 fdae 	bl	8006654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e062      	b.n	8004bc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b02:	f107 0310 	add.w	r3, r7, #16
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 feba 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b10:	f001 fda0 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b14:	f000 fc26 	bl	8005364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b18:	f001 fd6c 	bl	80065f4 <vPortEnterCritical>
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b28:	d103      	bne.n	8004b32 <xQueueReceive+0x122>
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b38:	b25b      	sxtb	r3, r3
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3e:	d103      	bne.n	8004b48 <xQueueReceive+0x138>
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b48:	f001 fd84 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b4c:	1d3a      	adds	r2, r7, #4
 8004b4e:	f107 0310 	add.w	r3, r7, #16
 8004b52:	4611      	mov	r1, r2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fea9 	bl	80058ac <xTaskCheckForTimeOut>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d123      	bne.n	8004ba8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b62:	f000 f917 	bl	8004d94 <prvIsQueueEmpty>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d017      	beq.n	8004b9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	3324      	adds	r3, #36	; 0x24
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fdcf 	bl	8005718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b7c:	f000 f8b8 	bl	8004cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b80:	f000 fbfe 	bl	8005380 <xTaskResumeAll>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d189      	bne.n	8004a9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <xQueueReceive+0x1bc>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	e780      	b.n	8004a9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9e:	f000 f8a7 	bl	8004cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ba2:	f000 fbed 	bl	8005380 <xTaskResumeAll>
 8004ba6:	e77a      	b.n	8004a9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004baa:	f000 f8a1 	bl	8004cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bae:	f000 fbe7 	bl	8005380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb4:	f000 f8ee 	bl	8004d94 <prvIsQueueEmpty>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f43f af6f 	beq.w	8004a9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3730      	adds	r7, #48	; 0x30
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10d      	bne.n	8004c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d14d      	bne.n	8004c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 ffbc 	bl	8005b78 <xTaskPriorityDisinherit>
 8004c00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	e043      	b.n	8004c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d119      	bne.n	8004c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6858      	ldr	r0, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	f002 f81c 	bl	8006c58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d32b      	bcc.n	8004c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	e026      	b.n	8004c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68d8      	ldr	r0, [r3, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	f002 f802 	bl	8006c58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	425b      	negs	r3, r3
 8004c5e:	441a      	add	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d207      	bcs.n	8004c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	425b      	negs	r3, r3
 8004c7a:	441a      	add	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d105      	bne.n	8004c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c9a:	697b      	ldr	r3, [r7, #20]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d018      	beq.n	8004ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	441a      	add	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d303      	bcc.n	8004cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68d9      	ldr	r1, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6838      	ldr	r0, [r7, #0]
 8004ce4:	f001 ffb8 	bl	8006c58 <memcpy>
	}
}
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cf8:	f001 fc7c 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d04:	e011      	b.n	8004d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d012      	beq.n	8004d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3324      	adds	r3, #36	; 0x24
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fd50 	bl	80057b8 <xTaskRemoveFromEventList>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d1e:	f000 fe27 	bl	8005970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	dce9      	bgt.n	8004d06 <prvUnlockQueue+0x16>
 8004d32:	e000      	b.n	8004d36 <prvUnlockQueue+0x46>
					break;
 8004d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d3e:	f001 fc89 	bl	8006654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d42:	f001 fc57 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d4e:	e011      	b.n	8004d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d012      	beq.n	8004d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3310      	adds	r3, #16
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fd2b 	bl	80057b8 <xTaskRemoveFromEventList>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d68:	f000 fe02 	bl	8005970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d6c:	7bbb      	ldrb	r3, [r7, #14]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	dce9      	bgt.n	8004d50 <prvUnlockQueue+0x60>
 8004d7c:	e000      	b.n	8004d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	22ff      	movs	r2, #255	; 0xff
 8004d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d88:	f001 fc64 	bl	8006654 <vPortExitCritical>
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d9c:	f001 fc2a 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e001      	b.n	8004db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004db2:	f001 fc4f 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8004db6:	68fb      	ldr	r3, [r7, #12]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc8:	f001 fc14 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d102      	bne.n	8004dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e001      	b.n	8004de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004de2:	f001 fc37 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8004de6:	68fb      	ldr	r3, [r7, #12]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e014      	b.n	8004e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e00:	4a0f      	ldr	r2, [pc, #60]	; (8004e40 <vQueueAddToRegistry+0x50>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e0c:	490c      	ldr	r1, [pc, #48]	; (8004e40 <vQueueAddToRegistry+0x50>)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e16:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <vQueueAddToRegistry+0x50>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e22:	e006      	b.n	8004e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b07      	cmp	r3, #7
 8004e2e:	d9e7      	bls.n	8004e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000a18 	.word	0x20000a18

08004e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e54:	f001 fbce 	bl	80065f4 <vPortEnterCritical>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e5e:	b25b      	sxtb	r3, r3
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e64:	d103      	bne.n	8004e6e <vQueueWaitForMessageRestricted+0x2a>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e74:	b25b      	sxtb	r3, r3
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e7a:	d103      	bne.n	8004e84 <vQueueWaitForMessageRestricted+0x40>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e84:	f001 fbe6 	bl	8006654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fc61 	bl	8005760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e9e:	6978      	ldr	r0, [r7, #20]
 8004ea0:	f7ff ff26 	bl	8004cf0 <prvUnlockQueue>
	}
 8004ea4:	bf00      	nop
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08e      	sub	sp, #56	; 0x38
 8004eb0:	af04      	add	r7, sp, #16
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	623b      	str	r3, [r7, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	61fb      	str	r3, [r7, #28]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ef2:	23bc      	movs	r3, #188	; 0xbc
 8004ef4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2bbc      	cmp	r3, #188	; 0xbc
 8004efa:	d00a      	beq.n	8004f12 <xTaskCreateStatic+0x66>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	61bb      	str	r3, [r7, #24]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01e      	beq.n	8004f58 <xTaskCreateStatic+0xac>
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01b      	beq.n	8004f58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f32:	2300      	movs	r3, #0
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	9302      	str	r3, [sp, #8]
 8004f3a:	f107 0314 	add.w	r3, r7, #20
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f850 	bl	8004ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f52:	f000 f8f3 	bl	800513c <prvAddNewTaskToReadyList>
 8004f56:	e001      	b.n	8004f5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f5c:	697b      	ldr	r3, [r7, #20]
	}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3728      	adds	r7, #40	; 0x28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b08c      	sub	sp, #48	; 0x30
 8004f6a:	af04      	add	r7, sp, #16
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 fc5c 	bl	8006838 <pvPortMalloc>
 8004f80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00e      	beq.n	8004fa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f88:	20bc      	movs	r0, #188	; 0xbc
 8004f8a:	f001 fc55 	bl	8006838 <pvPortMalloc>
 8004f8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f9c:	e005      	b.n	8004faa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f9e:	6978      	ldr	r0, [r7, #20]
 8004fa0:	f001 fd16 	bl	80069d0 <vPortFree>
 8004fa4:	e001      	b.n	8004faa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fb8:	88fa      	ldrh	r2, [r7, #6]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9303      	str	r3, [sp, #12]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	9302      	str	r3, [sp, #8]
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f80e 	bl	8004ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fd4:	69f8      	ldr	r0, [r7, #28]
 8004fd6:	f000 f8b1 	bl	800513c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e002      	b.n	8004fe6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fe4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
	}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	461a      	mov	r2, r3
 8005008:	21a5      	movs	r1, #165	; 0xa5
 800500a:	f001 fe33 	bl	8006c74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005018:	3b01      	subs	r3, #1
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f023 0307 	bic.w	r3, r3, #7
 8005026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	617b      	str	r3, [r7, #20]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01f      	beq.n	800508e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	e012      	b.n	800507a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	7819      	ldrb	r1, [r3, #0]
 800505c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	3334      	adds	r3, #52	; 0x34
 8005064:	460a      	mov	r2, r1
 8005066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d006      	beq.n	8005082 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b0f      	cmp	r3, #15
 800507e:	d9e9      	bls.n	8005054 <prvInitialiseNewTask+0x64>
 8005080:	e000      	b.n	8005084 <prvInitialiseNewTask+0x94>
			{
				break;
 8005082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800508c:	e003      	b.n	8005096 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	2b37      	cmp	r3, #55	; 0x37
 800509a:	d901      	bls.n	80050a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800509c:	2337      	movs	r3, #55	; 0x37
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2200      	movs	r2, #0
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	3304      	adds	r3, #4
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff f942 	bl	8004340 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	3318      	adds	r3, #24
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff f93d 	bl	8004340 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	3354      	adds	r3, #84	; 0x54
 80050f0:	2260      	movs	r2, #96	; 0x60
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 fdbd 	bl	8006c74 <memset>
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <prvInitialiseNewTask+0x140>)
 80050fe:	659a      	str	r2, [r3, #88]	; 0x58
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	4a0c      	ldr	r2, [pc, #48]	; (8005134 <prvInitialiseNewTask+0x144>)
 8005104:	65da      	str	r2, [r3, #92]	; 0x5c
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	4a0b      	ldr	r2, [pc, #44]	; (8005138 <prvInitialiseNewTask+0x148>)
 800510a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	69b8      	ldr	r0, [r7, #24]
 8005112:	f001 f941 	bl	8006398 <pxPortInitialiseStack>
 8005116:	4602      	mov	r2, r0
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005126:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005128:	bf00      	nop
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	08006f24 	.word	0x08006f24
 8005134:	08006f44 	.word	0x08006f44
 8005138:	08006f04 	.word	0x08006f04

0800513c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005144:	f001 fa56 	bl	80065f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005148:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <prvAddNewTaskToReadyList+0xc4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <prvAddNewTaskToReadyList+0xc4>)
 8005150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005152:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <prvAddNewTaskToReadyList+0xc8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800515a:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <prvAddNewTaskToReadyList+0xc8>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <prvAddNewTaskToReadyList+0xc4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d110      	bne.n	800518a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005168:	f000 fc26 	bl	80059b8 <prvInitialiseTaskLists>
 800516c:	e00d      	b.n	800518a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <prvAddNewTaskToReadyList+0xcc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005176:	4b23      	ldr	r3, [pc, #140]	; (8005204 <prvAddNewTaskToReadyList+0xc8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d802      	bhi.n	800518a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <prvAddNewTaskToReadyList+0xc8>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <prvAddNewTaskToReadyList+0xd0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	4a1e      	ldr	r2, [pc, #120]	; (800520c <prvAddNewTaskToReadyList+0xd0>)
 8005192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <prvAddNewTaskToReadyList+0xd0>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <prvAddNewTaskToReadyList+0xd4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d903      	bls.n	80051b0 <prvAddNewTaskToReadyList+0x74>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	4a18      	ldr	r2, [pc, #96]	; (8005210 <prvAddNewTaskToReadyList+0xd4>)
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4a15      	ldr	r2, [pc, #84]	; (8005214 <prvAddNewTaskToReadyList+0xd8>)
 80051be:	441a      	add	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f7ff f8c7 	bl	800435a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051cc:	f001 fa42 	bl	8006654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <prvAddNewTaskToReadyList+0xcc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00e      	beq.n	80051f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <prvAddNewTaskToReadyList+0xc8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d207      	bcs.n	80051f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvAddNewTaskToReadyList+0xdc>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000f2c 	.word	0x20000f2c
 8005204:	20000a58 	.word	0x20000a58
 8005208:	20000f38 	.word	0x20000f38
 800520c:	20000f48 	.word	0x20000f48
 8005210:	20000f34 	.word	0x20000f34
 8005214:	20000a5c 	.word	0x20000a5c
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d017      	beq.n	800525e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <vTaskDelay+0x60>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <vTaskDelay+0x30>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60bb      	str	r3, [r7, #8]
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800524c:	f000 f88a 	bl	8005364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005250:	2100      	movs	r1, #0
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fcfe 	bl	8005c54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005258:	f000 f892 	bl	8005380 <xTaskResumeAll>
 800525c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <vTaskDelay+0x64>)
 8005266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000f54 	.word	0x20000f54
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	; 0x28
 8005288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005292:	463a      	mov	r2, r7
 8005294:	1d39      	adds	r1, r7, #4
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fffc 	bl	8004298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	9202      	str	r2, [sp, #8]
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	460a      	mov	r2, r1
 80052b2:	4924      	ldr	r1, [pc, #144]	; (8005344 <vTaskStartScheduler+0xc0>)
 80052b4:	4824      	ldr	r0, [pc, #144]	; (8005348 <vTaskStartScheduler+0xc4>)
 80052b6:	f7ff fdf9 	bl	8004eac <xTaskCreateStatic>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4a23      	ldr	r2, [pc, #140]	; (800534c <vTaskStartScheduler+0xc8>)
 80052be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052c0:	4b22      	ldr	r3, [pc, #136]	; (800534c <vTaskStartScheduler+0xc8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052c8:	2301      	movs	r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e001      	b.n	80052d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d102      	bne.n	80052de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052d8:	f000 fd10 	bl	8005cfc <xTimerCreateTimerTask>
 80052dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d11b      	bne.n	800531c <vTaskStartScheduler+0x98>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	613b      	str	r3, [r7, #16]
}
 80052f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052f8:	4b15      	ldr	r3, [pc, #84]	; (8005350 <vTaskStartScheduler+0xcc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3354      	adds	r3, #84	; 0x54
 80052fe:	4a15      	ldr	r2, [pc, #84]	; (8005354 <vTaskStartScheduler+0xd0>)
 8005300:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005302:	4b15      	ldr	r3, [pc, #84]	; (8005358 <vTaskStartScheduler+0xd4>)
 8005304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005308:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <vTaskStartScheduler+0xd8>)
 800530c:	2201      	movs	r2, #1
 800530e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005310:	4b13      	ldr	r3, [pc, #76]	; (8005360 <vTaskStartScheduler+0xdc>)
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005316:	f001 f8cb 	bl	80064b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800531a:	e00e      	b.n	800533a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005322:	d10a      	bne.n	800533a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <vTaskStartScheduler+0xb4>
}
 800533a:	bf00      	nop
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	08006e48 	.word	0x08006e48
 8005348:	08005989 	.word	0x08005989
 800534c:	20000f50 	.word	0x20000f50
 8005350:	20000a58 	.word	0x20000a58
 8005354:	20000010 	.word	0x20000010
 8005358:	20000f4c 	.word	0x20000f4c
 800535c:	20000f38 	.word	0x20000f38
 8005360:	20000f30 	.word	0x20000f30

08005364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <vTaskSuspendAll+0x18>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	4a03      	ldr	r2, [pc, #12]	; (800537c <vTaskSuspendAll+0x18>)
 8005370:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005372:	bf00      	nop
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	20000f54 	.word	0x20000f54

08005380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800538e:	4b42      	ldr	r3, [pc, #264]	; (8005498 <xTaskResumeAll+0x118>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <xTaskResumeAll+0x2c>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	603b      	str	r3, [r7, #0]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053ac:	f001 f922 	bl	80065f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053b0:	4b39      	ldr	r3, [pc, #228]	; (8005498 <xTaskResumeAll+0x118>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	4a38      	ldr	r2, [pc, #224]	; (8005498 <xTaskResumeAll+0x118>)
 80053b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ba:	4b37      	ldr	r3, [pc, #220]	; (8005498 <xTaskResumeAll+0x118>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d162      	bne.n	8005488 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053c2:	4b36      	ldr	r3, [pc, #216]	; (800549c <xTaskResumeAll+0x11c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d05e      	beq.n	8005488 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053ca:	e02f      	b.n	800542c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053cc:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <xTaskResumeAll+0x120>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3318      	adds	r3, #24
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff f81b 	bl	8004414 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3304      	adds	r3, #4
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff f816 	bl	8004414 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <xTaskResumeAll+0x124>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d903      	bls.n	80053fc <xTaskResumeAll+0x7c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <xTaskResumeAll+0x124>)
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4a27      	ldr	r2, [pc, #156]	; (80054a8 <xTaskResumeAll+0x128>)
 800540a:	441a      	add	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fe ffa1 	bl	800435a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4b23      	ldr	r3, [pc, #140]	; (80054ac <xTaskResumeAll+0x12c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <xTaskResumeAll+0x130>)
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800542c:	4b1c      	ldr	r3, [pc, #112]	; (80054a0 <xTaskResumeAll+0x120>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1cb      	bne.n	80053cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800543a:	f000 fb5f 	bl	8005afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <xTaskResumeAll+0x134>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d010      	beq.n	800546c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800544a:	f000 f847 	bl	80054dc <xTaskIncrementTick>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005454:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <xTaskResumeAll+0x130>)
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3b01      	subs	r3, #1
 800545e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f1      	bne.n	800544a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <xTaskResumeAll+0x134>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <xTaskResumeAll+0x130>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005478:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <xTaskResumeAll+0x138>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005488:	f001 f8e4 	bl	8006654 <vPortExitCritical>

	return xAlreadyYielded;
 800548c:	68bb      	ldr	r3, [r7, #8]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000f54 	.word	0x20000f54
 800549c:	20000f2c 	.word	0x20000f2c
 80054a0:	20000eec 	.word	0x20000eec
 80054a4:	20000f34 	.word	0x20000f34
 80054a8:	20000a5c 	.word	0x20000a5c
 80054ac:	20000a58 	.word	0x20000a58
 80054b0:	20000f40 	.word	0x20000f40
 80054b4:	20000f3c 	.word	0x20000f3c
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <xTaskGetTickCount+0x1c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054c8:	687b      	ldr	r3, [r7, #4]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000f30 	.word	0x20000f30

080054dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054e6:	4b4f      	ldr	r3, [pc, #316]	; (8005624 <xTaskIncrementTick+0x148>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 808f 	bne.w	800560e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054f0:	4b4d      	ldr	r3, [pc, #308]	; (8005628 <xTaskIncrementTick+0x14c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054f8:	4a4b      	ldr	r2, [pc, #300]	; (8005628 <xTaskIncrementTick+0x14c>)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d120      	bne.n	8005546 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005504:	4b49      	ldr	r3, [pc, #292]	; (800562c <xTaskIncrementTick+0x150>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <xTaskIncrementTick+0x48>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	603b      	str	r3, [r7, #0]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <xTaskIncrementTick+0x46>
 8005524:	4b41      	ldr	r3, [pc, #260]	; (800562c <xTaskIncrementTick+0x150>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b41      	ldr	r3, [pc, #260]	; (8005630 <xTaskIncrementTick+0x154>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a3f      	ldr	r2, [pc, #252]	; (800562c <xTaskIncrementTick+0x150>)
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	4a3f      	ldr	r2, [pc, #252]	; (8005630 <xTaskIncrementTick+0x154>)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <xTaskIncrementTick+0x158>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a3d      	ldr	r2, [pc, #244]	; (8005634 <xTaskIncrementTick+0x158>)
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	f000 fadb 	bl	8005afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005546:	4b3c      	ldr	r3, [pc, #240]	; (8005638 <xTaskIncrementTick+0x15c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	429a      	cmp	r2, r3
 800554e:	d349      	bcc.n	80055e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005550:	4b36      	ldr	r3, [pc, #216]	; (800562c <xTaskIncrementTick+0x150>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d104      	bne.n	8005564 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555a:	4b37      	ldr	r3, [pc, #220]	; (8005638 <xTaskIncrementTick+0x15c>)
 800555c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005560:	601a      	str	r2, [r3, #0]
					break;
 8005562:	e03f      	b.n	80055e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005564:	4b31      	ldr	r3, [pc, #196]	; (800562c <xTaskIncrementTick+0x150>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	429a      	cmp	r2, r3
 800557a:	d203      	bcs.n	8005584 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800557c:	4a2e      	ldr	r2, [pc, #184]	; (8005638 <xTaskIncrementTick+0x15c>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005582:	e02f      	b.n	80055e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	3304      	adds	r3, #4
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe ff43 	bl	8004414 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	3318      	adds	r3, #24
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe ff3a 	bl	8004414 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <xTaskIncrementTick+0x160>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d903      	bls.n	80055b4 <xTaskIncrementTick+0xd8>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	4a22      	ldr	r2, [pc, #136]	; (800563c <xTaskIncrementTick+0x160>)
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <xTaskIncrementTick+0x164>)
 80055c2:	441a      	add	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f7fe fec5 	bl	800435a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d4:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <xTaskIncrementTick+0x168>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	429a      	cmp	r2, r3
 80055dc:	d3b8      	bcc.n	8005550 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055de:	2301      	movs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055e2:	e7b5      	b.n	8005550 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055e4:	4b17      	ldr	r3, [pc, #92]	; (8005644 <xTaskIncrementTick+0x168>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ea:	4915      	ldr	r1, [pc, #84]	; (8005640 <xTaskIncrementTick+0x164>)
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d901      	bls.n	8005600 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <xTaskIncrementTick+0x16c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e004      	b.n	8005618 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <xTaskIncrementTick+0x170>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a0d      	ldr	r2, [pc, #52]	; (800564c <xTaskIncrementTick+0x170>)
 8005616:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005618:	697b      	ldr	r3, [r7, #20]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000f54 	.word	0x20000f54
 8005628:	20000f30 	.word	0x20000f30
 800562c:	20000ee4 	.word	0x20000ee4
 8005630:	20000ee8 	.word	0x20000ee8
 8005634:	20000f44 	.word	0x20000f44
 8005638:	20000f4c 	.word	0x20000f4c
 800563c:	20000f34 	.word	0x20000f34
 8005640:	20000a5c 	.word	0x20000a5c
 8005644:	20000a58 	.word	0x20000a58
 8005648:	20000f40 	.word	0x20000f40
 800564c:	20000f3c 	.word	0x20000f3c

08005650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005656:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <vTaskSwitchContext+0xb0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800565e:	4b29      	ldr	r3, [pc, #164]	; (8005704 <vTaskSwitchContext+0xb4>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005664:	e046      	b.n	80056f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005666:	4b27      	ldr	r3, [pc, #156]	; (8005704 <vTaskSwitchContext+0xb4>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566c:	4b26      	ldr	r3, [pc, #152]	; (8005708 <vTaskSwitchContext+0xb8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e010      	b.n	8005696 <vTaskSwitchContext+0x46>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <vTaskSwitchContext+0x40>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	607b      	str	r3, [r7, #4]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <vTaskSwitchContext+0x3e>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3b01      	subs	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	491d      	ldr	r1, [pc, #116]	; (800570c <vTaskSwitchContext+0xbc>)
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0e4      	beq.n	8005674 <vTaskSwitchContext+0x24>
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4a15      	ldr	r2, [pc, #84]	; (800570c <vTaskSwitchContext+0xbc>)
 80056b6:	4413      	add	r3, r2
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	605a      	str	r2, [r3, #4]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	3308      	adds	r3, #8
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d104      	bne.n	80056da <vTaskSwitchContext+0x8a>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4a0b      	ldr	r2, [pc, #44]	; (8005710 <vTaskSwitchContext+0xc0>)
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4a08      	ldr	r2, [pc, #32]	; (8005708 <vTaskSwitchContext+0xb8>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <vTaskSwitchContext+0xc0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3354      	adds	r3, #84	; 0x54
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <vTaskSwitchContext+0xc4>)
 80056f2:	6013      	str	r3, [r2, #0]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	20000f54 	.word	0x20000f54
 8005704:	20000f40 	.word	0x20000f40
 8005708:	20000f34 	.word	0x20000f34
 800570c:	20000a5c 	.word	0x20000a5c
 8005710:	20000a58 	.word	0x20000a58
 8005714:	20000010 	.word	0x20000010

08005718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <vTaskPlaceOnEventList+0x44>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3318      	adds	r3, #24
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fe fe2b 	bl	80043a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800574c:	2101      	movs	r1, #1
 800574e:	6838      	ldr	r0, [r7, #0]
 8005750:	f000 fa80 	bl	8005c54 <prvAddCurrentTaskToDelayedList>
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000a58 	.word	0x20000a58

08005760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	617b      	str	r3, [r7, #20]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3318      	adds	r3, #24
 800578e:	4619      	mov	r1, r3
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7fe fde2 	bl	800435a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	68b8      	ldr	r0, [r7, #8]
 80057a6:	f000 fa55 	bl	8005c54 <prvAddCurrentTaskToDelayedList>
	}
 80057aa:	bf00      	nop
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000a58 	.word	0x20000a58

080057b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60fb      	str	r3, [r7, #12]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	3318      	adds	r3, #24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fe13 	bl	8004414 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <xTaskRemoveFromEventList+0xb0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d11d      	bne.n	8005832 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fe0a 	bl	8004414 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <xTaskRemoveFromEventList+0xb4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <xTaskRemoveFromEventList+0x5c>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	4a16      	ldr	r2, [pc, #88]	; (800586c <xTaskRemoveFromEventList+0xb4>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <xTaskRemoveFromEventList+0xb8>)
 8005822:	441a      	add	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe fd95 	bl	800435a <vListInsertEnd>
 8005830:	e005      	b.n	800583e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3318      	adds	r3, #24
 8005836:	4619      	mov	r1, r3
 8005838:	480e      	ldr	r0, [pc, #56]	; (8005874 <xTaskRemoveFromEventList+0xbc>)
 800583a:	f7fe fd8e 	bl	800435a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <xTaskRemoveFromEventList+0xc0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	429a      	cmp	r2, r3
 800584a:	d905      	bls.n	8005858 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <xTaskRemoveFromEventList+0xc4>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e001      	b.n	800585c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800585c:	697b      	ldr	r3, [r7, #20]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000f54 	.word	0x20000f54
 800586c:	20000f34 	.word	0x20000f34
 8005870:	20000a5c 	.word	0x20000a5c
 8005874:	20000eec 	.word	0x20000eec
 8005878:	20000a58 	.word	0x20000a58
 800587c:	20000f40 	.word	0x20000f40

08005880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <vTaskInternalSetTimeOutState+0x24>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <vTaskInternalSetTimeOutState+0x28>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	20000f44 	.word	0x20000f44
 80058a8:	20000f30 	.word	0x20000f30

080058ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	613b      	str	r3, [r7, #16]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60fb      	str	r3, [r7, #12]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058ee:	f000 fe81 	bl	80065f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <xTaskCheckForTimeOut+0xbc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590a:	d102      	bne.n	8005912 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e023      	b.n	800595a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <xTaskCheckForTimeOut+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d007      	beq.n	800592e <xTaskCheckForTimeOut+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	e015      	b.n	800595a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	429a      	cmp	r2, r3
 8005936:	d20b      	bcs.n	8005950 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff9b 	bl	8005880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	e004      	b.n	800595a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800595a:	f000 fe7b 	bl	8006654 <vPortExitCritical>

	return xReturn;
 800595e:	69fb      	ldr	r3, [r7, #28]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000f30 	.word	0x20000f30
 800596c:	20000f44 	.word	0x20000f44

08005970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <vTaskMissedYield+0x14>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	20000f40 	.word	0x20000f40

08005988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005990:	f000 f852 	bl	8005a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005994:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <prvIdleTask+0x28>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d9f9      	bls.n	8005990 <prvIdleTask+0x8>
			{
				taskYIELD();
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <prvIdleTask+0x2c>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059ac:	e7f0      	b.n	8005990 <prvIdleTask+0x8>
 80059ae:	bf00      	nop
 80059b0:	20000a5c 	.word	0x20000a5c
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	e00c      	b.n	80059de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <prvInitialiseTaskLists+0x60>)
 80059d0:	4413      	add	r3, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fc94 	bl	8004300 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3301      	adds	r3, #1
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b37      	cmp	r3, #55	; 0x37
 80059e2:	d9ef      	bls.n	80059c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059e4:	480d      	ldr	r0, [pc, #52]	; (8005a1c <prvInitialiseTaskLists+0x64>)
 80059e6:	f7fe fc8b 	bl	8004300 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ea:	480d      	ldr	r0, [pc, #52]	; (8005a20 <prvInitialiseTaskLists+0x68>)
 80059ec:	f7fe fc88 	bl	8004300 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059f0:	480c      	ldr	r0, [pc, #48]	; (8005a24 <prvInitialiseTaskLists+0x6c>)
 80059f2:	f7fe fc85 	bl	8004300 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059f6:	480c      	ldr	r0, [pc, #48]	; (8005a28 <prvInitialiseTaskLists+0x70>)
 80059f8:	f7fe fc82 	bl	8004300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059fc:	480b      	ldr	r0, [pc, #44]	; (8005a2c <prvInitialiseTaskLists+0x74>)
 80059fe:	f7fe fc7f 	bl	8004300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <prvInitialiseTaskLists+0x78>)
 8005a04:	4a05      	ldr	r2, [pc, #20]	; (8005a1c <prvInitialiseTaskLists+0x64>)
 8005a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <prvInitialiseTaskLists+0x7c>)
 8005a0a:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <prvInitialiseTaskLists+0x68>)
 8005a0c:	601a      	str	r2, [r3, #0]
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000a5c 	.word	0x20000a5c
 8005a1c:	20000ebc 	.word	0x20000ebc
 8005a20:	20000ed0 	.word	0x20000ed0
 8005a24:	20000eec 	.word	0x20000eec
 8005a28:	20000f00 	.word	0x20000f00
 8005a2c:	20000f18 	.word	0x20000f18
 8005a30:	20000ee4 	.word	0x20000ee4
 8005a34:	20000ee8 	.word	0x20000ee8

08005a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a3e:	e019      	b.n	8005a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a40:	f000 fdd8 	bl	80065f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <prvCheckTasksWaitingTermination+0x50>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe fcdf 	bl	8004414 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <prvCheckTasksWaitingTermination+0x54>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <prvCheckTasksWaitingTermination+0x54>)
 8005a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a6a:	f000 fdf3 	bl	8006654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f810 	bl	8005a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e1      	bne.n	8005a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000f00 	.word	0x20000f00
 8005a8c:	20000f2c 	.word	0x20000f2c
 8005a90:	20000f14 	.word	0x20000f14

08005a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3354      	adds	r3, #84	; 0x54
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 f949 	bl	8006d38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 ff8b 	bl	80069d0 <vPortFree>
				vPortFree( pxTCB );
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 ff88 	bl	80069d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ac0:	e018      	b.n	8005af4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d103      	bne.n	8005ad4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 ff7f 	bl	80069d0 <vPortFree>
	}
 8005ad2:	e00f      	b.n	8005af4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d00a      	beq.n	8005af4 <prvDeleteTCB+0x60>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60fb      	str	r3, [r7, #12]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <prvDeleteTCB+0x5e>
	}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <prvResetNextTaskUnblockTime+0x38>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d104      	bne.n	8005b16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <prvResetNextTaskUnblockTime+0x3c>)
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b14:	e008      	b.n	8005b28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b16:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <prvResetNextTaskUnblockTime+0x38>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <prvResetNextTaskUnblockTime+0x3c>)
 8005b26:	6013      	str	r3, [r2, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000ee4 	.word	0x20000ee4
 8005b38:	20000f4c 	.word	0x20000f4c

08005b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <xTaskGetSchedulerState+0x34>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	e008      	b.n	8005b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b50:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <xTaskGetSchedulerState+0x38>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	e001      	b.n	8005b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b62:	687b      	ldr	r3, [r7, #4]
	}
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	20000f38 	.word	0x20000f38
 8005b74:	20000f54 	.word	0x20000f54

08005b78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d056      	beq.n	8005c3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <xTaskPriorityDisinherit+0xd0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d00a      	beq.n	8005bae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	60fb      	str	r3, [r7, #12]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60bb      	str	r3, [r7, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd0:	1e5a      	subs	r2, r3, #1
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d02c      	beq.n	8005c3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d128      	bne.n	8005c3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe fc10 	bl	8004414 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <xTaskPriorityDisinherit+0xd4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <xTaskPriorityDisinherit+0xa4>
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <xTaskPriorityDisinherit+0xd4>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <xTaskPriorityDisinherit+0xd8>)
 8005c2a:	441a      	add	r2, r3
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe fb91 	bl	800435a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c3c:	697b      	ldr	r3, [r7, #20]
	}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000a58 	.word	0x20000a58
 8005c4c:	20000f34 	.word	0x20000f34
 8005c50:	20000a5c 	.word	0x20000a5c

08005c54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c5e:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c64:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe fbd2 	bl	8004414 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c76:	d10a      	bne.n	8005c8e <prvAddCurrentTaskToDelayedList+0x3a>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4619      	mov	r1, r3
 8005c86:	4819      	ldr	r0, [pc, #100]	; (8005cec <prvAddCurrentTaskToDelayedList+0x98>)
 8005c88:	f7fe fb67 	bl	800435a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c8c:	e026      	b.n	8005cdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4413      	add	r3, r2
 8005c94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c96:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d209      	bcs.n	8005cba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca6:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f7fe fb75 	bl	80043a2 <vListInsert>
}
 8005cb8:	e010      	b.n	8005cdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cba:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	f7fe fb6b 	bl	80043a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d202      	bcs.n	8005cdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cd6:	4a08      	ldr	r2, [pc, #32]	; (8005cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6013      	str	r3, [r2, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000f30 	.word	0x20000f30
 8005ce8:	20000a58 	.word	0x20000a58
 8005cec:	20000f18 	.word	0x20000f18
 8005cf0:	20000ee8 	.word	0x20000ee8
 8005cf4:	20000ee4 	.word	0x20000ee4
 8005cf8:	20000f4c 	.word	0x20000f4c

08005cfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d06:	f000 fb07 	bl	8006318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <xTimerCreateTimerTask+0x80>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d021      	beq.n	8005d56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d1a:	1d3a      	adds	r2, r7, #4
 8005d1c:	f107 0108 	add.w	r1, r7, #8
 8005d20:	f107 030c 	add.w	r3, r7, #12
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe fad1 	bl	80042cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	9202      	str	r2, [sp, #8]
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	2302      	movs	r3, #2
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	460a      	mov	r2, r1
 8005d3c:	4910      	ldr	r1, [pc, #64]	; (8005d80 <xTimerCreateTimerTask+0x84>)
 8005d3e:	4811      	ldr	r0, [pc, #68]	; (8005d84 <xTimerCreateTimerTask+0x88>)
 8005d40:	f7ff f8b4 	bl	8004eac <xTaskCreateStatic>
 8005d44:	4603      	mov	r3, r0
 8005d46:	4a10      	ldr	r2, [pc, #64]	; (8005d88 <xTimerCreateTimerTask+0x8c>)
 8005d48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <xTimerCreateTimerTask+0x8c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d52:	2301      	movs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10a      	bne.n	8005d72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	613b      	str	r3, [r7, #16]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d72:	697b      	ldr	r3, [r7, #20]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000f88 	.word	0x20000f88
 8005d80:	08006e50 	.word	0x08006e50
 8005d84:	08005ec1 	.word	0x08005ec1
 8005d88:	20000f8c 	.word	0x20000f8c

08005d8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <xTimerGenericCommand+0x2e>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	623b      	str	r3, [r7, #32]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005dba:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <xTimerGenericCommand+0x98>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d02a      	beq.n	8005e18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b05      	cmp	r3, #5
 8005dd2:	dc18      	bgt.n	8005e06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dd4:	f7ff feb2 	bl	8005b3c <xTaskGetSchedulerState>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d109      	bne.n	8005df2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <xTimerGenericCommand+0x98>)
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	f107 0110 	add.w	r1, r7, #16
 8005de6:	2300      	movs	r3, #0
 8005de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dea:	f7fe fc77 	bl	80046dc <xQueueGenericSend>
 8005dee:	6278      	str	r0, [r7, #36]	; 0x24
 8005df0:	e012      	b.n	8005e18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005df2:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <xTimerGenericCommand+0x98>)
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	f107 0110 	add.w	r1, r7, #16
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f7fe fc6d 	bl	80046dc <xQueueGenericSend>
 8005e02:	6278      	str	r0, [r7, #36]	; 0x24
 8005e04:	e008      	b.n	8005e18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e06:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <xTimerGenericCommand+0x98>)
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	f107 0110 	add.w	r1, r7, #16
 8005e0e:	2300      	movs	r3, #0
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	f7fe fd61 	bl	80048d8 <xQueueGenericSendFromISR>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3728      	adds	r7, #40	; 0x28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000f88 	.word	0x20000f88

08005e28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e32:	4b22      	ldr	r3, [pc, #136]	; (8005ebc <prvProcessExpiredTimer+0x94>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fae7 	bl	8004414 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d022      	beq.n	8005e9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	18d1      	adds	r1, r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	6978      	ldr	r0, [r7, #20]
 8005e62:	f000 f8d1 	bl	8006008 <prvInsertTimerInActiveList>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01f      	beq.n	8005eac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2300      	movs	r3, #0
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	2100      	movs	r1, #0
 8005e76:	6978      	ldr	r0, [r7, #20]
 8005e78:	f7ff ff88 	bl	8005d8c <xTimerGenericCommand>
 8005e7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d113      	bne.n	8005eac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60fb      	str	r3, [r7, #12]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	6978      	ldr	r0, [r7, #20]
 8005eb2:	4798      	blx	r3
}
 8005eb4:	bf00      	nop
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000f80 	.word	0x20000f80

08005ec0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ec8:	f107 0308 	add.w	r3, r7, #8
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f857 	bl	8005f80 <prvGetNextExpireTime>
 8005ed2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f803 	bl	8005ee4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ede:	f000 f8d5 	bl	800608c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ee2:	e7f1      	b.n	8005ec8 <prvTimerTask+0x8>

08005ee4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eee:	f7ff fa39 	bl	8005364 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ef2:	f107 0308 	add.w	r3, r7, #8
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f866 	bl	8005fc8 <prvSampleTimeNow>
 8005efc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d130      	bne.n	8005f66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <prvProcessTimerOrBlockTask+0x3c>
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d806      	bhi.n	8005f20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f12:	f7ff fa35 	bl	8005380 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff85 	bl	8005e28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f1e:	e024      	b.n	8005f6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f26:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <prvProcessTimerOrBlockTask+0x90>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <prvProcessTimerOrBlockTask+0x50>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <prvProcessTimerOrBlockTask+0x52>
 8005f34:	2300      	movs	r3, #0
 8005f36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <prvProcessTimerOrBlockTask+0x94>)
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	4619      	mov	r1, r3
 8005f46:	f7fe ff7d 	bl	8004e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f4a:	f7ff fa19 	bl	8005380 <xTaskResumeAll>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f54:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <prvProcessTimerOrBlockTask+0x98>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
}
 8005f64:	e001      	b.n	8005f6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f66:	f7ff fa0b 	bl	8005380 <xTaskResumeAll>
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000f84 	.word	0x20000f84
 8005f78:	20000f88 	.word	0x20000f88
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f88:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <prvGetNextExpireTime+0x44>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <prvGetNextExpireTime+0x16>
 8005f92:	2201      	movs	r2, #1
 8005f94:	e000      	b.n	8005f98 <prvGetNextExpireTime+0x18>
 8005f96:	2200      	movs	r2, #0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fa4:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <prvGetNextExpireTime+0x44>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e001      	b.n	8005fb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000f80 	.word	0x20000f80

08005fc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fd0:	f7ff fa74 	bl	80054bc <xTaskGetTickCount>
 8005fd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <prvSampleTimeNow+0x3c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d205      	bcs.n	8005fec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fe0:	f000 f936 	bl	8006250 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e002      	b.n	8005ff2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ff2:	4a04      	ldr	r2, [pc, #16]	; (8006004 <prvSampleTimeNow+0x3c>)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000f90 	.word	0x20000f90

08006008 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	429a      	cmp	r2, r3
 800602c:	d812      	bhi.n	8006054 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	429a      	cmp	r2, r3
 800603a:	d302      	bcc.n	8006042 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e01b      	b.n	800607a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006042:	4b10      	ldr	r3, [pc, #64]	; (8006084 <prvInsertTimerInActiveList+0x7c>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3304      	adds	r3, #4
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f7fe f9a8 	bl	80043a2 <vListInsert>
 8006052:	e012      	b.n	800607a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d206      	bcs.n	800606a <prvInsertTimerInActiveList+0x62>
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d302      	bcc.n	800606a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e007      	b.n	800607a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <prvInsertTimerInActiveList+0x80>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f7fe f994 	bl	80043a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800607a:	697b      	ldr	r3, [r7, #20]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20000f84 	.word	0x20000f84
 8006088:	20000f80 	.word	0x20000f80

0800608c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08e      	sub	sp, #56	; 0x38
 8006090:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006092:	e0ca      	b.n	800622a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	da18      	bge.n	80060cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	3304      	adds	r3, #4
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	61fb      	str	r3, [r7, #28]
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c2:	6850      	ldr	r0, [r2, #4]
 80060c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c6:	6892      	ldr	r2, [r2, #8]
 80060c8:	4611      	mov	r1, r2
 80060ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f2c0 80aa 	blt.w	8006228 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	3304      	adds	r3, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe f995 	bl	8004414 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ea:	463b      	mov	r3, r7
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff ff6b 	bl	8005fc8 <prvSampleTimeNow>
 80060f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b09      	cmp	r3, #9
 80060f8:	f200 8097 	bhi.w	800622a <prvProcessReceivedCommands+0x19e>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <prvProcessReceivedCommands+0x78>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	0800612d 	.word	0x0800612d
 8006108:	0800612d 	.word	0x0800612d
 800610c:	0800612d 	.word	0x0800612d
 8006110:	080061a1 	.word	0x080061a1
 8006114:	080061b5 	.word	0x080061b5
 8006118:	080061ff 	.word	0x080061ff
 800611c:	0800612d 	.word	0x0800612d
 8006120:	0800612d 	.word	0x0800612d
 8006124:	080061a1 	.word	0x080061a1
 8006128:	080061b5 	.word	0x080061b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	18d1      	adds	r1, r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614c:	f7ff ff5c 	bl	8006008 <prvInsertTimerInActiveList>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d069      	beq.n	800622a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800615c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d05e      	beq.n	800622a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	441a      	add	r2, r3
 8006174:	2300      	movs	r3, #0
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	2300      	movs	r3, #0
 800617a:	2100      	movs	r1, #0
 800617c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800617e:	f7ff fe05 	bl	8005d8c <xTimerGenericCommand>
 8006182:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d14f      	bne.n	800622a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61bb      	str	r3, [r7, #24]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061b2:	e03a      	b.n	800622a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	617b      	str	r3, [r7, #20]
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	18d1      	adds	r1, r2, r3
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f8:	f7ff ff06 	bl	8006008 <prvInsertTimerInActiveList>
					break;
 80061fc:	e015      	b.n	800622a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800620c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620e:	f000 fbdf 	bl	80069d0 <vPortFree>
 8006212:	e00a      	b.n	800622a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	b2da      	uxtb	r2, r3
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006226:	e000      	b.n	800622a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006228:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800622a:	4b08      	ldr	r3, [pc, #32]	; (800624c <prvProcessReceivedCommands+0x1c0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	1d39      	adds	r1, r7, #4
 8006230:	2200      	movs	r2, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe fbec 	bl	8004a10 <xQueueReceive>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f47f af2a 	bne.w	8006094 <prvProcessReceivedCommands+0x8>
	}
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	3730      	adds	r7, #48	; 0x30
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000f88 	.word	0x20000f88

08006250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006256:	e048      	b.n	80062ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <prvSwitchTimerLists+0xc0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006262:	4b2b      	ldr	r3, [pc, #172]	; (8006310 <prvSwitchTimerLists+0xc0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3304      	adds	r3, #4
 8006270:	4618      	mov	r0, r3
 8006272:	f7fe f8cf 	bl	8004414 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d02e      	beq.n	80062ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4413      	add	r3, r2
 8006294:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d90e      	bls.n	80062bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062aa:	4b19      	ldr	r3, [pc, #100]	; (8006310 <prvSwitchTimerLists+0xc0>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3304      	adds	r3, #4
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f7fe f874 	bl	80043a2 <vListInsert>
 80062ba:	e016      	b.n	80062ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062bc:	2300      	movs	r3, #0
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	2300      	movs	r3, #0
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	2100      	movs	r1, #0
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff fd60 	bl	8005d8c <xTimerGenericCommand>
 80062cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	603b      	str	r3, [r7, #0]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ea:	4b09      	ldr	r3, [pc, #36]	; (8006310 <prvSwitchTimerLists+0xc0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1b1      	bne.n	8006258 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <prvSwitchTimerLists+0xc0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <prvSwitchTimerLists+0xc4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a04      	ldr	r2, [pc, #16]	; (8006310 <prvSwitchTimerLists+0xc0>)
 8006300:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006302:	4a04      	ldr	r2, [pc, #16]	; (8006314 <prvSwitchTimerLists+0xc4>)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	6013      	str	r3, [r2, #0]
}
 8006308:	bf00      	nop
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000f80 	.word	0x20000f80
 8006314:	20000f84 	.word	0x20000f84

08006318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800631e:	f000 f969 	bl	80065f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006322:	4b15      	ldr	r3, [pc, #84]	; (8006378 <prvCheckForValidListAndQueue+0x60>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d120      	bne.n	800636c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800632a:	4814      	ldr	r0, [pc, #80]	; (800637c <prvCheckForValidListAndQueue+0x64>)
 800632c:	f7fd ffe8 	bl	8004300 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006330:	4813      	ldr	r0, [pc, #76]	; (8006380 <prvCheckForValidListAndQueue+0x68>)
 8006332:	f7fd ffe5 	bl	8004300 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <prvCheckForValidListAndQueue+0x6c>)
 8006338:	4a10      	ldr	r2, [pc, #64]	; (800637c <prvCheckForValidListAndQueue+0x64>)
 800633a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800633c:	4b12      	ldr	r3, [pc, #72]	; (8006388 <prvCheckForValidListAndQueue+0x70>)
 800633e:	4a10      	ldr	r2, [pc, #64]	; (8006380 <prvCheckForValidListAndQueue+0x68>)
 8006340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006342:	2300      	movs	r3, #0
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	4b11      	ldr	r3, [pc, #68]	; (800638c <prvCheckForValidListAndQueue+0x74>)
 8006348:	4a11      	ldr	r2, [pc, #68]	; (8006390 <prvCheckForValidListAndQueue+0x78>)
 800634a:	2110      	movs	r1, #16
 800634c:	200a      	movs	r0, #10
 800634e:	f7fe f8f3 	bl	8004538 <xQueueGenericCreateStatic>
 8006352:	4603      	mov	r3, r0
 8006354:	4a08      	ldr	r2, [pc, #32]	; (8006378 <prvCheckForValidListAndQueue+0x60>)
 8006356:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <prvCheckForValidListAndQueue+0x60>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <prvCheckForValidListAndQueue+0x60>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	490b      	ldr	r1, [pc, #44]	; (8006394 <prvCheckForValidListAndQueue+0x7c>)
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fd42 	bl	8004df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800636c:	f000 f972 	bl	8006654 <vPortExitCritical>
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000f88 	.word	0x20000f88
 800637c:	20000f58 	.word	0x20000f58
 8006380:	20000f6c 	.word	0x20000f6c
 8006384:	20000f80 	.word	0x20000f80
 8006388:	20000f84 	.word	0x20000f84
 800638c:	20001034 	.word	0x20001034
 8006390:	20000f94 	.word	0x20000f94
 8006394:	08006e58 	.word	0x08006e58

08006398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3b04      	subs	r3, #4
 80063a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3b04      	subs	r3, #4
 80063b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f023 0201 	bic.w	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3b04      	subs	r3, #4
 80063c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063c8:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <pxPortInitialiseStack+0x64>)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3b14      	subs	r3, #20
 80063d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3b04      	subs	r3, #4
 80063de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f06f 0202 	mvn.w	r2, #2
 80063e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3b20      	subs	r3, #32
 80063ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ee:	68fb      	ldr	r3, [r7, #12]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	08006401 	.word	0x08006401

08006400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800640a:	4b12      	ldr	r3, [pc, #72]	; (8006454 <prvTaskExitError+0x54>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006412:	d00a      	beq.n	800642a <prvTaskExitError+0x2a>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60fb      	str	r3, [r7, #12]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <prvTaskExitError+0x28>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	60bb      	str	r3, [r7, #8]
}
 800643c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800643e:	bf00      	nop
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0fc      	beq.n	8006440 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	2000000c 	.word	0x2000000c
	...

08006460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <pxCurrentTCBConst2>)
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f380 8809 	msr	PSP, r0
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst2>:
 8006480:	20000a58 	.word	0x20000a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006488:	4808      	ldr	r0, [pc, #32]	; (80064ac <prvPortStartFirstTask+0x24>)
 800648a:	6800      	ldr	r0, [r0, #0]
 800648c:	6800      	ldr	r0, [r0, #0]
 800648e:	f380 8808 	msr	MSP, r0
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f380 8814 	msr	CONTROL, r0
 800649a:	b662      	cpsie	i
 800649c:	b661      	cpsie	f
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	df00      	svc	0
 80064a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064aa:	bf00      	nop
 80064ac:	e000ed08 	.word	0xe000ed08

080064b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064b6:	4b46      	ldr	r3, [pc, #280]	; (80065d0 <xPortStartScheduler+0x120>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <xPortStartScheduler+0x124>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10a      	bne.n	80064d6 <xPortStartScheduler+0x26>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064d6:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <xPortStartScheduler+0x120>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xPortStartScheduler+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10a      	bne.n	80064f6 <xPortStartScheduler+0x46>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <xPortStartScheduler+0x12c>)
 80064f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <xPortStartScheduler+0x130>)
 800651c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800651e:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <xPortStartScheduler+0x134>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006524:	e009      	b.n	800653a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006526:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <xPortStartScheduler+0x134>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <xPortStartScheduler+0x134>)
 800652e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d0ef      	beq.n	8006526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <xPortStartScheduler+0x134>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00a      	beq.n	8006568 <xPortStartScheduler+0xb8>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60bb      	str	r3, [r7, #8]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <xPortStartScheduler+0x134>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <xPortStartScheduler+0x134>)
 8006570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <xPortStartScheduler+0x134>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <xPortStartScheduler+0x134>)
 800657c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <xPortStartScheduler+0x138>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <xPortStartScheduler+0x138>)
 800658c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <xPortStartScheduler+0x138>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <xPortStartScheduler+0x138>)
 8006598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800659c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800659e:	f000 f8dd 	bl	800675c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <xPortStartScheduler+0x13c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065a8:	f000 f8fc 	bl	80067a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <xPortStartScheduler+0x140>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <xPortStartScheduler+0x140>)
 80065b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065b8:	f7ff ff66 	bl	8006488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065bc:	f7ff f848 	bl	8005650 <vTaskSwitchContext>
	prvTaskExitError();
 80065c0:	f7ff ff1e 	bl	8006400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	e000ed00 	.word	0xe000ed00
 80065d4:	410fc271 	.word	0x410fc271
 80065d8:	410fc270 	.word	0x410fc270
 80065dc:	e000e400 	.word	0xe000e400
 80065e0:	20001084 	.word	0x20001084
 80065e4:	20001088 	.word	0x20001088
 80065e8:	e000ed20 	.word	0xe000ed20
 80065ec:	2000000c 	.word	0x2000000c
 80065f0:	e000ef34 	.word	0xe000ef34

080065f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	607b      	str	r3, [r7, #4]
}
 800660c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <vPortEnterCritical+0x58>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	4a0d      	ldr	r2, [pc, #52]	; (800664c <vPortEnterCritical+0x58>)
 8006616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <vPortEnterCritical+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <vPortEnterCritical+0x5c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <vPortEnterCritical+0x4c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vPortEnterCritical+0x4a>
	}
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	2000000c 	.word	0x2000000c
 8006650:	e000ed04 	.word	0xe000ed04

08006654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <vPortExitCritical+0x50>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <vPortExitCritical+0x24>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	607b      	str	r3, [r7, #4]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <vPortExitCritical+0x50>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <vPortExitCritical+0x50>)
 8006680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <vPortExitCritical+0x50>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <vPortExitCritical+0x42>
 800668a:	2300      	movs	r3, #0
 800668c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f383 8811 	msr	BASEPRI, r3
}
 8006694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	2000000c 	.word	0x2000000c
	...

080066b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066b0:	f3ef 8009 	mrs	r0, PSP
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <pxCurrentTCBConst>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	f01e 0f10 	tst.w	lr, #16
 80066c0:	bf08      	it	eq
 80066c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	6010      	str	r0, [r2, #0]
 80066cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066d4:	f380 8811 	msr	BASEPRI, r0
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f7fe ffb6 	bl	8005650 <vTaskSwitchContext>
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	f380 8811 	msr	BASEPRI, r0
 80066ec:	bc09      	pop	{r0, r3}
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	6808      	ldr	r0, [r1, #0]
 80066f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f6:	f01e 0f10 	tst.w	lr, #16
 80066fa:	bf08      	it	eq
 80066fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006700:	f380 8809 	msr	PSP, r0
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst>:
 8006710:	20000a58 	.word	0x20000a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006732:	f7fe fed3 	bl	80054dc <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <xPortSysTickHandler+0x40>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <vPortSetupTimerInterrupt+0x38>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <vPortSetupTimerInterrupt+0x3c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <vPortSetupTimerInterrupt+0x40>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <vPortSetupTimerInterrupt+0x44>)
 800677a:	3b01      	subs	r3, #1
 800677c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800677e:	4b04      	ldr	r3, [pc, #16]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e000e010 	.word	0xe000e010
 8006794:	e000e018 	.word	0xe000e018
 8006798:	20000000 	.word	0x20000000
 800679c:	10624dd3 	.word	0x10624dd3
 80067a0:	e000e014 	.word	0xe000e014

080067a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067b4 <vPortEnableVFP+0x10>
 80067a8:	6801      	ldr	r1, [r0, #0]
 80067aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ae:	6001      	str	r1, [r0, #0]
 80067b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067b2:	bf00      	nop
 80067b4:	e000ed88 	.word	0xe000ed88

080067b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067be:	f3ef 8305 	mrs	r3, IPSR
 80067c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d914      	bls.n	80067f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <vPortValidateInterruptPriority+0x70>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <vPortValidateInterruptPriority+0x74>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	7afa      	ldrb	r2, [r7, #11]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d20a      	bcs.n	80067f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <vPortValidateInterruptPriority+0x78>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <vPortValidateInterruptPriority+0x7c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d90a      	bls.n	800681a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	603b      	str	r3, [r7, #0]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <vPortValidateInterruptPriority+0x60>
	}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	e000e3f0 	.word	0xe000e3f0
 800682c:	20001084 	.word	0x20001084
 8006830:	e000ed0c 	.word	0xe000ed0c
 8006834:	20001088 	.word	0x20001088

08006838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006844:	f7fe fd8e 	bl	8005364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <pvPortMalloc+0x180>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006850:	f000 f920 	bl	8006a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <pvPortMalloc+0x184>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	f040 8093 	bne.w	8006988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01d      	beq.n	80068a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006868:	2208      	movs	r2, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d014      	beq.n	80068a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f023 0307 	bic.w	r3, r3, #7
 8006880:	3308      	adds	r3, #8
 8006882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <pvPortMalloc+0x6c>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d06e      	beq.n	8006988 <pvPortMalloc+0x150>
 80068aa:	4b45      	ldr	r3, [pc, #276]	; (80069c0 <pvPortMalloc+0x188>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d869      	bhi.n	8006988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068b4:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <pvPortMalloc+0x18c>)
 80068b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068b8:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <pvPortMalloc+0x18c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068be:	e004      	b.n	80068ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d903      	bls.n	80068dc <pvPortMalloc+0xa4>
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068dc:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <pvPortMalloc+0x180>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d050      	beq.n	8006988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2208      	movs	r2, #8
 80068ec:	4413      	add	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	2308      	movs	r3, #8
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d91f      	bls.n	8006948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <pvPortMalloc+0xf8>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	613b      	str	r3, [r7, #16]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006942:	69b8      	ldr	r0, [r7, #24]
 8006944:	f000 f908 	bl	8006b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <pvPortMalloc+0x188>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <pvPortMalloc+0x188>)
 8006954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006956:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <pvPortMalloc+0x188>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <pvPortMalloc+0x190>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d203      	bcs.n	800696a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006962:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <pvPortMalloc+0x188>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <pvPortMalloc+0x190>)
 8006968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x184>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	431a      	orrs	r2, r3
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <pvPortMalloc+0x194>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a11      	ldr	r2, [pc, #68]	; (80069cc <pvPortMalloc+0x194>)
 8006986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006988:	f7fe fcfa 	bl	8005380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <pvPortMalloc+0x174>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <pvPortMalloc+0x172>
	return pvReturn;
 80069ac:	69fb      	ldr	r3, [r7, #28]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20004c94 	.word	0x20004c94
 80069bc:	20004ca8 	.word	0x20004ca8
 80069c0:	20004c98 	.word	0x20004c98
 80069c4:	20004c8c 	.word	0x20004c8c
 80069c8:	20004c9c 	.word	0x20004c9c
 80069cc:	20004ca0 	.word	0x20004ca0

080069d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04d      	beq.n	8006a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069e2:	2308      	movs	r3, #8
 80069e4:	425b      	negs	r3, r3
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <vPortFree+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <vPortFree+0x44>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <vPortFree+0x62>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60bb      	str	r3, [r7, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <vPortFree+0xb8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01e      	beq.n	8006a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11a      	bne.n	8006a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <vPortFree+0xb8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a58:	f7fe fc84 	bl	8005364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <vPortFree+0xbc>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <vPortFree+0xbc>)
 8006a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 f874 	bl	8006b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vPortFree+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a06      	ldr	r2, [pc, #24]	; (8006a90 <vPortFree+0xc0>)
 8006a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a7a:	f7fe fc81 	bl	8005380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20004ca8 	.word	0x20004ca8
 8006a8c:	20004c98 	.word	0x20004c98
 8006a90:	20004ca4 	.word	0x20004ca4

08006a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <prvHeapInit+0xac>)
 8006aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3307      	adds	r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <prvHeapInit+0xac>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <prvHeapInit+0xb0>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <prvHeapInit+0xb0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <prvHeapInit+0xb4>)
 8006af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvHeapInit+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <prvHeapInit+0xb4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvHeapInit+0xb4>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <prvHeapInit+0xb8>)
 8006b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <prvHeapInit+0xbc>)
 8006b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <prvHeapInit+0xc0>)
 8006b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	2000108c 	.word	0x2000108c
 8006b44:	20004c8c 	.word	0x20004c8c
 8006b48:	20004c94 	.word	0x20004c94
 8006b4c:	20004c9c 	.word	0x20004c9c
 8006b50:	20004c98 	.word	0x20004c98
 8006b54:	20004ca8 	.word	0x20004ca8

08006b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b60:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <prvInsertBlockIntoFreeList+0xac>)
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e002      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x14>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8f7      	bhi.n	8006b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d108      	bne.n	8006b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d118      	bne.n	8006be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d00d      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	e008      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e003      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d002      	beq.n	8006bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20004c8c 	.word	0x20004c8c
 8006c08:	20004c94 	.word	0x20004c94

08006c0c <__libc_init_array>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4d0d      	ldr	r5, [pc, #52]	; (8006c44 <__libc_init_array+0x38>)
 8006c10:	4c0d      	ldr	r4, [pc, #52]	; (8006c48 <__libc_init_array+0x3c>)
 8006c12:	1b64      	subs	r4, r4, r5
 8006c14:	10a4      	asrs	r4, r4, #2
 8006c16:	2600      	movs	r6, #0
 8006c18:	42a6      	cmp	r6, r4
 8006c1a:	d109      	bne.n	8006c30 <__libc_init_array+0x24>
 8006c1c:	4d0b      	ldr	r5, [pc, #44]	; (8006c4c <__libc_init_array+0x40>)
 8006c1e:	4c0c      	ldr	r4, [pc, #48]	; (8006c50 <__libc_init_array+0x44>)
 8006c20:	f000 f8f2 	bl	8006e08 <_init>
 8006c24:	1b64      	subs	r4, r4, r5
 8006c26:	10a4      	asrs	r4, r4, #2
 8006c28:	2600      	movs	r6, #0
 8006c2a:	42a6      	cmp	r6, r4
 8006c2c:	d105      	bne.n	8006c3a <__libc_init_array+0x2e>
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c34:	4798      	blx	r3
 8006c36:	3601      	adds	r6, #1
 8006c38:	e7ee      	b.n	8006c18 <__libc_init_array+0xc>
 8006c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3e:	4798      	blx	r3
 8006c40:	3601      	adds	r6, #1
 8006c42:	e7f2      	b.n	8006c2a <__libc_init_array+0x1e>
 8006c44:	08006f6c 	.word	0x08006f6c
 8006c48:	08006f6c 	.word	0x08006f6c
 8006c4c:	08006f6c 	.word	0x08006f6c
 8006c50:	08006f70 	.word	0x08006f70

08006c54 <__retarget_lock_acquire_recursive>:
 8006c54:	4770      	bx	lr

08006c56 <__retarget_lock_release_recursive>:
 8006c56:	4770      	bx	lr

08006c58 <memcpy>:
 8006c58:	440a      	add	r2, r1
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c60:	d100      	bne.n	8006c64 <memcpy+0xc>
 8006c62:	4770      	bx	lr
 8006c64:	b510      	push	{r4, lr}
 8006c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c6e:	4291      	cmp	r1, r2
 8006c70:	d1f9      	bne.n	8006c66 <memcpy+0xe>
 8006c72:	bd10      	pop	{r4, pc}

08006c74 <memset>:
 8006c74:	4402      	add	r2, r0
 8006c76:	4603      	mov	r3, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <_free_r>:
 8006c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c86:	2900      	cmp	r1, #0
 8006c88:	d044      	beq.n	8006d14 <_free_r+0x90>
 8006c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8e:	9001      	str	r0, [sp, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f1a1 0404 	sub.w	r4, r1, #4
 8006c96:	bfb8      	it	lt
 8006c98:	18e4      	addlt	r4, r4, r3
 8006c9a:	f000 f8a9 	bl	8006df0 <__malloc_lock>
 8006c9e:	4a1e      	ldr	r2, [pc, #120]	; (8006d18 <_free_r+0x94>)
 8006ca0:	9801      	ldr	r0, [sp, #4]
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	b933      	cbnz	r3, 8006cb4 <_free_r+0x30>
 8006ca6:	6063      	str	r3, [r4, #4]
 8006ca8:	6014      	str	r4, [r2, #0]
 8006caa:	b003      	add	sp, #12
 8006cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cb0:	f000 b8a4 	b.w	8006dfc <__malloc_unlock>
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d908      	bls.n	8006cca <_free_r+0x46>
 8006cb8:	6825      	ldr	r5, [r4, #0]
 8006cba:	1961      	adds	r1, r4, r5
 8006cbc:	428b      	cmp	r3, r1
 8006cbe:	bf01      	itttt	eq
 8006cc0:	6819      	ldreq	r1, [r3, #0]
 8006cc2:	685b      	ldreq	r3, [r3, #4]
 8006cc4:	1949      	addeq	r1, r1, r5
 8006cc6:	6021      	streq	r1, [r4, #0]
 8006cc8:	e7ed      	b.n	8006ca6 <_free_r+0x22>
 8006cca:	461a      	mov	r2, r3
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	b10b      	cbz	r3, 8006cd4 <_free_r+0x50>
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	d9fa      	bls.n	8006cca <_free_r+0x46>
 8006cd4:	6811      	ldr	r1, [r2, #0]
 8006cd6:	1855      	adds	r5, r2, r1
 8006cd8:	42a5      	cmp	r5, r4
 8006cda:	d10b      	bne.n	8006cf4 <_free_r+0x70>
 8006cdc:	6824      	ldr	r4, [r4, #0]
 8006cde:	4421      	add	r1, r4
 8006ce0:	1854      	adds	r4, r2, r1
 8006ce2:	42a3      	cmp	r3, r4
 8006ce4:	6011      	str	r1, [r2, #0]
 8006ce6:	d1e0      	bne.n	8006caa <_free_r+0x26>
 8006ce8:	681c      	ldr	r4, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	6053      	str	r3, [r2, #4]
 8006cee:	4421      	add	r1, r4
 8006cf0:	6011      	str	r1, [r2, #0]
 8006cf2:	e7da      	b.n	8006caa <_free_r+0x26>
 8006cf4:	d902      	bls.n	8006cfc <_free_r+0x78>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	6003      	str	r3, [r0, #0]
 8006cfa:	e7d6      	b.n	8006caa <_free_r+0x26>
 8006cfc:	6825      	ldr	r5, [r4, #0]
 8006cfe:	1961      	adds	r1, r4, r5
 8006d00:	428b      	cmp	r3, r1
 8006d02:	bf04      	itt	eq
 8006d04:	6819      	ldreq	r1, [r3, #0]
 8006d06:	685b      	ldreq	r3, [r3, #4]
 8006d08:	6063      	str	r3, [r4, #4]
 8006d0a:	bf04      	itt	eq
 8006d0c:	1949      	addeq	r1, r1, r5
 8006d0e:	6021      	streq	r1, [r4, #0]
 8006d10:	6054      	str	r4, [r2, #4]
 8006d12:	e7ca      	b.n	8006caa <_free_r+0x26>
 8006d14:	b003      	add	sp, #12
 8006d16:	bd30      	pop	{r4, r5, pc}
 8006d18:	20004cb0 	.word	0x20004cb0

08006d1c <cleanup_glue>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	6809      	ldr	r1, [r1, #0]
 8006d22:	4605      	mov	r5, r0
 8006d24:	b109      	cbz	r1, 8006d2a <cleanup_glue+0xe>
 8006d26:	f7ff fff9 	bl	8006d1c <cleanup_glue>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d32:	f7ff bfa7 	b.w	8006c84 <_free_r>
	...

08006d38 <_reclaim_reent>:
 8006d38:	4b2c      	ldr	r3, [pc, #176]	; (8006dec <_reclaim_reent+0xb4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4283      	cmp	r3, r0
 8006d3e:	b570      	push	{r4, r5, r6, lr}
 8006d40:	4604      	mov	r4, r0
 8006d42:	d051      	beq.n	8006de8 <_reclaim_reent+0xb0>
 8006d44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d46:	b143      	cbz	r3, 8006d5a <_reclaim_reent+0x22>
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d14a      	bne.n	8006de4 <_reclaim_reent+0xac>
 8006d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	b111      	cbz	r1, 8006d5a <_reclaim_reent+0x22>
 8006d54:	4620      	mov	r0, r4
 8006d56:	f7ff ff95 	bl	8006c84 <_free_r>
 8006d5a:	6961      	ldr	r1, [r4, #20]
 8006d5c:	b111      	cbz	r1, 8006d64 <_reclaim_reent+0x2c>
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7ff ff90 	bl	8006c84 <_free_r>
 8006d64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d66:	b111      	cbz	r1, 8006d6e <_reclaim_reent+0x36>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f7ff ff8b 	bl	8006c84 <_free_r>
 8006d6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d70:	b111      	cbz	r1, 8006d78 <_reclaim_reent+0x40>
 8006d72:	4620      	mov	r0, r4
 8006d74:	f7ff ff86 	bl	8006c84 <_free_r>
 8006d78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006d7a:	b111      	cbz	r1, 8006d82 <_reclaim_reent+0x4a>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f7ff ff81 	bl	8006c84 <_free_r>
 8006d82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d84:	b111      	cbz	r1, 8006d8c <_reclaim_reent+0x54>
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7ff ff7c 	bl	8006c84 <_free_r>
 8006d8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d8e:	b111      	cbz	r1, 8006d96 <_reclaim_reent+0x5e>
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7ff ff77 	bl	8006c84 <_free_r>
 8006d96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d98:	b111      	cbz	r1, 8006da0 <_reclaim_reent+0x68>
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff ff72 	bl	8006c84 <_free_r>
 8006da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006da2:	b111      	cbz	r1, 8006daa <_reclaim_reent+0x72>
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7ff ff6d 	bl	8006c84 <_free_r>
 8006daa:	69a3      	ldr	r3, [r4, #24]
 8006dac:	b1e3      	cbz	r3, 8006de8 <_reclaim_reent+0xb0>
 8006dae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006db0:	4620      	mov	r0, r4
 8006db2:	4798      	blx	r3
 8006db4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006db6:	b1b9      	cbz	r1, 8006de8 <_reclaim_reent+0xb0>
 8006db8:	4620      	mov	r0, r4
 8006dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dbe:	f7ff bfad 	b.w	8006d1c <cleanup_glue>
 8006dc2:	5949      	ldr	r1, [r1, r5]
 8006dc4:	b941      	cbnz	r1, 8006dd8 <_reclaim_reent+0xa0>
 8006dc6:	3504      	adds	r5, #4
 8006dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dca:	2d80      	cmp	r5, #128	; 0x80
 8006dcc:	68d9      	ldr	r1, [r3, #12]
 8006dce:	d1f8      	bne.n	8006dc2 <_reclaim_reent+0x8a>
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f7ff ff57 	bl	8006c84 <_free_r>
 8006dd6:	e7ba      	b.n	8006d4e <_reclaim_reent+0x16>
 8006dd8:	680e      	ldr	r6, [r1, #0]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff ff52 	bl	8006c84 <_free_r>
 8006de0:	4631      	mov	r1, r6
 8006de2:	e7ef      	b.n	8006dc4 <_reclaim_reent+0x8c>
 8006de4:	2500      	movs	r5, #0
 8006de6:	e7ef      	b.n	8006dc8 <_reclaim_reent+0x90>
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	bf00      	nop
 8006dec:	20000010 	.word	0x20000010

08006df0 <__malloc_lock>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__malloc_lock+0x8>)
 8006df2:	f7ff bf2f 	b.w	8006c54 <__retarget_lock_acquire_recursive>
 8006df6:	bf00      	nop
 8006df8:	20004cac 	.word	0x20004cac

08006dfc <__malloc_unlock>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	; (8006e04 <__malloc_unlock+0x8>)
 8006dfe:	f7ff bf2a 	b.w	8006c56 <__retarget_lock_release_recursive>
 8006e02:	bf00      	nop
 8006e04:	20004cac 	.word	0x20004cac

08006e08 <_init>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr

08006e14 <_fini>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr
