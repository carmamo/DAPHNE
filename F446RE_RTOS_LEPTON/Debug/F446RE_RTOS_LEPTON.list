
F446RE_RTOS_LEPTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08011be0  08011be0  00021be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e34  08011e34  000326f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011e34  08011e34  00021e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e3c  08011e3c  000326f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e3c  08011e3c  00021e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011e40  08011e40  00021e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000026f8  20000000  08011e44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010cac  200026f8  0801453c  000326f8  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200133a4  0801453c  000333a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000326f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000310ee  00000000  00000000  00032728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f1b  00000000  00000000  00063816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025e8  00000000  00000000  00069738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002398  00000000  00000000  0006bd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ace0  00000000  00000000  0006e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ef63  00000000  00000000  00098d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec0d8  00000000  00000000  000c7cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b3dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a530  00000000  00000000  001b3e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200026f8 	.word	0x200026f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011bc8 	.word	0x08011bc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200026fc 	.word	0x200026fc
 800020c:	08011bc8 	.word	0x08011bc8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
	__WFI();
 8000518:	bf30      	wfi
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <lepton_Init>:

static lepton_t dev;


void lepton_Init(I2C_HandleTypeDef *i2c, SPI_HandleTypeDef *spi, UART_HandleTypeDef *uart, GPIO_TypeDef *port, uint16_t pin)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
 8000530:	603b      	str	r3, [r7, #0]
	dev.spiHandle = spi;
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <lepton_Init+0x38>)
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	6053      	str	r3, [r2, #4]
	dev.uartHandle = uart;
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <lepton_Init+0x38>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6113      	str	r3, [r2, #16]
	dev.i2cHandle = i2c;
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <lepton_Init+0x38>)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	6013      	str	r3, [r2, #0]
	dev.CS_port = port;
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <lepton_Init+0x38>)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	6093      	str	r3, [r2, #8]
	dev.CS_pin = pin;
 800054a:	4a04      	ldr	r2, [pc, #16]	; (800055c <lepton_Init+0x38>)
 800054c:	8b3b      	ldrh	r3, [r7, #24]
 800054e:	8193      	strh	r3, [r2, #12]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	20002714 	.word	0x20002714

08000560 <lepton_GetReg>:
	array[1] = reg;
	return HAL_I2C_Master_Transmit(dev.i2cHandle, LEPTON_I2C_ADDR, array, 2, 100);
}

HAL_StatusTypeDef lepton_GetReg(uint16_t reg, uint16_t *rxdata)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af04      	add	r7, sp, #16
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(dev.i2cHandle, LEPTON_I2C_ADDR, reg, 2, (uint8_t *)rxdata, 2, 100);
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <lepton_GetReg+0x50>)
 800056e:	6818      	ldr	r0, [r3, #0]
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	2302      	movs	r3, #2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2302      	movs	r3, #2
 8000580:	2154      	movs	r1, #84	; 0x54
 8000582:	f002 f873 	bl	800266c <HAL_I2C_Mem_Read>
 8000586:	4603      	mov	r3, r0
 8000588:	73fb      	strb	r3, [r7, #15]
	*rxdata = (*rxdata >> 8 | *rxdata << 8);
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b21b      	sxth	r3, r3
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	801a      	strh	r2, [r3, #0]
	return status;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]

//	lepton_SetReg(reg);
//	return HAL_I2C_Master_Receive(dev.i2cHandle, LEPTON_I2C_ADDR, (uint8_t *)rxdata, 2, 100);

}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20002714 	.word	0x20002714

080005b4 <lepton_SetData>:
HAL_StatusTypeDef lepton_SetData(uint8_t *txdata, uint16_t size)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af04      	add	r7, sp, #16
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint16_t *rxdata = (uint16_t *)malloc(sizeof(uint16_t));
 80005c0:	2002      	movs	r0, #2
 80005c2:	f011 f965 	bl	8011890 <malloc>
 80005c6:	4603      	mov	r3, r0
 80005c8:	60fb      	str	r3, [r7, #12]

	do
	{
		lepton_GetReg(0x0002, rxdata);
 80005ca:	68f9      	ldr	r1, [r7, #12]
 80005cc:	2002      	movs	r0, #2
 80005ce:	f7ff ffc7 	bl	8000560 <lepton_GetReg>
	}
	while(*rxdata & 0x01);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f5      	bne.n	80005ca <lepton_SetData+0x16>

//	HAL_I2C_Master_Transmit(dev.i2cHandle, LEPTON_I2C_ADDR, txdata, size, 100);

	// Write data, 0x0008 Data 0 Address (beginning of data block)
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0008, 2, txdata, size, 100);
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <lepton_SetData+0xa4>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	887b      	ldrh	r3, [r7, #2]
 80005e4:	2264      	movs	r2, #100	; 0x64
 80005e6:	9202      	str	r2, [sp, #8]
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2302      	movs	r3, #2
 80005f0:	2208      	movs	r2, #8
 80005f2:	2154      	movs	r1, #84	; 0x54
 80005f4:	f001 ff40 	bl	8002478 <HAL_I2C_Mem_Write>
 80005f8:	4603      	mov	r3, r0
 80005fa:	72fb      	strb	r3, [r7, #11]
	if(status != HAL_OK)
 80005fc:	7afb      	ldrb	r3, [r7, #11]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d004      	beq.n	800060c <lepton_SetData+0x58>
	{
		free(rxdata);
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f011 f94c 	bl	80118a0 <free>
		return status;
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	e021      	b.n	8000650 <lepton_SetData+0x9c>
	}

	// Write data length, 0x0006 Data Length Register
	size = size >> 1;
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	085b      	lsrs	r3, r3, #1
 8000610:	b29b      	uxth	r3, r3
 8000612:	807b      	strh	r3, [r7, #2]
	size = (size >> 8 | size << 8);
 8000614:	887b      	ldrh	r3, [r7, #2]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b29b      	uxth	r3, r3
 800061a:	b21a      	sxth	r2, r3
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	807b      	strh	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0006, 2, (uint8_t *)&size, 2, 100);
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <lepton_SetData+0xa4>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9302      	str	r3, [sp, #8]
 8000632:	2302      	movs	r3, #2
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	1cbb      	adds	r3, r7, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2302      	movs	r3, #2
 800063c:	2206      	movs	r2, #6
 800063e:	2154      	movs	r1, #84	; 0x54
 8000640:	f001 ff1a 	bl	8002478 <HAL_I2C_Mem_Write>
 8000644:	4603      	mov	r3, r0
 8000646:	72fb      	strb	r3, [r7, #11]

	free(rxdata);
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f011 f929 	bl	80118a0 <free>
	return status;
 800064e:	7afb      	ldrb	r3, [r7, #11]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20002714 	.word	0x20002714

0800065c <lepton_command>:
//	*rxdata = (*rxdata >> 8 | *rxdata << 8);
	return status;
}

HAL_StatusTypeDef lepton_command(uint16_t cmd)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af04      	add	r7, sp, #16
 8000662:	4603      	mov	r3, r0
 8000664:	80fb      	strh	r3, [r7, #6]
	uint16_t *rxdata = (uint16_t *)malloc(sizeof(uint16_t));
 8000666:	2002      	movs	r0, #2
 8000668:	f011 f912 	bl	8011890 <malloc>
 800066c:	4603      	mov	r3, r0
 800066e:	60fb      	str	r3, [r7, #12]

	do
	{
		lepton_GetReg(0x02, rxdata);
 8000670:	68f9      	ldr	r1, [r7, #12]
 8000672:	2002      	movs	r0, #2
 8000674:	f7ff ff74 	bl	8000560 <lepton_GetReg>
	}
	while(*rxdata & 0x01);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1f5      	bne.n	8000670 <lepton_command+0x14>

	free(rxdata);
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f011 f90b 	bl	80118a0 <free>
	cmd = (cmd >> 8 | cmd << 8);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29b      	uxth	r3, r3
 8000690:	b21a      	sxth	r2, r3
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b21b      	sxth	r3, r3
 8000698:	4313      	orrs	r3, r2
 800069a:	b21b      	sxth	r3, r3
 800069c:	b29b      	uxth	r3, r3
 800069e:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0004, 2, (uint8_t *)&cmd, 2, 100);
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <lepton_command+0x68>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	2302      	movs	r3, #2
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	1dbb      	adds	r3, r7, #6
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	2204      	movs	r2, #4
 80006b4:	2154      	movs	r1, #84	; 0x54
 80006b6:	f001 fedf 	bl	8002478 <HAL_I2C_Mem_Write>
 80006ba:	4603      	mov	r3, r0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20002714 	.word	0x20002714

080006c8 <lepton_vsync>:
	/* 0x0E00 (RAD Module ID) + 0x10 (Command Base - Ctrl enable) + 0x01 (Set) + 0x4000 (Protection Bit) = 0x4E11 */
	return lepton_command(0x4E11);
}

HAL_StatusTypeDef lepton_vsync(bool vsync_enabled)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	uint8_t *data = (uint8_t *)malloc(4*sizeof(uint8_t));
 80006d2:	2004      	movs	r0, #4
 80006d4:	f011 f8dc 	bl	8011890 <malloc>
 80006d8:	4603      	mov	r3, r0
 80006da:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<4; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	e007      	b.n	80006f2 <lepton_vsync+0x2a>
		{
			data[i] = 0x00;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	4413      	add	r3, r2
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<4; i++)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	ddf4      	ble.n	80006e2 <lepton_vsync+0x1a>
		}

		if(vsync_enabled) data[1] = 0x05;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <lepton_vsync+0x3e>
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3301      	adds	r3, #1
 8000702:	2205      	movs	r2, #5
 8000704:	701a      	strb	r2, [r3, #0]

		lepton_SetData(data, 4);
 8000706:	2104      	movs	r1, #4
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f7ff ff53 	bl	80005b4 <lepton_SetData>
		free(data);
 800070e:	68b8      	ldr	r0, [r7, #8]
 8000710:	f011 f8c6 	bl	80118a0 <free>

		/* 0x0800 (OEM Module ID) + 0x54 (Command Base - Ctrl enable) + 0x01 (Set) + 0x4000 (Protection Bit) = 0x4855 */
		return lepton_command(0x4855);
 8000714:	f644 0055 	movw	r0, #18517	; 0x4855
 8000718:	f7ff ffa0 	bl	800065c <lepton_command>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fe1d 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f851 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f000 f975 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 800073a:	f000 f94b 	bl	80009d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800073e:	f000 f91d 	bl	800097c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000742:	f000 f8b5 	bl	80008b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000746:	f000 f8e1 	bl	800090c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 800074a:	f010 fae5 	bl	8010d18 <MX_USB_DEVICE_Init>

  SEGGER_SYSVIEW_Conf();					/* Configure and initialize SystemView */
 800074e:	f00e fc39 	bl	800efc4 <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 8000752:	f00e f9f9 	bl	800eb48 <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 8000756:	f00f fd13 	bl	8010180 <SEGGER_SYSVIEW_Start>

  lepton_Init(&hi2c1, &hspi1, &huart2, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <main+0x80>)
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <main+0x84>)
 8000762:	4913      	ldr	r1, [pc, #76]	; (80007b0 <main+0x88>)
 8000764:	4813      	ldr	r0, [pc, #76]	; (80007b4 <main+0x8c>)
 8000766:	f7ff fedd 	bl	8000524 <lepton_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800076a:	f00a fbd5 	bl	800af18 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  FramePoolHandle = osMemoryPoolNew(MEMPOOL_OBJECTS, FRAME_SIZE_U8, &FramePool_attributes);
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <main+0x90>)
 8000770:	f242 6170 	movw	r1, #9840	; 0x2670
 8000774:	2004      	movs	r0, #4
 8000776:	f00a fd9b 	bl	800b2b0 <osMemoryPoolNew>
 800077a:	4603      	mov	r3, r0
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <main+0x94>)
 800077e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTx */
  uartTxHandle = osThreadNew(prvPrintImageTask, NULL, &uartTx_attributes);
 8000780:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <main+0x98>)
 8000782:	2100      	movs	r1, #0
 8000784:	480f      	ldr	r0, [pc, #60]	; (80007c4 <main+0x9c>)
 8000786:	f00a fc11 	bl	800afac <osThreadNew>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <main+0xa0>)
 800078e:	6013      	str	r3, [r2, #0]

  /* creation of VoSPI */
  VoSPIHandle = osThreadNew(prvCaptureFramesTask, NULL, &VoSPI_attributes);
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <main+0xa4>)
 8000792:	2100      	movs	r1, #0
 8000794:	480e      	ldr	r0, [pc, #56]	; (80007d0 <main+0xa8>)
 8000796:	f00a fc09 	bl	800afac <osThreadNew>
 800079a:	4603      	mov	r3, r0
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <main+0xac>)
 800079e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007a0:	f00a fbde 	bl	800af60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <main+0x7c>
 80007a6:	bf00      	nop
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20002894 	.word	0x20002894
 80007b0:	2000277c 	.word	0x2000277c
 80007b4:	20002728 	.word	0x20002728
 80007b8:	08011d74 	.word	0x08011d74
 80007bc:	2000c2a4 	.word	0x2000c2a4
 80007c0:	08011d2c 	.word	0x08011d2c
 80007c4:	08000bdd 	.word	0x08000bdd
 80007c8:	200028d8 	.word	0x200028d8
 80007cc:	08011d50 	.word	0x08011d50
 80007d0:	08000c7d 	.word	0x08000c7d
 80007d4:	200028dc 	.word	0x200028dc

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2234      	movs	r2, #52	; 0x34
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f011 f880 	bl	80118ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <SystemClock_Config+0xd0>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <SystemClock_Config+0xd0>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <SystemClock_Config+0xd0>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <SystemClock_Config+0xd4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <SystemClock_Config+0xd4>)
 8000822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <SystemClock_Config+0xd4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000834:	2301      	movs	r3, #1
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800084c:	23a8      	movs	r3, #168	; 0xa8
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000854:	2307      	movs	r3, #7
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4618      	mov	r0, r3
 8000862:	f004 fdf3 	bl	800544c <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800086c:	f000 fab8 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2302      	movs	r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800087c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000886:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2105      	movs	r1, #5
 800088e:	4618      	mov	r0, r3
 8000890:	f003 ff36 	bl	8004700 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800089a:	f000 faa1 	bl	8000de0 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	; 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C1_Init+0x50>)
 80008b6:	4a13      	ldr	r2, [pc, #76]	; (8000904 <MX_I2C1_Init+0x54>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C1_Init+0x50>)
 80008bc:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_I2C1_Init+0x58>)
 80008be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_I2C1_Init+0x50>)
 80008ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_I2C1_Init+0x50>)
 80008ee:	f001 fc7f 	bl	80021f0 <HAL_I2C_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f8:	f000 fa72 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20002728 	.word	0x20002728
 8000904:	40005400 	.word	0x40005400
 8000908:	000186a0 	.word	0x000186a0

0800090c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_SPI1_Init+0x68>)
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <MX_SPI1_Init+0x6c>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI1_Init+0x68>)
 8000918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800091c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_SPI1_Init+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_SPI1_Init+0x68>)
 8000926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800092a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI1_Init+0x68>)
 800092e:	2202      	movs	r2, #2
 8000930:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_SPI1_Init+0x68>)
 8000934:	2201      	movs	r2, #1
 8000936:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI1_Init+0x68>)
 800093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI1_Init+0x68>)
 8000942:	2208      	movs	r2, #8
 8000944:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SPI1_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI1_Init+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SPI1_Init+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI1_Init+0x68>)
 800095a:	220a      	movs	r2, #10
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_SPI1_Init+0x68>)
 8000960:	f005 f816 	bl	8005990 <HAL_SPI_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800096a:	f000 fa39 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000277c 	.word	0x2000277c
 8000978:	40013000 	.word	0x40013000

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_USART2_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000988:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <MX_USART2_UART_Init+0x54>)
 800098a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f005 ff1e 	bl	80067f4 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 fa0f 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20002894 	.word	0x20002894
 80009cc:	40004400 	.word	0x40004400
 80009d0:	001e8480 	.word	0x001e8480

080009d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_DMA_Init+0x4c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <MX_DMA_Init+0x4c>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_DMA_Init+0x4c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	2038      	movs	r0, #56	; 0x38
 80009fc:	f000 fdf8 	bl	80015f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a00:	2038      	movs	r0, #56	; 0x38
 8000a02:	f000 fe11 	bl	8001628 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2105      	movs	r1, #5
 8000a0a:	203b      	movs	r0, #59	; 0x3b
 8000a0c:	f000 fdf0 	bl	80015f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a10:	203b      	movs	r0, #59	; 0x3b
 8000a12:	f000 fe09 	bl	8001628 <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a3b      	ldr	r2, [pc, #236]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <MX_GPIO_Init+0x128>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000ab0:	4827      	ldr	r0, [pc, #156]	; (8000b50 <MX_GPIO_Init+0x12c>)
 8000ab2:	f001 fb6b 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	4826      	ldr	r0, [pc, #152]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000abc:	f001 fb66 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481e      	ldr	r0, [pc, #120]	; (8000b50 <MX_GPIO_Init+0x12c>)
 8000ad8:	f001 f9c4 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLIR_VSYNC_Pin */
  GPIO_InitStruct.Pin = FLIR_VSYNC_Pin;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLIR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4818      	ldr	r0, [pc, #96]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000af4:	f001 f9b6 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLIR_PWR_DWN_L_Pin FLIR_RESET_L_Pin */
  GPIO_InitStruct.Pin = FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin;
 8000af8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480f      	ldr	r0, [pc, #60]	; (8000b50 <MX_GPIO_Init+0x12c>)
 8000b12:	f001 f9a7 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b16:	2340      	movs	r3, #64	; 0x40
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000b2e:	f001 f999 	bl	8001e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2105      	movs	r1, #5
 8000b36:	2028      	movs	r0, #40	; 0x28
 8000b38:	f000 fd5a 	bl	80015f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b3c:	2028      	movs	r0, #40	; 0x28
 8000b3e:	f000 fd73 	bl	8001628 <HAL_NVIC_EnableIRQ>

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020400 	.word	0x40020400

08000b58 <HAL_GPIO_EXTI_Callback>:
 * memory pool. If memory allocation is successful, it starts a DMA
 * transfer to receive data from the hspi1 peripheral and disables the
 * EXTI15_10_IRQn interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000b62:	f00f fdd5 	bl	8010710 <SEGGER_SYSVIEW_RecordEnterISR>
	if (GPIO_Pin == FLIR_VSYNC_Pin)
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b6c:	d115      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0x42>
	{
		current_frame = (lepton_frame *)osMemoryPoolAlloc(FramePoolHandle, 0U);
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00a fc71 	bl	800b45c <osMemoryPoolAlloc>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <HAL_GPIO_EXTI_Callback+0x54>)
 8000b7e:	6013      	str	r3, [r2, #0]
		if(current_frame != NULL)
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_GPIO_EXTI_Callback+0x54>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d008      	beq.n	8000b9a <HAL_GPIO_EXTI_Callback+0x42>
		{
			osThreadFlagsSet(VoSPIHandle, 0x1U);
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00a fa9e 	bl	800b0d0 <osThreadFlagsSet>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000b94:	2028      	movs	r0, #40	; 0x28
 8000b96:	f000 fd55 	bl	8001644 <HAL_NVIC_DisableIRQ>
		}
	}
	SEGGER_SYSVIEW_RecordExitISR();
 8000b9a:	f00f fdfb 	bl	8010794 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000c2a4 	.word	0x2000c2a4
 8000bac:	2000c2a8 	.word	0x2000c2a8
 8000bb0:	200028dc 	.word	0x200028dc

08000bb4 <HAL_SPI_RxCpltCallback>:
 * @brief
 *
 * @param hspi
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000bbc:	f00f fda8 	bl	8010710 <SEGGER_SYSVIEW_RecordEnterISR>
	osThreadFlagsSet(VoSPIHandle, 0x2U);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_SPI_RxCpltCallback+0x24>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f00a fa82 	bl	800b0d0 <osThreadFlagsSet>
	SEGGER_SYSVIEW_RecordExitISR();
 8000bcc:	f00f fde2 	bl	8010794 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200028dc 	.word	0x200028dc

08000bdc <prvPrintImageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvPrintImageTask */
void prvPrintImageTask(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		/* Wait for completed frame */
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be8:	2100      	movs	r1, #0
 8000bea:	2001      	movs	r0, #1
 8000bec:	f00a fac4 	bl	800b178 <osThreadFlagsWait>

		for(int i = 0; i < 60; i++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e017      	b.n	8000c26 <prvPrintImageTask+0x4a>
		{
			memcpy((void *)&frame_packet[2 + (i*80)], (void *)complete_frame->y16[i].data, 160);
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	3302      	adds	r3, #2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <prvPrintImageTask+0x8c>)
 8000c06:	1898      	adds	r0, r3, r2
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <prvPrintImageTask+0x90>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	21a4      	movs	r1, #164	; 0xa4
 8000c10:	fb01 f303 	mul.w	r3, r1, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	3304      	adds	r3, #4
 8000c18:	22a0      	movs	r2, #160	; 0xa0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f010 fe58 	bl	80118d0 <memcpy>
		for(int i = 0; i < 60; i++)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b3b      	cmp	r3, #59	; 0x3b
 8000c2a:	dde4      	ble.n	8000bf6 <prvPrintImageTask+0x1a>
		}

		osMemoryPoolFree(FramePoolHandle, complete_frame);
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <prvPrintImageTask+0x94>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <prvPrintImageTask+0x90>)
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00a fc86 	bl	800b548 <osMemoryPoolFree>
		complete_frame = NULL;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <prvPrintImageTask+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]


		/* Transmit frame */
		if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <prvPrintImageTask+0x98>)
 8000c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d104      	bne.n	8000c58 <prvPrintImageTask+0x7c>
		{
			CDC_Transmit_FS((uint8_t *)frame_packet, (FRAME_SIZE_U8 + 4));
 8000c4e:	f242 6174 	movw	r1, #9844	; 0x2674
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <prvPrintImageTask+0x8c>)
 8000c54:	f010 f91e 	bl	8010e94 <CDC_Transmit_FS>
		}


		__HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <prvPrintImageTask+0x9c>)
 8000c5a:	2228      	movs	r2, #40	; 0x28
 8000c5c:	615a      	str	r2, [r3, #20]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5e:	2028      	movs	r0, #40	; 0x28
 8000c60:	f000 fce2 	bl	8001628 <HAL_NVIC_EnableIRQ>
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000c64:	e7be      	b.n	8000be4 <prvPrintImageTask+0x8>
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	2000c2ac 	.word	0x2000c2ac
 8000c70:	2000c2a4 	.word	0x2000c2a4
 8000c74:	2001178c 	.word	0x2001178c
 8000c78:	40013c00 	.word	0x40013c00

08000c7c <prvCaptureFramesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvCaptureFramesTask */
void prvCaptureFramesTask(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvCaptureFramesTask */


	HAL_Delay(100);
 8000c84:	2064      	movs	r0, #100	; 0x64
 8000c86:	f000 fbb3 	bl	80013f0 <HAL_Delay>
	HAL_GPIO_WritePin(FLIR_PWR_DWN_L_GPIO_Port, FLIR_PWR_DWN_L_Pin, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2140      	movs	r1, #64	; 0x40
 8000c8e:	4842      	ldr	r0, [pc, #264]	; (8000d98 <prvCaptureFramesTask+0x11c>)
 8000c90:	f001 fa7c 	bl	800218c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c94:	2064      	movs	r0, #100	; 0x64
 8000c96:	f000 fbab 	bl	80013f0 <HAL_Delay>
	HAL_GPIO_WritePin(FLIR_RESET_L_GPIO_Port, FLIR_RESET_L_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca0:	483d      	ldr	r0, [pc, #244]	; (8000d98 <prvCaptureFramesTask+0x11c>)
 8000ca2:	f001 fa73 	bl	800218c <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8000ca6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000caa:	f000 fba1 	bl	80013f0 <HAL_Delay>

	lepton_vsync(true);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fd0a 	bl	80006c8 <lepton_vsync>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	4838      	ldr	r0, [pc, #224]	; (8000d9c <prvCaptureFramesTask+0x120>)
 8000cba:	f001 fa67 	bl	800218c <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f00a fa57 	bl	800b178 <osThreadFlagsWait>

		HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame, FRAME_SIZE_U8);
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f242 6270 	movw	r2, #9840	; 0x2670
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4833      	ldr	r0, [pc, #204]	; (8000da4 <prvCaptureFramesTask+0x128>)
 8000cd6:	f004 fee5 	bl	8005aa4 <HAL_SPI_Receive_DMA>

		osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
 8000cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f00a fa49 	bl	800b178 <osThreadFlagsWait>


		if((current_frame->y16[59].header[0] & 0xff) == (FRAME_HEIGHT - 1))
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000cee:	f8b3 35cc 	ldrh.w	r3, [r3, #1484]	; 0x5cc
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b3b      	cmp	r3, #59	; 0x3b
 8000cf6:	d110      	bne.n	8000d1a <prvCaptureFramesTask+0x9e>
		{
			complete_frame = current_frame;
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a2a      	ldr	r2, [pc, #168]	; (8000da8 <prvCaptureFramesTask+0x12c>)
 8000cfe:	6013      	str	r3, [r2, #0]
			current_frame = NULL;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]

			lost_frame = 0;
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]

			osThreadFlagsSet(uartTxHandle, 0x1U);
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <prvCaptureFramesTask+0x134>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00a f9dc 	bl	800b0d0 <osThreadFlagsSet>
 8000d18:	e7d1      	b.n	8000cbe <prvCaptureFramesTask+0x42>

		}
		else
		{
			lost_frame++;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d24:	701a      	strb	r2, [r3, #0]

			if(lost_frame > 9)
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b09      	cmp	r3, #9
 8000d2c:	d921      	bls.n	8000d72 <prvCaptureFramesTask+0xf6>
			{
				// Synchronization Lost
				osDelay(185);
 8000d2e:	20b9      	movs	r0, #185	; 0xb9
 8000d30:	f00a faa3 	bl	800b27a <osDelay>
//					HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame, 1);
//					osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
//
//				} while((current_frame->y16[0].header[0] & 0xf00) == 0xf00);

				HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)current_frame , FRAME_SIZE_U8);
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f242 6270 	movw	r2, #9840	; 0x2670
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4819      	ldr	r0, [pc, #100]	; (8000da4 <prvCaptureFramesTask+0x128>)
 8000d40:	f004 feb0 	bl	8005aa4 <HAL_SPI_Receive_DMA>

				osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f00a fa14 	bl	800b178 <osThreadFlagsWait>

				complete_frame = current_frame;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <prvCaptureFramesTask+0x12c>)
 8000d56:	6013      	str	r3, [r2, #0]
				current_frame = NULL;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]

				lost_frame = 0;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <prvCaptureFramesTask+0x130>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

				osThreadFlagsSet(uartTxHandle, 0x1U);
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <prvCaptureFramesTask+0x134>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00a f9b0 	bl	800b0d0 <osThreadFlagsSet>
 8000d70:	e7a5      	b.n	8000cbe <prvCaptureFramesTask+0x42>
			}
			else
			{
				osMemoryPoolFree(FramePoolHandle, current_frame);
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <prvCaptureFramesTask+0x138>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00a fbe3 	bl	800b548 <osMemoryPoolFree>
				current_frame = NULL;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <prvCaptureFramesTask+0x124>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

				__HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <prvCaptureFramesTask+0x13c>)
 8000d8a:	2228      	movs	r2, #40	; 0x28
 8000d8c:	615a      	str	r2, [r3, #20]
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d8e:	2028      	movs	r0, #40	; 0x28
 8000d90:	f000 fc4a 	bl	8001628 <HAL_NVIC_EnableIRQ>
		osThreadFlagsWait(0x1U, osFlagsWaitAny, osWaitForever);
 8000d94:	e793      	b.n	8000cbe <prvCaptureFramesTask+0x42>
 8000d96:	bf00      	nop
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	2000c2a8 	.word	0x2000c2a8
 8000da4:	2000277c 	.word	0x2000277c
 8000da8:	2000c2ac 	.word	0x2000c2ac
 8000dac:	2000c2a0 	.word	0x2000c2a0
 8000db0:	200028d8 	.word	0x200028d8
 8000db4:	2000c2a4 	.word	0x2000c2a4
 8000db8:	40013c00 	.word	0x40013c00

08000dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dce:	f000 faef 	bl	80013b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010000 	.word	0x40010000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_MspInit+0x54>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_MspInit+0x54>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x54>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_MspInit+0x54>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_MspInit+0x54>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_MspInit+0x54>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	f06f 0001 	mvn.w	r0, #1
 8000e32:	f000 fbdd 	bl	80015f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_I2C_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12c      	bne.n	8000ec0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e88:	2312      	movs	r3, #18
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e94:	2304      	movs	r3, #4
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <HAL_I2C_MspInit+0x8c>)
 8000ea0:	f000 ffe0 	bl	8001e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	; (800103c <HAL_SPI_MspInit+0x168>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 809e 	bne.w	8001034 <HAL_SPI_MspInit+0x160>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	4a4f      	ldr	r2, [pc, #316]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f06:	6453      	str	r3, [r2, #68]	; 0x44
 8000f08:	4b4d      	ldr	r3, [pc, #308]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a48      	ldr	r2, [pc, #288]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b46      	ldr	r3, [pc, #280]	; (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f30:	23e0      	movs	r3, #224	; 0xe0
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f40:	2305      	movs	r3, #5
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	483e      	ldr	r0, [pc, #248]	; (8001044 <HAL_SPI_MspInit+0x170>)
 8000f4c:	f000 ff8a 	bl	8001e64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f52:	4a3e      	ldr	r2, [pc, #248]	; (800104c <HAL_SPI_MspInit+0x178>)
 8000f54:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f56:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f58:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f5c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f70:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f72:	4b35      	ldr	r3, [pc, #212]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f78:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f80:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f82:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fa6:	4828      	ldr	r0, [pc, #160]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000fa8:	f000 fb5a 	bl	8001660 <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 8000fb2:	f7ff ff15 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a23      	ldr	r2, [pc, #140]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000fba:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fbc:	4a22      	ldr	r2, [pc, #136]	; (8001048 <HAL_SPI_MspInit+0x174>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fc4:	4a23      	ldr	r2, [pc, #140]	; (8001054 <HAL_SPI_MspInit+0x180>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000fce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fd2:	2240      	movs	r2, #64	; 0x40
 8000fd4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8001002:	2204      	movs	r2, #4
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8001008:	2203      	movs	r2, #3
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 800101a:	f000 fb21 	bl	8001660 <HAL_DMA_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 8001024:	f7ff fedc 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 800102c:	649a      	str	r2, [r3, #72]	; 0x48
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_SPI_MspInit+0x17c>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013000 	.word	0x40013000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000
 8001048:	200027d4 	.word	0x200027d4
 800104c:	40026410 	.word	0x40026410
 8001050:	20002834 	.word	0x20002834
 8001054:	40026458 	.word	0x40026458

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_UART_MspInit+0x94>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d133      	bne.n	80010e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_UART_MspInit+0x98>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_UART_MspInit+0x98>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0x98>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0x98>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0x98>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_UART_MspInit+0x98>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b2:	230c      	movs	r3, #12
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c2:	2307      	movs	r3, #7
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <HAL_UART_MspInit+0x9c>)
 80010ce:	f000 fec9 	bl	8001e64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2105      	movs	r1, #5
 80010d6:	2026      	movs	r0, #38	; 0x26
 80010d8:	f000 fa8a 	bl	80015f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010dc:	2026      	movs	r0, #38	; 0x26
 80010de:	f000 faa3 	bl	8001628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40004400 	.word	0x40004400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_InitTick+0xd4>)
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	4a2e      	ldr	r2, [pc, #184]	; (80011cc <HAL_InitTick+0xd4>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6453      	str	r3, [r2, #68]	; 0x44
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_InitTick+0xd4>)
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001124:	f107 020c 	add.w	r2, r7, #12
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fc00 	bl	8004934 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001134:	f003 fbea 	bl	800490c <HAL_RCC_GetPCLK2Freq>
 8001138:	4603      	mov	r3, r0
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	4a23      	ldr	r2, [pc, #140]	; (80011d0 <HAL_InitTick+0xd8>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	3b01      	subs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_InitTick+0xdc>)
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_InitTick+0xe0>)
 8001150:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_InitTick+0xdc>)
 8001154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001158:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_InitTick+0xdc>)
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_InitTick+0xdc>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_InitTick+0xdc>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_InitTick+0xdc>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001172:	4818      	ldr	r0, [pc, #96]	; (80011d4 <HAL_InitTick+0xdc>)
 8001174:	f005 f890 	bl	8006298 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800117e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001182:	2b00      	cmp	r3, #0
 8001184:	d11b      	bne.n	80011be <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <HAL_InitTick+0xdc>)
 8001188:	f005 f8e0 	bl	800634c <HAL_TIM_Base_Start_IT>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001196:	2b00      	cmp	r3, #0
 8001198:	d111      	bne.n	80011be <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800119a:	2019      	movs	r0, #25
 800119c:	f000 fa44 	bl	8001628 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	d808      	bhi.n	80011b8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011a6:	2200      	movs	r2, #0
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	2019      	movs	r0, #25
 80011ac:	f000 fa20 	bl	80015f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_InitTick+0xe4>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e002      	b.n	80011be <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	431bde83 	.word	0x431bde83
 80011d4:	2000c2b0 	.word	0x2000c2b0
 80011d8:	40010000 	.word	0x40010000
 80011dc:	20002588 	.word	0x20002588

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001212:	f005 f90b 	bl	800642c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000c2b0 	.word	0x2000c2b0

08001220 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <USART2_IRQHandler+0x10>)
 8001226:	f005 fb33 	bl	8006890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20002894 	.word	0x20002894

08001234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLIR_VSYNC_Pin);
 8001238:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800123c:	f000 ffc0 	bl	80021c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001240:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001244:	f000 ffbc 	bl	80021c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <DMA2_Stream0_IRQHandler+0x10>)
 8001252:	f000 fb9d 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200027d4 	.word	0x200027d4

08001260 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DMA2_Stream3_IRQHandler+0x10>)
 8001266:	f000 fb93 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20002834 	.word	0x20002834

08001274 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <OTG_FS_IRQHandler+0x10>)
 800127a:	f002 f8cf 	bl	800341c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20012c68 	.word	0x20012c68

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f010 fabe 	bl	8011838 <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20020000 	.word	0x20020000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	2000c2f8 	.word	0x2000c2f8
 80012f0:	200133a8 	.word	0x200133a8

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SystemInit+0x20>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <SystemInit+0x20>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800131e:	490e      	ldr	r1, [pc, #56]	; (8001358 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001334:	4c0b      	ldr	r4, [pc, #44]	; (8001364 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001342:	f7ff ffd7 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f010 fa7d 	bl	8011844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134a:	f7ff f9ed 	bl	8000728 <main>
  bx  lr    
 800134e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	200026f8 	.word	0x200026f8
  ldr r2, =_sidata
 800135c:	08011e44 	.word	0x08011e44
  ldr r2, =_sbss
 8001360:	200026f8 	.word	0x200026f8
  ldr r4, =_ebss
 8001364:	200133a4 	.word	0x200133a4

08001368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_Init+0x40>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_Init+0x40>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_Init+0x40>)
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f920 	bl	80015da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	200f      	movs	r0, #15
 800139c:	f7ff feac 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a0:	f7ff fd24 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	2000258c 	.word	0x2000258c
 80013d4:	2000c2fc 	.word	0x2000c2fc

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000c2fc 	.word	0x2000c2fc

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000258c 	.word	0x2000258c

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db12      	blt.n	8001510 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	490a      	ldr	r1, [pc, #40]	; (800151c <__NVIC_DisableIRQ+0x44>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	3320      	adds	r3, #32
 8001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001504:	f3bf 8f4f 	dsb	sy
}
 8001508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800150a:	f3bf 8f6f 	isb	sy
}
 800150e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff28 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001602:	f7ff ff3d 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001606:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	f7ff ffb1 	bl	8001574 <NVIC_EncodePriority>
 8001612:	4602      	mov	r2, r0
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff80 	bl	8001520 <__NVIC_SetPriority>
}
 8001620:	bf00      	nop
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff30 	bl	800149c <__NVIC_EnableIRQ>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff40 	bl	80014d8 <__NVIC_DisableIRQ>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff feb4 	bl	80013d8 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e099      	b.n	80017b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169c:	e00f      	b.n	80016be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800169e:	f7ff fe9b 	bl	80013d8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d908      	bls.n	80016be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2220      	movs	r2, #32
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2203      	movs	r2, #3
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e078      	b.n	80017b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e8      	bne.n	800169e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <HAL_DMA_Init+0x158>)
 80016d8:	4013      	ands	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	2b04      	cmp	r3, #4
 8001716:	d107      	bne.n	8001728 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	4313      	orrs	r3, r2
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f023 0307 	bic.w	r3, r3, #7
 800173e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4313      	orrs	r3, r2
 8001748:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	2b04      	cmp	r3, #4
 8001750:	d117      	bne.n	8001782 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4313      	orrs	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00e      	beq.n	8001782 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fb01 	bl	8001d6c <DMA_CheckFifoParam>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800177e:	2301      	movs	r3, #1
 8001780:	e016      	b.n	80017b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fab8 	bl	8001d00 <DMA_CalcBaseAndBitshift>
 8001790:	4603      	mov	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001798:	223f      	movs	r2, #63	; 0x3f
 800179a:	409a      	lsls	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	f010803f 	.word	0xf010803f

080017bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_DMA_Start_IT+0x26>
 80017de:	2302      	movs	r3, #2
 80017e0:	e040      	b.n	8001864 <HAL_DMA_Start_IT+0xa8>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d12f      	bne.n	8001856 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fa4a 	bl	8001ca4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	223f      	movs	r2, #63	; 0x3f
 8001816:	409a      	lsls	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0216 	orr.w	r2, r2, #22
 800182a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0208 	orr.w	r2, r2, #8
 8001842:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e005      	b.n	8001862 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001862:	7dfb      	ldrb	r3, [r7, #23]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800187a:	f7ff fdad 	bl	80013d8 <HAL_GetTick>
 800187e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d008      	beq.n	800189e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e052      	b.n	8001944 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0216 	bic.w	r2, r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_DMA_Abort+0x62>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0208 	bic.w	r2, r2, #8
 80018dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ee:	e013      	b.n	8001918 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f0:	f7ff fd72 	bl	80013d8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d90c      	bls.n	8001918 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e015      	b.n	8001944 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e4      	bne.n	80018f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	223f      	movs	r2, #63	; 0x3f
 800192c:	409a      	lsls	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d004      	beq.n	800196a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00c      	b.n	8001984 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800199c:	4b8e      	ldr	r3, [pc, #568]	; (8001bd8 <HAL_DMA_IRQHandler+0x248>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a8e      	ldr	r2, [pc, #568]	; (8001bdc <HAL_DMA_IRQHandler+0x24c>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0a9b      	lsrs	r3, r3, #10
 80019a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	2208      	movs	r2, #8
 80019bc:	409a      	lsls	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01a      	beq.n	80019fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0204 	bic.w	r2, r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2208      	movs	r2, #8
 80019ea:	409a      	lsls	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	2201      	movs	r2, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d012      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2201      	movs	r2, #1
 8001a20:	409a      	lsls	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f043 0202 	orr.w	r2, r3, #2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d012      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00b      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2204      	movs	r2, #4
 8001a56:	409a      	lsls	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f043 0204 	orr.w	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d043      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d03c      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d018      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d108      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d024      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
 8001abe:	e01f      	b.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
 8001ad0:	e016      	b.n	8001b00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0208 	bic.w	r2, r2, #8
 8001aee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	2220      	movs	r2, #32
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 808f 	beq.w	8001c30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8087 	beq.w	8001c30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2220      	movs	r2, #32
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d136      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0216 	bic.w	r2, r2, #22
 8001b48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <HAL_DMA_IRQHandler+0x1da>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	223f      	movs	r2, #63	; 0x3f
 8001b80:	409a      	lsls	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d07e      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
        }
        return;
 8001ba6:	e079      	b.n	8001c9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01d      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d031      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
 8001bd4:	e02c      	b.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
 8001bd6:	bf00      	nop
 8001bd8:	20002584 	.word	0x20002584
 8001bdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d023      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
 8001bf0:	e01e      	b.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10f      	bne.n	8001c20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0210 	bic.w	r2, r2, #16
 8001c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d032      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2205      	movs	r2, #5
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d307      	bcc.n	8001c78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f2      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x2cc>
 8001c76:	e000      	b.n	8001c7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c9c:	bf00      	nop
    }
  }
}
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d108      	bne.n	8001ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ce2:	e007      	b.n	8001cf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3b10      	subs	r3, #16
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <DMA_CalcBaseAndBitshift+0x64>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <DMA_CalcBaseAndBitshift+0x68>)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d909      	bls.n	8001d42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	1d1a      	adds	r2, r3, #4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d40:	e007      	b.n	8001d52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	aaaaaaab 	.word	0xaaaaaaab
 8001d68:	08011da4 	.word	0x08011da4

08001d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d11f      	bne.n	8001dc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d856      	bhi.n	8001e3a <DMA_CheckFifoParam+0xce>
 8001d8c:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <DMA_CheckFifoParam+0x28>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001da5 	.word	0x08001da5
 8001d98:	08001db7 	.word	0x08001db7
 8001d9c:	08001da5 	.word	0x08001da5
 8001da0:	08001e3b 	.word	0x08001e3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d046      	beq.n	8001e3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db4:	e043      	b.n	8001e3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dbe:	d140      	bne.n	8001e42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc4:	e03d      	b.n	8001e42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dce:	d121      	bne.n	8001e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d837      	bhi.n	8001e46 <DMA_CheckFifoParam+0xda>
 8001dd6:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <DMA_CheckFifoParam+0x70>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001df3 	.word	0x08001df3
 8001de4:	08001ded 	.word	0x08001ded
 8001de8:	08001e05 	.word	0x08001e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      break;
 8001df0:	e030      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d025      	beq.n	8001e4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e02:	e022      	b.n	8001e4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e0c:	d11f      	bne.n	8001e4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e12:	e01c      	b.n	8001e4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d903      	bls.n	8001e22 <DMA_CheckFifoParam+0xb6>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d003      	beq.n	8001e28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e20:	e018      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
      break;
 8001e26:	e015      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      break;
 8001e38:	e00b      	b.n	8001e52 <DMA_CheckFifoParam+0xe6>
      break;
 8001e3a:	bf00      	nop
 8001e3c:	e00a      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e3e:	bf00      	nop
 8001e40:	e008      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e42:	bf00      	nop
 8001e44:	e006      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e46:	bf00      	nop
 8001e48:	e004      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
    }
  } 
  
  return status; 
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e165      	b.n	800214c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 8154 	bne.w	8002146 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d005      	beq.n	8001eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d130      	bne.n	8001f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0201 	and.w	r2, r3, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d017      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d123      	bne.n	8001fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80ae 	beq.w	8002146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_GPIO_Init+0x300>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a5c      	ldr	r2, [pc, #368]	; (8002164 <HAL_GPIO_Init+0x300>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <HAL_GPIO_Init+0x300>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002006:	4a58      	ldr	r2, [pc, #352]	; (8002168 <HAL_GPIO_Init+0x304>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4f      	ldr	r2, [pc, #316]	; (800216c <HAL_GPIO_Init+0x308>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d025      	beq.n	800207e <HAL_GPIO_Init+0x21a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4e      	ldr	r2, [pc, #312]	; (8002170 <HAL_GPIO_Init+0x30c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <HAL_GPIO_Init+0x216>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4d      	ldr	r2, [pc, #308]	; (8002174 <HAL_GPIO_Init+0x310>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x212>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4c      	ldr	r2, [pc, #304]	; (8002178 <HAL_GPIO_Init+0x314>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x20e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4b      	ldr	r2, [pc, #300]	; (800217c <HAL_GPIO_Init+0x318>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x20a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4a      	ldr	r2, [pc, #296]	; (8002180 <HAL_GPIO_Init+0x31c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x206>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a49      	ldr	r2, [pc, #292]	; (8002184 <HAL_GPIO_Init+0x320>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x202>
 8002062:	2306      	movs	r3, #6
 8002064:	e00c      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 8002066:	2307      	movs	r3, #7
 8002068:	e00a      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 800206a:	2305      	movs	r3, #5
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 800206e:	2304      	movs	r3, #4
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	; (8002168 <HAL_GPIO_Init+0x304>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_GPIO_Init+0x324>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c2:	4a31      	ldr	r2, [pc, #196]	; (8002188 <HAL_GPIO_Init+0x324>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c8:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_GPIO_Init+0x324>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <HAL_GPIO_Init+0x324>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_GPIO_Init+0x324>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_GPIO_Init+0x324>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_GPIO_Init+0x324>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002140:	4a11      	ldr	r2, [pc, #68]	; (8002188 <HAL_GPIO_Init+0x324>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f ae96 	bls.w	8001e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40021400 	.word	0x40021400
 8002184:	40021800 	.word	0x40021800
 8002188:	40013c00 	.word	0x40013c00

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	619a      	str	r2, [r3, #24]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fcba 	bl	8000b58 <HAL_GPIO_EXTI_Callback>
  }
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40013c00 	.word	0x40013c00

080021f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e12b      	b.n	800245a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fe14 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	; 0x24
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002254:	f002 fb46 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 8002258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a81      	ldr	r2, [pc, #516]	; (8002464 <HAL_I2C_Init+0x274>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d807      	bhi.n	8002274 <HAL_I2C_Init+0x84>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a80      	ldr	r2, [pc, #512]	; (8002468 <HAL_I2C_Init+0x278>)
 8002268:	4293      	cmp	r3, r2
 800226a:	bf94      	ite	ls
 800226c:	2301      	movls	r3, #1
 800226e:	2300      	movhi	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e006      	b.n	8002282 <HAL_I2C_Init+0x92>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a7d      	ldr	r2, [pc, #500]	; (800246c <HAL_I2C_Init+0x27c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	bf94      	ite	ls
 800227c:	2301      	movls	r3, #1
 800227e:	2300      	movhi	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0e7      	b.n	800245a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a78      	ldr	r2, [pc, #480]	; (8002470 <HAL_I2C_Init+0x280>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9b      	lsrs	r3, r3, #18
 8002294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_I2C_Init+0x274>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d802      	bhi.n	80022c4 <HAL_I2C_Init+0xd4>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3301      	adds	r3, #1
 80022c2:	e009      	b.n	80022d8 <HAL_I2C_Init+0xe8>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	4a69      	ldr	r2, [pc, #420]	; (8002474 <HAL_I2C_Init+0x284>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	3301      	adds	r3, #1
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	430b      	orrs	r3, r1
 80022de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	495c      	ldr	r1, [pc, #368]	; (8002464 <HAL_I2C_Init+0x274>)
 80022f4:	428b      	cmp	r3, r1
 80022f6:	d819      	bhi.n	800232c <HAL_I2C_Init+0x13c>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e59      	subs	r1, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fbb1 f3f3 	udiv	r3, r1, r3
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	f640 73fc 	movw	r3, #4092	; 0xffc
 800230c:	400b      	ands	r3, r1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_I2C_Init+0x138>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e59      	subs	r1, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002320:	3301      	adds	r3, #1
 8002322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002326:	e051      	b.n	80023cc <HAL_I2C_Init+0x1dc>
 8002328:	2304      	movs	r3, #4
 800232a:	e04f      	b.n	80023cc <HAL_I2C_Init+0x1dc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d111      	bne.n	8002358 <HAL_I2C_Init+0x168>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1e58      	subs	r0, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	440b      	add	r3, r1
 8002342:	fbb0 f3f3 	udiv	r3, r0, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	e012      	b.n	800237e <HAL_I2C_Init+0x18e>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e58      	subs	r0, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	0099      	lsls	r1, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	fbb0 f3f3 	udiv	r3, r0, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Init+0x196>
 8002382:	2301      	movs	r3, #1
 8002384:	e022      	b.n	80023cc <HAL_I2C_Init+0x1dc>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10e      	bne.n	80023ac <HAL_I2C_Init+0x1bc>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e58      	subs	r0, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	440b      	add	r3, r1
 800239c:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023aa:	e00f      	b.n	80023cc <HAL_I2C_Init+0x1dc>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e58      	subs	r0, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	0099      	lsls	r1, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	6809      	ldr	r1, [r1, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6911      	ldr	r1, [r2, #16]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68d2      	ldr	r2, [r2, #12]
 8002406:	4311      	orrs	r1, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	430b      	orrs	r3, r1
 800240e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	000186a0 	.word	0x000186a0
 8002468:	001e847f 	.word	0x001e847f
 800246c:	003d08ff 	.word	0x003d08ff
 8002470:	431bde83 	.word	0x431bde83
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	460b      	mov	r3, r1
 800248c:	813b      	strh	r3, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002492:	f7fe ffa1 	bl	80013d8 <HAL_GetTick>
 8002496:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	f040 80d9 	bne.w	8002658 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2319      	movs	r3, #25
 80024ac:	2201      	movs	r2, #1
 80024ae:	496d      	ldr	r1, [pc, #436]	; (8002664 <HAL_I2C_Mem_Write+0x1ec>)
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fc7f 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
 80024be:	e0cc      	b.n	800265a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_I2C_Mem_Write+0x56>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0c5      	b.n	800265a <HAL_I2C_Mem_Write+0x1e2>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d007      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2221      	movs	r2, #33	; 0x21
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a4d      	ldr	r2, [pc, #308]	; (8002668 <HAL_I2C_Mem_Write+0x1f0>)
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002536:	88f8      	ldrh	r0, [r7, #6]
 8002538:	893a      	ldrh	r2, [r7, #8]
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4603      	mov	r3, r0
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fab6 	bl	8002ab8 <I2C_RequestMemoryWrite>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d052      	beq.n	80025f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e081      	b.n	800265a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fd00 	bl	8002f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b04      	cmp	r3, #4
 800256c:	d107      	bne.n	800257e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06b      	b.n	800265a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d11b      	bne.n	80025f8 <HAL_I2C_Mem_Write+0x180>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d017      	beq.n	80025f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1aa      	bne.n	8002556 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fcec 	bl	8002fe2 <I2C_WaitOnBTFFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	2b04      	cmp	r3, #4
 8002616:	d107      	bne.n	8002628 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e016      	b.n	800265a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	00100002 	.word	0x00100002
 8002668:	ffff0000 	.word	0xffff0000

0800266c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4603      	mov	r3, r0
 800267c:	817b      	strh	r3, [r7, #10]
 800267e:	460b      	mov	r3, r1
 8002680:	813b      	strh	r3, [r7, #8]
 8002682:	4613      	mov	r3, r2
 8002684:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002686:	f7fe fea7 	bl	80013d8 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b20      	cmp	r3, #32
 8002696:	f040 8208 	bne.w	8002aaa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2319      	movs	r3, #25
 80026a0:	2201      	movs	r2, #1
 80026a2:	497b      	ldr	r1, [pc, #492]	; (8002890 <HAL_I2C_Mem_Read+0x224>)
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fb85 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
 80026b2:	e1fb      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Mem_Read+0x56>
 80026be:	2302      	movs	r3, #2
 80026c0:	e1f4      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d007      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2222      	movs	r2, #34	; 0x22
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2240      	movs	r2, #64	; 0x40
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <HAL_I2C_Mem_Read+0x228>)
 8002728:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800272a:	88f8      	ldrh	r0, [r7, #6]
 800272c:	893a      	ldrh	r2, [r7, #8]
 800272e:	8979      	ldrh	r1, [r7, #10]
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4603      	mov	r3, r0
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fa52 	bl	8002be4 <I2C_RequestMemoryRead>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1b0      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d113      	bne.n	800277a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	623b      	str	r3, [r7, #32]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e184      	b.n	8002a84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	2b01      	cmp	r3, #1
 8002780:	d11b      	bne.n	80027ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e164      	b.n	8002a84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d11b      	bne.n	80027fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	e144      	b.n	8002a84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002810:	e138      	b.n	8002a84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	2b03      	cmp	r3, #3
 8002818:	f200 80f1 	bhi.w	80029fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b01      	cmp	r3, #1
 8002822:	d123      	bne.n	800286c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fc1b 	bl	8003064 <I2C_WaitOnRXNEFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e139      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800286a:	e10b      	b.n	8002a84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b02      	cmp	r3, #2
 8002872:	d14e      	bne.n	8002912 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	2200      	movs	r2, #0
 800287c:	4906      	ldr	r1, [pc, #24]	; (8002898 <HAL_I2C_Mem_Read+0x22c>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fa98 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e10e      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
 800288e:	bf00      	nop
 8002890:	00100002 	.word	0x00100002
 8002894:	ffff0000 	.word	0xffff0000
 8002898:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002910:	e0b8      	b.n	8002a84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002918:	2200      	movs	r2, #0
 800291a:	4966      	ldr	r1, [pc, #408]	; (8002ab4 <HAL_I2C_Mem_Read+0x448>)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fa49 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0bf      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	2200      	movs	r2, #0
 8002976:	494f      	ldr	r1, [pc, #316]	; (8002ab4 <HAL_I2C_Mem_Read+0x448>)
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fa1b 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e091      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029fc:	e042      	b.n	8002a84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fb2e 	bl	8003064 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e04c      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d118      	bne.n	8002a84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f47f aec2 	bne.w	8002812 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3728      	adds	r7, #40	; 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	00010004 	.word	0x00010004

08002ab8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	817b      	strh	r3, [r7, #10]
 8002aca:	460b      	mov	r3, r1
 8002acc:	813b      	strh	r3, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f960 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b08:	d103      	bne.n	8002b12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e05f      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	6a3a      	ldr	r2, [r7, #32]
 8002b2a:	492d      	ldr	r1, [pc, #180]	; (8002be0 <I2C_RequestMemoryWrite+0x128>)
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f998 	bl	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e04c      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b54:	6a39      	ldr	r1, [r7, #32]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa02 	bl	8002f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d107      	bne.n	8002b7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e02b      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b84:	893b      	ldrh	r3, [r7, #8]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	611a      	str	r2, [r3, #16]
 8002b8e:	e021      	b.n	8002bd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b90:	893b      	ldrh	r3, [r7, #8]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f9dc 	bl	8002f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e005      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bca:	893b      	ldrh	r3, [r7, #8]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	00010002 	.word	0x00010002

08002be4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	817b      	strh	r3, [r7, #10]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	813b      	strh	r3, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f8c2 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c44:	d103      	bne.n	8002c4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0aa      	b.n	8002da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	4952      	ldr	r1, [pc, #328]	; (8002db0 <I2C_RequestMemoryRead+0x1cc>)
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f8fa 	bl	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e097      	b.n	8002da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f964 	bl	8002f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e076      	b.n	8002da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc0:	893b      	ldrh	r3, [r7, #8]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	611a      	str	r2, [r3, #16]
 8002cca:	e021      	b.n	8002d10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	6a39      	ldr	r1, [r7, #32]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f93e 	bl	8002f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d107      	bne.n	8002d02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e050      	b.n	8002da8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d06:	893b      	ldrh	r3, [r7, #8]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	6a39      	ldr	r1, [r7, #32]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f923 	bl	8002f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d107      	bne.n	8002d38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e035      	b.n	8002da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f82b 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d72:	d103      	bne.n	8002d7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e013      	b.n	8002da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d80:	897b      	ldrh	r3, [r7, #10]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	6a3a      	ldr	r2, [r7, #32]
 8002d94:	4906      	ldr	r1, [pc, #24]	; (8002db0 <I2C_RequestMemoryRead+0x1cc>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f863 	bl	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	00010002 	.word	0x00010002

08002db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc4:	e025      	b.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dcc:	d021      	beq.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fe fb03 	bl	80013d8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d116      	bne.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f043 0220 	orr.w	r2, r3, #32
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e023      	b.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d10d      	bne.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	43da      	mvns	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	e00c      	b.n	8002e52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d0b6      	beq.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e70:	e051      	b.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e80:	d123      	bne.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e046      	b.n	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ed0:	d021      	beq.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe fa81 	bl	80013d8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d116      	bne.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e020      	b.n	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10c      	bne.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf14      	ite	ne
 8002f32:	2301      	movne	r3, #1
 8002f34:	2300      	moveq	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	e00b      	b.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	43da      	mvns	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d18d      	bne.n	8002e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f6c:	e02d      	b.n	8002fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f8ce 	bl	8003110 <I2C_IsAcknowledgeFailed>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e02d      	b.n	8002fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f84:	d021      	beq.n	8002fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7fe fa27 	bl	80013d8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d116      	bne.n	8002fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e007      	b.n	8002fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd4:	2b80      	cmp	r3, #128	; 0x80
 8002fd6:	d1ca      	bne.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fee:	e02d      	b.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f88d 	bl	8003110 <I2C_IsAcknowledgeFailed>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e02d      	b.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003006:	d021      	beq.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003008:	f7fe f9e6 	bl	80013d8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e007      	b.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b04      	cmp	r3, #4
 8003058:	d1ca      	bne.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003070:	e042      	b.n	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b10      	cmp	r3, #16
 800307e:	d119      	bne.n	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0210 	mvn.w	r2, #16
 8003088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e029      	b.n	8003108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b4:	f7fe f990 	bl	80013d8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d116      	bne.n	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e007      	b.n	8003108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d1b5      	bne.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003126:	d11b      	bne.n	8003160 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003130:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800316e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003170:	b08f      	sub	sp, #60	; 0x3c
 8003172:	af0a      	add	r7, sp, #40	; 0x28
 8003174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e116      	b.n	80033ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f00d ffd4 	bl	8011148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 fb41 	bl	8007846 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	687e      	ldr	r6, [r7, #4]
 80031cc:	466d      	mov	r5, sp
 80031ce:	f106 0410 	add.w	r4, r6, #16
 80031d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031de:	e885 0003 	stmia.w	r5, {r0, r1}
 80031e2:	1d33      	adds	r3, r6, #4
 80031e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e6:	6838      	ldr	r0, [r7, #0]
 80031e8:	f004 fa18 	bl	800761c <USB_CoreInit>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0d7      	b.n	80033ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f004 fb2f 	bl	8007868 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e04a      	b.n	80032a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333d      	adds	r3, #61	; 0x3d
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	333c      	adds	r3, #60	; 0x3c
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	b298      	uxth	r0, r3
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3344      	adds	r3, #68	; 0x44
 800324c:	4602      	mov	r2, r0
 800324e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3340      	adds	r3, #64	; 0x40
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3348      	adds	r3, #72	; 0x48
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334c      	adds	r3, #76	; 0x4c
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3354      	adds	r3, #84	; 0x54
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3af      	bcc.n	8003210 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
 80032b4:	e044      	b.n	8003340 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3301      	adds	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3b5      	bcc.n	80032b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	687e      	ldr	r6, [r7, #4]
 8003352:	466d      	mov	r5, sp
 8003354:	f106 0410 	add.w	r4, r6, #16
 8003358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003360:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003364:	e885 0003 	stmia.w	r5, {r0, r1}
 8003368:	1d33      	adds	r3, r6, #4
 800336a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800336c:	6838      	ldr	r0, [r7, #0]
 800336e:	f004 fac7 	bl	8007900 <USB_DevInit>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e014      	b.n	80033ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2b01      	cmp	r3, #1
 800339a:	d102      	bne.n	80033a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f001 f98b 	bl	80046b8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 fc09 	bl	8008bbe <USB_DevDisconnect>

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_PCD_Start+0x1c>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e020      	b.n	8003414 <HAL_PCD_Start+0x5e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d109      	bne.n	80033f6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d005      	beq.n	80033f6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 fa12 	bl	8007824 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f005 fbb9 	bl	8008b7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b08d      	sub	sp, #52	; 0x34
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f005 fc77 	bl	8008d26 <USB_GetMode>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 84b7 	bne.w	8003dae <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f005 fbdb 	bl	8008c00 <USB_ReadInterrupts>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 84ad 	beq.w	8003dac <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f005 fbc8 	bl	8008c00 <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d107      	bne.n	800348a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f002 0202 	and.w	r2, r2, #2
 8003488:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f005 fbb6 	bl	8008c00 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b10      	cmp	r3, #16
 800349c:	d161      	bne.n	8003562 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0210 	bic.w	r2, r2, #16
 80034ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	0c5b      	lsrs	r3, r3, #17
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d124      	bne.n	8003524 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d035      	beq.n	8003552 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	6a38      	ldr	r0, [r7, #32]
 80034fa:	f005 f9ed 	bl	80088d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800350a:	441a      	add	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800351c:	441a      	add	r2, r3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	621a      	str	r2, [r3, #32]
 8003522:	e016      	b.n	8003552 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	0c5b      	lsrs	r3, r3, #17
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	2b06      	cmp	r3, #6
 800352e:	d110      	bne.n	8003552 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003536:	2208      	movs	r2, #8
 8003538:	4619      	mov	r1, r3
 800353a:	6a38      	ldr	r0, [r7, #32]
 800353c:	f005 f9cc 	bl	80088d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	6a1a      	ldr	r2, [r3, #32]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800354c:	441a      	add	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0210 	orr.w	r2, r2, #16
 8003560:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f005 fb4a 	bl	8008c00 <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003572:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003576:	f040 80a7 	bne.w	80036c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f005 fb4f 	bl	8008c26 <USB_ReadDevAllOutEpInterrupt>
 8003588:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800358a:	e099      	b.n	80036c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 808e 	beq.w	80036b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f005 fb73 	bl	8008c8e <USB_ReadDevOutEPInterrupt>
 80035a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00c      	beq.n	80035ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	461a      	mov	r2, r3
 80035c2:	2301      	movs	r3, #1
 80035c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 feef 	bl	80043ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e4:	461a      	mov	r2, r3
 80035e6:	2308      	movs	r3, #8
 80035e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 ffc5 	bl	800457c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	461a      	mov	r2, r3
 800360a:	2310      	movs	r3, #16
 800360c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d030      	beq.n	800367a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d109      	bne.n	8003638 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003636:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	3304      	adds	r3, #4
 800364c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	78db      	ldrb	r3, [r3, #3]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d108      	bne.n	8003668 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f00d fe8c 	bl	8011380 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	461a      	mov	r2, r3
 8003676:	2302      	movs	r3, #2
 8003678:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	2320      	movs	r3, #32
 8003694:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ac:	461a      	mov	r2, r3
 80036ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	3301      	adds	r3, #1
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f47f af62 	bne.w	800358c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f005 fa97 	bl	8008c00 <USB_ReadInterrupts>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036dc:	f040 80db 	bne.w	8003896 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f005 fab8 	bl	8008c5a <USB_ReadDevAllInEpInterrupt>
 80036ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036f0:	e0cd      	b.n	800388e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80c2 	beq.w	8003882 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f005 fade 	bl	8008cca <USB_ReadDevInEPInterrupt>
 800370e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d057      	beq.n	80037ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	2201      	movs	r2, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43db      	mvns	r3, r3
 8003734:	69f9      	ldr	r1, [r7, #28]
 8003736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800373a:	4013      	ands	r3, r2
 800373c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374a:	461a      	mov	r2, r3
 800374c:	2301      	movs	r3, #1
 800374e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d132      	bne.n	80037be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	334c      	adds	r3, #76	; 0x4c
 8003768:	6819      	ldr	r1, [r3, #0]
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4403      	add	r3, r0
 8003778:	3348      	adds	r3, #72	; 0x48
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4419      	add	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4403      	add	r3, r0
 800378c:	334c      	adds	r3, #76	; 0x4c
 800378e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d113      	bne.n	80037be <HAL_PCD_IRQHandler+0x3a2>
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3354      	adds	r3, #84	; 0x54
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d108      	bne.n	80037be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037b6:	461a      	mov	r2, r3
 80037b8:	2101      	movs	r1, #1
 80037ba:	f005 fae5 	bl	8008d88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4619      	mov	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f00d fd56 	bl	8011276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	461a      	mov	r2, r3
 80037e2:	2308      	movs	r3, #8
 80037e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	461a      	mov	r2, r3
 80037fe:	2310      	movs	r3, #16
 8003800:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	461a      	mov	r2, r3
 800381a:	2340      	movs	r3, #64	; 0x40
 800381c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d023      	beq.n	8003870 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800382a:	6a38      	ldr	r0, [r7, #32]
 800382c:	f004 f9c6 	bl	8007bbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	3338      	adds	r3, #56	; 0x38
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	78db      	ldrb	r3, [r3, #3]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2200      	movs	r2, #0
 8003850:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	b2db      	uxtb	r3, r3
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f00d fda3 	bl	80113a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386a:	461a      	mov	r2, r3
 800386c:	2302      	movs	r3, #2
 800386e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800387a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fd08 	bl	8004292 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	3301      	adds	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	f47f af2e 	bne.w	80036f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f005 f9b0 	bl	8008c00 <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038aa:	d122      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038d2:	2100      	movs	r1, #0
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f00d ff1d 	bl	8011714 <HAL_PCDEx_LPM_Callback>
 80038da:	e002      	b.n	80038e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f00d fd41 	bl	8011364 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f005 f982 	bl	8008c00 <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003906:	d112      	bne.n	800392e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d102      	bne.n	800391e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f00d fcfd 	bl	8011318 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800392c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f005 f964 	bl	8008c00 <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003942:	d121      	bne.n	8003988 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003952:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d111      	bne.n	8003982 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	f003 020f 	and.w	r2, r3, #15
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003978:	2101      	movs	r1, #1
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f00d feca 	bl	8011714 <HAL_PCDEx_LPM_Callback>
 8003980:	e002      	b.n	8003988 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f00d fcc8 	bl	8011318 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f005 f937 	bl	8008c00 <USB_ReadInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399c:	f040 80b7 	bne.w	8003b0e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2110      	movs	r1, #16
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 f8fe 	bl	8007bbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c4:	e046      	b.n	8003a54 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d2:	461a      	mov	r2, r3
 80039d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a06:	461a      	mov	r2, r3
 8003a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a1e:	0151      	lsls	r1, r2, #5
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	440a      	add	r2, r1
 8003a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a3e:	0151      	lsls	r1, r2, #5
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	440a      	add	r2, r1
 8003a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	3301      	adds	r3, #1
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3b3      	bcc.n	80039c6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8a:	f043 030b 	orr.w	r3, r3, #11
 8003a8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa0:	f043 030b 	orr.w	r3, r3, #11
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	e015      	b.n	8003ad4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003abe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ace:	f043 030b 	orr.w	r3, r3, #11
 8003ad2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ae6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003af8:	461a      	mov	r2, r3
 8003afa:	f005 f945 	bl	8008d88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f005 f874 	bl	8008c00 <USB_ReadInterrupts>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b22:	d124      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f005 f90a 	bl	8008d42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 f8bf 	bl	8007cb6 <USB_GetDevSpeed>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681c      	ldr	r4, [r3, #0]
 8003b44:	f000 fec2 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 8003b48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	4620      	mov	r0, r4
 8003b54:	f003 fdc4 	bl	80076e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f00d fbb4 	bl	80112c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f005 f844 	bl	8008c00 <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d10a      	bne.n	8003b98 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f00d fb91 	bl	80112aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f002 0208 	and.w	r2, r2, #8
 8003b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f005 f82f 	bl	8008c00 <USB_ReadInterrupts>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d122      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bb8:	2301      	movs	r3, #1
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbc:	e014      	b.n	8003be8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fb27 	bl	8004230 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	3301      	adds	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d3e5      	bcc.n	8003bbe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f005 f802 	bl	8008c00 <USB_ReadInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c06:	d13b      	bne.n	8003c80 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c08:	2301      	movs	r3, #1
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0c:	e02b      	b.n	8003c66 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3340      	adds	r3, #64	; 0x40
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d115      	bne.n	8003c60 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da12      	bge.n	8003c60 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	333f      	adds	r3, #63	; 0x3f
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fae8 	bl	8004230 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	3301      	adds	r3, #1
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d3ce      	bcc.n	8003c0e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 ffbb 	bl	8008c00 <USB_ReadInterrupts>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c94:	d155      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c96:	2301      	movs	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	e045      	b.n	8003d28 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d12e      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da2b      	bge.n	8003d22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003cd6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d121      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1e:	6053      	str	r3, [r2, #4]
            break;
 8003d20:	e007      	b.n	8003d32 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	3301      	adds	r3, #1
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3b4      	bcc.n	8003c9c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 ff5a 	bl	8008c00 <USB_ReadInterrupts>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d56:	d10a      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f00d fb35 	bl	80113c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f004 ff44 	bl	8008c00 <USB_ReadInterrupts>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d115      	bne.n	8003dae <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f00d fb25 	bl	80113e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	e000      	b.n	8003dae <HAL_PCD_IRQHandler+0x992>
      return;
 8003dac:	bf00      	nop
    }
  }
}
 8003dae:	3734      	adds	r7, #52	; 0x34
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd90      	pop	{r4, r7, pc}

08003db4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_PCD_SetAddress+0x1a>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e013      	b.n	8003df6 <HAL_PCD_SetAddress+0x42>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 fea2 	bl	8008b30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	4608      	mov	r0, r1
 8003e08:	4611      	mov	r1, r2
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	70fb      	strb	r3, [r7, #3]
 8003e10:	460b      	mov	r3, r1
 8003e12:	803b      	strh	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da0f      	bge.n	8003e44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 020f 	and.w	r2, r3, #15
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	3338      	adds	r3, #56	; 0x38
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	3304      	adds	r3, #4
 8003e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	705a      	strb	r2, [r3, #1]
 8003e42:	e00f      	b.n	8003e64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 020f 	and.w	r2, r3, #15
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e70:	883a      	ldrh	r2, [r7, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	78ba      	ldrb	r2, [r7, #2]
 8003e7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e8e:	78bb      	ldrb	r3, [r7, #2]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d102      	bne.n	8003e9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_PCD_EP_Open+0xaa>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e00e      	b.n	8003ec6 <HAL_PCD_EP_Open+0xc8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68f9      	ldr	r1, [r7, #12]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 ff22 	bl	8007d00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da0f      	bge.n	8003f02 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	3338      	adds	r3, #56	; 0x38
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	705a      	strb	r2, [r3, #1]
 8003f00:	e00f      	b.n	8003f22 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	3304      	adds	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_PCD_EP_Close+0x6e>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e00e      	b.n	8003f5a <HAL_PCD_EP_Close+0x8c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 ff60 	bl	8007e10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f72:	7afb      	ldrb	r3, [r7, #11]
 8003f74:	f003 020f 	and.w	r2, r3, #15
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa4:	7afb      	ldrb	r3, [r7, #11]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d102      	bne.n	8003fbe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6979      	ldr	r1, [r7, #20]
 8003fd6:	f004 fa3f 	bl	8008458 <USB_EP0StartXfer>
 8003fda:	e008      	b.n	8003fee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6979      	ldr	r1, [r7, #20]
 8003fea:	f003 ffed 	bl	8007fc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	f003 020f 	and.w	r2, r3, #15
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	460b      	mov	r3, r1
 8004036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004038:	7afb      	ldrb	r3, [r7, #11]
 800403a:	f003 020f 	and.w	r2, r3, #15
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	3338      	adds	r3, #56	; 0x38
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	3304      	adds	r3, #4
 800404e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2200      	movs	r2, #0
 8004060:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2201      	movs	r2, #1
 8004066:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004068:	7afb      	ldrb	r3, [r7, #11]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	b2da      	uxtb	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	6979      	ldr	r1, [r7, #20]
 800409a:	f004 f9dd 	bl	8008458 <USB_EP0StartXfer>
 800409e:	e008      	b.n	80040b2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	6979      	ldr	r1, [r7, #20]
 80040ae:	f003 ff8b 	bl	8007fc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 020f 	and.w	r2, r3, #15
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d901      	bls.n	80040da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e050      	b.n	800417c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	da0f      	bge.n	8004102 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	3338      	adds	r3, #56	; 0x38
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	3304      	adds	r3, #4
 80040f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	705a      	strb	r2, [r3, #1]
 8004100:	e00d      	b.n	800411e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	3304      	adds	r3, #4
 8004116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	b2da      	uxtb	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_PCD_EP_SetStall+0x82>
 800413a:	2302      	movs	r3, #2
 800413c:	e01e      	b.n	800417c <HAL_PCD_EP_SetStall+0xc0>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	4618      	mov	r0, r3
 800414e:	f004 fc1b 	bl	8008988 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	b2d9      	uxtb	r1, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800416c:	461a      	mov	r2, r3
 800416e:	f004 fe0b 	bl	8008d88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	f003 020f 	and.w	r2, r3, #15
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	429a      	cmp	r2, r3
 800419c:	d901      	bls.n	80041a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e042      	b.n	8004228 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da0f      	bge.n	80041ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 020f 	and.w	r2, r3, #15
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	3338      	adds	r3, #56	; 0x38
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	705a      	strb	r2, [r3, #1]
 80041c8:	e00f      	b.n	80041ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	f003 020f 	and.w	r2, r3, #15
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4413      	add	r3, r2
 80041e0:	3304      	adds	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_PCD_EP_ClrStall+0x86>
 8004206:	2302      	movs	r3, #2
 8004208:	e00e      	b.n	8004228 <HAL_PCD_EP_ClrStall+0xa4>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	4618      	mov	r0, r3
 800421a:	f004 fc23 	bl	8008a64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800423c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004240:	2b00      	cmp	r3, #0
 8004242:	da0c      	bge.n	800425e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	f003 020f 	and.w	r2, r3, #15
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	3338      	adds	r3, #56	; 0x38
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	3304      	adds	r3, #4
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e00c      	b.n	8004278 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	4618      	mov	r0, r3
 8004280:	f004 fa42 	bl	8008708 <USB_EPStopXfer>
 8004284:	4603      	mov	r3, r0
 8004286:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004288:	7afb      	ldrb	r3, [r7, #11]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b08a      	sub	sp, #40	; 0x28
 8004296:	af02      	add	r7, sp, #8
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3338      	adds	r3, #56	; 0x38
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d901      	bls.n	80042ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06c      	b.n	80043a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d902      	bls.n	80042e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3303      	adds	r3, #3
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ee:	e02b      	b.n	8004348 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	429a      	cmp	r2, r3
 8004304:	d902      	bls.n	800430c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	3303      	adds	r3, #3
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6919      	ldr	r1, [r3, #16]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004324:	b2db      	uxtb	r3, r3
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	4603      	mov	r3, r0
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f004 fa96 	bl	800885c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	441a      	add	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1a      	ldr	r2, [r3, #32]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	441a      	add	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	b29b      	uxth	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	429a      	cmp	r2, r3
 800435c:	d809      	bhi.n	8004372 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1a      	ldr	r2, [r3, #32]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004366:	429a      	cmp	r2, r3
 8004368:	d203      	bcs.n	8004372 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1be      	bne.n	80042f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	429a      	cmp	r2, r3
 800437c:	d811      	bhi.n	80043a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	2201      	movs	r2, #1
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	43db      	mvns	r3, r3
 8004398:	6939      	ldr	r1, [r7, #16]
 800439a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800439e:	4013      	ands	r3, r2
 80043a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	333c      	adds	r3, #60	; 0x3c
 80043c4:	3304      	adds	r3, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d17b      	bne.n	80044da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4a61      	ldr	r2, [pc, #388]	; (8004574 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	f240 80b9 	bls.w	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80b3 	beq.w	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	461a      	mov	r2, r3
 8004410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004414:	6093      	str	r3, [r2, #8]
 8004416:	e0a7      	b.n	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	461a      	mov	r2, r3
 8004430:	2320      	movs	r3, #32
 8004432:	6093      	str	r3, [r2, #8]
 8004434:	e098      	b.n	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	f040 8093 	bne.w	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4a4b      	ldr	r2, [pc, #300]	; (8004574 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d90f      	bls.n	800446a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	461a      	mov	r2, r3
 8004462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004466:	6093      	str	r3, [r2, #8]
 8004468:	e07e      	b.n	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	3304      	adds	r3, #4
 800447e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	0159      	lsls	r1, r3, #5
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	440b      	add	r3, r1
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004496:	1ad2      	subs	r2, r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d114      	bne.n	80044cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044b4:	461a      	mov	r2, r3
 80044b6:	2101      	movs	r1, #1
 80044b8:	f004 fc66 	bl	8008d88 <USB_EP0_OutStart>
 80044bc:	e006      	b.n	80044cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	441a      	add	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f00c feb4 	bl	8011240 <HAL_PCD_DataOutStageCallback>
 80044d8:	e046      	b.n	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	4a26      	ldr	r2, [pc, #152]	; (8004578 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d124      	bne.n	800452c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	461a      	mov	r2, r3
 80044fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fe:	6093      	str	r3, [r2, #8]
 8004500:	e032      	b.n	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	461a      	mov	r2, r3
 800451a:	2320      	movs	r3, #32
 800451c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f00c fe8b 	bl	8011240 <HAL_PCD_DataOutStageCallback>
 800452a:	e01d      	b.n	8004568 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d114      	bne.n	800455c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d108      	bne.n	800455c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004554:	461a      	mov	r2, r3
 8004556:	2100      	movs	r1, #0
 8004558:	f004 fc16 	bl	8008d88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	4619      	mov	r1, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f00c fe6c 	bl	8011240 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	4f54300a 	.word	0x4f54300a
 8004578:	4f54310a 	.word	0x4f54310a

0800457c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	333c      	adds	r3, #60	; 0x3c
 8004594:	3304      	adds	r3, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d90e      	bls.n	80045d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	461a      	mov	r2, r3
 80045ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f00c fe23 	bl	801121c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <PCD_EP_OutSetupPacket_int+0x88>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d90c      	bls.n	80045f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045f0:	461a      	mov	r2, r3
 80045f2:	2101      	movs	r1, #1
 80045f4:	f004 fbc8 	bl	8008d88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	4f54300a 	.word	0x4f54300a

08004608 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
 8004614:	4613      	mov	r3, r2
 8004616:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004626:	883b      	ldrh	r3, [r7, #0]
 8004628:	0419      	lsls	r1, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	430a      	orrs	r2, r1
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
 8004634:	e028      	b.n	8004688 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e00d      	b.n	8004666 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	3340      	adds	r3, #64	; 0x40
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	3301      	adds	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	3b01      	subs	r3, #1
 800466c:	429a      	cmp	r2, r3
 800466e:	d3ec      	bcc.n	800464a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004670:	883b      	ldrh	r3, [r7, #0]
 8004672:	0418      	lsls	r0, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6819      	ldr	r1, [r3, #0]
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	3b01      	subs	r3, #1
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	4302      	orrs	r2, r0
 8004680:	3340      	adds	r3, #64	; 0x40
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ea:	f043 0303 	orr.w	r3, r3, #3
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0cc      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004714:	4b68      	ldr	r3, [pc, #416]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d90c      	bls.n	800473c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b65      	ldr	r3, [pc, #404]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b63      	ldr	r3, [pc, #396]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0b8      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004754:	4b59      	ldr	r3, [pc, #356]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a58      	ldr	r2, [pc, #352]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800475e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800476c:	4b53      	ldr	r3, [pc, #332]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a52      	ldr	r2, [pc, #328]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b50      	ldr	r3, [pc, #320]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	494d      	ldr	r1, [pc, #308]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d044      	beq.n	8004820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d119      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d003      	beq.n	80047be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047be:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e06f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ce:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e067      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047de:	4b37      	ldr	r3, [pc, #220]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4934      	ldr	r1, [pc, #208]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f0:	f7fc fdf2 	bl	80013d8 <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fc fdee 	bl	80013d8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e04f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 020c 	and.w	r2, r3, #12
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	429a      	cmp	r2, r3
 800481e:	d1eb      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d20c      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e032      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4916      	ldr	r1, [pc, #88]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	490e      	ldr	r1, [pc, #56]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004886:	f000 fbb1 	bl	8004fec <HAL_RCC_GetSysClockFreq>
 800488a:	4602      	mov	r2, r0
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	490a      	ldr	r1, [pc, #40]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	5ccb      	ldrb	r3, [r1, r3]
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048a2:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fc fc26 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023c00 	.word	0x40023c00
 80048bc:	40023800 	.word	0x40023800
 80048c0:	08011d8c 	.word	0x08011d8c
 80048c4:	20002584 	.word	0x20002584
 80048c8:	20002588 	.word	0x20002588

080048cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20002584 	.word	0x20002584

080048e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048e8:	f7ff fff0 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0a9b      	lsrs	r3, r3, #10
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4903      	ldr	r1, [pc, #12]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40023800 	.word	0x40023800
 8004908:	08011d9c 	.word	0x08011d9c

0800490c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004910:	f7ff ffdc 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0b5b      	lsrs	r3, r3, #13
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4903      	ldr	r1, [pc, #12]	; (8004930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	08011d9c 	.word	0x08011d9c

08004934 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	220f      	movs	r2, #15
 8004942:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004944:	4b12      	ldr	r3, [pc, #72]	; (8004990 <HAL_RCC_GetClockConfig+0x5c>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0203 	and.w	r2, r3, #3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <HAL_RCC_GetClockConfig+0x5c>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <HAL_RCC_GetClockConfig+0x5c>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCC_GetClockConfig+0x5c>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	08db      	lsrs	r3, r3, #3
 800496e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <HAL_RCC_GetClockConfig+0x60>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	601a      	str	r2, [r3, #0]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	40023c00 	.word	0x40023c00

08004998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	; 0x30
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d010      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80049d0:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	496c      	ldr	r1, [pc, #432]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80049ee:	2301      	movs	r3, #1
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d010      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80049fe:	4b64      	ldr	r3, [pc, #400]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a04:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	4960      	ldr	r1, [pc, #384]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d017      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a2c:	4b58      	ldr	r3, [pc, #352]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	4955      	ldr	r1, [pc, #340]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d017      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a68:	4b49      	ldr	r3, [pc, #292]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	4946      	ldr	r1, [pc, #280]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a86:	d101      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004a94:	2301      	movs	r3, #1
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 808a 	beq.w	8004bba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	4b39      	ldr	r3, [pc, #228]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a38      	ldr	r2, [pc, #224]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ac2:	4b34      	ldr	r3, [pc, #208]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a33      	ldr	r2, [pc, #204]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ace:	f7fc fc83 	bl	80013d8 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ad6:	f7fc fc7f 	bl	80013d8 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e278      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004af4:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d02f      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0c:	6a3a      	ldr	r2, [r7, #32]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d028      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b1c:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b22:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d114      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fc fc4d 	bl	80013d8 <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b40:	e00a      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fc fc49 	bl	80013d8 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e240      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b58:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ee      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b70:	d114      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b86:	4902      	ldr	r1, [pc, #8]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
 8004b8c:	e00c      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40007000 	.word	0x40007000
 8004b98:	42470e40 	.word	0x42470e40
 8004b9c:	4b4a      	ldr	r3, [pc, #296]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a49      	ldr	r2, [pc, #292]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ba2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ba6:	6093      	str	r3, [r2, #8]
 8004ba8:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	4944      	ldr	r1, [pc, #272]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004bcc:	4b3f      	ldr	r3, [pc, #252]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004bce:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	4937      	ldr	r1, [pc, #220]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bfe:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c04:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0c:	492e      	ldr	r1, [pc, #184]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d011      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c26:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	4926      	ldr	r1, [pc, #152]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004c40:	2301      	movs	r3, #1
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	491a      	ldr	r1, [pc, #104]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c78:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	4911      	ldr	r1, [pc, #68]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c90:	d101      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004c92:	2301      	movs	r3, #1
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca4:	f040 80ff 	bne.w	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cae:	f7fc fb93 	bl	80013d8 <HAL_GetTick>
 8004cb2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb4:	e00e      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cb6:	f7fc fb8f 	bl	80013d8 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d907      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e188      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	424711e0 	.word	0x424711e0
 8004cd0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd4:	4b7e      	ldr	r3, [pc, #504]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1ea      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d028      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d124      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d08:	4b71      	ldr	r3, [pc, #452]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0e:	0c1b      	lsrs	r3, r3, #16
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	3301      	adds	r3, #1
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d1a:	4b6d      	ldr	r3, [pc, #436]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d20:	0e1b      	lsrs	r3, r3, #24
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	019b      	lsls	r3, r3, #6
 8004d32:	431a      	orrs	r2, r3
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	071b      	lsls	r3, r3, #28
 8004d4a:	4961      	ldr	r1, [pc, #388]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d035      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7c:	d130      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d7e:	4b54      	ldr	r3, [pc, #336]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d90:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d96:	0f1b      	lsrs	r3, r3, #28
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	019b      	lsls	r3, r3, #6
 8004da8:	431a      	orrs	r2, r3
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	3b01      	subs	r3, #1
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	071b      	lsls	r3, r3, #28
 8004dc0:	4943      	ldr	r1, [pc, #268]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dc8:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dce:	f023 021f 	bic.w	r2, r3, #31
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	493d      	ldr	r1, [pc, #244]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d029      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df4:	d124      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	3301      	adds	r3, #1
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e08:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0e:	0f1b      	lsrs	r3, r3, #28
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	019b      	lsls	r3, r3, #6
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	431a      	orrs	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	071b      	lsls	r3, r3, #28
 8004e38:	4925      	ldr	r1, [pc, #148]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d016      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	071b      	lsls	r3, r3, #28
 8004e72:	4917      	ldr	r1, [pc, #92]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e80:	f7fc faaa 	bl	80013d8 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e88:	f7fc faa6 	bl	80013d8 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e09f      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 8095 	bne.w	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb4:	f7fc fa90 	bl	80013d8 <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004eba:	e00f      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ebc:	f7fc fa8c 	bl	80013d8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d908      	bls.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e085      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	42470068 	.word	0x42470068
 8004ed8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004edc:	4b41      	ldr	r3, [pc, #260]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee8:	d0e8      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d02b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d127      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004f12:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	019b      	lsls	r3, r3, #6
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3b01      	subs	r3, #1
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	4928      	ldr	r1, [pc, #160]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f48:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	3b01      	subs	r3, #1
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	4922      	ldr	r1, [pc, #136]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01d      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f76:	d118      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	0e1b      	lsrs	r3, r3, #24
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	019b      	lsls	r3, r3, #6
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	4910      	ldr	r1, [pc, #64]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fc fa12 	bl	80013d8 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fb8:	f7fc fa0e 	bl	80013d8 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e007      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd6:	d1ef      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3730      	adds	r7, #48	; 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	42470070 	.word	0x42470070

08004fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff0:	b0ae      	sub	sp, #184	; 0xb8
 8004ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005012:	4bcb      	ldr	r3, [pc, #812]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
 800501a:	2b0c      	cmp	r3, #12
 800501c:	f200 8206 	bhi.w	800542c <HAL_RCC_GetSysClockFreq+0x440>
 8005020:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	0800505d 	.word	0x0800505d
 800502c:	0800542d 	.word	0x0800542d
 8005030:	0800542d 	.word	0x0800542d
 8005034:	0800542d 	.word	0x0800542d
 8005038:	08005065 	.word	0x08005065
 800503c:	0800542d 	.word	0x0800542d
 8005040:	0800542d 	.word	0x0800542d
 8005044:	0800542d 	.word	0x0800542d
 8005048:	0800506d 	.word	0x0800506d
 800504c:	0800542d 	.word	0x0800542d
 8005050:	0800542d 	.word	0x0800542d
 8005054:	0800542d 	.word	0x0800542d
 8005058:	0800525d 	.word	0x0800525d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800505c:	4bb9      	ldr	r3, [pc, #740]	; (8005344 <HAL_RCC_GetSysClockFreq+0x358>)
 800505e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005062:	e1e7      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005064:	4bb8      	ldr	r3, [pc, #736]	; (8005348 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800506a:	e1e3      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506c:	4bb4      	ldr	r3, [pc, #720]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005078:	4bb1      	ldr	r3, [pc, #708]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d071      	beq.n	8005168 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005084:	4bae      	ldr	r3, [pc, #696]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	2200      	movs	r2, #0
 800508c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005090:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	f04f 0000 	mov.w	r0, #0
 80050b2:	f04f 0100 	mov.w	r1, #0
 80050b6:	0159      	lsls	r1, r3, #5
 80050b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050bc:	0150      	lsls	r0, r2, #5
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4621      	mov	r1, r4
 80050c4:	1a51      	subs	r1, r2, r1
 80050c6:	6439      	str	r1, [r7, #64]	; 0x40
 80050c8:	4629      	mov	r1, r5
 80050ca:	eb63 0301 	sbc.w	r3, r3, r1
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80050dc:	4649      	mov	r1, r9
 80050de:	018b      	lsls	r3, r1, #6
 80050e0:	4641      	mov	r1, r8
 80050e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050e6:	4641      	mov	r1, r8
 80050e8:	018a      	lsls	r2, r1, #6
 80050ea:	4641      	mov	r1, r8
 80050ec:	1a51      	subs	r1, r2, r1
 80050ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80050f0:	4649      	mov	r1, r9
 80050f2:	eb63 0301 	sbc.w	r3, r3, r1
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005104:	4649      	mov	r1, r9
 8005106:	00cb      	lsls	r3, r1, #3
 8005108:	4641      	mov	r1, r8
 800510a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800510e:	4641      	mov	r1, r8
 8005110:	00ca      	lsls	r2, r1, #3
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	4603      	mov	r3, r0
 8005118:	4622      	mov	r2, r4
 800511a:	189b      	adds	r3, r3, r2
 800511c:	633b      	str	r3, [r7, #48]	; 0x30
 800511e:	462b      	mov	r3, r5
 8005120:	460a      	mov	r2, r1
 8005122:	eb42 0303 	adc.w	r3, r2, r3
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005134:	4629      	mov	r1, r5
 8005136:	024b      	lsls	r3, r1, #9
 8005138:	4621      	mov	r1, r4
 800513a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800513e:	4621      	mov	r1, r4
 8005140:	024a      	lsls	r2, r1, #9
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005150:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005154:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005158:	f7fb f85a 	bl	8000210 <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4613      	mov	r3, r2
 8005162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005166:	e067      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005168:	4b75      	ldr	r3, [pc, #468]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	099b      	lsrs	r3, r3, #6
 800516e:	2200      	movs	r2, #0
 8005170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005174:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800517c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005180:	67bb      	str	r3, [r7, #120]	; 0x78
 8005182:	2300      	movs	r3, #0
 8005184:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005186:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800518a:	4622      	mov	r2, r4
 800518c:	462b      	mov	r3, r5
 800518e:	f04f 0000 	mov.w	r0, #0
 8005192:	f04f 0100 	mov.w	r1, #0
 8005196:	0159      	lsls	r1, r3, #5
 8005198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519c:	0150      	lsls	r0, r2, #5
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4621      	mov	r1, r4
 80051a4:	1a51      	subs	r1, r2, r1
 80051a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80051a8:	4629      	mov	r1, r5
 80051aa:	eb63 0301 	sbc.w	r3, r3, r1
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80051bc:	4649      	mov	r1, r9
 80051be:	018b      	lsls	r3, r1, #6
 80051c0:	4641      	mov	r1, r8
 80051c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051c6:	4641      	mov	r1, r8
 80051c8:	018a      	lsls	r2, r1, #6
 80051ca:	4641      	mov	r1, r8
 80051cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80051d0:	4649      	mov	r1, r9
 80051d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ea:	4692      	mov	sl, r2
 80051ec:	469b      	mov	fp, r3
 80051ee:	4623      	mov	r3, r4
 80051f0:	eb1a 0303 	adds.w	r3, sl, r3
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	462b      	mov	r3, r5
 80051f8:	eb4b 0303 	adc.w	r3, fp, r3
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800520a:	4629      	mov	r1, r5
 800520c:	028b      	lsls	r3, r1, #10
 800520e:	4621      	mov	r1, r4
 8005210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005214:	4621      	mov	r1, r4
 8005216:	028a      	lsls	r2, r1, #10
 8005218:	4610      	mov	r0, r2
 800521a:	4619      	mov	r1, r3
 800521c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005220:	2200      	movs	r2, #0
 8005222:	673b      	str	r3, [r7, #112]	; 0x70
 8005224:	677a      	str	r2, [r7, #116]	; 0x74
 8005226:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800522a:	f7fa fff1 	bl	8000210 <__aeabi_uldivmod>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4613      	mov	r3, r2
 8005234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005238:	4b41      	ldr	r3, [pc, #260]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	3301      	adds	r3, #1
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800524a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800524e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005252:	fbb2 f3f3 	udiv	r3, r2, r3
 8005256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800525a:	e0eb      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800525c:	4b38      	ldr	r3, [pc, #224]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005268:	4b35      	ldr	r3, [pc, #212]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d06b      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005274:	4b32      	ldr	r3, [pc, #200]	; (8005340 <HAL_RCC_GetSysClockFreq+0x354>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	099b      	lsrs	r3, r3, #6
 800527a:	2200      	movs	r2, #0
 800527c:	66bb      	str	r3, [r7, #104]	; 0x68
 800527e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	663b      	str	r3, [r7, #96]	; 0x60
 8005288:	2300      	movs	r3, #0
 800528a:	667b      	str	r3, [r7, #100]	; 0x64
 800528c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005290:	4622      	mov	r2, r4
 8005292:	462b      	mov	r3, r5
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	0159      	lsls	r1, r3, #5
 800529e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a2:	0150      	lsls	r0, r2, #5
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4621      	mov	r1, r4
 80052aa:	1a51      	subs	r1, r2, r1
 80052ac:	61b9      	str	r1, [r7, #24]
 80052ae:	4629      	mov	r1, r5
 80052b0:	eb63 0301 	sbc.w	r3, r3, r1
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80052c2:	4659      	mov	r1, fp
 80052c4:	018b      	lsls	r3, r1, #6
 80052c6:	4651      	mov	r1, sl
 80052c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052cc:	4651      	mov	r1, sl
 80052ce:	018a      	lsls	r2, r1, #6
 80052d0:	4651      	mov	r1, sl
 80052d2:	ebb2 0801 	subs.w	r8, r2, r1
 80052d6:	4659      	mov	r1, fp
 80052d8:	eb63 0901 	sbc.w	r9, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f0:	4690      	mov	r8, r2
 80052f2:	4699      	mov	r9, r3
 80052f4:	4623      	mov	r3, r4
 80052f6:	eb18 0303 	adds.w	r3, r8, r3
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	462b      	mov	r3, r5
 80052fe:	eb49 0303 	adc.w	r3, r9, r3
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005310:	4629      	mov	r1, r5
 8005312:	024b      	lsls	r3, r1, #9
 8005314:	4621      	mov	r1, r4
 8005316:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800531a:	4621      	mov	r1, r4
 800531c:	024a      	lsls	r2, r1, #9
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005326:	2200      	movs	r2, #0
 8005328:	65bb      	str	r3, [r7, #88]	; 0x58
 800532a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800532c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005330:	f7fa ff6e 	bl	8000210 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4613      	mov	r3, r2
 800533a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800533e:	e065      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x420>
 8005340:	40023800 	.word	0x40023800
 8005344:	00f42400 	.word	0x00f42400
 8005348:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534c:	4b3d      	ldr	r3, [pc, #244]	; (8005444 <HAL_RCC_GetSysClockFreq+0x458>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	099b      	lsrs	r3, r3, #6
 8005352:	2200      	movs	r2, #0
 8005354:	4618      	mov	r0, r3
 8005356:	4611      	mov	r1, r2
 8005358:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800535c:	653b      	str	r3, [r7, #80]	; 0x50
 800535e:	2300      	movs	r3, #0
 8005360:	657b      	str	r3, [r7, #84]	; 0x54
 8005362:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005366:	4642      	mov	r2, r8
 8005368:	464b      	mov	r3, r9
 800536a:	f04f 0000 	mov.w	r0, #0
 800536e:	f04f 0100 	mov.w	r1, #0
 8005372:	0159      	lsls	r1, r3, #5
 8005374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005378:	0150      	lsls	r0, r2, #5
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4641      	mov	r1, r8
 8005380:	1a51      	subs	r1, r2, r1
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	4649      	mov	r1, r9
 8005386:	eb63 0301 	sbc.w	r3, r3, r1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005398:	4659      	mov	r1, fp
 800539a:	018b      	lsls	r3, r1, #6
 800539c:	4651      	mov	r1, sl
 800539e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053a2:	4651      	mov	r1, sl
 80053a4:	018a      	lsls	r2, r1, #6
 80053a6:	4651      	mov	r1, sl
 80053a8:	1a54      	subs	r4, r2, r1
 80053aa:	4659      	mov	r1, fp
 80053ac:	eb63 0501 	sbc.w	r5, r3, r1
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	00eb      	lsls	r3, r5, #3
 80053ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053be:	00e2      	lsls	r2, r4, #3
 80053c0:	4614      	mov	r4, r2
 80053c2:	461d      	mov	r5, r3
 80053c4:	4643      	mov	r3, r8
 80053c6:	18e3      	adds	r3, r4, r3
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	464b      	mov	r3, r9
 80053cc:	eb45 0303 	adc.w	r3, r5, r3
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053de:	4629      	mov	r1, r5
 80053e0:	028b      	lsls	r3, r1, #10
 80053e2:	4621      	mov	r1, r4
 80053e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053e8:	4621      	mov	r1, r4
 80053ea:	028a      	lsls	r2, r1, #10
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053f4:	2200      	movs	r2, #0
 80053f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80053fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053fe:	f7fa ff07 	bl	8000210 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4613      	mov	r3, r2
 8005408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <HAL_RCC_GetSysClockFreq+0x458>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	0f1b      	lsrs	r3, r3, #28
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800541a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800541e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800542a:	e003      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_RCC_GetSysClockFreq+0x45c>)
 800542e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005438:	4618      	mov	r0, r3
 800543a:	37b8      	adds	r7, #184	; 0xb8
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800
 8005448:	00f42400 	.word	0x00f42400

0800544c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e291      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8087 	beq.w	800557a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800546c:	4b96      	ldr	r3, [pc, #600]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b04      	cmp	r3, #4
 8005476:	d019      	beq.n	80054ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005478:	4b93      	ldr	r3, [pc, #588]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005480:	2b08      	cmp	r3, #8
 8005482:	d106      	bne.n	8005492 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005484:	4b90      	ldr	r3, [pc, #576]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005490:	d00c      	beq.n	80054ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005492:	4b8d      	ldr	r3, [pc, #564]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800549a:	2b0c      	cmp	r3, #12
 800549c:	d112      	bne.n	80054c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549e:	4b8a      	ldr	r3, [pc, #552]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054aa:	d10b      	bne.n	80054c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ac:	4b86      	ldr	r3, [pc, #536]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d05f      	beq.n	8005578 <HAL_RCC_OscConfig+0x12c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d15b      	bne.n	8005578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e25e      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d106      	bne.n	80054dc <HAL_RCC_OscConfig+0x90>
 80054ce:	4b7e      	ldr	r3, [pc, #504]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a7d      	ldr	r2, [pc, #500]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e01d      	b.n	8005518 <HAL_RCC_OscConfig+0xcc>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e4:	d10c      	bne.n	8005500 <HAL_RCC_OscConfig+0xb4>
 80054e6:	4b78      	ldr	r3, [pc, #480]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a77      	ldr	r2, [pc, #476]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80054ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4b75      	ldr	r3, [pc, #468]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a74      	ldr	r2, [pc, #464]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e00b      	b.n	8005518 <HAL_RCC_OscConfig+0xcc>
 8005500:	4b71      	ldr	r3, [pc, #452]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a70      	ldr	r2, [pc, #448]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4b6e      	ldr	r3, [pc, #440]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6d      	ldr	r2, [pc, #436]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fb ff5a 	bl	80013d8 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005526:	e00a      	b.n	800553e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005528:	f7fb ff56 	bl	80013d8 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e221      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	4b62      	ldr	r3, [pc, #392]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0ee      	beq.n	8005528 <HAL_RCC_OscConfig+0xdc>
 800554a:	e016      	b.n	800557a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fb ff44 	bl	80013d8 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	e00a      	b.n	800556a <HAL_RCC_OscConfig+0x11e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005554:	f7fb ff40 	bl	80013d8 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e20b      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556a:	4b57      	ldr	r3, [pc, #348]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1ee      	bne.n	8005554 <HAL_RCC_OscConfig+0x108>
 8005576:	e000      	b.n	800557a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d06f      	beq.n	8005666 <HAL_RCC_OscConfig+0x21a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005586:	4b50      	ldr	r3, [pc, #320]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b00      	cmp	r3, #0
 8005590:	d017      	beq.n	80055c2 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005592:	4b4d      	ldr	r3, [pc, #308]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800559a:	2b08      	cmp	r3, #8
 800559c:	d105      	bne.n	80055aa <HAL_RCC_OscConfig+0x15e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800559e:	4b4a      	ldr	r3, [pc, #296]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055aa:	4b47      	ldr	r3, [pc, #284]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d11c      	bne.n	80055f0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055b6:	4b44      	ldr	r3, [pc, #272]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d116      	bne.n	80055f0 <HAL_RCC_OscConfig+0x1a4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c2:	4b41      	ldr	r3, [pc, #260]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_RCC_OscConfig+0x18e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d001      	beq.n	80055da <HAL_RCC_OscConfig+0x18e>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e1d3      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055da:	4b3b      	ldr	r3, [pc, #236]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4937      	ldr	r1, [pc, #220]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ee:	e03a      	b.n	8005666 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d020      	beq.n	800563a <HAL_RCC_OscConfig+0x1ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055f8:	4b34      	ldr	r3, [pc, #208]	; (80056cc <HAL_RCC_OscConfig+0x280>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fb feeb 	bl	80013d8 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005606:	f7fb fee7 	bl	80013d8 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e1b4      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005618:	4b2b      	ldr	r3, [pc, #172]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005624:	4b28      	ldr	r3, [pc, #160]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	4925      	ldr	r1, [pc, #148]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005634:	4313      	orrs	r3, r2
 8005636:	600b      	str	r3, [r1, #0]
 8005638:	e015      	b.n	8005666 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563a:	4b24      	ldr	r3, [pc, #144]	; (80056cc <HAL_RCC_OscConfig+0x280>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fb feca 	bl	80013d8 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005648:	f7fb fec6 	bl	80013d8 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x20e>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e193      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d036      	beq.n	80056e0 <HAL_RCC_OscConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d016      	beq.n	80056a8 <HAL_RCC_OscConfig+0x25c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <HAL_RCC_OscConfig+0x284>)
 800567c:	2201      	movs	r2, #1
 800567e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fb feaa 	bl	80013d8 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005688:	f7fb fea6 	bl	80013d8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e173      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569a:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 800569c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0x23c>
 80056a6:	e01b      	b.n	80056e0 <HAL_RCC_OscConfig+0x294>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <HAL_RCC_OscConfig+0x284>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ae:	f7fb fe93 	bl	80013d8 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b4:	e00e      	b.n	80056d4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b6:	f7fb fe8f 	bl	80013d8 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d907      	bls.n	80056d4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e15c      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
 80056c8:	40023800 	.word	0x40023800
 80056cc:	42470000 	.word	0x42470000
 80056d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d4:	4b8a      	ldr	r3, [pc, #552]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 80056d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1ea      	bne.n	80056b6 <HAL_RCC_OscConfig+0x26a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8097 	beq.w	800581c <HAL_RCC_OscConfig+0x3d0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ee:	2300      	movs	r3, #0
 80056f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f2:	4b83      	ldr	r3, [pc, #524]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10f      	bne.n	800571e <HAL_RCC_OscConfig+0x2d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	4b7f      	ldr	r3, [pc, #508]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	4a7e      	ldr	r2, [pc, #504]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	6413      	str	r3, [r2, #64]	; 0x40
 800570e:	4b7c      	ldr	r3, [pc, #496]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005716:	60bb      	str	r3, [r7, #8]
 8005718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571a:	2301      	movs	r3, #1
 800571c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571e:	4b79      	ldr	r3, [pc, #484]	; (8005904 <HAL_RCC_OscConfig+0x4b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d118      	bne.n	800575c <HAL_RCC_OscConfig+0x310>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572a:	4b76      	ldr	r3, [pc, #472]	; (8005904 <HAL_RCC_OscConfig+0x4b8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a75      	ldr	r2, [pc, #468]	; (8005904 <HAL_RCC_OscConfig+0x4b8>)
 8005730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005736:	f7fb fe4f 	bl	80013d8 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573e:	f7fb fe4b 	bl	80013d8 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e118      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005750:	4b6c      	ldr	r3, [pc, #432]	; (8005904 <HAL_RCC_OscConfig+0x4b8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d106      	bne.n	8005772 <HAL_RCC_OscConfig+0x326>
 8005764:	4b66      	ldr	r3, [pc, #408]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a65      	ldr	r2, [pc, #404]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
 8005770:	e01c      	b.n	80057ac <HAL_RCC_OscConfig+0x360>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b05      	cmp	r3, #5
 8005778:	d10c      	bne.n	8005794 <HAL_RCC_OscConfig+0x348>
 800577a:	4b61      	ldr	r3, [pc, #388]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a60      	ldr	r2, [pc, #384]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005780:	f043 0304 	orr.w	r3, r3, #4
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
 8005786:	4b5e      	ldr	r3, [pc, #376]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	4a5d      	ldr	r2, [pc, #372]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	6713      	str	r3, [r2, #112]	; 0x70
 8005792:	e00b      	b.n	80057ac <HAL_RCC_OscConfig+0x360>
 8005794:	4b5a      	ldr	r3, [pc, #360]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a59      	ldr	r2, [pc, #356]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
 80057a0:	4b57      	ldr	r3, [pc, #348]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	4a56      	ldr	r2, [pc, #344]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 80057a6:	f023 0304 	bic.w	r3, r3, #4
 80057aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d015      	beq.n	80057e0 <HAL_RCC_OscConfig+0x394>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fb fe10 	bl	80013d8 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ba:	e00a      	b.n	80057d2 <HAL_RCC_OscConfig+0x386>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057bc:	f7fb fe0c 	bl	80013d8 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x386>
        {
          return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e0d7      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d2:	4b4b      	ldr	r3, [pc, #300]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0ee      	beq.n	80057bc <HAL_RCC_OscConfig+0x370>
 80057de:	e014      	b.n	800580a <HAL_RCC_OscConfig+0x3be>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fb fdfa 	bl	80013d8 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e6:	e00a      	b.n	80057fe <HAL_RCC_OscConfig+0x3b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e8:	f7fb fdf6 	bl	80013d8 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e0c1      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fe:	4b40      	ldr	r3, [pc, #256]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1ee      	bne.n	80057e8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d105      	bne.n	800581c <HAL_RCC_OscConfig+0x3d0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005810:	4b3b      	ldr	r3, [pc, #236]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	4a3a      	ldr	r2, [pc, #232]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80ad 	beq.w	8005980 <HAL_RCC_OscConfig+0x534>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005826:	4b36      	ldr	r3, [pc, #216]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 030c 	and.w	r3, r3, #12
 800582e:	2b08      	cmp	r3, #8
 8005830:	d060      	beq.n	80058f4 <HAL_RCC_OscConfig+0x4a8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d145      	bne.n	80058c6 <HAL_RCC_OscConfig+0x47a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583a:	4b33      	ldr	r3, [pc, #204]	; (8005908 <HAL_RCC_OscConfig+0x4bc>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fb fdca 	bl	80013d8 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x40e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005848:	f7fb fdc6 	bl	80013d8 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x40e>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e093      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585a:	4b29      	ldr	r3, [pc, #164]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x3fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69da      	ldr	r2, [r3, #28]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	019b      	lsls	r3, r3, #6
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	3b01      	subs	r3, #1
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	061b      	lsls	r3, r3, #24
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	071b      	lsls	r3, r3, #28
 8005892:	491b      	ldr	r1, [pc, #108]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005898:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <HAL_RCC_OscConfig+0x4bc>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fb fd9b 	bl	80013d8 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a6:	f7fb fd97 	bl	80013d8 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e064      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x45a>
 80058c4:	e05c      	b.n	8005980 <HAL_RCC_OscConfig+0x534>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c6:	4b10      	ldr	r3, [pc, #64]	; (8005908 <HAL_RCC_OscConfig+0x4bc>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fb fd84 	bl	80013d8 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x49a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fb fd80 	bl	80013d8 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x49a>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e04d      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_OscConfig+0x4b4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x488>
 80058f2:	e045      	b.n	8005980 <HAL_RCC_OscConfig+0x534>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_RCC_OscConfig+0x4c0>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e040      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
 8005900:	40023800 	.word	0x40023800
 8005904:	40007000 	.word	0x40007000
 8005908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800590c:	4b1f      	ldr	r3, [pc, #124]	; (800598c <HAL_RCC_OscConfig+0x540>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d030      	beq.n	800597c <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d129      	bne.n	800597c <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d122      	bne.n	800597c <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800593c:	4013      	ands	r3, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005944:	4293      	cmp	r3, r2
 8005946:	d119      	bne.n	800597c <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	3b01      	subs	r3, #1
 8005956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d10f      	bne.n	800597c <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005968:	429a      	cmp	r2, r3
 800596a:	d107      	bne.n	800597c <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005978:	429a      	cmp	r2, r3
 800597a:	d001      	beq.n	8005980 <HAL_RCC_OscConfig+0x534>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <HAL_RCC_OscConfig+0x536>
        }
      }
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800

08005990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e07b      	b.n	8005a9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d108      	bne.n	80059bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b2:	d009      	beq.n	80059c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	61da      	str	r2, [r3, #28]
 80059ba:	e005      	b.n	80059c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb fa76 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	ea42 0103 	orr.w	r1, r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	f003 0104 	and.w	r1, r3, #4
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	f003 0210 	and.w	r2, r3, #16
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d110      	bne.n	8005ae0 <HAL_SPI_Receive_DMA+0x3c>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac6:	d10b      	bne.n	8005ae0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2204      	movs	r2, #4
 8005acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f8ac 	bl	8005c34 <HAL_SPI_TransmitReceive_DMA>
 8005adc:	4603      	mov	r3, r0
 8005ade:	e09f      	b.n	8005c20 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_SPI_Receive_DMA+0x4a>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e098      	b.n	8005c20 <HAL_SPI_Receive_DMA+0x17c>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d002      	beq.n	8005b08 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
 8005b04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b06:	e086      	b.n	8005c16 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_SPI_Receive_DMA+0x70>
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b18:	e07d      	b.n	8005c16 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5a:	d10f      	bne.n	8005b7c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b80:	4a29      	ldr	r2, [pc, #164]	; (8005c28 <HAL_SPI_Receive_DMA+0x184>)
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b88:	4a28      	ldr	r2, [pc, #160]	; (8005c2c <HAL_SPI_Receive_DMA+0x188>)
 8005b8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b90:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <HAL_SPI_Receive_DMA+0x18c>)
 8005b92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b98:	2200      	movs	r2, #0
 8005b9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005bb4:	f7fb fe02 	bl	80017bc <HAL_DMA_Start_IT>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	f043 0210 	orr.w	r2, r3, #16
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005bd6:	e01e      	b.n	8005c16 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d007      	beq.n	8005bf6 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0220 	orr.w	r2, r2, #32
 8005c04:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08005fc1 	.word	0x08005fc1
 8005c2c:	08005e89 	.word	0x08005e89
 8005c30:	08005ff9 	.word	0x08005ff9

08005c34 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e0e3      	b.n	8005e1c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c62:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005c6a:	7dbb      	ldrb	r3, [r7, #22]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d00d      	beq.n	8005c8c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c76:	d106      	bne.n	8005c86 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005c80:	7dbb      	ldrb	r3, [r7, #22]
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d002      	beq.n	8005c8c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005c86:	2302      	movs	r3, #2
 8005c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c8a:	e0c2      	b.n	8005e12 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005c98:	887b      	ldrh	r3, [r7, #2]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ca2:	e0b6      	b.n	8005e12 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d003      	beq.n	8005cb8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2205      	movs	r2, #5
 8005cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	887a      	ldrh	r2, [r7, #2]
 8005cc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	887a      	ldrh	r2, [r7, #2]
 8005cce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	887a      	ldrh	r2, [r7, #2]
 8005cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	887a      	ldrh	r2, [r7, #2]
 8005ce0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d108      	bne.n	8005d0c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfe:	4a49      	ldr	r2, [pc, #292]	; (8005e24 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	4a48      	ldr	r2, [pc, #288]	; (8005e28 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005d08:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d0a:	e007      	b.n	8005d1c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d10:	4a46      	ldr	r2, [pc, #280]	; (8005e2c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d18:	4a45      	ldr	r2, [pc, #276]	; (8005e30 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d20:	4a44      	ldr	r2, [pc, #272]	; (8005e34 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005d22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d28:	2200      	movs	r2, #0
 8005d2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	4619      	mov	r1, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d42:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005d44:	f7fb fd3a 	bl	80017bc <HAL_DMA_Start_IT>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f043 0210 	orr.w	r2, r3, #16
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005d66:	e054      	b.n	8005e12 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d84:	2200      	movs	r2, #0
 8005d86:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	2200      	movs	r2, #0
 8005d96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	4619      	mov	r1, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005db0:	f7fb fd04 	bl	80017bc <HAL_DMA_Start_IT>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f043 0210 	orr.w	r2, r3, #16
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005dd2:	e01e      	b.n	8005e12 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d007      	beq.n	8005df2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0220 	orr.w	r2, r2, #32
 8005e00:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0202 	orr.w	r2, r2, #2
 8005e10:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	08005fc1 	.word	0x08005fc1
 8005e28:	08005e89 	.word	0x08005e89
 8005e2c:	08005fdd 	.word	0x08005fdd
 8005e30:	08005f31 	.word	0x08005f31
 8005e34:	08005ff9 	.word	0x08005ff9

08005e38 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e96:	f7fb fa9f 	bl	80013d8 <HAL_GetTick>
 8005e9a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eaa:	d03b      	beq.n	8005f24 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0220 	bic.w	r2, r2, #32
 8005eba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10d      	bne.n	8005ee0 <SPI_DMAReceiveCplt+0x58>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ecc:	d108      	bne.n	8005ee0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0203 	bic.w	r2, r2, #3
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	e007      	b.n	8005ef0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	2164      	movs	r1, #100	; 0x64
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f927 	bl	8006148 <SPI_EndRxTransaction>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff ffa9 	bl	8005e74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f22:	e002      	b.n	8005f2a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7fa fe45 	bl	8000bb4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f3e:	f7fb fa4b 	bl	80013d8 <HAL_GetTick>
 8005f42:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f52:	d02f      	beq.n	8005fb4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0220 	bic.w	r2, r2, #32
 8005f62:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	2164      	movs	r1, #100	; 0x64
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f953 	bl	8006214 <SPI_EndRxTxTransaction>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0203 	bic.w	r2, r2, #3
 8005f8e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff ff61 	bl	8005e74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005fb2:	e002      	b.n	8005fba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff ff3f 	bl	8005e38 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff ff3c 	bl	8005e4c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff ff38 	bl	8005e60 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0203 	bic.w	r2, r2, #3
 8006014:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601a:	f043 0210 	orr.w	r2, r3, #16
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff ff22 	bl	8005e74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006048:	f7fb f9c6 	bl	80013d8 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	4413      	add	r3, r2
 8006056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006058:	f7fb f9be 	bl	80013d8 <HAL_GetTick>
 800605c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800605e:	4b39      	ldr	r3, [pc, #228]	; (8006144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	015b      	lsls	r3, r3, #5
 8006064:	0d1b      	lsrs	r3, r3, #20
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	fb02 f303 	mul.w	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606e:	e054      	b.n	800611a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006076:	d050      	beq.n	800611a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006078:	f7fb f9ae 	bl	80013d8 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	429a      	cmp	r2, r3
 8006086:	d902      	bls.n	800608e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d13d      	bne.n	800610a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800609c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a6:	d111      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b0:	d004      	beq.n	80060bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ba:	d107      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d4:	d10f      	bne.n	80060f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e017      	b.n	800613a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	3b01      	subs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4013      	ands	r3, r2
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	bf0c      	ite	eq
 800612a:	2301      	moveq	r3, #1
 800612c:	2300      	movne	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	429a      	cmp	r2, r3
 8006136:	d19b      	bne.n	8006070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20002584 	.word	0x20002584

08006148 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615c:	d111      	bne.n	8006182 <SPI_EndRxTransaction+0x3a>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006166:	d004      	beq.n	8006172 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	d107      	bne.n	8006182 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006180:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800618a:	d12a      	bne.n	80061e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006194:	d012      	beq.n	80061bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	2180      	movs	r1, #128	; 0x80
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ff49 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d02d      	beq.n	8006208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e026      	b.n	800620a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2101      	movs	r1, #1
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7ff ff36 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01a      	beq.n	8006208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e013      	b.n	800620a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2101      	movs	r1, #1
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ff23 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	f043 0220 	orr.w	r2, r3, #32
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e000      	b.n	800620a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006220:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <SPI_EndRxTxTransaction+0x7c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <SPI_EndRxTxTransaction+0x80>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	0d5b      	lsrs	r3, r3, #21
 800622c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006230:	fb02 f303 	mul.w	r3, r2, r3
 8006234:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800623e:	d112      	bne.n	8006266 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2200      	movs	r2, #0
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff fef4 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625a:	f043 0220 	orr.w	r2, r3, #32
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e00f      	b.n	8006286 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	3b01      	subs	r3, #1
 8006270:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b80      	cmp	r3, #128	; 0x80
 800627e:	d0f2      	beq.n	8006266 <SPI_EndRxTxTransaction+0x52>
 8006280:	e000      	b.n	8006284 <SPI_EndRxTxTransaction+0x70>
        break;
 8006282:	bf00      	nop
  }

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20002584 	.word	0x20002584
 8006294:	165e9f81 	.word	0x165e9f81

08006298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e041      	b.n	800632e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f839 	bl	8006336 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f000 f9d8 	bl	800668c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d001      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e04e      	b.n	8006402 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a23      	ldr	r2, [pc, #140]	; (8006410 <HAL_TIM_Base_Start_IT+0xc4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d022      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d01d      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <HAL_TIM_Base_Start_IT+0xc8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <HAL_TIM_Base_Start_IT+0xcc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1c      	ldr	r2, [pc, #112]	; (800641c <HAL_TIM_Base_Start_IT+0xd0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <HAL_TIM_Base_Start_IT+0xd4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a19      	ldr	r2, [pc, #100]	; (8006424 <HAL_TIM_Base_Start_IT+0xd8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_TIM_Base_Start_IT+0xdc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d111      	bne.n	80063f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d010      	beq.n	8006400 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0201 	orr.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	e007      	b.n	8006400 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40010000 	.word	0x40010000
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40010400 	.word	0x40010400
 8006424:	40014000 	.word	0x40014000
 8006428:	40001800 	.word	0x40001800

0800642c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b02      	cmp	r3, #2
 8006440:	d122      	bne.n	8006488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b02      	cmp	r3, #2
 800644e:	d11b      	bne.n	8006488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0202 	mvn.w	r2, #2
 8006458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8ee 	bl	8006650 <HAL_TIM_IC_CaptureCallback>
 8006474:	e005      	b.n	8006482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f8e0 	bl	800663c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f8f1 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b04      	cmp	r3, #4
 8006494:	d122      	bne.n	80064dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d11b      	bne.n	80064dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0204 	mvn.w	r2, #4
 80064ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2202      	movs	r2, #2
 80064b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f8c4 	bl	8006650 <HAL_TIM_IC_CaptureCallback>
 80064c8:	e005      	b.n	80064d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f8b6 	bl	800663c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f8c7 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d122      	bne.n	8006530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d11b      	bne.n	8006530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0208 	mvn.w	r2, #8
 8006500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2204      	movs	r2, #4
 8006506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f89a 	bl	8006650 <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f88c 	bl	800663c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f89d 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b10      	cmp	r3, #16
 800653c:	d122      	bne.n	8006584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b10      	cmp	r3, #16
 800654a:	d11b      	bne.n	8006584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0210 	mvn.w	r2, #16
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2208      	movs	r2, #8
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f870 	bl	8006650 <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f862 	bl	800663c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f873 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10e      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b01      	cmp	r3, #1
 800659e:	d107      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0201 	mvn.w	r2, #1
 80065a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fa fc06 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d10e      	bne.n	80065dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c8:	2b80      	cmp	r3, #128	; 0x80
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f902 	bl	80067e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d10e      	bne.n	8006608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d107      	bne.n	8006608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f838 	bl	8006678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b20      	cmp	r3, #32
 8006614:	d10e      	bne.n	8006634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b20      	cmp	r3, #32
 8006622:	d107      	bne.n	8006634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0220 	mvn.w	r2, #32
 800662c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8cc 	bl	80067cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a40      	ldr	r2, [pc, #256]	; (80067a0 <TIM_Base_SetConfig+0x114>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066aa:	d00f      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a3d      	ldr	r2, [pc, #244]	; (80067a4 <TIM_Base_SetConfig+0x118>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00b      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3c      	ldr	r2, [pc, #240]	; (80067a8 <TIM_Base_SetConfig+0x11c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d007      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a3b      	ldr	r2, [pc, #236]	; (80067ac <TIM_Base_SetConfig+0x120>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3a      	ldr	r2, [pc, #232]	; (80067b0 <TIM_Base_SetConfig+0x124>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d108      	bne.n	80066de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <TIM_Base_SetConfig+0x114>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d02b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ec:	d027      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2c      	ldr	r2, [pc, #176]	; (80067a4 <TIM_Base_SetConfig+0x118>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d023      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2b      	ldr	r2, [pc, #172]	; (80067a8 <TIM_Base_SetConfig+0x11c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01f      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a2a      	ldr	r2, [pc, #168]	; (80067ac <TIM_Base_SetConfig+0x120>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a29      	ldr	r2, [pc, #164]	; (80067b0 <TIM_Base_SetConfig+0x124>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d017      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a28      	ldr	r2, [pc, #160]	; (80067b4 <TIM_Base_SetConfig+0x128>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a27      	ldr	r2, [pc, #156]	; (80067b8 <TIM_Base_SetConfig+0x12c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00f      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a26      	ldr	r2, [pc, #152]	; (80067bc <TIM_Base_SetConfig+0x130>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a25      	ldr	r2, [pc, #148]	; (80067c0 <TIM_Base_SetConfig+0x134>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d007      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a24      	ldr	r2, [pc, #144]	; (80067c4 <TIM_Base_SetConfig+0x138>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a23      	ldr	r2, [pc, #140]	; (80067c8 <TIM_Base_SetConfig+0x13c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d108      	bne.n	8006750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a0a      	ldr	r2, [pc, #40]	; (80067a0 <TIM_Base_SetConfig+0x114>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_Base_SetConfig+0xf8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a0c      	ldr	r2, [pc, #48]	; (80067b0 <TIM_Base_SetConfig+0x124>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d103      	bne.n	800678c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	615a      	str	r2, [r3, #20]
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40010000 	.word	0x40010000
 80067a4:	40000400 	.word	0x40000400
 80067a8:	40000800 	.word	0x40000800
 80067ac:	40000c00 	.word	0x40000c00
 80067b0:	40010400 	.word	0x40010400
 80067b4:	40014000 	.word	0x40014000
 80067b8:	40014400 	.word	0x40014400
 80067bc:	40014800 	.word	0x40014800
 80067c0:	40001800 	.word	0x40001800
 80067c4:	40001c00 	.word	0x40001c00
 80067c8:	40002000 	.word	0x40002000

080067cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e03f      	b.n	8006886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fa fc1c 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2224      	movs	r2, #36	; 0x24
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc7b 	bl	8007134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800684c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800685c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800686c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b0ba      	sub	sp, #232	; 0xe8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068bc:	2300      	movs	r3, #0
 80068be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10f      	bne.n	80068f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <HAL_UART_IRQHandler+0x66>
 80068e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fb65 	bl	8006fbe <UART_Receive_IT>
      return;
 80068f4:	e256      	b.n	8006da4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80de 	beq.w	8006abc <HAL_UART_IRQHandler+0x22c>
 8006900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800690c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006910:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80d1 	beq.w	8006abc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800691a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00b      	beq.n	800693e <HAL_UART_IRQHandler+0xae>
 8006926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800692a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <HAL_UART_IRQHandler+0xd2>
 800694a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	f043 0202 	orr.w	r2, r3, #2
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_UART_IRQHandler+0xf6>
 800696e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f043 0204 	orr.w	r2, r3, #4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d011      	beq.n	80069b6 <HAL_UART_IRQHandler+0x126>
 8006992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d105      	bne.n	80069aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800699e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f043 0208 	orr.w	r2, r3, #8
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 81ed 	beq.w	8006d9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <HAL_UART_IRQHandler+0x14e>
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 faf0 	bl	8006fbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	bf0c      	ite	eq
 80069ec:	2301      	moveq	r3, #1
 80069ee:	2300      	movne	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d103      	bne.n	8006a0a <HAL_UART_IRQHandler+0x17a>
 8006a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d04f      	beq.n	8006aaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f9f8 	bl	8006e00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d141      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3314      	adds	r3, #20
 8006a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1d9      	bne.n	8006a1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d013      	beq.n	8006a9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	4a7d      	ldr	r2, [pc, #500]	; (8006c6c <HAL_UART_IRQHandler+0x3dc>)
 8006a78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fa ff64 	bl	800194c <HAL_DMA_Abort_IT>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d016      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a94:	4610      	mov	r0, r2
 8006a96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a98:	e00e      	b.n	8006ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f99a 	bl	8006dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	e00a      	b.n	8006ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f996 	bl	8006dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa8:	e006      	b.n	8006ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f992 	bl	8006dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ab6:	e170      	b.n	8006d9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	bf00      	nop
    return;
 8006aba:	e16e      	b.n	8006d9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	f040 814a 	bne.w	8006d5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8143 	beq.w	8006d5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 813c 	beq.w	8006d5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60bb      	str	r3, [r7, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	60bb      	str	r3, [r7, #8]
 8006af6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	f040 80b4 	bne.w	8006c70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8140 	beq.w	8006d9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b26:	429a      	cmp	r2, r3
 8006b28:	f080 8139 	bcs.w	8006d9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3e:	f000 8088 	beq.w	8006c52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	330c      	adds	r3, #12
 8006b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1d9      	bne.n	8006b42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3314      	adds	r3, #20
 8006b94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3314      	adds	r3, #20
 8006bae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e1      	bne.n	8006b8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3314      	adds	r3, #20
 8006bd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3314      	adds	r3, #20
 8006bea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e3      	bne.n	8006bca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c22:	f023 0310 	bic.w	r3, r3, #16
 8006c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c34:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e3      	bne.n	8006c10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fa fe0d 	bl	800186c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f8c0 	bl	8006de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c68:	e099      	b.n	8006d9e <HAL_UART_IRQHandler+0x50e>
 8006c6a:	bf00      	nop
 8006c6c:	08006ec7 	.word	0x08006ec7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 808b 	beq.w	8006da2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 8086 	beq.w	8006da2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cba:	647a      	str	r2, [r7, #68]	; 0x44
 8006cbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e3      	bne.n	8006c96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3314      	adds	r3, #20
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	f023 0301 	bic.w	r3, r3, #1
 8006ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3314      	adds	r3, #20
 8006cee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cf2:	633a      	str	r2, [r7, #48]	; 0x30
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e3      	bne.n	8006cce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0310 	bic.w	r3, r3, #16
 8006d2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d38:	61fa      	str	r2, [r7, #28]
 8006d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	69b9      	ldr	r1, [r7, #24]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	617b      	str	r3, [r7, #20]
   return(result);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e3      	bne.n	8006d14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f848 	bl	8006de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d58:	e023      	b.n	8006da2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <HAL_UART_IRQHandler+0x4ea>
 8006d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8bb 	bl	8006eee <UART_Transmit_IT>
    return;
 8006d78:	e014      	b.n	8006da4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00e      	beq.n	8006da4 <HAL_UART_IRQHandler+0x514>
 8006d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f8fb 	bl	8006f8e <UART_EndTransmit_IT>
    return;
 8006d98:	e004      	b.n	8006da4 <HAL_UART_IRQHandler+0x514>
    return;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <HAL_UART_IRQHandler+0x514>
      return;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <HAL_UART_IRQHandler+0x514>
      return;
 8006da2:	bf00      	nop
  }
}
 8006da4:	37e8      	adds	r7, #232	; 0xe8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop

08006dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b095      	sub	sp, #84	; 0x54
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e28:	643a      	str	r2, [r7, #64]	; 0x40
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3314      	adds	r3, #20
 8006e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f023 0301 	bic.w	r3, r3, #1
 8006e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d119      	bne.n	8006eac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f023 0310 	bic.w	r3, r3, #16
 8006e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e98:	61ba      	str	r2, [r7, #24]
 8006e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006eba:	bf00      	nop
 8006ebc:	3754      	adds	r7, #84	; 0x54
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ff77 	bl	8006dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b21      	cmp	r3, #33	; 0x21
 8006f00:	d13e      	bne.n	8006f80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0a:	d114      	bne.n	8006f36 <UART_Transmit_IT+0x48>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d110      	bne.n	8006f36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	621a      	str	r2, [r3, #32]
 8006f34:	e008      	b.n	8006f48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6211      	str	r1, [r2, #32]
 8006f40:	781a      	ldrb	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4619      	mov	r1, r3
 8006f56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10f      	bne.n	8006f7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff fefc 	bl	8006dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b08c      	sub	sp, #48	; 0x30
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b22      	cmp	r3, #34	; 0x22
 8006fd0:	f040 80ab 	bne.w	800712a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fdc:	d117      	bne.n	800700e <UART_Receive_IT+0x50>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d113      	bne.n	800700e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	1c9a      	adds	r2, r3, #2
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	; 0x28
 800700c:	e026      	b.n	800705c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007014:	2300      	movs	r3, #0
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007020:	d007      	beq.n	8007032 <UART_Receive_IT+0x74>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <UART_Receive_IT+0x82>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	e008      	b.n	8007052 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704c:	b2da      	uxtb	r2, r3
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4619      	mov	r1, r3
 800706a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800706c:	2b00      	cmp	r3, #0
 800706e:	d15a      	bne.n	8007126 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0220 	bic.w	r2, r2, #32
 800707e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800708e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695a      	ldr	r2, [r3, #20]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0201 	bic.w	r2, r2, #1
 800709e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d135      	bne.n	800711c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	613b      	str	r3, [r7, #16]
   return(result);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f023 0310 	bic.w	r3, r3, #16
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	330c      	adds	r3, #12
 80070d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d6:	623a      	str	r2, [r7, #32]
 80070d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	69f9      	ldr	r1, [r7, #28]
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e5      	bne.n	80070b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b10      	cmp	r3, #16
 80070f6:	d10a      	bne.n	800710e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff fe67 	bl	8006de8 <HAL_UARTEx_RxEventCallback>
 800711a:	e002      	b.n	8007122 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff fe4f 	bl	8006dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	e002      	b.n	800712c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	e000      	b.n	800712c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800712a:	2302      	movs	r3, #2
  }
}
 800712c:	4618      	mov	r0, r3
 800712e:	3730      	adds	r7, #48	; 0x30
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007138:	b0c0      	sub	sp, #256	; 0x100
 800713a:	af00      	add	r7, sp, #0
 800713c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007150:	68d9      	ldr	r1, [r3, #12]
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	ea40 0301 	orr.w	r3, r0, r1
 800715c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800715e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	431a      	orrs	r2, r3
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	431a      	orrs	r2, r3
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800718c:	f021 010c 	bic.w	r1, r1, #12
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800719a:	430b      	orrs	r3, r1
 800719c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ae:	6999      	ldr	r1, [r3, #24]
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	ea40 0301 	orr.w	r3, r0, r1
 80071ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b8f      	ldr	r3, [pc, #572]	; (8007400 <UART_SetConfig+0x2cc>)
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d005      	beq.n	80071d4 <UART_SetConfig+0xa0>
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4b8d      	ldr	r3, [pc, #564]	; (8007404 <UART_SetConfig+0x2d0>)
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d104      	bne.n	80071de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071d4:	f7fd fb9a 	bl	800490c <HAL_RCC_GetPCLK2Freq>
 80071d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071dc:	e003      	b.n	80071e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071de:	f7fd fb81 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 80071e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f0:	f040 810c 	bne.w	800740c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	1891      	adds	r1, r2, r2
 800720c:	65b9      	str	r1, [r7, #88]	; 0x58
 800720e:	415b      	adcs	r3, r3
 8007210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007216:	4621      	mov	r1, r4
 8007218:	eb12 0801 	adds.w	r8, r2, r1
 800721c:	4629      	mov	r1, r5
 800721e:	eb43 0901 	adc.w	r9, r3, r1
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800722e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007236:	4690      	mov	r8, r2
 8007238:	4699      	mov	r9, r3
 800723a:	4623      	mov	r3, r4
 800723c:	eb18 0303 	adds.w	r3, r8, r3
 8007240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007244:	462b      	mov	r3, r5
 8007246:	eb49 0303 	adc.w	r3, r9, r3
 800724a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800724e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800725a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800725e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007262:	460b      	mov	r3, r1
 8007264:	18db      	adds	r3, r3, r3
 8007266:	653b      	str	r3, [r7, #80]	; 0x50
 8007268:	4613      	mov	r3, r2
 800726a:	eb42 0303 	adc.w	r3, r2, r3
 800726e:	657b      	str	r3, [r7, #84]	; 0x54
 8007270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007278:	f7f8 ffca 	bl	8000210 <__aeabi_uldivmod>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4b61      	ldr	r3, [pc, #388]	; (8007408 <UART_SetConfig+0x2d4>)
 8007282:	fba3 2302 	umull	r2, r3, r3, r2
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	011c      	lsls	r4, r3, #4
 800728a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728e:	2200      	movs	r2, #0
 8007290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007294:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	1891      	adds	r1, r2, r2
 80072a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80072a4:	415b      	adcs	r3, r3
 80072a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072ac:	4641      	mov	r1, r8
 80072ae:	eb12 0a01 	adds.w	sl, r2, r1
 80072b2:	4649      	mov	r1, r9
 80072b4:	eb43 0b01 	adc.w	fp, r3, r1
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072cc:	4692      	mov	sl, r2
 80072ce:	469b      	mov	fp, r3
 80072d0:	4643      	mov	r3, r8
 80072d2:	eb1a 0303 	adds.w	r3, sl, r3
 80072d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072da:	464b      	mov	r3, r9
 80072dc:	eb4b 0303 	adc.w	r3, fp, r3
 80072e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072f8:	460b      	mov	r3, r1
 80072fa:	18db      	adds	r3, r3, r3
 80072fc:	643b      	str	r3, [r7, #64]	; 0x40
 80072fe:	4613      	mov	r3, r2
 8007300:	eb42 0303 	adc.w	r3, r2, r3
 8007304:	647b      	str	r3, [r7, #68]	; 0x44
 8007306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800730a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800730e:	f7f8 ff7f 	bl	8000210 <__aeabi_uldivmod>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4611      	mov	r1, r2
 8007318:	4b3b      	ldr	r3, [pc, #236]	; (8007408 <UART_SetConfig+0x2d4>)
 800731a:	fba3 2301 	umull	r2, r3, r3, r1
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	2264      	movs	r2, #100	; 0x64
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	1acb      	subs	r3, r1, r3
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800732e:	4b36      	ldr	r3, [pc, #216]	; (8007408 <UART_SetConfig+0x2d4>)
 8007330:	fba3 2302 	umull	r2, r3, r3, r2
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800733c:	441c      	add	r4, r3
 800733e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007342:	2200      	movs	r2, #0
 8007344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800734c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	1891      	adds	r1, r2, r2
 8007356:	63b9      	str	r1, [r7, #56]	; 0x38
 8007358:	415b      	adcs	r3, r3
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007360:	4641      	mov	r1, r8
 8007362:	1851      	adds	r1, r2, r1
 8007364:	6339      	str	r1, [r7, #48]	; 0x30
 8007366:	4649      	mov	r1, r9
 8007368:	414b      	adcs	r3, r1
 800736a:	637b      	str	r3, [r7, #52]	; 0x34
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007378:	4659      	mov	r1, fp
 800737a:	00cb      	lsls	r3, r1, #3
 800737c:	4651      	mov	r1, sl
 800737e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007382:	4651      	mov	r1, sl
 8007384:	00ca      	lsls	r2, r1, #3
 8007386:	4610      	mov	r0, r2
 8007388:	4619      	mov	r1, r3
 800738a:	4603      	mov	r3, r0
 800738c:	4642      	mov	r2, r8
 800738e:	189b      	adds	r3, r3, r2
 8007390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007394:	464b      	mov	r3, r9
 8007396:	460a      	mov	r2, r1
 8007398:	eb42 0303 	adc.w	r3, r2, r3
 800739c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073b4:	460b      	mov	r3, r1
 80073b6:	18db      	adds	r3, r3, r3
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ba:	4613      	mov	r3, r2
 80073bc:	eb42 0303 	adc.w	r3, r2, r3
 80073c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073ca:	f7f8 ff21 	bl	8000210 <__aeabi_uldivmod>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <UART_SetConfig+0x2d4>)
 80073d4:	fba3 1302 	umull	r1, r3, r3, r2
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	2164      	movs	r1, #100	; 0x64
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	3332      	adds	r3, #50	; 0x32
 80073e6:	4a08      	ldr	r2, [pc, #32]	; (8007408 <UART_SetConfig+0x2d4>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	f003 0207 	and.w	r2, r3, #7
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4422      	add	r2, r4
 80073fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073fc:	e105      	b.n	800760a <UART_SetConfig+0x4d6>
 80073fe:	bf00      	nop
 8007400:	40011000 	.word	0x40011000
 8007404:	40011400 	.word	0x40011400
 8007408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800740c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007410:	2200      	movs	r2, #0
 8007412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800741a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800741e:	4642      	mov	r2, r8
 8007420:	464b      	mov	r3, r9
 8007422:	1891      	adds	r1, r2, r2
 8007424:	6239      	str	r1, [r7, #32]
 8007426:	415b      	adcs	r3, r3
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
 800742a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800742e:	4641      	mov	r1, r8
 8007430:	1854      	adds	r4, r2, r1
 8007432:	4649      	mov	r1, r9
 8007434:	eb43 0501 	adc.w	r5, r3, r1
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	00eb      	lsls	r3, r5, #3
 8007442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007446:	00e2      	lsls	r2, r4, #3
 8007448:	4614      	mov	r4, r2
 800744a:	461d      	mov	r5, r3
 800744c:	4643      	mov	r3, r8
 800744e:	18e3      	adds	r3, r4, r3
 8007450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007454:	464b      	mov	r3, r9
 8007456:	eb45 0303 	adc.w	r3, r5, r3
 800745a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800745e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800746a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	f04f 0300 	mov.w	r3, #0
 8007476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800747a:	4629      	mov	r1, r5
 800747c:	008b      	lsls	r3, r1, #2
 800747e:	4621      	mov	r1, r4
 8007480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007484:	4621      	mov	r1, r4
 8007486:	008a      	lsls	r2, r1, #2
 8007488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800748c:	f7f8 fec0 	bl	8000210 <__aeabi_uldivmod>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4b60      	ldr	r3, [pc, #384]	; (8007618 <UART_SetConfig+0x4e4>)
 8007496:	fba3 2302 	umull	r2, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	011c      	lsls	r4, r3, #4
 800749e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	61b9      	str	r1, [r7, #24]
 80074b8:	415b      	adcs	r3, r3
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c0:	4641      	mov	r1, r8
 80074c2:	1851      	adds	r1, r2, r1
 80074c4:	6139      	str	r1, [r7, #16]
 80074c6:	4649      	mov	r1, r9
 80074c8:	414b      	adcs	r3, r1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074d8:	4659      	mov	r1, fp
 80074da:	00cb      	lsls	r3, r1, #3
 80074dc:	4651      	mov	r1, sl
 80074de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e2:	4651      	mov	r1, sl
 80074e4:	00ca      	lsls	r2, r1, #3
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	4642      	mov	r2, r8
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074f4:	464b      	mov	r3, r9
 80074f6:	460a      	mov	r2, r1
 80074f8:	eb42 0303 	adc.w	r3, r2, r3
 80074fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	67bb      	str	r3, [r7, #120]	; 0x78
 800750a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007518:	4649      	mov	r1, r9
 800751a:	008b      	lsls	r3, r1, #2
 800751c:	4641      	mov	r1, r8
 800751e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007522:	4641      	mov	r1, r8
 8007524:	008a      	lsls	r2, r1, #2
 8007526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800752a:	f7f8 fe71 	bl	8000210 <__aeabi_uldivmod>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4b39      	ldr	r3, [pc, #228]	; (8007618 <UART_SetConfig+0x4e4>)
 8007534:	fba3 1302 	umull	r1, r3, r3, r2
 8007538:	095b      	lsrs	r3, r3, #5
 800753a:	2164      	movs	r1, #100	; 0x64
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	3332      	adds	r3, #50	; 0x32
 8007546:	4a34      	ldr	r2, [pc, #208]	; (8007618 <UART_SetConfig+0x4e4>)
 8007548:	fba2 2303 	umull	r2, r3, r2, r3
 800754c:	095b      	lsrs	r3, r3, #5
 800754e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007552:	441c      	add	r4, r3
 8007554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007558:	2200      	movs	r2, #0
 800755a:	673b      	str	r3, [r7, #112]	; 0x70
 800755c:	677a      	str	r2, [r7, #116]	; 0x74
 800755e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007562:	4642      	mov	r2, r8
 8007564:	464b      	mov	r3, r9
 8007566:	1891      	adds	r1, r2, r2
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	415b      	adcs	r3, r3
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007572:	4641      	mov	r1, r8
 8007574:	1851      	adds	r1, r2, r1
 8007576:	6039      	str	r1, [r7, #0]
 8007578:	4649      	mov	r1, r9
 800757a:	414b      	adcs	r3, r1
 800757c:	607b      	str	r3, [r7, #4]
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800758a:	4659      	mov	r1, fp
 800758c:	00cb      	lsls	r3, r1, #3
 800758e:	4651      	mov	r1, sl
 8007590:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007594:	4651      	mov	r1, sl
 8007596:	00ca      	lsls	r2, r1, #3
 8007598:	4610      	mov	r0, r2
 800759a:	4619      	mov	r1, r3
 800759c:	4603      	mov	r3, r0
 800759e:	4642      	mov	r2, r8
 80075a0:	189b      	adds	r3, r3, r2
 80075a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a4:	464b      	mov	r3, r9
 80075a6:	460a      	mov	r2, r1
 80075a8:	eb42 0303 	adc.w	r3, r2, r3
 80075ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	663b      	str	r3, [r7, #96]	; 0x60
 80075b8:	667a      	str	r2, [r7, #100]	; 0x64
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075c6:	4649      	mov	r1, r9
 80075c8:	008b      	lsls	r3, r1, #2
 80075ca:	4641      	mov	r1, r8
 80075cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d0:	4641      	mov	r1, r8
 80075d2:	008a      	lsls	r2, r1, #2
 80075d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075d8:	f7f8 fe1a 	bl	8000210 <__aeabi_uldivmod>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <UART_SetConfig+0x4e4>)
 80075e2:	fba3 1302 	umull	r1, r3, r3, r2
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	2164      	movs	r1, #100	; 0x64
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	3332      	adds	r3, #50	; 0x32
 80075f4:	4a08      	ldr	r2, [pc, #32]	; (8007618 <UART_SetConfig+0x4e4>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f003 020f 	and.w	r2, r3, #15
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4422      	add	r2, r4
 8007608:	609a      	str	r2, [r3, #8]
}
 800760a:	bf00      	nop
 800760c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007610:	46bd      	mov	sp, r7
 8007612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007616:	bf00      	nop
 8007618:	51eb851f 	.word	0x51eb851f

0800761c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800761c:	b084      	sub	sp, #16
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	f107 001c 	add.w	r0, r7, #28
 800762a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	2b01      	cmp	r3, #1
 8007632:	d122      	bne.n	800767a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800765c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765e:	2b01      	cmp	r3, #1
 8007660:	d105      	bne.n	800766e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 fbe8 	bl	8008e44 <USB_CoreReset>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]
 8007678:	e01a      	b.n	80076b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 fbdc 	bl	8008e44 <USB_CoreReset>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	639a      	str	r2, [r3, #56]	; 0x38
 80076a2:	e005      	b.n	80076b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10b      	bne.n	80076ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f043 0206 	orr.w	r2, r3, #6
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f043 0220 	orr.w	r2, r3, #32
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076da:	b004      	add	sp, #16
 80076dc:	4770      	bx	lr
	...

080076e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d165      	bne.n	80077c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4a41      	ldr	r2, [pc, #260]	; (80077fc <USB_SetTurnaroundTime+0x11c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d906      	bls.n	800770a <USB_SetTurnaroundTime+0x2a>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4a40      	ldr	r2, [pc, #256]	; (8007800 <USB_SetTurnaroundTime+0x120>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d202      	bcs.n	800770a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007704:	230f      	movs	r3, #15
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e062      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4a3c      	ldr	r2, [pc, #240]	; (8007800 <USB_SetTurnaroundTime+0x120>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d306      	bcc.n	8007720 <USB_SetTurnaroundTime+0x40>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4a3b      	ldr	r2, [pc, #236]	; (8007804 <USB_SetTurnaroundTime+0x124>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d202      	bcs.n	8007720 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800771a:	230e      	movs	r3, #14
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	e057      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4a38      	ldr	r2, [pc, #224]	; (8007804 <USB_SetTurnaroundTime+0x124>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d306      	bcc.n	8007736 <USB_SetTurnaroundTime+0x56>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4a37      	ldr	r2, [pc, #220]	; (8007808 <USB_SetTurnaroundTime+0x128>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d202      	bcs.n	8007736 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007730:	230d      	movs	r3, #13
 8007732:	617b      	str	r3, [r7, #20]
 8007734:	e04c      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4a33      	ldr	r2, [pc, #204]	; (8007808 <USB_SetTurnaroundTime+0x128>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d306      	bcc.n	800774c <USB_SetTurnaroundTime+0x6c>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4a32      	ldr	r2, [pc, #200]	; (800780c <USB_SetTurnaroundTime+0x12c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d802      	bhi.n	800774c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007746:	230c      	movs	r3, #12
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e041      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a2f      	ldr	r2, [pc, #188]	; (800780c <USB_SetTurnaroundTime+0x12c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d906      	bls.n	8007762 <USB_SetTurnaroundTime+0x82>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4a2e      	ldr	r2, [pc, #184]	; (8007810 <USB_SetTurnaroundTime+0x130>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d802      	bhi.n	8007762 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800775c:	230b      	movs	r3, #11
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e036      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <USB_SetTurnaroundTime+0x130>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d906      	bls.n	8007778 <USB_SetTurnaroundTime+0x98>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4a29      	ldr	r2, [pc, #164]	; (8007814 <USB_SetTurnaroundTime+0x134>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d802      	bhi.n	8007778 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007772:	230a      	movs	r3, #10
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e02b      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4a26      	ldr	r2, [pc, #152]	; (8007814 <USB_SetTurnaroundTime+0x134>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d906      	bls.n	800778e <USB_SetTurnaroundTime+0xae>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4a25      	ldr	r2, [pc, #148]	; (8007818 <USB_SetTurnaroundTime+0x138>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d202      	bcs.n	800778e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007788:	2309      	movs	r3, #9
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e020      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a21      	ldr	r2, [pc, #132]	; (8007818 <USB_SetTurnaroundTime+0x138>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d306      	bcc.n	80077a4 <USB_SetTurnaroundTime+0xc4>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4a20      	ldr	r2, [pc, #128]	; (800781c <USB_SetTurnaroundTime+0x13c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d802      	bhi.n	80077a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800779e:	2308      	movs	r3, #8
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	e015      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4a1d      	ldr	r2, [pc, #116]	; (800781c <USB_SetTurnaroundTime+0x13c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d906      	bls.n	80077ba <USB_SetTurnaroundTime+0xda>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4a1c      	ldr	r2, [pc, #112]	; (8007820 <USB_SetTurnaroundTime+0x140>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d202      	bcs.n	80077ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077b4:	2307      	movs	r3, #7
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e00a      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077ba:	2306      	movs	r3, #6
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	e007      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d102      	bne.n	80077cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077c6:	2309      	movs	r3, #9
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	e001      	b.n	80077d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077cc:	2309      	movs	r3, #9
 80077ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	029b      	lsls	r3, r3, #10
 80077e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077e8:	431a      	orrs	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	00d8acbf 	.word	0x00d8acbf
 8007800:	00e4e1c0 	.word	0x00e4e1c0
 8007804:	00f42400 	.word	0x00f42400
 8007808:	01067380 	.word	0x01067380
 800780c:	011a499f 	.word	0x011a499f
 8007810:	01312cff 	.word	0x01312cff
 8007814:	014ca43f 	.word	0x014ca43f
 8007818:	016e3600 	.word	0x016e3600
 800781c:	01a6ab1f 	.word	0x01a6ab1f
 8007820:	01e84800 	.word	0x01e84800

08007824 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f043 0201 	orr.w	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f023 0201 	bic.w	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007884:	78fb      	ldrb	r3, [r7, #3]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d115      	bne.n	80078b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007896:	2001      	movs	r0, #1
 8007898:	f7f9 fdaa 	bl	80013f0 <HAL_Delay>
      ms++;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 fa3f 	bl	8008d26 <USB_GetMode>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d01e      	beq.n	80078ec <USB_SetCurrentMode+0x84>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b31      	cmp	r3, #49	; 0x31
 80078b2:	d9f0      	bls.n	8007896 <USB_SetCurrentMode+0x2e>
 80078b4:	e01a      	b.n	80078ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d115      	bne.n	80078e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078c8:	2001      	movs	r0, #1
 80078ca:	f7f9 fd91 	bl	80013f0 <HAL_Delay>
      ms++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 fa26 	bl	8008d26 <USB_GetMode>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <USB_SetCurrentMode+0x84>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b31      	cmp	r3, #49	; 0x31
 80078e4:	d9f0      	bls.n	80078c8 <USB_SetCurrentMode+0x60>
 80078e6:	e001      	b.n	80078ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e005      	b.n	80078f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b32      	cmp	r3, #50	; 0x32
 80078f0:	d101      	bne.n	80078f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007900:	b084      	sub	sp, #16
 8007902:	b580      	push	{r7, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800790e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800791a:	2300      	movs	r3, #0
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	e009      	b.n	8007934 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3340      	adds	r3, #64	; 0x40
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	2200      	movs	r2, #0
 800792c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3301      	adds	r3, #1
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2b0e      	cmp	r3, #14
 8007938:	d9f2      	bls.n	8007920 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800793a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d11c      	bne.n	800797a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800794e:	f043 0302 	orr.w	r3, r3, #2
 8007952:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e005      	b.n	8007986 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800798c:	461a      	mov	r2, r3
 800798e:	2300      	movs	r3, #0
 8007990:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007998:	4619      	mov	r1, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a0:	461a      	mov	r2, r3
 80079a2:	680b      	ldr	r3, [r1, #0]
 80079a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d10c      	bne.n	80079c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079b2:	2100      	movs	r1, #0
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f965 	bl	8007c84 <USB_SetDevSpeed>
 80079ba:	e008      	b.n	80079ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079bc:	2101      	movs	r1, #1
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f960 	bl	8007c84 <USB_SetDevSpeed>
 80079c4:	e003      	b.n	80079ce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079c6:	2103      	movs	r1, #3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f95b 	bl	8007c84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079ce:	2110      	movs	r1, #16
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f8f3 	bl	8007bbc <USB_FlushTxFifo>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f91f 	bl	8007c24 <USB_FlushRxFifo>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f6:	461a      	mov	r2, r3
 80079f8:	2300      	movs	r3, #0
 80079fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a02:	461a      	mov	r2, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0e:	461a      	mov	r2, r3
 8007a10:	2300      	movs	r3, #0
 8007a12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	e043      	b.n	8007aa2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a30:	d118      	bne.n	8007a64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	461a      	mov	r2, r3
 8007a46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	e013      	b.n	8007a76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e008      	b.n	8007a76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	461a      	mov	r2, r3
 8007a72:	2300      	movs	r3, #0
 8007a74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a82:	461a      	mov	r2, r3
 8007a84:	2300      	movs	r3, #0
 8007a86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a94:	461a      	mov	r2, r3
 8007a96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	613b      	str	r3, [r7, #16]
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d3b7      	bcc.n	8007a1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
 8007aae:	e043      	b.n	8007b38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac6:	d118      	bne.n	8007afa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ada:	461a      	mov	r2, r3
 8007adc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	e013      	b.n	8007b0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af0:	461a      	mov	r2, r3
 8007af2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	e008      	b.n	8007b0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	461a      	mov	r2, r3
 8007b08:	2300      	movs	r3, #0
 8007b0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	3301      	adds	r3, #1
 8007b36:	613b      	str	r3, [r7, #16]
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d3b7      	bcc.n	8007ab0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d105      	bne.n	8007b74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f043 0210 	orr.w	r2, r3, #16
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699a      	ldr	r2, [r3, #24]
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <USB_DevInit+0x2b8>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	f043 0208 	orr.w	r2, r3, #8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d107      	bne.n	8007ba8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ba0:	f043 0304 	orr.w	r3, r3, #4
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bb4:	b004      	add	sp, #16
 8007bb6:	4770      	bx	lr
 8007bb8:	803c3800 	.word	0x803c3800

08007bbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a13      	ldr	r2, [pc, #76]	; (8007c20 <USB_FlushTxFifo+0x64>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d901      	bls.n	8007bdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e01b      	b.n	8007c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	daf2      	bge.n	8007bca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	019b      	lsls	r3, r3, #6
 8007bec:	f043 0220 	orr.w	r2, r3, #32
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a08      	ldr	r2, [pc, #32]	; (8007c20 <USB_FlushTxFifo+0x64>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e006      	b.n	8007c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d0f0      	beq.n	8007bf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	00030d40 	.word	0x00030d40

08007c24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4a11      	ldr	r2, [pc, #68]	; (8007c80 <USB_FlushRxFifo+0x5c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e018      	b.n	8007c74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	daf2      	bge.n	8007c30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2210      	movs	r2, #16
 8007c52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4a08      	ldr	r2, [pc, #32]	; (8007c80 <USB_FlushRxFifo+0x5c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d901      	bls.n	8007c66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e006      	b.n	8007c74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	2b10      	cmp	r3, #16
 8007c70:	d0f0      	beq.n	8007c54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	00030d40 	.word	0x00030d40

08007c84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	68f9      	ldr	r1, [r7, #12]
 8007ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b087      	sub	sp, #28
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 0306 	and.w	r3, r3, #6
 8007cce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]
 8007cda:	e00a      	b.n	8007cf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d002      	beq.n	8007ce8 <USB_GetDevSpeed+0x32>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b06      	cmp	r3, #6
 8007ce6:	d102      	bne.n	8007cee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	75fb      	strb	r3, [r7, #23]
 8007cec:	e001      	b.n	8007cf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cee:	230f      	movs	r3, #15
 8007cf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d13a      	bne.n	8007d92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	68f9      	ldr	r1, [r7, #12]
 8007d36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d155      	bne.n	8007e00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	059b      	lsls	r3, r3, #22
 8007d76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	e036      	b.n	8007e00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d98:	69da      	ldr	r2, [r3, #28]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	2101      	movs	r1, #1
 8007da4:	fa01 f303 	lsl.w	r3, r1, r3
 8007da8:	041b      	lsls	r3, r3, #16
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007db0:	4313      	orrs	r3, r2
 8007db2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d11a      	bne.n	8007e00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	791b      	ldrb	r3, [r3, #4]
 8007de4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007de6:	430b      	orrs	r3, r1
 8007de8:	4313      	orrs	r3, r2
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	0151      	lsls	r1, r2, #5
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	440a      	add	r2, r1
 8007df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
	...

08007e10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d161      	bne.n	8007ef0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e42:	d11f      	bne.n	8007e84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	0151      	lsls	r1, r2, #5
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	440a      	add	r2, r1
 8007e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	0151      	lsls	r1, r2, #5
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	440a      	add	r2, r1
 8007e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	2101      	movs	r1, #1
 8007e96:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eae:	69da      	ldr	r2, [r3, #28]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	2101      	movs	r1, #1
 8007eba:	fa01 f303 	lsl.w	r3, r1, r3
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	68f9      	ldr	r1, [r7, #12]
 8007ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec8:	4013      	ands	r3, r2
 8007eca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	0159      	lsls	r1, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	440b      	add	r3, r1
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4b35      	ldr	r3, [pc, #212]	; (8007fc0 <USB_DeactivateEndpoint+0x1b0>)
 8007eea:	4013      	ands	r3, r2
 8007eec:	600b      	str	r3, [r1, #0]
 8007eee:	e060      	b.n	8007fb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f06:	d11f      	bne.n	8007f48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	0151      	lsls	r1, r2, #5
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	440a      	add	r2, r1
 8007f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	2101      	movs	r1, #1
 8007f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5e:	041b      	lsls	r3, r3, #16
 8007f60:	43db      	mvns	r3, r3
 8007f62:	68f9      	ldr	r1, [r7, #12]
 8007f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f68:	4013      	ands	r3, r2
 8007f6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	f003 030f 	and.w	r3, r3, #15
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f82:	041b      	lsls	r3, r3, #16
 8007f84:	43db      	mvns	r3, r3
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	0159      	lsls	r1, r3, #5
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	440b      	add	r3, r1
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	4619      	mov	r1, r3
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <USB_DeactivateEndpoint+0x1b4>)
 8007fae:	4013      	ands	r3, r2
 8007fb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	ec337800 	.word	0xec337800
 8007fc4:	eff37800 	.word	0xeff37800

08007fc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	; 0x28
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	f040 815c 	bne.w	80082a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d132      	bne.n	8008058 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	69fa      	ldr	r2, [r7, #28]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008010:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008050:	0cdb      	lsrs	r3, r3, #19
 8008052:	04db      	lsls	r3, r3, #19
 8008054:	6113      	str	r3, [r2, #16]
 8008056:	e074      	b.n	8008142 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	440a      	add	r2, r1
 800806e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008072:	0cdb      	lsrs	r3, r3, #19
 8008074:	04db      	lsls	r3, r3, #19
 8008076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	440a      	add	r2, r1
 800808e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008092:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008096:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800809a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	6999      	ldr	r1, [r3, #24]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	440b      	add	r3, r1
 80080b4:	1e59      	subs	r1, r3, #1
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80080be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080c0:	4b9d      	ldr	r3, [pc, #628]	; (8008338 <USB_EPStartXfer+0x370>)
 80080c2:	400b      	ands	r3, r1
 80080c4:	69b9      	ldr	r1, [r7, #24]
 80080c6:	0148      	lsls	r0, r1, #5
 80080c8:	69f9      	ldr	r1, [r7, #28]
 80080ca:	4401      	add	r1, r0
 80080cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080d0:	4313      	orrs	r3, r2
 80080d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e0:	691a      	ldr	r2, [r3, #16]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ea:	69b9      	ldr	r1, [r7, #24]
 80080ec:	0148      	lsls	r0, r1, #5
 80080ee:	69f9      	ldr	r1, [r7, #28]
 80080f0:	4401      	add	r1, r0
 80080f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080f6:	4313      	orrs	r3, r2
 80080f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	791b      	ldrb	r3, [r3, #4]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d11f      	bne.n	8008142 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	440a      	add	r2, r1
 8008118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008120:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	0151      	lsls	r1, r2, #5
 8008134:	69fa      	ldr	r2, [r7, #28]
 8008136:	440a      	add	r2, r1
 8008138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800813c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008140:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d14b      	bne.n	80081e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d009      	beq.n	8008164 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	461a      	mov	r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	791b      	ldrb	r3, [r3, #4]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d128      	bne.n	80081be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008178:	2b00      	cmp	r3, #0
 800817a:	d110      	bne.n	800819e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	440a      	add	r2, r1
 8008192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008196:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	e00f      	b.n	80081be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	0151      	lsls	r1, r2, #5
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	440a      	add	r2, r1
 80081b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	0151      	lsls	r1, r2, #5
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	440a      	add	r2, r1
 80081d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	e133      	b.n	8008448 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	0151      	lsls	r1, r2, #5
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	440a      	add	r2, r1
 80081f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	791b      	ldrb	r3, [r3, #4]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d015      	beq.n	8008234 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 811b 	beq.w	8008448 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	2101      	movs	r1, #1
 8008224:	fa01 f303 	lsl.w	r3, r1, r3
 8008228:	69f9      	ldr	r1, [r7, #28]
 800822a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800822e:	4313      	orrs	r3, r2
 8008230:	634b      	str	r3, [r1, #52]	; 0x34
 8008232:	e109      	b.n	8008448 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d110      	bne.n	8008266 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	69fa      	ldr	r2, [r7, #28]
 8008258:	440a      	add	r2, r1
 800825a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800825e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	e00f      	b.n	8008286 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	440a      	add	r2, r1
 800827c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008284:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6919      	ldr	r1, [r3, #16]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	781a      	ldrb	r2, [r3, #0]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	b298      	uxth	r0, r3
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	4603      	mov	r3, r0
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 fade 	bl	800885c <USB_WritePacket>
 80082a0:	e0d2      	b.n	8008448 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082bc:	0cdb      	lsrs	r3, r3, #19
 80082be:	04db      	lsls	r3, r3, #19
 80082c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d126      	bne.n	800833c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008304:	69b9      	ldr	r1, [r7, #24]
 8008306:	0148      	lsls	r0, r1, #5
 8008308:	69f9      	ldr	r1, [r7, #28]
 800830a:	4401      	add	r1, r0
 800830c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008310:	4313      	orrs	r3, r2
 8008312:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	440a      	add	r2, r1
 800832a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800832e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008332:	6113      	str	r3, [r2, #16]
 8008334:	e03a      	b.n	80083ac <USB_EPStartXfer+0x3e4>
 8008336:	bf00      	nop
 8008338:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	699a      	ldr	r2, [r3, #24]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	4413      	add	r3, r2
 8008346:	1e5a      	subs	r2, r3, #1
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008350:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	8afa      	ldrh	r2, [r7, #22]
 8008358:	fb03 f202 	mul.w	r2, r3, r2
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	8afb      	ldrh	r3, [r7, #22]
 8008370:	04d9      	lsls	r1, r3, #19
 8008372:	4b38      	ldr	r3, [pc, #224]	; (8008454 <USB_EPStartXfer+0x48c>)
 8008374:	400b      	ands	r3, r1
 8008376:	69b9      	ldr	r1, [r7, #24]
 8008378:	0148      	lsls	r0, r1, #5
 800837a:	69f9      	ldr	r1, [r7, #28]
 800837c:	4401      	add	r1, r0
 800837e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008382:	4313      	orrs	r3, r2
 8008384:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	4413      	add	r3, r2
 800838e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800839c:	69b9      	ldr	r1, [r7, #24]
 800839e:	0148      	lsls	r0, r1, #5
 80083a0:	69f9      	ldr	r1, [r7, #28]
 80083a2:	4401      	add	r1, r0
 80083a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083a8:	4313      	orrs	r3, r2
 80083aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d10d      	bne.n	80083ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d009      	beq.n	80083ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6919      	ldr	r1, [r3, #16]
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	460a      	mov	r2, r1
 80083cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	791b      	ldrb	r3, [r3, #4]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d128      	bne.n	8008428 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d110      	bne.n	8008408 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008400:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	e00f      	b.n	8008428 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	440a      	add	r2, r1
 800841e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008426:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	1ff80000 	.word	0x1ff80000

08008458 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b01      	cmp	r3, #1
 8008476:	f040 80ce 	bne.w	8008616 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d132      	bne.n	80084e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	0151      	lsls	r1, r2, #5
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	440a      	add	r2, r1
 8008498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800849c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e0:	0cdb      	lsrs	r3, r3, #19
 80084e2:	04db      	lsls	r3, r3, #19
 80084e4:	6113      	str	r3, [r2, #16]
 80084e6:	e04e      	b.n	8008586 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	0151      	lsls	r1, r2, #5
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	440a      	add	r2, r1
 80084fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008502:	0cdb      	lsrs	r3, r3, #19
 8008504:	04db      	lsls	r3, r3, #19
 8008506:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	0151      	lsls	r1, r2, #5
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	440a      	add	r2, r1
 800851e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008522:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008526:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800852a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	699a      	ldr	r2, [r3, #24]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	429a      	cmp	r2, r3
 8008536:	d903      	bls.n	8008540 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	440a      	add	r2, r1
 8008556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800855a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800855e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008576:	6939      	ldr	r1, [r7, #16]
 8008578:	0148      	lsls	r0, r1, #5
 800857a:	6979      	ldr	r1, [r7, #20]
 800857c:	4401      	add	r1, r0
 800857e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008582:	4313      	orrs	r3, r2
 8008584:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d11e      	bne.n	80085ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d009      	beq.n	80085a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a0:	461a      	mov	r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	e097      	b.n	80086fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8083 	beq.w	80086fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	2101      	movs	r1, #1
 8008606:	fa01 f303 	lsl.w	r3, r1, r3
 800860a:	6979      	ldr	r1, [r7, #20]
 800860c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008610:	4313      	orrs	r3, r2
 8008612:	634b      	str	r3, [r1, #52]	; 0x34
 8008614:	e071      	b.n	80086fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	0151      	lsls	r1, r2, #5
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	440a      	add	r2, r1
 800862c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008630:	0cdb      	lsrs	r3, r3, #19
 8008632:	04db      	lsls	r3, r3, #19
 8008634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008658:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869e:	691a      	ldr	r2, [r3, #16]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086a8:	6939      	ldr	r1, [r7, #16]
 80086aa:	0148      	lsls	r0, r1, #5
 80086ac:	6979      	ldr	r1, [r7, #20]
 80086ae:	4401      	add	r1, r0
 80086b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086b4:	4313      	orrs	r3, r2
 80086b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d10d      	bne.n	80086da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	6919      	ldr	r1, [r3, #16]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d6:	460a      	mov	r2, r1
 80086d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	0151      	lsls	r1, r2, #5
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	440a      	add	r2, r1
 80086f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	785b      	ldrb	r3, [r3, #1]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d14a      	bne.n	80087bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800873a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800873e:	f040 8086 	bne.w	800884e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	0151      	lsls	r1, r2, #5
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	440a      	add	r2, r1
 800875c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008760:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008764:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	7812      	ldrb	r2, [r2, #0]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	440a      	add	r2, r1
 8008780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008788:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f242 7210 	movw	r2, #10000	; 0x2710
 8008796:	4293      	cmp	r3, r2
 8008798:	d902      	bls.n	80087a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	75fb      	strb	r3, [r7, #23]
          break;
 800879e:	e056      	b.n	800884e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b8:	d0e7      	beq.n	800878a <USB_EPStopXfer+0x82>
 80087ba:	e048      	b.n	800884e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087d4:	d13b      	bne.n	800884e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	4413      	add	r3, r2
 8008804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	440a      	add	r2, r1
 8008814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800881c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3301      	adds	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f242 7210 	movw	r2, #10000	; 0x2710
 800882a:	4293      	cmp	r3, r2
 800882c:	d902      	bls.n	8008834 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	75fb      	strb	r3, [r7, #23]
          break;
 8008832:	e00c      	b.n	800884e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800884c:	d0e7      	beq.n	800881e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008850:	4618      	mov	r0, r3
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800885c:	b480      	push	{r7}
 800885e:	b089      	sub	sp, #36	; 0x24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4611      	mov	r1, r2
 8008868:	461a      	mov	r2, r3
 800886a:	460b      	mov	r3, r1
 800886c:	71fb      	strb	r3, [r7, #7]
 800886e:	4613      	mov	r3, r2
 8008870:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800887a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800887e:	2b00      	cmp	r3, #0
 8008880:	d123      	bne.n	80088ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008882:	88bb      	ldrh	r3, [r7, #4]
 8008884:	3303      	adds	r3, #3
 8008886:	089b      	lsrs	r3, r3, #2
 8008888:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800888a:	2300      	movs	r3, #0
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	e018      	b.n	80088c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	031a      	lsls	r2, r3, #12
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	4413      	add	r3, r2
 8008898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800889c:	461a      	mov	r2, r3
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	3301      	adds	r3, #1
 80088a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	3301      	adds	r3, #1
 80088ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	3301      	adds	r3, #1
 80088b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	3301      	adds	r3, #1
 80088ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	3301      	adds	r3, #1
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d3e2      	bcc.n	8008890 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3724      	adds	r7, #36	; 0x24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088d8:	b480      	push	{r7}
 80088da:	b08b      	sub	sp, #44	; 0x2c
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088ee:	88fb      	ldrh	r3, [r7, #6]
 80088f0:	089b      	lsrs	r3, r3, #2
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088f6:	88fb      	ldrh	r3, [r7, #6]
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088fe:	2300      	movs	r3, #0
 8008900:	623b      	str	r3, [r7, #32]
 8008902:	e014      	b.n	800892e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	3301      	adds	r3, #1
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	3301      	adds	r3, #1
 800891a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	3301      	adds	r3, #1
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	3301      	adds	r3, #1
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	3301      	adds	r3, #1
 800892c:	623b      	str	r3, [r7, #32]
 800892e:	6a3a      	ldr	r2, [r7, #32]
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	429a      	cmp	r2, r3
 8008934:	d3e6      	bcc.n	8008904 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008936:	8bfb      	ldrh	r3, [r7, #30]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01e      	beq.n	800897a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008946:	461a      	mov	r2, r3
 8008948:	f107 0310 	add.w	r3, r7, #16
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	b2db      	uxtb	r3, r3
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
 800895c:	b2da      	uxtb	r2, r3
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	701a      	strb	r2, [r3, #0]
      i++;
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	3301      	adds	r3, #1
 8008966:	623b      	str	r3, [r7, #32]
      pDest++;
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	3301      	adds	r3, #1
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800896e:	8bfb      	ldrh	r3, [r7, #30]
 8008970:	3b01      	subs	r3, #1
 8008972:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008974:	8bfb      	ldrh	r3, [r7, #30]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1ea      	bne.n	8008950 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800897c:	4618      	mov	r0, r3
 800897e:	372c      	adds	r7, #44	; 0x2c
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d12c      	bne.n	80089fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	db12      	blt.n	80089dc <USB_EPSetStall+0x54>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00f      	beq.n	80089dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089fa:	6013      	str	r3, [r2, #0]
 80089fc:	e02b      	b.n	8008a56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	db12      	blt.n	8008a36 <USB_EPSetStall+0xae>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00f      	beq.n	8008a36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	0151      	lsls	r1, r2, #5
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	440a      	add	r2, r1
 8008a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	785b      	ldrb	r3, [r3, #1]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d128      	bne.n	8008ad2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	791b      	ldrb	r3, [r3, #4]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d003      	beq.n	8008ab0 <USB_EPClearStall+0x4c>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	791b      	ldrb	r3, [r3, #4]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d138      	bne.n	8008b22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	e027      	b.n	8008b22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008af0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	791b      	ldrb	r3, [r3, #4]
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d003      	beq.n	8008b02 <USB_EPClearStall+0x9e>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	791b      	ldrb	r3, [r3, #4]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d10f      	bne.n	8008b22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	0151      	lsls	r1, r2, #5
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	440a      	add	r2, r1
 8008b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b64:	68f9      	ldr	r1, [r7, #12]
 8008b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b96:	f023 0303 	bic.w	r3, r3, #3
 8008b9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008baa:	f023 0302 	bic.w	r3, r3, #2
 8008bae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bd8:	f023 0303 	bic.w	r3, r3, #3
 8008bdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bec:	f043 0302 	orr.w	r3, r3, #2
 8008bf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	4013      	ands	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c18:	68fb      	ldr	r3, [r7, #12]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	4013      	ands	r3, r2
 8008c48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	0c1b      	lsrs	r3, r3, #16
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	b29b      	uxth	r3, r3
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c9e:	78fb      	ldrb	r3, [r7, #3]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b087      	sub	sp, #28
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	f003 030f 	and.w	r3, r3, #15
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfa:	01db      	lsls	r3, r3, #7
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4013      	ands	r3, r2
 8008d16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d18:	68bb      	ldr	r3, [r7, #8]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	f003 0301 	and.w	r3, r3, #1
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b085      	sub	sp, #20
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d60:	f023 0307 	bic.w	r3, r3, #7
 8008d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	460b      	mov	r3, r1
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	333c      	adds	r3, #60	; 0x3c
 8008d9e:	3304      	adds	r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	4a26      	ldr	r2, [pc, #152]	; (8008e40 <USB_EP0_OutStart+0xb8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d90a      	bls.n	8008dc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dbc:	d101      	bne.n	8008dc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e037      	b.n	8008e32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df0:	f043 0318 	orr.w	r3, r3, #24
 8008df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d10f      	bne.n	8008e30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	4f54300a 	.word	0x4f54300a

08008e44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4a13      	ldr	r2, [pc, #76]	; (8008ea8 <USB_CoreReset+0x64>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d901      	bls.n	8008e62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e01b      	b.n	8008e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	daf2      	bge.n	8008e50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f043 0201 	orr.w	r2, r3, #1
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a09      	ldr	r2, [pc, #36]	; (8008ea8 <USB_CoreReset+0x64>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d901      	bls.n	8008e8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e006      	b.n	8008e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d0f0      	beq.n	8008e7a <USB_CoreReset+0x36>

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	00030d40 	.word	0x00030d40

08008eac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008eb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ebc:	f008 fc78 	bl	80117b0 <USBD_static_malloc>
 8008ec0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d109      	bne.n	8008edc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32b0      	adds	r2, #176	; 0xb0
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e0d4      	b.n	8009086 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008edc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f008 fd02 	bl	80118ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	32b0      	adds	r2, #176	; 0xb0
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	32b0      	adds	r2, #176	; 0xb0
 8008f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	7c1b      	ldrb	r3, [r3, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d138      	bne.n	8008f86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f14:	4b5e      	ldr	r3, [pc, #376]	; (8009090 <USBD_CDC_Init+0x1e4>)
 8008f16:	7819      	ldrb	r1, [r3, #0]
 8008f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f008 fad5 	bl	80114ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f24:	4b5a      	ldr	r3, [pc, #360]	; (8009090 <USBD_CDC_Init+0x1e4>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f003 020f 	and.w	r2, r3, #15
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	3324      	adds	r3, #36	; 0x24
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f3e:	4b55      	ldr	r3, [pc, #340]	; (8009094 <USBD_CDC_Init+0x1e8>)
 8008f40:	7819      	ldrb	r1, [r3, #0]
 8008f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f46:	2202      	movs	r2, #2
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f008 fac0 	bl	80114ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f4e:	4b51      	ldr	r3, [pc, #324]	; (8009094 <USBD_CDC_Init+0x1e8>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f003 020f 	and.w	r2, r3, #15
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f66:	2201      	movs	r2, #1
 8008f68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f6a:	4b4b      	ldr	r3, [pc, #300]	; (8009098 <USBD_CDC_Init+0x1ec>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	f003 020f 	and.w	r2, r3, #15
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	3326      	adds	r3, #38	; 0x26
 8008f80:	2210      	movs	r2, #16
 8008f82:	801a      	strh	r2, [r3, #0]
 8008f84:	e035      	b.n	8008ff2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f86:	4b42      	ldr	r3, [pc, #264]	; (8009090 <USBD_CDC_Init+0x1e4>)
 8008f88:	7819      	ldrb	r1, [r3, #0]
 8008f8a:	2340      	movs	r3, #64	; 0x40
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f008 fa9d 	bl	80114ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f94:	4b3e      	ldr	r3, [pc, #248]	; (8009090 <USBD_CDC_Init+0x1e4>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	f003 020f 	and.w	r2, r3, #15
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	3324      	adds	r3, #36	; 0x24
 8008faa:	2201      	movs	r2, #1
 8008fac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008fae:	4b39      	ldr	r3, [pc, #228]	; (8009094 <USBD_CDC_Init+0x1e8>)
 8008fb0:	7819      	ldrb	r1, [r3, #0]
 8008fb2:	2340      	movs	r3, #64	; 0x40
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f008 fa89 	bl	80114ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008fbc:	4b35      	ldr	r3, [pc, #212]	; (8009094 <USBD_CDC_Init+0x1e8>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 020f 	and.w	r2, r3, #15
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008fd8:	4b2f      	ldr	r3, [pc, #188]	; (8009098 <USBD_CDC_Init+0x1ec>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	3326      	adds	r3, #38	; 0x26
 8008fee:	2210      	movs	r2, #16
 8008ff0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ff2:	4b29      	ldr	r3, [pc, #164]	; (8009098 <USBD_CDC_Init+0x1ec>)
 8008ff4:	7819      	ldrb	r1, [r3, #0]
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f008 fa67 	bl	80114ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009000:	4b25      	ldr	r3, [pc, #148]	; (8009098 <USBD_CDC_Init+0x1ec>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 020f 	and.w	r2, r3, #15
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	440b      	add	r3, r1
 8009014:	3324      	adds	r3, #36	; 0x24
 8009016:	2201      	movs	r2, #1
 8009018:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	33b0      	adds	r3, #176	; 0xb0
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009050:	2302      	movs	r3, #2
 8009052:	e018      	b.n	8009086 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	7c1b      	ldrb	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800905c:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <USBD_CDC_Init+0x1e8>)
 800905e:	7819      	ldrb	r1, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f008 fb1e 	bl	80116ac <USBD_LL_PrepareReceive>
 8009070:	e008      	b.n	8009084 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009072:	4b08      	ldr	r3, [pc, #32]	; (8009094 <USBD_CDC_Init+0x1e8>)
 8009074:	7819      	ldrb	r1, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800907c:	2340      	movs	r3, #64	; 0x40
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f008 fb14 	bl	80116ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20002617 	.word	0x20002617
 8009094:	20002618 	.word	0x20002618
 8009098:	20002619 	.word	0x20002619

0800909c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80090a8:	4b3a      	ldr	r3, [pc, #232]	; (8009194 <USBD_CDC_DeInit+0xf8>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f008 fa33 	bl	801151a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80090b4:	4b37      	ldr	r3, [pc, #220]	; (8009194 <USBD_CDC_DeInit+0xf8>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	3324      	adds	r3, #36	; 0x24
 80090ca:	2200      	movs	r2, #0
 80090cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80090ce:	4b32      	ldr	r3, [pc, #200]	; (8009198 <USBD_CDC_DeInit+0xfc>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f008 fa20 	bl	801151a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80090da:	4b2f      	ldr	r3, [pc, #188]	; (8009198 <USBD_CDC_DeInit+0xfc>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	f003 020f 	and.w	r2, r3, #15
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	4613      	mov	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	440b      	add	r3, r1
 80090ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090f2:	2200      	movs	r2, #0
 80090f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80090f6:	4b29      	ldr	r3, [pc, #164]	; (800919c <USBD_CDC_DeInit+0x100>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f008 fa0c 	bl	801151a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009102:	4b26      	ldr	r3, [pc, #152]	; (800919c <USBD_CDC_DeInit+0x100>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	f003 020f 	and.w	r2, r3, #15
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	3324      	adds	r3, #36	; 0x24
 8009118:	2200      	movs	r2, #0
 800911a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800911c:	4b1f      	ldr	r3, [pc, #124]	; (800919c <USBD_CDC_DeInit+0x100>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	f003 020f 	and.w	r2, r3, #15
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	3326      	adds	r3, #38	; 0x26
 8009132:	2200      	movs	r2, #0
 8009134:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	32b0      	adds	r2, #176	; 0xb0
 8009140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d01f      	beq.n	8009188 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	33b0      	adds	r3, #176	; 0xb0
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	32b0      	adds	r2, #176	; 0xb0
 8009166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916a:	4618      	mov	r0, r3
 800916c:	f008 fb2e 	bl	80117cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	32b0      	adds	r2, #176	; 0xb0
 800917a:	2100      	movs	r1, #0
 800917c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20002617 	.word	0x20002617
 8009198:	20002618 	.word	0x20002618
 800919c:	20002619 	.word	0x20002619

080091a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	32b0      	adds	r2, #176	; 0xb0
 80091b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e0bf      	b.n	8009350 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d050      	beq.n	800927e <USBD_CDC_Setup+0xde>
 80091dc:	2b20      	cmp	r3, #32
 80091de:	f040 80af 	bne.w	8009340 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	88db      	ldrh	r3, [r3, #6]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d03a      	beq.n	8009260 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	b25b      	sxtb	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	da1b      	bge.n	800922c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	33b0      	adds	r3, #176	; 0xb0
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800920a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	88d2      	ldrh	r2, [r2, #6]
 8009210:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	88db      	ldrh	r3, [r3, #6]
 8009216:	2b07      	cmp	r3, #7
 8009218:	bf28      	it	cs
 800921a:	2307      	movcs	r3, #7
 800921c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	89fa      	ldrh	r2, [r7, #14]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 fdb3 	bl	800ad90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800922a:	e090      	b.n	800934e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	785a      	ldrb	r2, [r3, #1]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	88db      	ldrh	r3, [r3, #6]
 800923a:	2b3f      	cmp	r3, #63	; 0x3f
 800923c:	d803      	bhi.n	8009246 <USBD_CDC_Setup+0xa6>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	88db      	ldrh	r3, [r3, #6]
 8009242:	b2da      	uxtb	r2, r3
 8009244:	e000      	b.n	8009248 <USBD_CDC_Setup+0xa8>
 8009246:	2240      	movs	r2, #64	; 0x40
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800924e:	6939      	ldr	r1, [r7, #16]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009256:	461a      	mov	r2, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fdc5 	bl	800ade8 <USBD_CtlPrepareRx>
      break;
 800925e:	e076      	b.n	800934e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	33b0      	adds	r3, #176	; 0xb0
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	7850      	ldrb	r0, [r2, #1]
 8009276:	2200      	movs	r2, #0
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	4798      	blx	r3
      break;
 800927c:	e067      	b.n	800934e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	785b      	ldrb	r3, [r3, #1]
 8009282:	2b0b      	cmp	r3, #11
 8009284:	d851      	bhi.n	800932a <USBD_CDC_Setup+0x18a>
 8009286:	a201      	add	r2, pc, #4	; (adr r2, 800928c <USBD_CDC_Setup+0xec>)
 8009288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928c:	080092bd 	.word	0x080092bd
 8009290:	08009339 	.word	0x08009339
 8009294:	0800932b 	.word	0x0800932b
 8009298:	0800932b 	.word	0x0800932b
 800929c:	0800932b 	.word	0x0800932b
 80092a0:	0800932b 	.word	0x0800932b
 80092a4:	0800932b 	.word	0x0800932b
 80092a8:	0800932b 	.word	0x0800932b
 80092ac:	0800932b 	.word	0x0800932b
 80092b0:	0800932b 	.word	0x0800932b
 80092b4:	080092e7 	.word	0x080092e7
 80092b8:	08009311 	.word	0x08009311
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d107      	bne.n	80092d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092c8:	f107 030a 	add.w	r3, r7, #10
 80092cc:	2202      	movs	r2, #2
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 fd5d 	bl	800ad90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092d6:	e032      	b.n	800933e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f001 fce7 	bl	800acae <USBD_CtlError>
            ret = USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	75fb      	strb	r3, [r7, #23]
          break;
 80092e4:	e02b      	b.n	800933e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d107      	bne.n	8009302 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80092f2:	f107 030d 	add.w	r3, r7, #13
 80092f6:	2201      	movs	r2, #1
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 fd48 	bl	800ad90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009300:	e01d      	b.n	800933e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fcd2 	bl	800acae <USBD_CtlError>
            ret = USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	75fb      	strb	r3, [r7, #23]
          break;
 800930e:	e016      	b.n	800933e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b03      	cmp	r3, #3
 800931a:	d00f      	beq.n	800933c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 fcc5 	bl	800acae <USBD_CtlError>
            ret = USBD_FAIL;
 8009324:	2303      	movs	r3, #3
 8009326:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009328:	e008      	b.n	800933c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 fcbe 	bl	800acae <USBD_CtlError>
          ret = USBD_FAIL;
 8009332:	2303      	movs	r3, #3
 8009334:	75fb      	strb	r3, [r7, #23]
          break;
 8009336:	e002      	b.n	800933e <USBD_CDC_Setup+0x19e>
          break;
 8009338:	bf00      	nop
 800933a:	e008      	b.n	800934e <USBD_CDC_Setup+0x1ae>
          break;
 800933c:	bf00      	nop
      }
      break;
 800933e:	e006      	b.n	800934e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 fcb3 	bl	800acae <USBD_CtlError>
      ret = USBD_FAIL;
 8009348:	2303      	movs	r3, #3
 800934a:	75fb      	strb	r3, [r7, #23]
      break;
 800934c:	bf00      	nop
  }

  return (uint8_t)ret;
 800934e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800936a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	32b0      	adds	r2, #176	; 0xb0
 8009376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800937e:	2303      	movs	r3, #3
 8009380:	e065      	b.n	800944e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	32b0      	adds	r2, #176	; 0xb0
 800938c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009390:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	f003 020f 	and.w	r2, r3, #15
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	440b      	add	r3, r1
 80093a4:	3318      	adds	r3, #24
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d02f      	beq.n	800940c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	f003 020f 	and.w	r2, r3, #15
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	4613      	mov	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	440b      	add	r3, r1
 80093be:	3318      	adds	r3, #24
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	f003 010f 	and.w	r1, r3, #15
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	460b      	mov	r3, r1
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	440b      	add	r3, r1
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4403      	add	r3, r0
 80093d4:	3348      	adds	r3, #72	; 0x48
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80093dc:	fb01 f303 	mul.w	r3, r1, r3
 80093e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d112      	bne.n	800940c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	f003 020f 	and.w	r2, r3, #15
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	4613      	mov	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	440b      	add	r3, r1
 80093f8:	3318      	adds	r3, #24
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093fe:	78f9      	ldrb	r1, [r7, #3]
 8009400:	2300      	movs	r3, #0
 8009402:	2200      	movs	r2, #0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f008 f930 	bl	801166a <USBD_LL_Transmit>
 800940a:	e01f      	b.n	800944c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2200      	movs	r2, #0
 8009410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	33b0      	adds	r3, #176	; 0xb0
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d010      	beq.n	800944c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	33b0      	adds	r3, #176	; 0xb0
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009448:	78fa      	ldrb	r2, [r7, #3]
 800944a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	32b0      	adds	r2, #176	; 0xb0
 800946c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009470:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	32b0      	adds	r2, #176	; 0xb0
 800947c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009484:	2303      	movs	r3, #3
 8009486:	e01a      	b.n	80094be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009488:	78fb      	ldrb	r3, [r7, #3]
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f008 f92e 	bl	80116ee <USBD_LL_GetRxDataSize>
 8009492:	4602      	mov	r2, r0
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	33b0      	adds	r3, #176	; 0xb0
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094b8:	4611      	mov	r1, r2
 80094ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	32b0      	adds	r2, #176	; 0xb0
 80094d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e025      	b.n	8009534 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	33b0      	adds	r3, #176	; 0xb0
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01a      	beq.n	8009532 <USBD_CDC_EP0_RxReady+0x6c>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009502:	2bff      	cmp	r3, #255	; 0xff
 8009504:	d015      	beq.n	8009532 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	33b0      	adds	r3, #176	; 0xb0
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800951e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009526:	b292      	uxth	r2, r2
 8009528:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	22ff      	movs	r2, #255	; 0xff
 800952e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009544:	2182      	movs	r1, #130	; 0x82
 8009546:	4818      	ldr	r0, [pc, #96]	; (80095a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009548:	f000 fd4f 	bl	8009fea <USBD_GetEpDesc>
 800954c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800954e:	2101      	movs	r1, #1
 8009550:	4815      	ldr	r0, [pc, #84]	; (80095a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009552:	f000 fd4a 	bl	8009fea <USBD_GetEpDesc>
 8009556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009558:	2181      	movs	r1, #129	; 0x81
 800955a:	4813      	ldr	r0, [pc, #76]	; (80095a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800955c:	f000 fd45 	bl	8009fea <USBD_GetEpDesc>
 8009560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	2210      	movs	r2, #16
 800956c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d006      	beq.n	8009582 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2200      	movs	r2, #0
 8009578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800957c:	711a      	strb	r2, [r3, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d006      	beq.n	8009596 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009590:	711a      	strb	r2, [r3, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2243      	movs	r2, #67	; 0x43
 800959a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200025d4 	.word	0x200025d4

080095ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095b4:	2182      	movs	r1, #130	; 0x82
 80095b6:	4818      	ldr	r0, [pc, #96]	; (8009618 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095b8:	f000 fd17 	bl	8009fea <USBD_GetEpDesc>
 80095bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095be:	2101      	movs	r1, #1
 80095c0:	4815      	ldr	r0, [pc, #84]	; (8009618 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095c2:	f000 fd12 	bl	8009fea <USBD_GetEpDesc>
 80095c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095c8:	2181      	movs	r1, #129	; 0x81
 80095ca:	4813      	ldr	r0, [pc, #76]	; (8009618 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095cc:	f000 fd0d 	bl	8009fea <USBD_GetEpDesc>
 80095d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	2210      	movs	r2, #16
 80095dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d006      	beq.n	80095f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	2200      	movs	r2, #0
 80095e8:	711a      	strb	r2, [r3, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f042 0202 	orr.w	r2, r2, #2
 80095f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d006      	beq.n	8009606 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	711a      	strb	r2, [r3, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f042 0202 	orr.w	r2, r2, #2
 8009604:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2243      	movs	r2, #67	; 0x43
 800960a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	200025d4 	.word	0x200025d4

0800961c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009624:	2182      	movs	r1, #130	; 0x82
 8009626:	4818      	ldr	r0, [pc, #96]	; (8009688 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009628:	f000 fcdf 	bl	8009fea <USBD_GetEpDesc>
 800962c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800962e:	2101      	movs	r1, #1
 8009630:	4815      	ldr	r0, [pc, #84]	; (8009688 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009632:	f000 fcda 	bl	8009fea <USBD_GetEpDesc>
 8009636:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009638:	2181      	movs	r1, #129	; 0x81
 800963a:	4813      	ldr	r0, [pc, #76]	; (8009688 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800963c:	f000 fcd5 	bl	8009fea <USBD_GetEpDesc>
 8009640:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2210      	movs	r2, #16
 800964c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d006      	beq.n	8009662 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2200      	movs	r2, #0
 8009658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800965c:	711a      	strb	r2, [r3, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d006      	beq.n	8009676 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009670:	711a      	strb	r2, [r3, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2243      	movs	r2, #67	; 0x43
 800967a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800967c:	4b02      	ldr	r3, [pc, #8]	; (8009688 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	200025d4 	.word	0x200025d4

0800968c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	220a      	movs	r2, #10
 8009698:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800969a:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	20002590 	.word	0x20002590

080096ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80096bc:	2303      	movs	r3, #3
 80096be:	e009      	b.n	80096d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	33b0      	adds	r3, #176	; 0xb0
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	32b0      	adds	r2, #176	; 0xb0
 80096f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009702:	2303      	movs	r3, #3
 8009704:	e008      	b.n	8009718 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	32b0      	adds	r2, #176	; 0xb0
 8009738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009744:	2303      	movs	r3, #3
 8009746:	e004      	b.n	8009752 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
	...

08009760 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	32b0      	adds	r2, #176	; 0xb0
 8009772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009776:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009778:	2301      	movs	r3, #1
 800977a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	32b0      	adds	r2, #176	; 0xb0
 8009786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800978e:	2303      	movs	r3, #3
 8009790:	e025      	b.n	80097de <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009798:	2b00      	cmp	r3, #0
 800979a:	d11f      	bne.n	80097dc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2201      	movs	r2, #1
 80097a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80097a4:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <USBD_CDC_TransmitPacket+0x88>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	f003 020f 	and.w	r2, r3, #15
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4613      	mov	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4403      	add	r3, r0
 80097be:	3318      	adds	r3, #24
 80097c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80097c2:	4b09      	ldr	r3, [pc, #36]	; (80097e8 <USBD_CDC_TransmitPacket+0x88>)
 80097c4:	7819      	ldrb	r1, [r3, #0]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f007 ff49 	bl	801166a <USBD_LL_Transmit>

    ret = USBD_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20002617 	.word	0x20002617

080097ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	32b0      	adds	r2, #176	; 0xb0
 80097fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009802:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	32b0      	adds	r2, #176	; 0xb0
 800980e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	e018      	b.n	800984c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	7c1b      	ldrb	r3, [r3, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10a      	bne.n	8009838 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009822:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <USBD_CDC_ReceivePacket+0x68>)
 8009824:	7819      	ldrb	r1, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800982c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f007 ff3b 	bl	80116ac <USBD_LL_PrepareReceive>
 8009836:	e008      	b.n	800984a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009838:	4b06      	ldr	r3, [pc, #24]	; (8009854 <USBD_CDC_ReceivePacket+0x68>)
 800983a:	7819      	ldrb	r1, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009842:	2340      	movs	r3, #64	; 0x40
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f007 ff31 	bl	80116ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20002618 	.word	0x20002618

08009858 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800986c:	2303      	movs	r3, #3
 800986e:	e01f      	b.n	80098b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	79fa      	ldrb	r2, [r7, #7]
 80098a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f007 fdab 	bl	8011400 <USBD_LL_Init>
 80098aa:	4603      	mov	r3, r0
 80098ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e025      	b.n	800991c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	32ae      	adds	r2, #174	; 0xae
 80098e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00f      	beq.n	800990c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	; 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	f107 020e 	add.w	r2, r7, #14
 8009900:	4610      	mov	r0, r2
 8009902:	4798      	blx	r3
 8009904:	4602      	mov	r2, r0
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f007 fdb3 	bl	8011498 <USBD_LL_Start>
 8009932:	4603      	mov	r3, r0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009944:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009968:	2b00      	cmp	r3, #0
 800996a:	d009      	beq.n	8009980 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	4611      	mov	r1, r2
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	4798      	blx	r3
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	4611      	mov	r1, r2
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80099b0:	2303      	movs	r3, #3
 80099b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f001 f932 	bl	800ac3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80099e4:	461a      	mov	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80099f2:	f003 031f 	and.w	r3, r3, #31
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d01a      	beq.n	8009a30 <USBD_LL_SetupStage+0x72>
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d822      	bhi.n	8009a44 <USBD_LL_SetupStage+0x86>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <USBD_LL_SetupStage+0x4a>
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d00a      	beq.n	8009a1c <USBD_LL_SetupStage+0x5e>
 8009a06:	e01d      	b.n	8009a44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fb5f 	bl	800a0d4 <USBD_StdDevReq>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]
      break;
 8009a1a:	e020      	b.n	8009a5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fbc7 	bl	800a1b8 <USBD_StdItfReq>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2e:	e016      	b.n	8009a5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fc29 	bl	800a290 <USBD_StdEPReq>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
      break;
 8009a42:	e00c      	b.n	8009a5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f007 fd80 	bl	8011558 <USBD_LL_StallEP>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a5c:	bf00      	nop
  }

  return ret;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	460b      	mov	r3, r1
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009a7a:	7afb      	ldrb	r3, [r7, #11]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d16e      	bne.n	8009b5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	f040 8098 	bne.w	8009bc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d913      	bls.n	8009ac8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	1ad2      	subs	r2, r2, r3
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bf28      	it	cs
 8009aba:	4613      	movcs	r3, r2
 8009abc:	461a      	mov	r2, r3
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f001 f9ae 	bl	800ae22 <USBD_CtlContinueRx>
 8009ac6:	e07d      	b.n	8009bc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d014      	beq.n	8009b00 <USBD_LL_DataOutStage+0x98>
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d81d      	bhi.n	8009b16 <USBD_LL_DataOutStage+0xae>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <USBD_LL_DataOutStage+0x7c>
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d003      	beq.n	8009aea <USBD_LL_DataOutStage+0x82>
 8009ae2:	e018      	b.n	8009b16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75bb      	strb	r3, [r7, #22]
            break;
 8009ae8:	e018      	b.n	8009b1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	4619      	mov	r1, r3
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 fa5e 	bl	8009fb6 <USBD_CoreFindIF>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75bb      	strb	r3, [r7, #22]
            break;
 8009afe:	e00d      	b.n	8009b1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	4619      	mov	r1, r3
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 fa60 	bl	8009fd0 <USBD_CoreFindEP>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75bb      	strb	r3, [r7, #22]
            break;
 8009b14:	e002      	b.n	8009b1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	75bb      	strb	r3, [r7, #22]
            break;
 8009b1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009b1c:	7dbb      	ldrb	r3, [r7, #22]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d119      	bne.n	8009b56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d113      	bne.n	8009b56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009b2e:	7dba      	ldrb	r2, [r7, #22]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	32ae      	adds	r2, #174	; 0xae
 8009b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00b      	beq.n	8009b56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009b3e:	7dba      	ldrb	r2, [r7, #22]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009b46:	7dba      	ldrb	r2, [r7, #22]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	32ae      	adds	r2, #174	; 0xae
 8009b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f001 f974 	bl	800ae44 <USBD_CtlSendStatus>
 8009b5c:	e032      	b.n	8009bc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009b5e:	7afb      	ldrb	r3, [r7, #11]
 8009b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	4619      	mov	r1, r3
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fa31 	bl	8009fd0 <USBD_CoreFindEP>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b72:	7dbb      	ldrb	r3, [r7, #22]
 8009b74:	2bff      	cmp	r3, #255	; 0xff
 8009b76:	d025      	beq.n	8009bc4 <USBD_LL_DataOutStage+0x15c>
 8009b78:	7dbb      	ldrb	r3, [r7, #22]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d122      	bne.n	8009bc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d117      	bne.n	8009bba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009b8a:	7dba      	ldrb	r2, [r7, #22]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	32ae      	adds	r2, #174	; 0xae
 8009b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00f      	beq.n	8009bba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009b9a:	7dba      	ldrb	r2, [r7, #22]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009ba2:	7dba      	ldrb	r2, [r7, #22]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	32ae      	adds	r2, #174	; 0xae
 8009ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	7afa      	ldrb	r2, [r7, #11]
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	4798      	blx	r3
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	e000      	b.n	8009bc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b086      	sub	sp, #24
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	607a      	str	r2, [r7, #4]
 8009bda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d16f      	bne.n	8009cc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3314      	adds	r3, #20
 8009be6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d15a      	bne.n	8009ca8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	689a      	ldr	r2, [r3, #8]
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d914      	bls.n	8009c28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	689a      	ldr	r2, [r3, #8]
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	1ad2      	subs	r2, r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	461a      	mov	r2, r3
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f001 f8d6 	bl	800adc6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2100      	movs	r1, #0
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f007 fd43 	bl	80116ac <USBD_LL_PrepareReceive>
 8009c26:	e03f      	b.n	8009ca8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	68da      	ldr	r2, [r3, #12]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d11c      	bne.n	8009c6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d316      	bcc.n	8009c6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d20f      	bcs.n	8009c6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2100      	movs	r1, #0
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f001 f8b7 	bl	800adc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c60:	2300      	movs	r3, #0
 8009c62:	2200      	movs	r2, #0
 8009c64:	2100      	movs	r1, #0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f007 fd20 	bl	80116ac <USBD_LL_PrepareReceive>
 8009c6c:	e01c      	b.n	8009ca8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d10f      	bne.n	8009c9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d009      	beq.n	8009c9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c9a:	2180      	movs	r1, #128	; 0x80
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f007 fc5b 	bl	8011558 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f001 f8e1 	bl	800ae6a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d03a      	beq.n	8009d28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f7ff fe42 	bl	800993c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009cc0:	e032      	b.n	8009d28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009cc2:	7afb      	ldrb	r3, [r7, #11]
 8009cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	4619      	mov	r1, r3
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 f97f 	bl	8009fd0 <USBD_CoreFindEP>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	2bff      	cmp	r3, #255	; 0xff
 8009cda:	d025      	beq.n	8009d28 <USBD_LL_DataInStage+0x15a>
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d122      	bne.n	8009d28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d11c      	bne.n	8009d28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009cee:	7dfa      	ldrb	r2, [r7, #23]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	32ae      	adds	r2, #174	; 0xae
 8009cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d014      	beq.n	8009d28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009cfe:	7dfa      	ldrb	r2, [r7, #23]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009d06:	7dfa      	ldrb	r2, [r7, #23]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	32ae      	adds	r2, #174	; 0xae
 8009d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	7afa      	ldrb	r2, [r7, #11]
 8009d14:	4611      	mov	r1, r2
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	4798      	blx	r3
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009d1e:	7dbb      	ldrb	r3, [r7, #22]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009d24:	7dbb      	ldrb	r3, [r7, #22]
 8009d26:	e000      	b.n	8009d2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d014      	beq.n	8009d98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00e      	beq.n	8009d98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6852      	ldr	r2, [r2, #4]
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	4611      	mov	r1, r2
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	4798      	blx	r3
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009d94:	2303      	movs	r3, #3
 8009d96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f007 fb95 	bl	80114ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2240      	movs	r2, #64	; 0x40
 8009db0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009db4:	2340      	movs	r3, #64	; 0x40
 8009db6:	2200      	movs	r2, #0
 8009db8:	2180      	movs	r1, #128	; 0x80
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f007 fb87 	bl	80114ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2240      	movs	r2, #64	; 0x40
 8009dca:	621a      	str	r2, [r3, #32]

  return ret;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	460b      	mov	r3, r1
 8009de0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2204      	movs	r2, #4
 8009e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d106      	bne.n	8009e44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d110      	bne.n	8009e88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e76:	69db      	ldr	r3, [r3, #28]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b082      	sub	sp, #8
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	32ae      	adds	r2, #174	; 0xae
 8009ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e01c      	b.n	8009eee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d115      	bne.n	8009eec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	32ae      	adds	r2, #174	; 0xae
 8009eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	32ae      	adds	r2, #174	; 0xae
 8009ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	78fa      	ldrb	r2, [r7, #3]
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	32ae      	adds	r2, #174	; 0xae
 8009f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e01c      	b.n	8009f52 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d115      	bne.n	8009f50 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	32ae      	adds	r2, #174	; 0xae
 8009f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00b      	beq.n	8009f50 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	32ae      	adds	r2, #174	; 0xae
 8009f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b083      	sub	sp, #12
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00e      	beq.n	8009fac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	6852      	ldr	r2, [r2, #4]
 8009f9a:	b2d2      	uxtb	r2, r2
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	4798      	blx	r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fc2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fdc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b086      	sub	sp, #24
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	885b      	ldrh	r3, [r3, #2]
 800a006:	b29a      	uxth	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	429a      	cmp	r2, r3
 800a010:	d920      	bls.n	800a054 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	b29b      	uxth	r3, r3
 800a018:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a01a:	e013      	b.n	800a044 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a01c:	f107 030a 	add.w	r3, r7, #10
 800a020:	4619      	mov	r1, r3
 800a022:	6978      	ldr	r0, [r7, #20]
 800a024:	f000 f81b 	bl	800a05e <USBD_GetNextDesc>
 800a028:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	785b      	ldrb	r3, [r3, #1]
 800a02e:	2b05      	cmp	r3, #5
 800a030:	d108      	bne.n	800a044 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	789b      	ldrb	r3, [r3, #2]
 800a03a:	78fa      	ldrb	r2, [r7, #3]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d008      	beq.n	800a052 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a040:	2300      	movs	r3, #0
 800a042:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	885b      	ldrh	r3, [r3, #2]
 800a048:	b29a      	uxth	r2, r3
 800a04a:	897b      	ldrh	r3, [r7, #10]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d8e5      	bhi.n	800a01c <USBD_GetEpDesc+0x32>
 800a050:	e000      	b.n	800a054 <USBD_GetEpDesc+0x6a>
          break;
 800a052:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a054:	693b      	ldr	r3, [r7, #16]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a05e:	b480      	push	{r7}
 800a060:	b085      	sub	sp, #20
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	881a      	ldrh	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	b29b      	uxth	r3, r3
 800a076:	4413      	add	r3, r2
 800a078:	b29a      	uxth	r2, r3
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4413      	add	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a08a:	68fb      	ldr	r3, [r7, #12]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a0b6:	8a3b      	ldrh	r3, [r7, #16]
 800a0b8:	021b      	lsls	r3, r3, #8
 800a0ba:	b21a      	sxth	r2, r3
 800a0bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	b21b      	sxth	r3, r3
 800a0c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a0c6:	89fb      	ldrh	r3, [r7, #14]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	371c      	adds	r7, #28
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0ea:	2b40      	cmp	r3, #64	; 0x40
 800a0ec:	d005      	beq.n	800a0fa <USBD_StdDevReq+0x26>
 800a0ee:	2b40      	cmp	r3, #64	; 0x40
 800a0f0:	d857      	bhi.n	800a1a2 <USBD_StdDevReq+0xce>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00f      	beq.n	800a116 <USBD_StdDevReq+0x42>
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	d153      	bne.n	800a1a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32ae      	adds	r2, #174	; 0xae
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	4798      	blx	r3
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]
      break;
 800a114:	e04a      	b.n	800a1ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	785b      	ldrb	r3, [r3, #1]
 800a11a:	2b09      	cmp	r3, #9
 800a11c:	d83b      	bhi.n	800a196 <USBD_StdDevReq+0xc2>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <USBD_StdDevReq+0x50>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a179 	.word	0x0800a179
 800a128:	0800a18d 	.word	0x0800a18d
 800a12c:	0800a197 	.word	0x0800a197
 800a130:	0800a183 	.word	0x0800a183
 800a134:	0800a197 	.word	0x0800a197
 800a138:	0800a157 	.word	0x0800a157
 800a13c:	0800a14d 	.word	0x0800a14d
 800a140:	0800a197 	.word	0x0800a197
 800a144:	0800a16f 	.word	0x0800a16f
 800a148:	0800a161 	.word	0x0800a161
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa3c 	bl	800a5cc <USBD_GetDescriptor>
          break;
 800a154:	e024      	b.n	800a1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fbcb 	bl	800a8f4 <USBD_SetAddress>
          break;
 800a15e:	e01f      	b.n	800a1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fc0a 	bl	800a97c <USBD_SetConfig>
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]
          break;
 800a16c:	e018      	b.n	800a1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fcad 	bl	800aad0 <USBD_GetConfig>
          break;
 800a176:	e013      	b.n	800a1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fcde 	bl	800ab3c <USBD_GetStatus>
          break;
 800a180:	e00e      	b.n	800a1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fd0d 	bl	800aba4 <USBD_SetFeature>
          break;
 800a18a:	e009      	b.n	800a1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fd31 	bl	800abf6 <USBD_ClrFeature>
          break;
 800a194:	e004      	b.n	800a1a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fd88 	bl	800acae <USBD_CtlError>
          break;
 800a19e:	bf00      	nop
      }
      break;
 800a1a0:	e004      	b.n	800a1ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fd82 	bl	800acae <USBD_CtlError>
      break;
 800a1aa:	bf00      	nop
  }

  return ret;
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop

0800a1b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1ce:	2b40      	cmp	r3, #64	; 0x40
 800a1d0:	d005      	beq.n	800a1de <USBD_StdItfReq+0x26>
 800a1d2:	2b40      	cmp	r3, #64	; 0x40
 800a1d4:	d852      	bhi.n	800a27c <USBD_StdItfReq+0xc4>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <USBD_StdItfReq+0x26>
 800a1da:	2b20      	cmp	r3, #32
 800a1dc:	d14e      	bne.n	800a27c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d840      	bhi.n	800a26e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	889b      	ldrh	r3, [r3, #4]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d836      	bhi.n	800a264 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	889b      	ldrh	r3, [r3, #4]
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff fed9 	bl	8009fb6 <USBD_CoreFindIF>
 800a204:	4603      	mov	r3, r0
 800a206:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	2bff      	cmp	r3, #255	; 0xff
 800a20c:	d01d      	beq.n	800a24a <USBD_StdItfReq+0x92>
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d11a      	bne.n	800a24a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a214:	7bba      	ldrb	r2, [r7, #14]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	32ae      	adds	r2, #174	; 0xae
 800a21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00f      	beq.n	800a244 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a224:	7bba      	ldrb	r2, [r7, #14]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a22c:	7bba      	ldrb	r2, [r7, #14]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	32ae      	adds	r2, #174	; 0xae
 800a232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	4798      	blx	r3
 800a23e:	4603      	mov	r3, r0
 800a240:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a242:	e004      	b.n	800a24e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a244:	2303      	movs	r3, #3
 800a246:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a248:	e001      	b.n	800a24e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a24a:	2303      	movs	r3, #3
 800a24c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	88db      	ldrh	r3, [r3, #6]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d110      	bne.n	800a278 <USBD_StdItfReq+0xc0>
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10d      	bne.n	800a278 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fdf1 	bl	800ae44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a262:	e009      	b.n	800a278 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fd21 	bl	800acae <USBD_CtlError>
          break;
 800a26c:	e004      	b.n	800a278 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fd1c 	bl	800acae <USBD_CtlError>
          break;
 800a276:	e000      	b.n	800a27a <USBD_StdItfReq+0xc2>
          break;
 800a278:	bf00      	nop
      }
      break;
 800a27a:	e004      	b.n	800a286 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fd15 	bl	800acae <USBD_CtlError>
      break;
 800a284:	bf00      	nop
  }

  return ret;
 800a286:	7bfb      	ldrb	r3, [r7, #15]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	889b      	ldrh	r3, [r3, #4]
 800a2a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2ac:	2b40      	cmp	r3, #64	; 0x40
 800a2ae:	d007      	beq.n	800a2c0 <USBD_StdEPReq+0x30>
 800a2b0:	2b40      	cmp	r3, #64	; 0x40
 800a2b2:	f200 817f 	bhi.w	800a5b4 <USBD_StdEPReq+0x324>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d02a      	beq.n	800a310 <USBD_StdEPReq+0x80>
 800a2ba:	2b20      	cmp	r3, #32
 800a2bc:	f040 817a 	bne.w	800a5b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff fe83 	bl	8009fd0 <USBD_CoreFindEP>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2ce:	7b7b      	ldrb	r3, [r7, #13]
 800a2d0:	2bff      	cmp	r3, #255	; 0xff
 800a2d2:	f000 8174 	beq.w	800a5be <USBD_StdEPReq+0x32e>
 800a2d6:	7b7b      	ldrb	r3, [r7, #13]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f040 8170 	bne.w	800a5be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a2de:	7b7a      	ldrb	r2, [r7, #13]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a2e6:	7b7a      	ldrb	r2, [r7, #13]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	32ae      	adds	r2, #174	; 0xae
 800a2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 8163 	beq.w	800a5be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a2f8:	7b7a      	ldrb	r2, [r7, #13]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	32ae      	adds	r2, #174	; 0xae
 800a2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	4798      	blx	r3
 800a30a:	4603      	mov	r3, r0
 800a30c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a30e:	e156      	b.n	800a5be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	785b      	ldrb	r3, [r3, #1]
 800a314:	2b03      	cmp	r3, #3
 800a316:	d008      	beq.n	800a32a <USBD_StdEPReq+0x9a>
 800a318:	2b03      	cmp	r3, #3
 800a31a:	f300 8145 	bgt.w	800a5a8 <USBD_StdEPReq+0x318>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 809b 	beq.w	800a45a <USBD_StdEPReq+0x1ca>
 800a324:	2b01      	cmp	r3, #1
 800a326:	d03c      	beq.n	800a3a2 <USBD_StdEPReq+0x112>
 800a328:	e13e      	b.n	800a5a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b02      	cmp	r3, #2
 800a334:	d002      	beq.n	800a33c <USBD_StdEPReq+0xac>
 800a336:	2b03      	cmp	r3, #3
 800a338:	d016      	beq.n	800a368 <USBD_StdEPReq+0xd8>
 800a33a:	e02c      	b.n	800a396 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00d      	beq.n	800a35e <USBD_StdEPReq+0xce>
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b80      	cmp	r3, #128	; 0x80
 800a346:	d00a      	beq.n	800a35e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f007 f903 	bl	8011558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a352:	2180      	movs	r1, #128	; 0x80
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f007 f8ff 	bl	8011558 <USBD_LL_StallEP>
 800a35a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a35c:	e020      	b.n	800a3a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fca4 	bl	800acae <USBD_CtlError>
              break;
 800a366:	e01b      	b.n	800a3a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	885b      	ldrh	r3, [r3, #2]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10e      	bne.n	800a38e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <USBD_StdEPReq+0xfe>
 800a376:	7bbb      	ldrb	r3, [r7, #14]
 800a378:	2b80      	cmp	r3, #128	; 0x80
 800a37a:	d008      	beq.n	800a38e <USBD_StdEPReq+0xfe>
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	88db      	ldrh	r3, [r3, #6]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d104      	bne.n	800a38e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f007 f8e5 	bl	8011558 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fd58 	bl	800ae44 <USBD_CtlSendStatus>

              break;
 800a394:	e004      	b.n	800a3a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fc88 	bl	800acae <USBD_CtlError>
              break;
 800a39e:	bf00      	nop
          }
          break;
 800a3a0:	e107      	b.n	800a5b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d002      	beq.n	800a3b4 <USBD_StdEPReq+0x124>
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d016      	beq.n	800a3e0 <USBD_StdEPReq+0x150>
 800a3b2:	e04b      	b.n	800a44c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00d      	beq.n	800a3d6 <USBD_StdEPReq+0x146>
 800a3ba:	7bbb      	ldrb	r3, [r7, #14]
 800a3bc:	2b80      	cmp	r3, #128	; 0x80
 800a3be:	d00a      	beq.n	800a3d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f007 f8c7 	bl	8011558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3ca:	2180      	movs	r1, #128	; 0x80
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f007 f8c3 	bl	8011558 <USBD_LL_StallEP>
 800a3d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3d4:	e040      	b.n	800a458 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fc68 	bl	800acae <USBD_CtlError>
              break;
 800a3de:	e03b      	b.n	800a458 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	885b      	ldrh	r3, [r3, #2]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d136      	bne.n	800a456 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d004      	beq.n	800a3fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f007 f8cd 	bl	8011596 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fd21 	bl	800ae44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a402:	7bbb      	ldrb	r3, [r7, #14]
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff fde2 	bl	8009fd0 <USBD_CoreFindEP>
 800a40c:	4603      	mov	r3, r0
 800a40e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a410:	7b7b      	ldrb	r3, [r7, #13]
 800a412:	2bff      	cmp	r3, #255	; 0xff
 800a414:	d01f      	beq.n	800a456 <USBD_StdEPReq+0x1c6>
 800a416:	7b7b      	ldrb	r3, [r7, #13]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d11c      	bne.n	800a456 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a41c:	7b7a      	ldrb	r2, [r7, #13]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a424:	7b7a      	ldrb	r2, [r7, #13]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	32ae      	adds	r2, #174	; 0xae
 800a42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d010      	beq.n	800a456 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a434:	7b7a      	ldrb	r2, [r7, #13]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32ae      	adds	r2, #174	; 0xae
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a44a:	e004      	b.n	800a456 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fc2d 	bl	800acae <USBD_CtlError>
              break;
 800a454:	e000      	b.n	800a458 <USBD_StdEPReq+0x1c8>
              break;
 800a456:	bf00      	nop
          }
          break;
 800a458:	e0ab      	b.n	800a5b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b02      	cmp	r3, #2
 800a464:	d002      	beq.n	800a46c <USBD_StdEPReq+0x1dc>
 800a466:	2b03      	cmp	r3, #3
 800a468:	d032      	beq.n	800a4d0 <USBD_StdEPReq+0x240>
 800a46a:	e097      	b.n	800a59c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d007      	beq.n	800a482 <USBD_StdEPReq+0x1f2>
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	2b80      	cmp	r3, #128	; 0x80
 800a476:	d004      	beq.n	800a482 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fc17 	bl	800acae <USBD_CtlError>
                break;
 800a480:	e091      	b.n	800a5a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a486:	2b00      	cmp	r3, #0
 800a488:	da0b      	bge.n	800a4a2 <USBD_StdEPReq+0x212>
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a490:	4613      	mov	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	3310      	adds	r3, #16
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	4413      	add	r3, r2
 800a49e:	3304      	adds	r3, #4
 800a4a0:	e00b      	b.n	800a4ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fc61 	bl	800ad90 <USBD_CtlSendData>
              break;
 800a4ce:	e06a      	b.n	800a5a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	da11      	bge.n	800a4fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	f003 020f 	and.w	r2, r3, #15
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	440b      	add	r3, r1
 800a4ea:	3324      	adds	r3, #36	; 0x24
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d117      	bne.n	800a522 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fbda 	bl	800acae <USBD_CtlError>
                  break;
 800a4fa:	e054      	b.n	800a5a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4fc:	7bbb      	ldrb	r3, [r7, #14]
 800a4fe:	f003 020f 	and.w	r2, r3, #15
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	4613      	mov	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d104      	bne.n	800a522 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fbc7 	bl	800acae <USBD_CtlError>
                  break;
 800a520:	e041      	b.n	800a5a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a526:	2b00      	cmp	r3, #0
 800a528:	da0b      	bge.n	800a542 <USBD_StdEPReq+0x2b2>
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a530:	4613      	mov	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	3310      	adds	r3, #16
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	3304      	adds	r3, #4
 800a540:	e00b      	b.n	800a55a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	4413      	add	r3, r2
 800a558:	3304      	adds	r3, #4
 800a55a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <USBD_StdEPReq+0x2d8>
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b80      	cmp	r3, #128	; 0x80
 800a566:	d103      	bne.n	800a570 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	e00e      	b.n	800a58e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f007 f82d 	bl	80115d4 <USBD_LL_IsStallEP>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2201      	movs	r2, #1
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	e002      	b.n	800a58e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	2202      	movs	r2, #2
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fbfb 	bl	800ad90 <USBD_CtlSendData>
              break;
 800a59a:	e004      	b.n	800a5a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fb85 	bl	800acae <USBD_CtlError>
              break;
 800a5a4:	bf00      	nop
          }
          break;
 800a5a6:	e004      	b.n	800a5b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fb7f 	bl	800acae <USBD_CtlError>
          break;
 800a5b0:	bf00      	nop
      }
      break;
 800a5b2:	e005      	b.n	800a5c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fb79 	bl	800acae <USBD_CtlError>
      break;
 800a5bc:	e000      	b.n	800a5c0 <USBD_StdEPReq+0x330>
      break;
 800a5be:	bf00      	nop
  }

  return ret;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	885b      	ldrh	r3, [r3, #2]
 800a5e6:	0a1b      	lsrs	r3, r3, #8
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	2b0e      	cmp	r3, #14
 800a5ee:	f200 8152 	bhi.w	800a896 <USBD_GetDescriptor+0x2ca>
 800a5f2:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <USBD_GetDescriptor+0x2c>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a669 	.word	0x0800a669
 800a5fc:	0800a681 	.word	0x0800a681
 800a600:	0800a6c1 	.word	0x0800a6c1
 800a604:	0800a897 	.word	0x0800a897
 800a608:	0800a897 	.word	0x0800a897
 800a60c:	0800a837 	.word	0x0800a837
 800a610:	0800a863 	.word	0x0800a863
 800a614:	0800a897 	.word	0x0800a897
 800a618:	0800a897 	.word	0x0800a897
 800a61c:	0800a897 	.word	0x0800a897
 800a620:	0800a897 	.word	0x0800a897
 800a624:	0800a897 	.word	0x0800a897
 800a628:	0800a897 	.word	0x0800a897
 800a62c:	0800a897 	.word	0x0800a897
 800a630:	0800a635 	.word	0x0800a635
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00b      	beq.n	800a658 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a646:	69db      	ldr	r3, [r3, #28]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	7c12      	ldrb	r2, [r2, #16]
 800a64c:	f107 0108 	add.w	r1, r7, #8
 800a650:	4610      	mov	r0, r2
 800a652:	4798      	blx	r3
 800a654:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a656:	e126      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a658:	6839      	ldr	r1, [r7, #0]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 fb27 	bl	800acae <USBD_CtlError>
        err++;
 800a660:	7afb      	ldrb	r3, [r7, #11]
 800a662:	3301      	adds	r3, #1
 800a664:	72fb      	strb	r3, [r7, #11]
      break;
 800a666:	e11e      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	7c12      	ldrb	r2, [r2, #16]
 800a674:	f107 0108 	add.w	r1, r7, #8
 800a678:	4610      	mov	r0, r2
 800a67a:	4798      	blx	r3
 800a67c:	60f8      	str	r0, [r7, #12]
      break;
 800a67e:	e112      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	7c1b      	ldrb	r3, [r3, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10d      	bne.n	800a6a4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a690:	f107 0208 	add.w	r2, r7, #8
 800a694:	4610      	mov	r0, r2
 800a696:	4798      	blx	r3
 800a698:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3301      	adds	r3, #1
 800a69e:	2202      	movs	r2, #2
 800a6a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6a2:	e100      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	f107 0208 	add.w	r2, r7, #8
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4798      	blx	r3
 800a6b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	701a      	strb	r2, [r3, #0]
      break;
 800a6be:	e0f2      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	885b      	ldrh	r3, [r3, #2]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	f200 80ac 	bhi.w	800a824 <USBD_GetDescriptor+0x258>
 800a6cc:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <USBD_GetDescriptor+0x108>)
 800a6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d2:	bf00      	nop
 800a6d4:	0800a6ed 	.word	0x0800a6ed
 800a6d8:	0800a721 	.word	0x0800a721
 800a6dc:	0800a755 	.word	0x0800a755
 800a6e0:	0800a789 	.word	0x0800a789
 800a6e4:	0800a7bd 	.word	0x0800a7bd
 800a6e8:	0800a7f1 	.word	0x0800a7f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	7c12      	ldrb	r2, [r2, #16]
 800a704:	f107 0108 	add.w	r1, r7, #8
 800a708:	4610      	mov	r0, r2
 800a70a:	4798      	blx	r3
 800a70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a70e:	e091      	b.n	800a834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 facb 	bl	800acae <USBD_CtlError>
            err++;
 800a718:	7afb      	ldrb	r3, [r7, #11]
 800a71a:	3301      	adds	r3, #1
 800a71c:	72fb      	strb	r3, [r7, #11]
          break;
 800a71e:	e089      	b.n	800a834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00b      	beq.n	800a744 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	7c12      	ldrb	r2, [r2, #16]
 800a738:	f107 0108 	add.w	r1, r7, #8
 800a73c:	4610      	mov	r0, r2
 800a73e:	4798      	blx	r3
 800a740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a742:	e077      	b.n	800a834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a744:	6839      	ldr	r1, [r7, #0]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fab1 	bl	800acae <USBD_CtlError>
            err++;
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	3301      	adds	r3, #1
 800a750:	72fb      	strb	r3, [r7, #11]
          break;
 800a752:	e06f      	b.n	800a834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00b      	beq.n	800a778 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	7c12      	ldrb	r2, [r2, #16]
 800a76c:	f107 0108 	add.w	r1, r7, #8
 800a770:	4610      	mov	r0, r2
 800a772:	4798      	blx	r3
 800a774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a776:	e05d      	b.n	800a834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fa97 	bl	800acae <USBD_CtlError>
            err++;
 800a780:	7afb      	ldrb	r3, [r7, #11]
 800a782:	3301      	adds	r3, #1
 800a784:	72fb      	strb	r3, [r7, #11]
          break;
 800a786:	e055      	b.n	800a834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00b      	beq.n	800a7ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	7c12      	ldrb	r2, [r2, #16]
 800a7a0:	f107 0108 	add.w	r1, r7, #8
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	4798      	blx	r3
 800a7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7aa:	e043      	b.n	800a834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fa7d 	bl	800acae <USBD_CtlError>
            err++;
 800a7b4:	7afb      	ldrb	r3, [r7, #11]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ba:	e03b      	b.n	800a834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	7c12      	ldrb	r2, [r2, #16]
 800a7d4:	f107 0108 	add.w	r1, r7, #8
 800a7d8:	4610      	mov	r0, r2
 800a7da:	4798      	blx	r3
 800a7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7de:	e029      	b.n	800a834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fa63 	bl	800acae <USBD_CtlError>
            err++;
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ee:	e021      	b.n	800a834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00b      	beq.n	800a814 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	7c12      	ldrb	r2, [r2, #16]
 800a808:	f107 0108 	add.w	r1, r7, #8
 800a80c:	4610      	mov	r0, r2
 800a80e:	4798      	blx	r3
 800a810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a812:	e00f      	b.n	800a834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fa49 	bl	800acae <USBD_CtlError>
            err++;
 800a81c:	7afb      	ldrb	r3, [r7, #11]
 800a81e:	3301      	adds	r3, #1
 800a820:	72fb      	strb	r3, [r7, #11]
          break;
 800a822:	e007      	b.n	800a834 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fa41 	bl	800acae <USBD_CtlError>
          err++;
 800a82c:	7afb      	ldrb	r3, [r7, #11]
 800a82e:	3301      	adds	r3, #1
 800a830:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a832:	bf00      	nop
      }
      break;
 800a834:	e037      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	7c1b      	ldrb	r3, [r3, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d109      	bne.n	800a852 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a846:	f107 0208 	add.w	r2, r7, #8
 800a84a:	4610      	mov	r0, r2
 800a84c:	4798      	blx	r3
 800a84e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a850:	e029      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fa2a 	bl	800acae <USBD_CtlError>
        err++;
 800a85a:	7afb      	ldrb	r3, [r7, #11]
 800a85c:	3301      	adds	r3, #1
 800a85e:	72fb      	strb	r3, [r7, #11]
      break;
 800a860:	e021      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	7c1b      	ldrb	r3, [r3, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10d      	bne.n	800a886 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a872:	f107 0208 	add.w	r2, r7, #8
 800a876:	4610      	mov	r0, r2
 800a878:	4798      	blx	r3
 800a87a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	3301      	adds	r3, #1
 800a880:	2207      	movs	r2, #7
 800a882:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a884:	e00f      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fa10 	bl	800acae <USBD_CtlError>
        err++;
 800a88e:	7afb      	ldrb	r3, [r7, #11]
 800a890:	3301      	adds	r3, #1
 800a892:	72fb      	strb	r3, [r7, #11]
      break;
 800a894:	e007      	b.n	800a8a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fa08 	bl	800acae <USBD_CtlError>
      err++;
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8a4:	bf00      	nop
  }

  if (err != 0U)
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d11e      	bne.n	800a8ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	88db      	ldrh	r3, [r3, #6]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d016      	beq.n	800a8e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a8b4:	893b      	ldrh	r3, [r7, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00e      	beq.n	800a8d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	88da      	ldrh	r2, [r3, #6]
 800a8be:	893b      	ldrh	r3, [r7, #8]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	bf28      	it	cs
 800a8c4:	4613      	movcs	r3, r2
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8ca:	893b      	ldrh	r3, [r7, #8]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	68f9      	ldr	r1, [r7, #12]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fa5d 	bl	800ad90 <USBD_CtlSendData>
 800a8d6:	e009      	b.n	800a8ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f9e7 	bl	800acae <USBD_CtlError>
 800a8e0:	e004      	b.n	800a8ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 faae 	bl	800ae44 <USBD_CtlSendStatus>
 800a8e8:	e000      	b.n	800a8ec <USBD_GetDescriptor+0x320>
    return;
 800a8ea:	bf00      	nop
  }
}
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop

0800a8f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	889b      	ldrh	r3, [r3, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d131      	bne.n	800a96a <USBD_SetAddress+0x76>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	88db      	ldrh	r3, [r3, #6]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d12d      	bne.n	800a96a <USBD_SetAddress+0x76>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	885b      	ldrh	r3, [r3, #2]
 800a912:	2b7f      	cmp	r3, #127	; 0x7f
 800a914:	d829      	bhi.n	800a96a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	885b      	ldrh	r3, [r3, #2]
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a920:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d104      	bne.n	800a938 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f9bc 	bl	800acae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a936:	e01d      	b.n	800a974 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	7bfa      	ldrb	r2, [r7, #15]
 800a93c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f006 fe71 	bl	801162c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fa7a 	bl	800ae44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2202      	movs	r2, #2
 800a95a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95e:	e009      	b.n	800a974 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a968:	e004      	b.n	800a974 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a96a:	6839      	ldr	r1, [r7, #0]
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f99e 	bl	800acae <USBD_CtlError>
  }
}
 800a972:	bf00      	nop
 800a974:	bf00      	nop
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	885b      	ldrh	r3, [r3, #2]
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	4b4e      	ldr	r3, [pc, #312]	; (800aacc <USBD_SetConfig+0x150>)
 800a992:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a994:	4b4d      	ldr	r3, [pc, #308]	; (800aacc <USBD_SetConfig+0x150>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d905      	bls.n	800a9a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f985 	bl	800acae <USBD_CtlError>
    return USBD_FAIL;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e08c      	b.n	800aac2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d002      	beq.n	800a9ba <USBD_SetConfig+0x3e>
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d029      	beq.n	800aa0c <USBD_SetConfig+0x90>
 800a9b8:	e075      	b.n	800aaa6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a9ba:	4b44      	ldr	r3, [pc, #272]	; (800aacc <USBD_SetConfig+0x150>)
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d020      	beq.n	800aa04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a9c2:	4b42      	ldr	r3, [pc, #264]	; (800aacc <USBD_SetConfig+0x150>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9cc:	4b3f      	ldr	r3, [pc, #252]	; (800aacc <USBD_SetConfig+0x150>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7fe ffbd 	bl	8009952 <USBD_SetClassConfig>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d008      	beq.n	800a9f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f962 	bl	800acae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9f2:	e065      	b.n	800aac0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fa25 	bl	800ae44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa02:	e05d      	b.n	800aac0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fa1d 	bl	800ae44 <USBD_CtlSendStatus>
      break;
 800aa0a:	e059      	b.n	800aac0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa0c:	4b2f      	ldr	r3, [pc, #188]	; (800aacc <USBD_SetConfig+0x150>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d112      	bne.n	800aa3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa1c:	4b2b      	ldr	r3, [pc, #172]	; (800aacc <USBD_SetConfig+0x150>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	461a      	mov	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa26:	4b29      	ldr	r3, [pc, #164]	; (800aacc <USBD_SetConfig+0x150>)
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7fe ffac 	bl	800998a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa06 	bl	800ae44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa38:	e042      	b.n	800aac0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa3a:	4b24      	ldr	r3, [pc, #144]	; (800aacc <USBD_SetConfig+0x150>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d02a      	beq.n	800aa9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7fe ff9a 	bl	800998a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa56:	4b1d      	ldr	r3, [pc, #116]	; (800aacc <USBD_SetConfig+0x150>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa60:	4b1a      	ldr	r3, [pc, #104]	; (800aacc <USBD_SetConfig+0x150>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7fe ff73 	bl	8009952 <USBD_SetClassConfig>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00f      	beq.n	800aa96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f918 	bl	800acae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7fe ff7f 	bl	800998a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa94:	e014      	b.n	800aac0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f9d4 	bl	800ae44 <USBD_CtlSendStatus>
      break;
 800aa9c:	e010      	b.n	800aac0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f9d0 	bl	800ae44 <USBD_CtlSendStatus>
      break;
 800aaa4:	e00c      	b.n	800aac0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f900 	bl	800acae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aaae:	4b07      	ldr	r3, [pc, #28]	; (800aacc <USBD_SetConfig+0x150>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7fe ff68 	bl	800998a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aaba:	2303      	movs	r3, #3
 800aabc:	73fb      	strb	r3, [r7, #15]
      break;
 800aabe:	bf00      	nop
  }

  return ret;
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	2000c300 	.word	0x2000c300

0800aad0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	88db      	ldrh	r3, [r3, #6]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d004      	beq.n	800aaec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f8e2 	bl	800acae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aaea:	e023      	b.n	800ab34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	dc02      	bgt.n	800aafe <USBD_GetConfig+0x2e>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dc03      	bgt.n	800ab04 <USBD_GetConfig+0x34>
 800aafc:	e015      	b.n	800ab2a <USBD_GetConfig+0x5a>
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d00b      	beq.n	800ab1a <USBD_GetConfig+0x4a>
 800ab02:	e012      	b.n	800ab2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	2201      	movs	r2, #1
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f93c 	bl	800ad90 <USBD_CtlSendData>
        break;
 800ab18:	e00c      	b.n	800ab34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	2201      	movs	r2, #1
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f934 	bl	800ad90 <USBD_CtlSendData>
        break;
 800ab28:	e004      	b.n	800ab34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f8be 	bl	800acae <USBD_CtlError>
        break;
 800ab32:	bf00      	nop
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d81e      	bhi.n	800ab92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	88db      	ldrh	r3, [r3, #6]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d004      	beq.n	800ab66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f8a5 	bl	800acae <USBD_CtlError>
        break;
 800ab64:	e01a      	b.n	800ab9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d005      	beq.n	800ab82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f043 0202 	orr.w	r2, r3, #2
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	330c      	adds	r3, #12
 800ab86:	2202      	movs	r2, #2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f900 	bl	800ad90 <USBD_CtlSendData>
      break;
 800ab90:	e004      	b.n	800ab9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f88a 	bl	800acae <USBD_CtlError>
      break;
 800ab9a:	bf00      	nop
  }
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	885b      	ldrh	r3, [r3, #2]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d107      	bne.n	800abc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f940 	bl	800ae44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800abc4:	e013      	b.n	800abee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	885b      	ldrh	r3, [r3, #2]
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d10b      	bne.n	800abe6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	889b      	ldrh	r3, [r3, #4]
 800abd2:	0a1b      	lsrs	r3, r3, #8
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f930 	bl	800ae44 <USBD_CtlSendStatus>
}
 800abe4:	e003      	b.n	800abee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f860 	bl	800acae <USBD_CtlError>
}
 800abee:	bf00      	nop
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d80b      	bhi.n	800ac26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	885b      	ldrh	r3, [r3, #2]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d10c      	bne.n	800ac30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f910 	bl	800ae44 <USBD_CtlSendStatus>
      }
      break;
 800ac24:	e004      	b.n	800ac30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 f840 	bl	800acae <USBD_CtlError>
      break;
 800ac2e:	e000      	b.n	800ac32 <USBD_ClrFeature+0x3c>
      break;
 800ac30:	bf00      	nop
  }
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	781a      	ldrb	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3301      	adds	r3, #1
 800ac54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	781a      	ldrb	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7ff fa17 	bl	800a098 <SWAPBYTE>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3301      	adds	r3, #1
 800ac76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7ff fa0a 	bl	800a098 <SWAPBYTE>
 800ac84:	4603      	mov	r3, r0
 800ac86:	461a      	mov	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3301      	adds	r3, #1
 800ac96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f7ff f9fd 	bl	800a098 <SWAPBYTE>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	461a      	mov	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	80da      	strh	r2, [r3, #6]
}
 800aca6:	bf00      	nop
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800acb8:	2180      	movs	r1, #128	; 0x80
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f006 fc4c 	bl	8011558 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800acc0:	2100      	movs	r1, #0
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f006 fc48 	bl	8011558 <USBD_LL_StallEP>
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d036      	beq.n	800ad54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f000 f836 	bl	800ad5c <USBD_GetLen>
 800acf0:	4603      	mov	r3, r0
 800acf2:	3301      	adds	r3, #1
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	005b      	lsls	r3, r3, #1
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800acfe:	7dfb      	ldrb	r3, [r7, #23]
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	4413      	add	r3, r2
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	7812      	ldrb	r2, [r2, #0]
 800ad08:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad0a:	7dfb      	ldrb	r3, [r7, #23]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	4413      	add	r3, r2
 800ad16:	2203      	movs	r2, #3
 800ad18:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad20:	e013      	b.n	800ad4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad22:	7dfb      	ldrb	r3, [r7, #23]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	4413      	add	r3, r2
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	7812      	ldrb	r2, [r2, #0]
 800ad2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	3301      	adds	r3, #1
 800ad32:	613b      	str	r3, [r7, #16]
    idx++;
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	3301      	adds	r3, #1
 800ad38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad3a:	7dfb      	ldrb	r3, [r7, #23]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	4413      	add	r3, r2
 800ad40:	2200      	movs	r2, #0
 800ad42:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	3301      	adds	r3, #1
 800ad48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e7      	bne.n	800ad22 <USBD_GetString+0x52>
 800ad52:	e000      	b.n	800ad56 <USBD_GetString+0x86>
    return;
 800ad54:	bf00      	nop
  }
}
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ad6c:	e005      	b.n	800ad7a <USBD_GetLen+0x1e>
  {
    len++;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	3301      	adds	r3, #1
 800ad72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	3301      	adds	r3, #1
 800ad78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1f5      	bne.n	800ad6e <USBD_GetLen+0x12>
  }

  return len;
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	2100      	movs	r1, #0
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f006 fc57 	bl	801166a <USBD_LL_Transmit>

  return USBD_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	2100      	movs	r1, #0
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f006 fc46 	bl	801166a <USBD_LL_Transmit>

  return USBD_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2203      	movs	r2, #3
 800adf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	2100      	movs	r1, #0
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f006 fc4a 	bl	80116ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b084      	sub	sp, #16
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	60f8      	str	r0, [r7, #12]
 800ae2a:	60b9      	str	r1, [r7, #8]
 800ae2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	2100      	movs	r1, #0
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f006 fc39 	bl	80116ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2204      	movs	r2, #4
 800ae50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae54:	2300      	movs	r3, #0
 800ae56:	2200      	movs	r2, #0
 800ae58:	2100      	movs	r1, #0
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f006 fc05 	bl	801166a <USBD_LL_Transmit>

  return USBD_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2205      	movs	r2, #5
 800ae76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2100      	movs	r1, #0
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f006 fc13 	bl	80116ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <__NVIC_SetPriority>:
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	db0a      	blt.n	800aeba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	b2da      	uxtb	r2, r3
 800aea8:	490c      	ldr	r1, [pc, #48]	; (800aedc <__NVIC_SetPriority+0x4c>)
 800aeaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeae:	0112      	lsls	r2, r2, #4
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	440b      	add	r3, r1
 800aeb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aeb8:	e00a      	b.n	800aed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	4908      	ldr	r1, [pc, #32]	; (800aee0 <__NVIC_SetPriority+0x50>)
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	f003 030f 	and.w	r3, r3, #15
 800aec6:	3b04      	subs	r3, #4
 800aec8:	0112      	lsls	r2, r2, #4
 800aeca:	b2d2      	uxtb	r2, r2
 800aecc:	440b      	add	r3, r1
 800aece:	761a      	strb	r2, [r3, #24]
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	e000e100 	.word	0xe000e100
 800aee0:	e000ed00 	.word	0xe000ed00

0800aee4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aee8:	4b05      	ldr	r3, [pc, #20]	; (800af00 <SysTick_Handler+0x1c>)
 800aeea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aeec:	f002 fc54 	bl	800d798 <xTaskGetSchedulerState>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d001      	beq.n	800aefa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aef6:	f003 fd8f 	bl	800ea18 <xPortSysTickHandler>
  }
}
 800aefa:	bf00      	nop
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	e000e010 	.word	0xe000e010

0800af04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800af08:	2100      	movs	r1, #0
 800af0a:	f06f 0004 	mvn.w	r0, #4
 800af0e:	f7ff ffbf 	bl	800ae90 <__NVIC_SetPriority>
#endif
}
 800af12:	bf00      	nop
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af1e:	f3ef 8305 	mrs	r3, IPSR
 800af22:	603b      	str	r3, [r7, #0]
  return(result);
 800af24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800af2a:	f06f 0305 	mvn.w	r3, #5
 800af2e:	607b      	str	r3, [r7, #4]
 800af30:	e00c      	b.n	800af4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800af32:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <osKernelInitialize+0x44>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d105      	bne.n	800af46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800af3a:	4b08      	ldr	r3, [pc, #32]	; (800af5c <osKernelInitialize+0x44>)
 800af3c:	2201      	movs	r2, #1
 800af3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800af40:	2300      	movs	r3, #0
 800af42:	607b      	str	r3, [r7, #4]
 800af44:	e002      	b.n	800af4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800af46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af4c:	687b      	ldr	r3, [r7, #4]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	2000c304 	.word	0x2000c304

0800af60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af66:	f3ef 8305 	mrs	r3, IPSR
 800af6a:	603b      	str	r3, [r7, #0]
  return(result);
 800af6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <osKernelStart+0x1a>
    stat = osErrorISR;
 800af72:	f06f 0305 	mvn.w	r3, #5
 800af76:	607b      	str	r3, [r7, #4]
 800af78:	e010      	b.n	800af9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af7a:	4b0b      	ldr	r3, [pc, #44]	; (800afa8 <osKernelStart+0x48>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d109      	bne.n	800af96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af82:	f7ff ffbf 	bl	800af04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af86:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <osKernelStart+0x48>)
 800af88:	2202      	movs	r2, #2
 800af8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af8c:	f001 ff28 	bl	800cde0 <vTaskStartScheduler>
      stat = osOK;
 800af90:	2300      	movs	r3, #0
 800af92:	607b      	str	r3, [r7, #4]
 800af94:	e002      	b.n	800af9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800af96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af9c:	687b      	ldr	r3, [r7, #4]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	2000c304 	.word	0x2000c304

0800afac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800afac:	b580      	push	{r7, lr}
 800afae:	b08e      	sub	sp, #56	; 0x38
 800afb0:	af04      	add	r7, sp, #16
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800afb8:	2300      	movs	r3, #0
 800afba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afbc:	f3ef 8305 	mrs	r3, IPSR
 800afc0:	617b      	str	r3, [r7, #20]
  return(result);
 800afc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d17e      	bne.n	800b0c6 <osThreadNew+0x11a>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d07b      	beq.n	800b0c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800afce:	2380      	movs	r3, #128	; 0x80
 800afd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800afd2:	2318      	movs	r3, #24
 800afd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800afda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d045      	beq.n	800b072 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <osThreadNew+0x48>
        name = attr->name;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d008      	beq.n	800b01a <osThreadNew+0x6e>
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	2b38      	cmp	r3, #56	; 0x38
 800b00c:	d805      	bhi.n	800b01a <osThreadNew+0x6e>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <osThreadNew+0x72>
        return (NULL);
 800b01a:	2300      	movs	r3, #0
 800b01c:	e054      	b.n	800b0c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	089b      	lsrs	r3, r3, #2
 800b02c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00e      	beq.n	800b054 <osThreadNew+0xa8>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	2bbb      	cmp	r3, #187	; 0xbb
 800b03c:	d90a      	bls.n	800b054 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b042:	2b00      	cmp	r3, #0
 800b044:	d006      	beq.n	800b054 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <osThreadNew+0xa8>
        mem = 1;
 800b04e:	2301      	movs	r3, #1
 800b050:	61bb      	str	r3, [r7, #24]
 800b052:	e010      	b.n	800b076 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10c      	bne.n	800b076 <osThreadNew+0xca>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d108      	bne.n	800b076 <osThreadNew+0xca>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d104      	bne.n	800b076 <osThreadNew+0xca>
          mem = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	61bb      	str	r3, [r7, #24]
 800b070:	e001      	b.n	800b076 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d110      	bne.n	800b09e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b084:	9202      	str	r2, [sp, #8]
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6a3a      	ldr	r2, [r7, #32]
 800b090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f001 fc96 	bl	800c9c4 <xTaskCreateStatic>
 800b098:	4603      	mov	r3, r0
 800b09a:	613b      	str	r3, [r7, #16]
 800b09c:	e013      	b.n	800b0c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d110      	bne.n	800b0c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	f107 0310 	add.w	r3, r7, #16
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f001 fce1 	bl	800ca7e <xTaskCreate>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d001      	beq.n	800b0c6 <osThreadNew+0x11a>
            hTask = NULL;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b0c6:	693b      	ldr	r3, [r7, #16]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3728      	adds	r7, #40	; 0x28
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <osThreadFlagsSet+0x1a>
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	da03      	bge.n	800b0f2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800b0ea:	f06f 0303 	mvn.w	r3, #3
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	e03a      	b.n	800b168 <osThreadFlagsSet+0x98>
  }
  else {
    rflags = (uint32_t)osError;
 800b0f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f8:	f3ef 8305 	mrs	r3, IPSR
 800b0fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b0fe:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800b100:	2b00      	cmp	r3, #0
 800b102:	d024      	beq.n	800b14e <osThreadFlagsSet+0x7e>
      yield = pdFALSE;
 800b104:	2300      	movs	r3, #0
 800b106:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800b108:	f107 0308 	add.w	r3, r7, #8
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	2300      	movs	r3, #0
 800b110:	2201      	movs	r2, #1
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6978      	ldr	r0, [r7, #20]
 800b116:	f002 fe13 	bl	800dd40 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800b11a:	f107 030c 	add.w	r3, r7, #12
 800b11e:	2200      	movs	r2, #0
 800b120:	9200      	str	r2, [sp, #0]
 800b122:	2200      	movs	r2, #0
 800b124:	2100      	movs	r1, #0
 800b126:	6978      	ldr	r0, [r7, #20]
 800b128:	f002 fe0a 	bl	800dd40 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00a      	beq.n	800b148 <osThreadFlagsSet+0x78>
 800b132:	f005 fb4b 	bl	80107cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800b136:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <osThreadFlagsSet+0xa4>)
 800b138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	e00f      	b.n	800b168 <osThreadFlagsSet+0x98>
 800b148:	f005 fb24 	bl	8010794 <SEGGER_SYSVIEW_RecordExitISR>
 800b14c:	e00c      	b.n	800b168 <osThreadFlagsSet+0x98>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800b14e:	2300      	movs	r3, #0
 800b150:	2201      	movs	r2, #1
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6978      	ldr	r0, [r7, #20]
 800b156:	f002 fd23 	bl	800dba0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800b15a:	f107 030c 	add.w	r3, r7, #12
 800b15e:	2200      	movs	r2, #0
 800b160:	2100      	movs	r1, #0
 800b162:	6978      	ldr	r0, [r7, #20]
 800b164:	f002 fd1c 	bl	800dba0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800b168:	68fb      	ldr	r3, [r7, #12]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	e000ed04 	.word	0xe000ed04

0800b178 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08c      	sub	sp, #48	; 0x30
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b184:	f3ef 8305 	mrs	r3, IPSR
 800b188:	617b      	str	r3, [r7, #20]
  return(result);
 800b18a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d003      	beq.n	800b198 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800b190:	f06f 0305 	mvn.w	r3, #5
 800b194:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b196:	e06b      	b.n	800b270 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da03      	bge.n	800b1a6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800b19e:	f06f 0303 	mvn.w	r3, #3
 800b1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1a4:	e064      	b.n	800b270 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b4:	e001      	b.n	800b1ba <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800b1c2:	f001 ff3f 	bl	800d044 <xTaskGetTickCount>
 800b1c6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b1c8:	f107 0210 	add.w	r2, r7, #16
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	f002 fc7d 	bl	800dad0 <xTaskNotifyWait>
 800b1d6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d137      	bne.n	800b24e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800b1de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00c      	beq.n	800b212 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	429a      	cmp	r2, r3
 800b202:	d032      	beq.n	800b26a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10f      	bne.n	800b22a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800b20a:	f06f 0302 	mvn.w	r3, #2
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800b210:	e02e      	b.n	800b270 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b216:	4013      	ands	r3, r2
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d128      	bne.n	800b26e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d103      	bne.n	800b22a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800b222:	f06f 0302 	mvn.w	r3, #2
 800b226:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800b228:	e022      	b.n	800b270 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b22a:	f001 ff0b 	bl	800d044 <xTaskGetTickCount>
 800b22e:	4602      	mov	r2, r0
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800b236:	69ba      	ldr	r2, [r7, #24]
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d902      	bls.n	800b244 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
 800b242:	e00e      	b.n	800b262 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800b244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	627b      	str	r3, [r7, #36]	; 0x24
 800b24c:	e009      	b.n	800b262 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d103      	bne.n	800b25c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800b254:	f06f 0302 	mvn.w	r3, #2
 800b258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b25a:	e002      	b.n	800b262 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b25c:	f06f 0301 	mvn.w	r3, #1
 800b260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1af      	bne.n	800b1c8 <osThreadFlagsWait+0x50>
 800b268:	e002      	b.n	800b270 <osThreadFlagsWait+0xf8>
            break;
 800b26a:	bf00      	nop
 800b26c:	e000      	b.n	800b270 <osThreadFlagsWait+0xf8>
            break;
 800b26e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b272:	4618      	mov	r0, r3
 800b274:	3730      	adds	r7, #48	; 0x30
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b282:	f3ef 8305 	mrs	r3, IPSR
 800b286:	60bb      	str	r3, [r7, #8]
  return(result);
 800b288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <osDelay+0x1c>
    stat = osErrorISR;
 800b28e:	f06f 0305 	mvn.w	r3, #5
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e007      	b.n	800b2a6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b296:	2300      	movs	r3, #0
 800b298:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 fd65 	bl	800cd70 <vTaskDelay>
    }
  }

  return (stat);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08a      	sub	sp, #40	; 0x28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2bc:	f3ef 8305 	mrs	r3, IPSR
 800b2c0:	613b      	str	r3, [r7, #16]
  return(result);
 800b2c2:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <osMemoryPoolNew+0x1e>
    mp = NULL;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b2cc:	e0be      	b.n	800b44c <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <osMemoryPoolNew+0x2a>
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d102      	bne.n	800b2e0 <osMemoryPoolNew+0x30>
    mp = NULL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2de:	e0b5      	b.n	800b44c <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	3303      	adds	r3, #3
 800b2e8:	f023 0203 	bic.w	r2, r3, #3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	fb02 f303 	mul.w	r3, r2, r3
 800b2f2:	617b      	str	r3, [r7, #20]

    name = NULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 800b2f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2fc:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 800b2fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b302:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d038      	beq.n	800b37c <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <osMemoryPoolNew+0x68>
        name = attr->name;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d006      	beq.n	800b32e <osMemoryPoolNew+0x7e>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	2b73      	cmp	r3, #115	; 0x73
 800b326:	d902      	bls.n	800b32e <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 800b328:	2301      	movs	r3, #1
 800b32a:	61fb      	str	r3, [r7, #28]
 800b32c:	e009      	b.n	800b342 <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d105      	bne.n	800b342 <osMemoryPoolNew+0x92>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <osMemoryPoolNew+0xa8>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d102      	bne.n	800b358 <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	61bb      	str	r3, [r7, #24]
 800b356:	e015      	b.n	800b384 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d011      	beq.n	800b384 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	f003 0303 	and.w	r3, r3, #3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10b      	bne.n	800b384 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	429a      	cmp	r2, r3
 800b374:	d806      	bhi.n	800b384 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 800b376:	2301      	movs	r3, #1
 800b378:	61bb      	str	r3, [r7, #24]
 800b37a:	e003      	b.n	800b384 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d104      	bne.n	800b394 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 800b38a:	2074      	movs	r0, #116	; 0x74
 800b38c:	f003 fc22 	bl	800ebd4 <pvPortMalloc>
 800b390:	6278      	str	r0, [r7, #36]	; 0x24
 800b392:	e002      	b.n	800b39a <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01b      	beq.n	800b3d8 <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	3324      	adds	r3, #36	; 0x24
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	68f9      	ldr	r1, [r7, #12]
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 fbaa 	bl	800bb02 <xQueueCreateCountingSemaphoreStatic>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00d      	beq.n	800b3d8 <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d106      	bne.n	800b3d0 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 800b3c2:	6978      	ldr	r0, [r7, #20]
 800b3c4:	f003 fc06 	bl	800ebd4 <pvPortMalloc>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	609a      	str	r2, [r3, #8]
 800b3ce:	e003      	b.n	800b3d8 <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d02b      	beq.n	800b436 <osMemoryPoolNew+0x186>
 800b3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d027      	beq.n	800b436 <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f4:	6a3a      	ldr	r2, [r7, #32]
 800b3f6:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	2200      	movs	r2, #0
 800b408:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40c:	4a12      	ldr	r2, [pc, #72]	; (800b458 <osMemoryPoolNew+0x1a8>)
 800b40e:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d105      	bne.n	800b422 <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 800b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	f043 0201 	orr.w	r2, r3, #1
 800b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b420:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d111      	bne.n	800b44c <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	f043 0202 	orr.w	r2, r3, #2
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 800b434:	e00a      	b.n	800b44c <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d105      	bne.n	800b448 <osMemoryPoolNew+0x198>
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 800b442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b444:	f003 fc92 	bl	800ed6c <vPortFree>
      }
      mp = NULL;
 800b448:	2300      	movs	r3, #0
 800b44a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3728      	adds	r7, #40	; 0x28
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	5eed0000 	.word	0x5eed0000

0800b45c <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d102      	bne.n	800b472 <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
 800b470:	e062      	b.n	800b538 <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	6a1a      	ldr	r2, [r3, #32]
 800b47e:	4b31      	ldr	r3, [pc, #196]	; (800b544 <osMemoryPoolAlloc+0xe8>)
 800b480:	4013      	ands	r3, r2
 800b482:	4a30      	ldr	r2, [pc, #192]	; (800b544 <osMemoryPoolAlloc+0xe8>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d157      	bne.n	800b538 <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b488:	f3ef 8305 	mrs	r3, IPSR
 800b48c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b48e:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 800b490:	2b00      	cmp	r3, #0
 800b492:	d032      	beq.n	800b4fa <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d14e      	bne.n	800b538 <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f001 f826 	bl	800c4f4 <xQueueReceiveFromISR>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d144      	bne.n	800b538 <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	6a1a      	ldr	r2, [r3, #32]
 800b4b2:	4b24      	ldr	r3, [pc, #144]	; (800b544 <osMemoryPoolAlloc+0xe8>)
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	4a23      	ldr	r2, [pc, #140]	; (800b544 <osMemoryPoolAlloc+0xe8>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d13d      	bne.n	800b538 <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4bc:	f3ef 8211 	mrs	r2, BASEPRI
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	617a      	str	r2, [r7, #20]
 800b4d2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b4d4:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 800b4d6:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 800b4d8:	6a38      	ldr	r0, [r7, #32]
 800b4da:	f000 f8f5 	bl	800b6c8 <AllocBlock>
 800b4de:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d103      	bne.n	800b4ee <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 800b4e6:	6a38      	ldr	r0, [r7, #32]
 800b4e8:	f000 f8cc 	bl	800b684 <CreateBlock>
 800b4ec:	6278      	str	r0, [r7, #36]	; 0x24
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b4f8:	e01e      	b.n	800b538 <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	4618      	mov	r0, r3
 800b502:	f000 febb 	bl	800c27c <xQueueSemaphoreTake>
 800b506:	4603      	mov	r3, r0
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d115      	bne.n	800b538 <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	6a1a      	ldr	r2, [r3, #32]
 800b510:	4b0c      	ldr	r3, [pc, #48]	; (800b544 <osMemoryPoolAlloc+0xe8>)
 800b512:	4013      	ands	r3, r2
 800b514:	4a0b      	ldr	r2, [pc, #44]	; (800b544 <osMemoryPoolAlloc+0xe8>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d10e      	bne.n	800b538 <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 800b51a:	f003 f9eb 	bl	800e8f4 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 800b51e:	6a38      	ldr	r0, [r7, #32]
 800b520:	f000 f8d2 	bl	800b6c8 <AllocBlock>
 800b524:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d103      	bne.n	800b534 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 800b52c:	6a38      	ldr	r0, [r7, #32]
 800b52e:	f000 f8a9 	bl	800b684 <CreateBlock>
 800b532:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 800b534:	f003 fa0e 	bl	800e954 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3728      	adds	r7, #40	; 0x28
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	5eed0000 	.word	0x5eed0000

0800b548 <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08a      	sub	sp, #40	; 0x28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <osMemoryPoolFree+0x16>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d103      	bne.n	800b566 <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 800b55e:	f06f 0303 	mvn.w	r3, #3
 800b562:	627b      	str	r3, [r7, #36]	; 0x24
 800b564:	e084      	b.n	800b670 <osMemoryPoolFree+0x128>
  }
  else {
    mp = (MemPool_t *)mp_id;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 800b56a:	6a3b      	ldr	r3, [r7, #32]
 800b56c:	6a1a      	ldr	r2, [r3, #32]
 800b56e:	4b43      	ldr	r3, [pc, #268]	; (800b67c <osMemoryPoolFree+0x134>)
 800b570:	4013      	ands	r3, r2
 800b572:	4a42      	ldr	r2, [pc, #264]	; (800b67c <osMemoryPoolFree+0x134>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d003      	beq.n	800b580 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 800b578:	f06f 0302 	mvn.w	r3, #2
 800b57c:	627b      	str	r3, [r7, #36]	; 0x24
 800b57e:	e077      	b.n	800b670 <osMemoryPoolFree+0x128>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 800b580:	6a3b      	ldr	r3, [r7, #32]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d308      	bcc.n	800b59c <osMemoryPoolFree+0x54>
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	689a      	ldr	r2, [r3, #8]
 800b58e:	6a3b      	ldr	r3, [r7, #32]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	3b01      	subs	r3, #1
 800b594:	4413      	add	r3, r2
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d903      	bls.n	800b5a4 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 800b59c:	f06f 0303 	mvn.w	r3, #3
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5a2:	e065      	b.n	800b670 <osMemoryPoolFree+0x128>
    }
    else {
      stat = osOK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5a8:	f3ef 8305 	mrs	r3, IPSR
 800b5ac:	61bb      	str	r3, [r7, #24]
  return(result);
 800b5ae:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d040      	beq.n	800b636 <osMemoryPoolFree+0xee>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f001 f857 	bl	800c66c <uxQueueMessagesWaitingFromISR>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d103      	bne.n	800b5d0 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 800b5c8:	f06f 0302 	mvn.w	r3, #2
 800b5cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5ce:	e04f      	b.n	800b670 <osMemoryPoolFree+0x128>
	__asm volatile
 800b5d0:	f3ef 8211 	mrs	r2, BASEPRI
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	613a      	str	r2, [r7, #16]
 800b5e6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800b5e8:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 800b5ea:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6a38      	ldr	r0, [r7, #32]
 800b5f0:	f000 f882 	bl	800b6f8 <FreeBlock>
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	f383 8811 	msr	BASEPRI, r3
}
 800b5fe:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 800b600:	2300      	movs	r3, #0
 800b602:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 800b604:	6a3b      	ldr	r3, [r7, #32]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	f107 0208 	add.w	r2, r7, #8
 800b60c:	4611      	mov	r1, r2
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fc83 	bl	800bf1a <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <osMemoryPoolFree+0xe8>
 800b61a:	f005 f8d7 	bl	80107cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800b61e:	4b18      	ldr	r3, [pc, #96]	; (800b680 <osMemoryPoolFree+0x138>)
 800b620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	e01f      	b.n	800b670 <osMemoryPoolFree+0x128>
 800b630:	f005 f8b0 	bl	8010794 <SEGGER_SYSVIEW_RecordExitISR>
 800b634:	e01c      	b.n	800b670 <osMemoryPoolFree+0x128>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 fff8 	bl	800c630 <uxQueueMessagesWaiting>
 800b640:	4602      	mov	r2, r0
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	429a      	cmp	r2, r3
 800b648:	d103      	bne.n	800b652 <osMemoryPoolFree+0x10a>
          stat = osErrorResource;
 800b64a:	f06f 0302 	mvn.w	r3, #2
 800b64e:	627b      	str	r3, [r7, #36]	; 0x24
 800b650:	e00e      	b.n	800b670 <osMemoryPoolFree+0x128>
        }
        else {
          taskENTER_CRITICAL();
 800b652:	f003 f94f 	bl	800e8f4 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6a38      	ldr	r0, [r7, #32]
 800b65a:	f000 f84d 	bl	800b6f8 <FreeBlock>

          taskEXIT_CRITICAL();
 800b65e:	f003 f979 	bl	800e954 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	6858      	ldr	r0, [r3, #4]
 800b666:	2300      	movs	r3, #0
 800b668:	2200      	movs	r2, #0
 800b66a:	2100      	movs	r1, #0
 800b66c:	f000 fa80 	bl	800bb70 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b672:	4618      	mov	r0, r3
 800b674:	3728      	adds	r7, #40	; 0x28
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	5eed0000 	.word	0x5eed0000
 800b680:	e000ed04 	.word	0xe000ed04

0800b684 <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 800b68c:	2300      	movs	r3, #0
 800b68e:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	69da      	ldr	r2, [r3, #28]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d20e      	bcs.n	800b6ba <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	6879      	ldr	r1, [r7, #4]
 800b6a6:	69c9      	ldr	r1, [r1, #28]
 800b6a8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	69db      	ldr	r3, [r3, #28]
 800b6b4:	1c5a      	adds	r2, r3, #1
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	61da      	str	r2, [r3, #28]
  }

  return (p);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d006      	beq.n	800b6ea <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	601a      	str	r2, [r3, #0]
  }

  return (p);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	601a      	str	r2, [r3, #0]
}
 800b714:	bf00      	nop
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4a07      	ldr	r2, [pc, #28]	; (800b74c <vApplicationGetIdleTaskMemory+0x2c>)
 800b730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	4a06      	ldr	r2, [pc, #24]	; (800b750 <vApplicationGetIdleTaskMemory+0x30>)
 800b736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2280      	movs	r2, #128	; 0x80
 800b73c:	601a      	str	r2, [r3, #0]
}
 800b73e:	bf00      	nop
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	2000c308 	.word	0x2000c308
 800b750:	2000c3c4 	.word	0x2000c3c4

0800b754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	4a07      	ldr	r2, [pc, #28]	; (800b780 <vApplicationGetTimerTaskMemory+0x2c>)
 800b764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4a06      	ldr	r2, [pc, #24]	; (800b784 <vApplicationGetTimerTaskMemory+0x30>)
 800b76a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	2000c5c4 	.word	0x2000c5c4
 800b784:	2000c680 	.word	0x2000c680

0800b788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f103 0208 	add.w	r2, r3, #8
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f103 0208 	add.w	r2, r3, #8
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f103 0208 	add.w	r2, r3, #8
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b085      	sub	sp, #20
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	689a      	ldr	r2, [r3, #8]
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
}
 800b81e:	bf00      	nop
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b82a:	b480      	push	{r7}
 800b82c:	b085      	sub	sp, #20
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b840:	d103      	bne.n	800b84a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	60fb      	str	r3, [r7, #12]
 800b848:	e00c      	b.n	800b864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	3308      	adds	r3, #8
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	e002      	b.n	800b858 <vListInsert+0x2e>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	429a      	cmp	r2, r3
 800b862:	d2f6      	bcs.n	800b852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	601a      	str	r2, [r3, #0]
}
 800b890:	bf00      	nop
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6892      	ldr	r2, [r2, #8]
 800b8b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	6852      	ldr	r2, [r2, #4]
 800b8bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d103      	bne.n	800b8d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	1e5a      	subs	r2, r3, #1
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <xQueueGenericReset+0x2a>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	60bb      	str	r3, [r7, #8]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b91a:	f002 ffeb 	bl	800e8f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b926:	68f9      	ldr	r1, [r7, #12]
 800b928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b92a:	fb01 f303 	mul.w	r3, r1, r3
 800b92e:	441a      	add	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94a:	3b01      	subs	r3, #1
 800b94c:	68f9      	ldr	r1, [r7, #12]
 800b94e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b950:	fb01 f303 	mul.w	r3, r1, r3
 800b954:	441a      	add	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	22ff      	movs	r2, #255	; 0xff
 800b95e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	22ff      	movs	r2, #255	; 0xff
 800b966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d114      	bne.n	800b99a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01a      	beq.n	800b9ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3310      	adds	r3, #16
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 fd0b 	bl	800d398 <xTaskRemoveFromEventList>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d012      	beq.n	800b9ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b988:	4b0c      	ldr	r3, [pc, #48]	; (800b9bc <xQueueGenericReset+0xcc>)
 800b98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98e:	601a      	str	r2, [r3, #0]
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	e009      	b.n	800b9ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3310      	adds	r3, #16
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff fef2 	bl	800b788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	3324      	adds	r3, #36	; 0x24
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7ff feed 	bl	800b788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b9ae:	f002 ffd1 	bl	800e954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b9b2:	2301      	movs	r3, #1
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	e000ed04 	.word	0xe000ed04

0800b9c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08e      	sub	sp, #56	; 0x38
 800b9c4:	af02      	add	r7, sp, #8
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10a      	bne.n	800b9ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <xQueueGenericCreateStatic+0x52>
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <xQueueGenericCreateStatic+0x56>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e000      	b.n	800ba18 <xQueueGenericCreateStatic+0x58>
 800ba16:	2300      	movs	r3, #0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	623b      	str	r3, [r7, #32]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d102      	bne.n	800ba3e <xQueueGenericCreateStatic+0x7e>
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <xQueueGenericCreateStatic+0x82>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e000      	b.n	800ba44 <xQueueGenericCreateStatic+0x84>
 800ba42:	2300      	movs	r3, #0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10a      	bne.n	800ba5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	61fb      	str	r3, [r7, #28]
}
 800ba5a:	bf00      	nop
 800ba5c:	e7fe      	b.n	800ba5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba5e:	2350      	movs	r3, #80	; 0x50
 800ba60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b50      	cmp	r3, #80	; 0x50
 800ba66:	d00a      	beq.n	800ba7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ba68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	61bb      	str	r3, [r7, #24]
}
 800ba7a:	bf00      	nop
 800ba7c:	e7fe      	b.n	800ba7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00d      	beq.n	800baa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 f805 	bl	800bab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800baa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3730      	adds	r7, #48	; 0x30
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d103      	bne.n	800bacc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	69ba      	ldr	r2, [r7, #24]
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	e002      	b.n	800bad2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bade:	2101      	movs	r1, #1
 800bae0:	69b8      	ldr	r0, [r7, #24]
 800bae2:	f7ff ff05 	bl	800b8f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	78fa      	ldrb	r2, [r7, #3]
 800baea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800baee:	78fb      	ldrb	r3, [r7, #3]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	68f9      	ldr	r1, [r7, #12]
 800baf4:	2073      	movs	r0, #115	; 0x73
 800baf6:	f004 f98d 	bl	800fe14 <SEGGER_SYSVIEW_RecordU32x3>
}
 800bafa:	bf00      	nop
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b08a      	sub	sp, #40	; 0x28
 800bb06:	af02      	add	r7, sp, #8
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	61bb      	str	r3, [r7, #24]
}
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d90a      	bls.n	800bb48 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	617b      	str	r3, [r7, #20]
}
 800bb44:	bf00      	nop
 800bb46:	e7fe      	b.n	800bb46 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb48:	2302      	movs	r3, #2
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2100      	movs	r1, #0
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f7ff ff34 	bl	800b9c0 <xQueueGenericCreateStatic>
 800bb58:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bb66:	69fb      	ldr	r3, [r7, #28]
	}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3720      	adds	r7, #32
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b090      	sub	sp, #64	; 0x40
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <xQueueGenericSend+0x32>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d103      	bne.n	800bbb0 <xQueueGenericSend+0x40>
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <xQueueGenericSend+0x44>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e000      	b.n	800bbb6 <xQueueGenericSend+0x46>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10a      	bne.n	800bbd0 <xQueueGenericSend+0x60>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbcc:	bf00      	nop
 800bbce:	e7fe      	b.n	800bbce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	d103      	bne.n	800bbde <xQueueGenericSend+0x6e>
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d101      	bne.n	800bbe2 <xQueueGenericSend+0x72>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e000      	b.n	800bbe4 <xQueueGenericSend+0x74>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <xQueueGenericSend+0x8e>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	623b      	str	r3, [r7, #32]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbfe:	f001 fdcb 	bl	800d798 <xTaskGetSchedulerState>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d102      	bne.n	800bc0e <xQueueGenericSend+0x9e>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d101      	bne.n	800bc12 <xQueueGenericSend+0xa2>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e000      	b.n	800bc14 <xQueueGenericSend+0xa4>
 800bc12:	2300      	movs	r3, #0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10a      	bne.n	800bc2e <xQueueGenericSend+0xbe>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	61fb      	str	r3, [r7, #28]
}
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc2e:	f002 fe61 	bl	800e8f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d302      	bcc.n	800bc44 <xQueueGenericSend+0xd4>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d136      	bne.n	800bcb2 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	4618      	mov	r0, r3
 800bc48:	f004 ff1e 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	460b      	mov	r3, r1
 800bc56:	4601      	mov	r1, r0
 800bc58:	205a      	movs	r0, #90	; 0x5a
 800bc5a:	f004 f951 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc64:	f000 fd38 	bl	800c6d8 <prvCopyDataToQueue>
 800bc68:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d010      	beq.n	800bc94 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	3324      	adds	r3, #36	; 0x24
 800bc76:	4618      	mov	r0, r3
 800bc78:	f001 fb8e 	bl	800d398 <xTaskRemoveFromEventList>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d013      	beq.n	800bcaa <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc82:	4b4d      	ldr	r3, [pc, #308]	; (800bdb8 <xQueueGenericSend+0x248>)
 800bc84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	e00a      	b.n	800bcaa <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d007      	beq.n	800bcaa <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc9a:	4b47      	ldr	r3, [pc, #284]	; (800bdb8 <xQueueGenericSend+0x248>)
 800bc9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bcaa:	f002 fe53 	bl	800e954 <vPortExitCritical>
				return pdPASS;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e07d      	b.n	800bdae <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d110      	bne.n	800bcda <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcb8:	f002 fe4c 	bl	800e954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f004 fee2 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	460b      	mov	r3, r1
 800bcce:	4601      	mov	r1, r0
 800bcd0:	205a      	movs	r0, #90	; 0x5a
 800bcd2:	f004 f915 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	e069      	b.n	800bdae <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d106      	bne.n	800bcee <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bce0:	f107 0314 	add.w	r3, r7, #20
 800bce4:	4618      	mov	r0, r3
 800bce6:	f001 fbbf 	bl	800d468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcea:	2301      	movs	r3, #1
 800bcec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcee:	f002 fe31 	bl	800e954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcf2:	f001 f8f7 	bl	800cee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcf6:	f002 fdfd 	bl	800e8f4 <vPortEnterCritical>
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd00:	b25b      	sxtb	r3, r3
 800bd02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd06:	d103      	bne.n	800bd10 <xQueueGenericSend+0x1a0>
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd16:	b25b      	sxtb	r3, r3
 800bd18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd1c:	d103      	bne.n	800bd26 <xQueueGenericSend+0x1b6>
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd26:	f002 fe15 	bl	800e954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd2a:	1d3a      	adds	r2, r7, #4
 800bd2c:	f107 0314 	add.w	r3, r7, #20
 800bd30:	4611      	mov	r1, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	f001 fbae 	bl	800d494 <xTaskCheckForTimeOut>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d124      	bne.n	800bd88 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd40:	f000 fdc2 	bl	800c8c8 <prvIsQueueFull>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d018      	beq.n	800bd7c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	3310      	adds	r3, #16
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f001 face 	bl	800d2f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd5a:	f000 fd4d 	bl	800c7f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd5e:	f001 f8cf 	bl	800cf00 <xTaskResumeAll>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f47f af62 	bne.w	800bc2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd6a:	4b13      	ldr	r3, [pc, #76]	; (800bdb8 <xQueueGenericSend+0x248>)
 800bd6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	e758      	b.n	800bc2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd7e:	f000 fd3b 	bl	800c7f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd82:	f001 f8bd 	bl	800cf00 <xTaskResumeAll>
 800bd86:	e752      	b.n	800bc2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd8a:	f000 fd35 	bl	800c7f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd8e:	f001 f8b7 	bl	800cf00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	4618      	mov	r0, r3
 800bd96:	f004 fe77 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	6879      	ldr	r1, [r7, #4]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	460b      	mov	r3, r1
 800bda4:	4601      	mov	r1, r0
 800bda6:	205a      	movs	r0, #90	; 0x5a
 800bda8:	f004 f8aa 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800bdac:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3738      	adds	r7, #56	; 0x38
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	e000ed04 	.word	0xe000ed04

0800bdbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b090      	sub	sp, #64	; 0x40
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
 800bdc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10a      	bne.n	800bdea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bde6:	bf00      	nop
 800bde8:	e7fe      	b.n	800bde8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d103      	bne.n	800bdf8 <xQueueGenericSendFromISR+0x3c>
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d101      	bne.n	800bdfc <xQueueGenericSendFromISR+0x40>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e000      	b.n	800bdfe <xQueueGenericSendFromISR+0x42>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10a      	bne.n	800be18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be14:	bf00      	nop
 800be16:	e7fe      	b.n	800be16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d103      	bne.n	800be26 <xQueueGenericSendFromISR+0x6a>
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be22:	2b01      	cmp	r3, #1
 800be24:	d101      	bne.n	800be2a <xQueueGenericSendFromISR+0x6e>
 800be26:	2301      	movs	r3, #1
 800be28:	e000      	b.n	800be2c <xQueueGenericSendFromISR+0x70>
 800be2a:	2300      	movs	r3, #0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10a      	bne.n	800be46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	623b      	str	r3, [r7, #32]
}
 800be42:	bf00      	nop
 800be44:	e7fe      	b.n	800be44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be46:	f002 fe3f 	bl	800eac8 <vPortValidateInterruptPriority>
	__asm volatile
 800be4a:	f3ef 8211 	mrs	r2, BASEPRI
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	61fa      	str	r2, [r7, #28]
 800be60:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800be62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be6e:	429a      	cmp	r2, r3
 800be70:	d302      	bcc.n	800be78 <xQueueGenericSendFromISR+0xbc>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b02      	cmp	r3, #2
 800be76:	d139      	bne.n	800beec <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be86:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800be88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8a:	4618      	mov	r0, r3
 800be8c:	f004 fdfc 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800be90:	4601      	mov	r1, r0
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	461a      	mov	r2, r3
 800be96:	2060      	movs	r0, #96	; 0x60
 800be98:	f003 ff62 	bl	800fd60 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	68b9      	ldr	r1, [r7, #8]
 800bea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bea2:	f000 fc19 	bl	800c6d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bea6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beae:	d112      	bne.n	800bed6 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d016      	beq.n	800bee6 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beba:	3324      	adds	r3, #36	; 0x24
 800bebc:	4618      	mov	r0, r3
 800bebe:	f001 fa6b 	bl	800d398 <xTaskRemoveFromEventList>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00e      	beq.n	800bee6 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00b      	beq.n	800bee6 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	e007      	b.n	800bee6 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800beda:	3301      	adds	r3, #1
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	b25a      	sxtb	r2, r3
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bee6:	2301      	movs	r3, #1
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800beea:	e00b      	b.n	800bf04 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	4618      	mov	r0, r3
 800bef0:	f004 fdca 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800bef4:	4601      	mov	r1, r0
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	461a      	mov	r2, r3
 800befa:	2060      	movs	r0, #96	; 0x60
 800befc:	f003 ff30 	bl	800fd60 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800bf00:	2300      	movs	r3, #0
 800bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf06:	617b      	str	r3, [r7, #20]
	__asm volatile
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f383 8811 	msr	BASEPRI, r3
}
 800bf0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3740      	adds	r7, #64	; 0x40
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b08e      	sub	sp, #56	; 0x38
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	623b      	str	r3, [r7, #32]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00a      	beq.n	800bf62 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	61fb      	str	r3, [r7, #28]
}
 800bf5e:	bf00      	nop
 800bf60:	e7fe      	b.n	800bf60 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d103      	bne.n	800bf72 <xQueueGiveFromISR+0x58>
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <xQueueGiveFromISR+0x5c>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <xQueueGiveFromISR+0x5e>
 800bf76:	2300      	movs	r3, #0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10a      	bne.n	800bf92 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	61bb      	str	r3, [r7, #24]
}
 800bf8e:	bf00      	nop
 800bf90:	e7fe      	b.n	800bf90 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf92:	f002 fd99 	bl	800eac8 <vPortValidateInterruptPriority>
	__asm volatile
 800bf96:	f3ef 8211 	mrs	r2, BASEPRI
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	617a      	str	r2, [r7, #20]
 800bfac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bfae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d235      	bcs.n	800c02e <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f004 fd5a 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800bfd4:	4601      	mov	r1, r0
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	2060      	movs	r0, #96	; 0x60
 800bfdc:	f003 fec0 	bl	800fd60 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe2:	1c5a      	adds	r2, r3, #1
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bfe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bfec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bff0:	d112      	bne.n	800c018 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d016      	beq.n	800c028 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	3324      	adds	r3, #36	; 0x24
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 f9ca 	bl	800d398 <xTaskRemoveFromEventList>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00e      	beq.n	800c028 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00b      	beq.n	800c028 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	2201      	movs	r2, #1
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	e007      	b.n	800c028 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c01c:	3301      	adds	r3, #1
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	b25a      	sxtb	r2, r3
 800c022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c028:	2301      	movs	r3, #1
 800c02a:	637b      	str	r3, [r7, #52]	; 0x34
 800c02c:	e00b      	b.n	800c046 <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	4618      	mov	r0, r3
 800c032:	f004 fd29 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c036:	4601      	mov	r1, r0
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	2060      	movs	r0, #96	; 0x60
 800c03e:	f003 fe8f 	bl	800fd60 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800c042:	2300      	movs	r3, #0
 800c044:	637b      	str	r3, [r7, #52]	; 0x34
 800c046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c048:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f383 8811 	msr	BASEPRI, r3
}
 800c050:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c054:	4618      	mov	r0, r3
 800c056:	3738      	adds	r7, #56	; 0x38
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c05c:	b590      	push	{r4, r7, lr}
 800c05e:	b08f      	sub	sp, #60	; 0x3c
 800c060:	af02      	add	r7, sp, #8
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c068:	2300      	movs	r3, #0
 800c06a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10a      	bne.n	800c08c <xQueueReceive+0x30>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	623b      	str	r3, [r7, #32]
}
 800c088:	bf00      	nop
 800c08a:	e7fe      	b.n	800c08a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d103      	bne.n	800c09a <xQueueReceive+0x3e>
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <xQueueReceive+0x42>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e000      	b.n	800c0a0 <xQueueReceive+0x44>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10a      	bne.n	800c0ba <xQueueReceive+0x5e>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	61fb      	str	r3, [r7, #28]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0ba:	f001 fb6d 	bl	800d798 <xTaskGetSchedulerState>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <xQueueReceive+0x6e>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <xQueueReceive+0x72>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e000      	b.n	800c0d0 <xQueueReceive+0x74>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10a      	bne.n	800c0ea <xQueueReceive+0x8e>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	61bb      	str	r3, [r7, #24]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0ea:	f002 fc03 	bl	800e8f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d02f      	beq.n	800c15a <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0fe:	f000 fb55 	bl	800c7ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	4618      	mov	r0, r3
 800c106:	f004 fcbf 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c10a:	4604      	mov	r4, r0
 800c10c:	2000      	movs	r0, #0
 800c10e:	f004 fcbb 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c112:	4602      	mov	r2, r0
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2101      	movs	r1, #1
 800c118:	9100      	str	r1, [sp, #0]
 800c11a:	4621      	mov	r1, r4
 800c11c:	205c      	movs	r0, #92	; 0x5c
 800c11e:	f003 feef 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	1e5a      	subs	r2, r3, #1
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00f      	beq.n	800c152 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	3310      	adds	r3, #16
 800c136:	4618      	mov	r0, r3
 800c138:	f001 f92e 	bl	800d398 <xTaskRemoveFromEventList>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d007      	beq.n	800c152 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c142:	4b4d      	ldr	r3, [pc, #308]	; (800c278 <xQueueReceive+0x21c>)
 800c144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c152:	f002 fbff 	bl	800e954 <vPortExitCritical>
				return pdPASS;
 800c156:	2301      	movs	r3, #1
 800c158:	e08a      	b.n	800c270 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d113      	bne.n	800c188 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c160:	f002 fbf8 	bl	800e954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c166:	4618      	mov	r0, r3
 800c168:	f004 fc8e 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c16c:	4604      	mov	r4, r0
 800c16e:	2000      	movs	r0, #0
 800c170:	f004 fc8a 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c174:	4602      	mov	r2, r0
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2101      	movs	r1, #1
 800c17a:	9100      	str	r1, [sp, #0]
 800c17c:	4621      	mov	r1, r4
 800c17e:	205c      	movs	r0, #92	; 0x5c
 800c180:	f003 febe 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800c184:	2300      	movs	r3, #0
 800c186:	e073      	b.n	800c270 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c18e:	f107 0310 	add.w	r3, r7, #16
 800c192:	4618      	mov	r0, r3
 800c194:	f001 f968 	bl	800d468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c198:	2301      	movs	r3, #1
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c19c:	f002 fbda 	bl	800e954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1a0:	f000 fea0 	bl	800cee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1a4:	f002 fba6 	bl	800e8f4 <vPortEnterCritical>
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ae:	b25b      	sxtb	r3, r3
 800c1b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b4:	d103      	bne.n	800c1be <xQueueReceive+0x162>
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c4:	b25b      	sxtb	r3, r3
 800c1c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ca:	d103      	bne.n	800c1d4 <xQueueReceive+0x178>
 800c1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1d4:	f002 fbbe 	bl	800e954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1d8:	1d3a      	adds	r2, r7, #4
 800c1da:	f107 0310 	add.w	r3, r7, #16
 800c1de:	4611      	mov	r1, r2
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f001 f957 	bl	800d494 <xTaskCheckForTimeOut>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d124      	bne.n	800c236 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ee:	f000 fb55 	bl	800c89c <prvIsQueueEmpty>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d018      	beq.n	800c22a <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	3324      	adds	r3, #36	; 0x24
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	4611      	mov	r1, r2
 800c200:	4618      	mov	r0, r3
 800c202:	f001 f877 	bl	800d2f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c208:	f000 faf6 	bl	800c7f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c20c:	f000 fe78 	bl	800cf00 <xTaskResumeAll>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	f47f af69 	bne.w	800c0ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c218:	4b17      	ldr	r3, [pc, #92]	; (800c278 <xQueueReceive+0x21c>)
 800c21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c21e:	601a      	str	r2, [r3, #0]
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	e75f      	b.n	800c0ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c22c:	f000 fae4 	bl	800c7f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c230:	f000 fe66 	bl	800cf00 <xTaskResumeAll>
 800c234:	e759      	b.n	800c0ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c238:	f000 fade 	bl	800c7f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c23c:	f000 fe60 	bl	800cf00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c242:	f000 fb2b 	bl	800c89c <prvIsQueueEmpty>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f43f af4e 	beq.w	800c0ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800c24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c250:	4618      	mov	r0, r3
 800c252:	f004 fc19 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c256:	4604      	mov	r4, r0
 800c258:	2000      	movs	r0, #0
 800c25a:	f004 fc15 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c25e:	4602      	mov	r2, r0
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2101      	movs	r1, #1
 800c264:	9100      	str	r1, [sp, #0]
 800c266:	4621      	mov	r1, r4
 800c268:	205c      	movs	r0, #92	; 0x5c
 800c26a:	f003 fe49 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800c26e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c270:	4618      	mov	r0, r3
 800c272:	3734      	adds	r7, #52	; 0x34
 800c274:	46bd      	mov	sp, r7
 800c276:	bd90      	pop	{r4, r7, pc}
 800c278:	e000ed04 	.word	0xe000ed04

0800c27c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c27c:	b590      	push	{r4, r7, lr}
 800c27e:	b091      	sub	sp, #68	; 0x44
 800c280:	af02      	add	r7, sp, #8
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c286:	2300      	movs	r3, #0
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c28e:	2300      	movs	r3, #0
 800c290:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	623b      	str	r3, [r7, #32]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00a      	beq.n	800c2cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ba:	f383 8811 	msr	BASEPRI, r3
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	61fb      	str	r3, [r7, #28]
}
 800c2c8:	bf00      	nop
 800c2ca:	e7fe      	b.n	800c2ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2cc:	f001 fa64 	bl	800d798 <xTaskGetSchedulerState>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <xQueueSemaphoreTake+0x60>
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <xQueueSemaphoreTake+0x64>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e000      	b.n	800c2e2 <xQueueSemaphoreTake+0x66>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10a      	bne.n	800c2fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	61bb      	str	r3, [r7, #24]
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2fc:	f002 fafa 	bl	800e8f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c304:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d034      	beq.n	800c376 <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	4618      	mov	r0, r3
 800c310:	f004 fbba 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c314:	4604      	mov	r4, r0
 800c316:	2000      	movs	r0, #0
 800c318:	f004 fbb6 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c31c:	4602      	mov	r2, r0
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2101      	movs	r1, #1
 800c322:	9100      	str	r1, [sp, #0]
 800c324:	4621      	mov	r1, r4
 800c326:	205c      	movs	r0, #92	; 0x5c
 800c328:	f003 fdea 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32e:	1e5a      	subs	r2, r3, #1
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d104      	bne.n	800c346 <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c33c:	f001 fbb4 	bl	800daa8 <pvTaskIncrementMutexHeldCount>
 800c340:	4602      	mov	r2, r0
 800c342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c344:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00f      	beq.n	800c36e <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	3310      	adds	r3, #16
 800c352:	4618      	mov	r0, r3
 800c354:	f001 f820 	bl	800d398 <xTaskRemoveFromEventList>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d007      	beq.n	800c36e <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c35e:	4b64      	ldr	r3, [pc, #400]	; (800c4f0 <xQueueSemaphoreTake+0x274>)
 800c360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c364:	601a      	str	r2, [r3, #0]
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c36e:	f002 faf1 	bl	800e954 <vPortExitCritical>
				return pdPASS;
 800c372:	2301      	movs	r3, #1
 800c374:	e0b7      	b.n	800c4e6 <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d121      	bne.n	800c3c0 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00a      	beq.n	800c398 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	617b      	str	r3, [r7, #20]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c398:	f002 fadc 	bl	800e954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f004 fb72 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	f004 fb6e 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	9100      	str	r1, [sp, #0]
 800c3b4:	4621      	mov	r1, r4
 800c3b6:	205c      	movs	r0, #92	; 0x5c
 800c3b8:	f003 fda2 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	e092      	b.n	800c4e6 <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d106      	bne.n	800c3d4 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f001 f84c 	bl	800d468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3d4:	f002 fabe 	bl	800e954 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3d8:	f000 fd84 	bl	800cee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3dc:	f002 fa8a 	bl	800e8f4 <vPortEnterCritical>
 800c3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3e6:	b25b      	sxtb	r3, r3
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ec:	d103      	bne.n	800c3f6 <xQueueSemaphoreTake+0x17a>
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3fc:	b25b      	sxtb	r3, r3
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c402:	d103      	bne.n	800c40c <xQueueSemaphoreTake+0x190>
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	2200      	movs	r2, #0
 800c408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c40c:	f002 faa2 	bl	800e954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c410:	463a      	mov	r2, r7
 800c412:	f107 030c 	add.w	r3, r7, #12
 800c416:	4611      	mov	r1, r2
 800c418:	4618      	mov	r0, r3
 800c41a:	f001 f83b 	bl	800d494 <xTaskCheckForTimeOut>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d132      	bne.n	800c48a <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c426:	f000 fa39 	bl	800c89c <prvIsQueueEmpty>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d026      	beq.n	800c47e <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d109      	bne.n	800c44c <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 800c438:	f002 fa5c 	bl	800e8f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	4618      	mov	r0, r3
 800c442:	f001 f9c7 	bl	800d7d4 <xTaskPriorityInherit>
 800c446:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c448:	f002 fa84 	bl	800e954 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44e:	3324      	adds	r3, #36	; 0x24
 800c450:	683a      	ldr	r2, [r7, #0]
 800c452:	4611      	mov	r1, r2
 800c454:	4618      	mov	r0, r3
 800c456:	f000 ff4d 	bl	800d2f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c45a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c45c:	f000 f9cc 	bl	800c7f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c460:	f000 fd4e 	bl	800cf00 <xTaskResumeAll>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	f47f af48 	bne.w	800c2fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c46c:	4b20      	ldr	r3, [pc, #128]	; (800c4f0 <xQueueSemaphoreTake+0x274>)
 800c46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	e73e      	b.n	800c2fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c480:	f000 f9ba 	bl	800c7f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c484:	f000 fd3c 	bl	800cf00 <xTaskResumeAll>
 800c488:	e738      	b.n	800c2fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c48c:	f000 f9b4 	bl	800c7f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c490:	f000 fd36 	bl	800cf00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c496:	f000 fa01 	bl	800c89c <prvIsQueueEmpty>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f43f af2d 	beq.w	800c2fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00d      	beq.n	800c4c4 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 800c4a8:	f002 fa24 	bl	800e8f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c4ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ae:	f000 f8fb 	bl	800c6a8 <prvGetDisinheritPriorityAfterTimeout>
 800c4b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f001 fa6a 	bl	800d994 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c4c0:	f002 fa48 	bl	800e954 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f004 fade 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	f004 fada 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2101      	movs	r1, #1
 800c4da:	9100      	str	r1, [sp, #0]
 800c4dc:	4621      	mov	r1, r4
 800c4de:	205c      	movs	r0, #92	; 0x5c
 800c4e0:	f003 fd0e 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800c4e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	373c      	adds	r7, #60	; 0x3c
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd90      	pop	{r4, r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	e000ed04 	.word	0xe000ed04

0800c4f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4f4:	b590      	push	{r4, r7, lr}
 800c4f6:	b08f      	sub	sp, #60	; 0x3c
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10a      	bne.n	800c520 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	623b      	str	r3, [r7, #32]
}
 800c51c:	bf00      	nop
 800c51e:	e7fe      	b.n	800c51e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d103      	bne.n	800c52e <xQueueReceiveFromISR+0x3a>
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <xQueueReceiveFromISR+0x3e>
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <xQueueReceiveFromISR+0x40>
 800c532:	2300      	movs	r3, #0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10a      	bne.n	800c54e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	61fb      	str	r3, [r7, #28]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c54e:	f002 fabb 	bl	800eac8 <vPortValidateInterruptPriority>
	__asm volatile
 800c552:	f3ef 8211 	mrs	r2, BASEPRI
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	61ba      	str	r2, [r7, #24]
 800c568:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c56a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c56c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c576:	2b00      	cmp	r3, #0
 800c578:	d03e      	beq.n	800c5f8 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	4618      	mov	r0, r3
 800c588:	f004 fa7e 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c58c:	4604      	mov	r4, r0
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	4618      	mov	r0, r3
 800c592:	f004 fa79 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c596:	4602      	mov	r2, r0
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4621      	mov	r1, r4
 800c59c:	2062      	movs	r0, #98	; 0x62
 800c59e:	f003 fc39 	bl	800fe14 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5a6:	f000 f901 	bl	800c7ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	1e5a      	subs	r2, r3, #1
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5ba:	d112      	bne.n	800c5e2 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d016      	beq.n	800c5f2 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	3310      	adds	r3, #16
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 fee5 	bl	800d398 <xTaskRemoveFromEventList>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00e      	beq.n	800c5f2 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00b      	beq.n	800c5f2 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	e007      	b.n	800c5f2 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c5e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	b25a      	sxtb	r2, r3
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c5f6:	e010      	b.n	800c61a <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fe:	4618      	mov	r0, r3
 800c600:	f004 fa42 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c604:	4604      	mov	r4, r0
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	4618      	mov	r0, r3
 800c60a:	f004 fa3d 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c60e:	4602      	mov	r2, r0
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4621      	mov	r1, r4
 800c614:	2062      	movs	r0, #98	; 0x62
 800c616:	f003 fbfd 	bl	800fe14 <SEGGER_SYSVIEW_RecordU32x3>
 800c61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f383 8811 	msr	BASEPRI, r3
}
 800c624:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c628:	4618      	mov	r0, r3
 800c62a:	373c      	adds	r7, #60	; 0x3c
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd90      	pop	{r4, r7, pc}

0800c630 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10a      	bne.n	800c654 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	60bb      	str	r3, [r7, #8]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c654:	f002 f94e 	bl	800e8f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c65e:	f002 f979 	bl	800e954 <vPortExitCritical>

	return uxReturn;
 800c662:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c66c:	b480      	push	{r7}
 800c66e:	b087      	sub	sp, #28
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10a      	bne.n	800c694 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	60fb      	str	r3, [r7, #12]
}
 800c690:	bf00      	nop
 800c692:	e7fe      	b.n	800c692 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c698:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c69a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c69c:	4618      	mov	r0, r3
 800c69e:	371c      	adds	r7, #28
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d006      	beq.n	800c6c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	e001      	b.n	800c6ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
	}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10d      	bne.n	800c712 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d14d      	bne.n	800c79a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	4618      	mov	r0, r3
 800c704:	f001 f8d4 	bl	800d8b0 <xTaskPriorityDisinherit>
 800c708:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	609a      	str	r2, [r3, #8]
 800c710:	e043      	b.n	800c79a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d119      	bne.n	800c74c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6858      	ldr	r0, [r3, #4]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c720:	461a      	mov	r2, r3
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	f005 f8d4 	bl	80118d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	441a      	add	r2, r3
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d32b      	bcc.n	800c79a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	605a      	str	r2, [r3, #4]
 800c74a:	e026      	b.n	800c79a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	68d8      	ldr	r0, [r3, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c754:	461a      	mov	r2, r3
 800c756:	68b9      	ldr	r1, [r7, #8]
 800c758:	f005 f8ba 	bl	80118d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68da      	ldr	r2, [r3, #12]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c764:	425b      	negs	r3, r3
 800c766:	441a      	add	r2, r3
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68da      	ldr	r2, [r3, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	d207      	bcs.n	800c788 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	689a      	ldr	r2, [r3, #8]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c780:	425b      	negs	r3, r3
 800c782:	441a      	add	r2, r3
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d105      	bne.n	800c79a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d002      	beq.n	800c79a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	3b01      	subs	r3, #1
 800c798:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	1c5a      	adds	r2, r3, #1
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c7a2:	697b      	ldr	r3, [r7, #20]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d018      	beq.n	800c7f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	68da      	ldr	r2, [r3, #12]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c6:	441a      	add	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68da      	ldr	r2, [r3, #12]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d303      	bcc.n	800c7e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	68d9      	ldr	r1, [r3, #12]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6838      	ldr	r0, [r7, #0]
 800c7ec:	f005 f870 	bl	80118d0 <memcpy>
	}
}
 800c7f0:	bf00      	nop
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c800:	f002 f878 	bl	800e8f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c80a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c80c:	e011      	b.n	800c832 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c812:	2b00      	cmp	r3, #0
 800c814:	d012      	beq.n	800c83c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3324      	adds	r3, #36	; 0x24
 800c81a:	4618      	mov	r0, r3
 800c81c:	f000 fdbc 	bl	800d398 <xTaskRemoveFromEventList>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c826:	f000 fe97 	bl	800d558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c82a:	7bfb      	ldrb	r3, [r7, #15]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c836:	2b00      	cmp	r3, #0
 800c838:	dce9      	bgt.n	800c80e <prvUnlockQueue+0x16>
 800c83a:	e000      	b.n	800c83e <prvUnlockQueue+0x46>
					break;
 800c83c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	22ff      	movs	r2, #255	; 0xff
 800c842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c846:	f002 f885 	bl	800e954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c84a:	f002 f853 	bl	800e8f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c854:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c856:	e011      	b.n	800c87c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d012      	beq.n	800c886 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3310      	adds	r3, #16
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fd97 	bl	800d398 <xTaskRemoveFromEventList>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d001      	beq.n	800c874 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c870:	f000 fe72 	bl	800d558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c874:	7bbb      	ldrb	r3, [r7, #14]
 800c876:	3b01      	subs	r3, #1
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c87c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c880:	2b00      	cmp	r3, #0
 800c882:	dce9      	bgt.n	800c858 <prvUnlockQueue+0x60>
 800c884:	e000      	b.n	800c888 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c886:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	22ff      	movs	r2, #255	; 0xff
 800c88c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c890:	f002 f860 	bl	800e954 <vPortExitCritical>
}
 800c894:	bf00      	nop
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8a4:	f002 f826 	bl	800e8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d102      	bne.n	800c8b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	e001      	b.n	800c8ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8ba:	f002 f84b 	bl	800e954 <vPortExitCritical>

	return xReturn;
 800c8be:	68fb      	ldr	r3, [r7, #12]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8d0:	f002 f810 	bl	800e8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d102      	bne.n	800c8e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	e001      	b.n	800c8ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8ea:	f002 f833 	bl	800e954 <vPortExitCritical>

	return xReturn;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c902:	2300      	movs	r3, #0
 800c904:	60fb      	str	r3, [r7, #12]
 800c906:	e01e      	b.n	800c946 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c908:	4a13      	ldr	r2, [pc, #76]	; (800c958 <vQueueAddToRegistry+0x60>)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d115      	bne.n	800c940 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c914:	4910      	ldr	r1, [pc, #64]	; (800c958 <vQueueAddToRegistry+0x60>)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c91e:	4a0e      	ldr	r2, [pc, #56]	; (800c958 <vQueueAddToRegistry+0x60>)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	4413      	add	r3, r2
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f004 f8ab 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800c932:	4601      	mov	r1, r0
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	461a      	mov	r2, r3
 800c938:	2071      	movs	r0, #113	; 0x71
 800c93a:	f003 fa11 	bl	800fd60 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800c93e:	e006      	b.n	800c94e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3301      	adds	r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2b07      	cmp	r3, #7
 800c94a:	d9dd      	bls.n	800c908 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c94c:	bf00      	nop
 800c94e:	bf00      	nop
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	2000ca80 	.word	0x2000ca80

0800c95c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c96c:	f001 ffc2 	bl	800e8f4 <vPortEnterCritical>
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c976:	b25b      	sxtb	r3, r3
 800c978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c97c:	d103      	bne.n	800c986 <vQueueWaitForMessageRestricted+0x2a>
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c98c:	b25b      	sxtb	r3, r3
 800c98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c992:	d103      	bne.n	800c99c <vQueueWaitForMessageRestricted+0x40>
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c99c:	f001 ffda 	bl	800e954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d106      	bne.n	800c9b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	3324      	adds	r3, #36	; 0x24
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 fcc3 	bl	800d33c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9b6:	6978      	ldr	r0, [r7, #20]
 800c9b8:	f7ff ff1e 	bl	800c7f8 <prvUnlockQueue>
	}
 800c9bc:	bf00      	nop
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08e      	sub	sp, #56	; 0x38
 800c9c8:	af04      	add	r7, sp, #16
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
 800c9d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10a      	bne.n	800c9ee <xTaskCreateStatic+0x2a>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9dc:	f383 8811 	msr	BASEPRI, r3
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	623b      	str	r3, [r7, #32]
}
 800c9ea:	bf00      	nop
 800c9ec:	e7fe      	b.n	800c9ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10a      	bne.n	800ca0a <xTaskCreateStatic+0x46>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	61fb      	str	r3, [r7, #28]
}
 800ca06:	bf00      	nop
 800ca08:	e7fe      	b.n	800ca08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca0a:	23bc      	movs	r3, #188	; 0xbc
 800ca0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	2bbc      	cmp	r3, #188	; 0xbc
 800ca12:	d00a      	beq.n	800ca2a <xTaskCreateStatic+0x66>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	61bb      	str	r3, [r7, #24]
}
 800ca26:	bf00      	nop
 800ca28:	e7fe      	b.n	800ca28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d01e      	beq.n	800ca70 <xTaskCreateStatic+0xac>
 800ca32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d01b      	beq.n	800ca70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	2202      	movs	r2, #2
 800ca46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	9303      	str	r3, [sp, #12]
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	9302      	str	r3, [sp, #8]
 800ca52:	f107 0314 	add.w	r3, r7, #20
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f000 f850 	bl	800cb08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca6a:	f000 f8f3 	bl	800cc54 <prvAddNewTaskToReadyList>
 800ca6e:	e001      	b.n	800ca74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca74:	697b      	ldr	r3, [r7, #20]
	}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3728      	adds	r7, #40	; 0x28
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b08c      	sub	sp, #48	; 0x30
 800ca82:	af04      	add	r7, sp, #16
 800ca84:	60f8      	str	r0, [r7, #12]
 800ca86:	60b9      	str	r1, [r7, #8]
 800ca88:	603b      	str	r3, [r7, #0]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca8e:	88fb      	ldrh	r3, [r7, #6]
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f002 f89e 	bl	800ebd4 <pvPortMalloc>
 800ca98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00e      	beq.n	800cabe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800caa0:	20bc      	movs	r0, #188	; 0xbc
 800caa2:	f002 f897 	bl	800ebd4 <pvPortMalloc>
 800caa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	631a      	str	r2, [r3, #48]	; 0x30
 800cab4:	e005      	b.n	800cac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cab6:	6978      	ldr	r0, [r7, #20]
 800cab8:	f002 f958 	bl	800ed6c <vPortFree>
 800cabc:	e001      	b.n	800cac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d017      	beq.n	800caf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cad0:	88fa      	ldrh	r2, [r7, #6]
 800cad2:	2300      	movs	r3, #0
 800cad4:	9303      	str	r3, [sp, #12]
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	9302      	str	r3, [sp, #8]
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	68b9      	ldr	r1, [r7, #8]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f000 f80e 	bl	800cb08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caec:	69f8      	ldr	r0, [r7, #28]
 800caee:	f000 f8b1 	bl	800cc54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800caf2:	2301      	movs	r3, #1
 800caf4:	61bb      	str	r3, [r7, #24]
 800caf6:	e002      	b.n	800cafe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800caf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cafc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cafe:	69bb      	ldr	r3, [r7, #24]
	}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	461a      	mov	r2, r3
 800cb20:	21a5      	movs	r1, #165	; 0xa5
 800cb22:	f004 fee3 	bl	80118ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb30:	3b01      	subs	r3, #1
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	f023 0307 	bic.w	r3, r3, #7
 800cb3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	617b      	str	r3, [r7, #20]
}
 800cb5c:	bf00      	nop
 800cb5e:	e7fe      	b.n	800cb5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d01f      	beq.n	800cba6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb66:	2300      	movs	r3, #0
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	e012      	b.n	800cb92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	4413      	add	r3, r2
 800cb72:	7819      	ldrb	r1, [r3, #0]
 800cb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	4413      	add	r3, r2
 800cb7a:	3334      	adds	r3, #52	; 0x34
 800cb7c:	460a      	mov	r2, r1
 800cb7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	4413      	add	r3, r2
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d006      	beq.n	800cb9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	61fb      	str	r3, [r7, #28]
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	2b0f      	cmp	r3, #15
 800cb96:	d9e9      	bls.n	800cb6c <prvInitialiseNewTask+0x64>
 800cb98:	e000      	b.n	800cb9c <prvInitialiseNewTask+0x94>
			{
				break;
 800cb9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cba4:	e003      	b.n	800cbae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb0:	2b37      	cmp	r3, #55	; 0x37
 800cbb2:	d901      	bls.n	800cbb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbb4:	2337      	movs	r3, #55	; 0x37
 800cbb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	3304      	adds	r3, #4
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe fdfa 	bl	800b7c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd6:	3318      	adds	r3, #24
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe fdf5 	bl	800b7c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	3354      	adds	r3, #84	; 0x54
 800cc08:	2260      	movs	r2, #96	; 0x60
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f004 fe6d 	bl	80118ec <memset>
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	4a0c      	ldr	r2, [pc, #48]	; (800cc48 <prvInitialiseNewTask+0x140>)
 800cc16:	659a      	str	r2, [r3, #88]	; 0x58
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	4a0c      	ldr	r2, [pc, #48]	; (800cc4c <prvInitialiseNewTask+0x144>)
 800cc1c:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	4a0b      	ldr	r2, [pc, #44]	; (800cc50 <prvInitialiseNewTask+0x148>)
 800cc22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	69b8      	ldr	r0, [r7, #24]
 800cc2a:	f001 fd35 	bl	800e698 <pxPortInitialiseStack>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc40:	bf00      	nop
 800cc42:	3720      	adds	r7, #32
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	08011df4 	.word	0x08011df4
 800cc4c:	08011e14 	.word	0x08011e14
 800cc50:	08011dd4 	.word	0x08011dd4

0800cc54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc54:	b5b0      	push	{r4, r5, r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc5c:	f001 fe4a 	bl	800e8f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc60:	4b3c      	ldr	r3, [pc, #240]	; (800cd54 <prvAddNewTaskToReadyList+0x100>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	3301      	adds	r3, #1
 800cc66:	4a3b      	ldr	r2, [pc, #236]	; (800cd54 <prvAddNewTaskToReadyList+0x100>)
 800cc68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc6a:	4b3b      	ldr	r3, [pc, #236]	; (800cd58 <prvAddNewTaskToReadyList+0x104>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d109      	bne.n	800cc86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc72:	4a39      	ldr	r2, [pc, #228]	; (800cd58 <prvAddNewTaskToReadyList+0x104>)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc78:	4b36      	ldr	r3, [pc, #216]	; (800cd54 <prvAddNewTaskToReadyList+0x100>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d110      	bne.n	800cca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc80:	f000 fc90 	bl	800d5a4 <prvInitialiseTaskLists>
 800cc84:	e00d      	b.n	800cca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc86:	4b35      	ldr	r3, [pc, #212]	; (800cd5c <prvAddNewTaskToReadyList+0x108>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d109      	bne.n	800cca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc8e:	4b32      	ldr	r3, [pc, #200]	; (800cd58 <prvAddNewTaskToReadyList+0x104>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d802      	bhi.n	800cca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc9c:	4a2e      	ldr	r2, [pc, #184]	; (800cd58 <prvAddNewTaskToReadyList+0x104>)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cca2:	4b2f      	ldr	r3, [pc, #188]	; (800cd60 <prvAddNewTaskToReadyList+0x10c>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	3301      	adds	r3, #1
 800cca8:	4a2d      	ldr	r2, [pc, #180]	; (800cd60 <prvAddNewTaskToReadyList+0x10c>)
 800ccaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccac:	4b2c      	ldr	r3, [pc, #176]	; (800cd60 <prvAddNewTaskToReadyList+0x10c>)
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d016      	beq.n	800cce8 <prvAddNewTaskToReadyList+0x94>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f003 fdbd 	bl	801083c <SEGGER_SYSVIEW_OnTaskCreate>
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd2:	461d      	mov	r5, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	461c      	mov	r4, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccde:	1ae3      	subs	r3, r4, r3
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	462b      	mov	r3, r5
 800cce4:	f002 fa26 	bl	800f134 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f003 fe2a 	bl	8010944 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf4:	4b1b      	ldr	r3, [pc, #108]	; (800cd64 <prvAddNewTaskToReadyList+0x110>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d903      	bls.n	800cd04 <prvAddNewTaskToReadyList+0xb0>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd00:	4a18      	ldr	r2, [pc, #96]	; (800cd64 <prvAddNewTaskToReadyList+0x110>)
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd08:	4613      	mov	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	4a15      	ldr	r2, [pc, #84]	; (800cd68 <prvAddNewTaskToReadyList+0x114>)
 800cd12:	441a      	add	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3304      	adds	r3, #4
 800cd18:	4619      	mov	r1, r3
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	f7fe fd61 	bl	800b7e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd20:	f001 fe18 	bl	800e954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd24:	4b0d      	ldr	r3, [pc, #52]	; (800cd5c <prvAddNewTaskToReadyList+0x108>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00e      	beq.n	800cd4a <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd2c:	4b0a      	ldr	r3, [pc, #40]	; (800cd58 <prvAddNewTaskToReadyList+0x104>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d207      	bcs.n	800cd4a <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd3a:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <prvAddNewTaskToReadyList+0x118>)
 800cd3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd4a:	bf00      	nop
 800cd4c:	3708      	adds	r7, #8
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bdb0      	pop	{r4, r5, r7, pc}
 800cd52:	bf00      	nop
 800cd54:	2000cf94 	.word	0x2000cf94
 800cd58:	2000cac0 	.word	0x2000cac0
 800cd5c:	2000cfa0 	.word	0x2000cfa0
 800cd60:	2000cfb0 	.word	0x2000cfb0
 800cd64:	2000cf9c 	.word	0x2000cf9c
 800cd68:	2000cac4 	.word	0x2000cac4
 800cd6c:	e000ed04 	.word	0xe000ed04

0800cd70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01b      	beq.n	800cdba <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd82:	4b15      	ldr	r3, [pc, #84]	; (800cdd8 <vTaskDelay+0x68>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00a      	beq.n	800cda0 <vTaskDelay+0x30>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	60bb      	str	r3, [r7, #8]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cda0:	f000 f8a0 	bl	800cee4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800cda4:	6879      	ldr	r1, [r7, #4]
 800cda6:	2023      	movs	r0, #35	; 0x23
 800cda8:	f002 ff9e 	bl	800fce8 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cdac:	2100      	movs	r1, #0
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f001 f8be 	bl	800df30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cdb4:	f000 f8a4 	bl	800cf00 <xTaskResumeAll>
 800cdb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d107      	bne.n	800cdd0 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800cdc0:	4b06      	ldr	r3, [pc, #24]	; (800cddc <vTaskDelay+0x6c>)
 800cdc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cdd0:	bf00      	nop
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	2000cfbc 	.word	0x2000cfbc
 800cddc:	e000ed04 	.word	0xe000ed04

0800cde0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b08a      	sub	sp, #40	; 0x28
 800cde4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cdea:	2300      	movs	r3, #0
 800cdec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cdee:	463a      	mov	r2, r7
 800cdf0:	1d39      	adds	r1, r7, #4
 800cdf2:	f107 0308 	add.w	r3, r7, #8
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fe fc92 	bl	800b720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdfc:	6839      	ldr	r1, [r7, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	68ba      	ldr	r2, [r7, #8]
 800ce02:	9202      	str	r2, [sp, #8]
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	2300      	movs	r3, #0
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	460a      	mov	r2, r1
 800ce0e:	492d      	ldr	r1, [pc, #180]	; (800cec4 <vTaskStartScheduler+0xe4>)
 800ce10:	482d      	ldr	r0, [pc, #180]	; (800cec8 <vTaskStartScheduler+0xe8>)
 800ce12:	f7ff fdd7 	bl	800c9c4 <xTaskCreateStatic>
 800ce16:	4603      	mov	r3, r0
 800ce18:	4a2c      	ldr	r2, [pc, #176]	; (800cecc <vTaskStartScheduler+0xec>)
 800ce1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce1c:	4b2b      	ldr	r3, [pc, #172]	; (800cecc <vTaskStartScheduler+0xec>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d002      	beq.n	800ce2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ce24:	2301      	movs	r3, #1
 800ce26:	617b      	str	r3, [r7, #20]
 800ce28:	e001      	b.n	800ce2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d102      	bne.n	800ce3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce34:	f001 f8e2 	bl	800dffc <xTimerCreateTimerTask>
 800ce38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d12e      	bne.n	800ce9e <vTaskStartScheduler+0xbe>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	613b      	str	r3, [r7, #16]
}
 800ce52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce54:	4b1e      	ldr	r3, [pc, #120]	; (800ced0 <vTaskStartScheduler+0xf0>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3354      	adds	r3, #84	; 0x54
 800ce5a:	4a1e      	ldr	r2, [pc, #120]	; (800ced4 <vTaskStartScheduler+0xf4>)
 800ce5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce5e:	4b1e      	ldr	r3, [pc, #120]	; (800ced8 <vTaskStartScheduler+0xf8>)
 800ce60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce66:	4b1d      	ldr	r3, [pc, #116]	; (800cedc <vTaskStartScheduler+0xfc>)
 800ce68:	2201      	movs	r2, #1
 800ce6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce6c:	4b1c      	ldr	r3, [pc, #112]	; (800cee0 <vTaskStartScheduler+0x100>)
 800ce6e:	2200      	movs	r2, #0
 800ce70:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800ce72:	4b17      	ldr	r3, [pc, #92]	; (800ced0 <vTaskStartScheduler+0xf0>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3334      	adds	r3, #52	; 0x34
 800ce78:	2205      	movs	r2, #5
 800ce7a:	4912      	ldr	r1, [pc, #72]	; (800cec4 <vTaskStartScheduler+0xe4>)
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f004 fd17 	bl	80118b0 <memcmp>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d005      	beq.n	800ce94 <vTaskStartScheduler+0xb4>
 800ce88:	4b11      	ldr	r3, [pc, #68]	; (800ced0 <vTaskStartScheduler+0xf0>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f003 fd17 	bl	80108c0 <SEGGER_SYSVIEW_OnTaskStartExec>
 800ce92:	e001      	b.n	800ce98 <vTaskStartScheduler+0xb8>
 800ce94:	f003 fcb6 	bl	8010804 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce98:	f001 fc8a 	bl	800e7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce9c:	e00e      	b.n	800cebc <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cea4:	d10a      	bne.n	800cebc <vTaskStartScheduler+0xdc>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	60fb      	str	r3, [r7, #12]
}
 800ceb8:	bf00      	nop
 800ceba:	e7fe      	b.n	800ceba <vTaskStartScheduler+0xda>
}
 800cebc:	bf00      	nop
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	08011bfc 	.word	0x08011bfc
 800cec8:	0800d571 	.word	0x0800d571
 800cecc:	2000cfb8 	.word	0x2000cfb8
 800ced0:	2000cac0 	.word	0x2000cac0
 800ced4:	20002694 	.word	0x20002694
 800ced8:	2000cfb4 	.word	0x2000cfb4
 800cedc:	2000cfa0 	.word	0x2000cfa0
 800cee0:	2000cf98 	.word	0x2000cf98

0800cee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cee4:	b480      	push	{r7}
 800cee6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cee8:	4b04      	ldr	r3, [pc, #16]	; (800cefc <vTaskSuspendAll+0x18>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3301      	adds	r3, #1
 800ceee:	4a03      	ldr	r2, [pc, #12]	; (800cefc <vTaskSuspendAll+0x18>)
 800cef0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cef2:	bf00      	nop
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	2000cfbc 	.word	0x2000cfbc

0800cf00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf06:	2300      	movs	r3, #0
 800cf08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf0e:	4b44      	ldr	r3, [pc, #272]	; (800d020 <xTaskResumeAll+0x120>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10a      	bne.n	800cf2c <xTaskResumeAll+0x2c>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	603b      	str	r3, [r7, #0]
}
 800cf28:	bf00      	nop
 800cf2a:	e7fe      	b.n	800cf2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf2c:	f001 fce2 	bl	800e8f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf30:	4b3b      	ldr	r3, [pc, #236]	; (800d020 <xTaskResumeAll+0x120>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	4a3a      	ldr	r2, [pc, #232]	; (800d020 <xTaskResumeAll+0x120>)
 800cf38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf3a:	4b39      	ldr	r3, [pc, #228]	; (800d020 <xTaskResumeAll+0x120>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d166      	bne.n	800d010 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf42:	4b38      	ldr	r3, [pc, #224]	; (800d024 <xTaskResumeAll+0x124>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d062      	beq.n	800d010 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf4a:	e033      	b.n	800cfb4 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf4c:	4b36      	ldr	r3, [pc, #216]	; (800d028 <xTaskResumeAll+0x128>)
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3318      	adds	r3, #24
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7fe fc9f 	bl	800b89c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3304      	adds	r3, #4
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe fc9a 	bl	800b89c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f003 fcea 	bl	8010944 <SEGGER_SYSVIEW_OnTaskStartReady>
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf74:	4b2d      	ldr	r3, [pc, #180]	; (800d02c <xTaskResumeAll+0x12c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d903      	bls.n	800cf84 <xTaskResumeAll+0x84>
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf80:	4a2a      	ldr	r2, [pc, #168]	; (800d02c <xTaskResumeAll+0x12c>)
 800cf82:	6013      	str	r3, [r2, #0]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf88:	4613      	mov	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4a27      	ldr	r2, [pc, #156]	; (800d030 <xTaskResumeAll+0x130>)
 800cf92:	441a      	add	r2, r3
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	3304      	adds	r3, #4
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	f7fe fc21 	bl	800b7e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa4:	4b23      	ldr	r3, [pc, #140]	; (800d034 <xTaskResumeAll+0x134>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d302      	bcc.n	800cfb4 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800cfae:	4b22      	ldr	r3, [pc, #136]	; (800d038 <xTaskResumeAll+0x138>)
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfb4:	4b1c      	ldr	r3, [pc, #112]	; (800d028 <xTaskResumeAll+0x128>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1c7      	bne.n	800cf4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cfc2:	f000 fbc9 	bl	800d758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cfc6:	4b1d      	ldr	r3, [pc, #116]	; (800d03c <xTaskResumeAll+0x13c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d010      	beq.n	800cff4 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cfd2:	f000 f859 	bl	800d088 <xTaskIncrementTick>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 800cfdc:	4b16      	ldr	r3, [pc, #88]	; (800d038 <xTaskResumeAll+0x138>)
 800cfde:	2201      	movs	r2, #1
 800cfe0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1f1      	bne.n	800cfd2 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 800cfee:	4b13      	ldr	r3, [pc, #76]	; (800d03c <xTaskResumeAll+0x13c>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cff4:	4b10      	ldr	r3, [pc, #64]	; (800d038 <xTaskResumeAll+0x138>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d009      	beq.n	800d010 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d000:	4b0f      	ldr	r3, [pc, #60]	; (800d040 <xTaskResumeAll+0x140>)
 800d002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d006:	601a      	str	r2, [r3, #0]
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d010:	f001 fca0 	bl	800e954 <vPortExitCritical>

	return xAlreadyYielded;
 800d014:	68bb      	ldr	r3, [r7, #8]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	2000cfbc 	.word	0x2000cfbc
 800d024:	2000cf94 	.word	0x2000cf94
 800d028:	2000cf54 	.word	0x2000cf54
 800d02c:	2000cf9c 	.word	0x2000cf9c
 800d030:	2000cac4 	.word	0x2000cac4
 800d034:	2000cac0 	.word	0x2000cac0
 800d038:	2000cfa8 	.word	0x2000cfa8
 800d03c:	2000cfa4 	.word	0x2000cfa4
 800d040:	e000ed04 	.word	0xe000ed04

0800d044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d04a:	4b05      	ldr	r3, [pc, #20]	; (800d060 <xTaskGetTickCount+0x1c>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d050:	687b      	ldr	r3, [r7, #4]
}
 800d052:	4618      	mov	r0, r3
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	2000cf98 	.word	0x2000cf98

0800d064 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d06a:	f001 fd2d 	bl	800eac8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d06e:	2300      	movs	r3, #0
 800d070:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d072:	4b04      	ldr	r3, [pc, #16]	; (800d084 <xTaskGetTickCountFromISR+0x20>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d078:	683b      	ldr	r3, [r7, #0]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	2000cf98 	.word	0x2000cf98

0800d088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d08e:	2300      	movs	r3, #0
 800d090:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d092:	4b51      	ldr	r3, [pc, #324]	; (800d1d8 <xTaskIncrementTick+0x150>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	f040 8093 	bne.w	800d1c2 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d09c:	4b4f      	ldr	r3, [pc, #316]	; (800d1dc <xTaskIncrementTick+0x154>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0a4:	4a4d      	ldr	r2, [pc, #308]	; (800d1dc <xTaskIncrementTick+0x154>)
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d120      	bne.n	800d0f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0b0:	4b4b      	ldr	r3, [pc, #300]	; (800d1e0 <xTaskIncrementTick+0x158>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00a      	beq.n	800d0d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	603b      	str	r3, [r7, #0]
}
 800d0cc:	bf00      	nop
 800d0ce:	e7fe      	b.n	800d0ce <xTaskIncrementTick+0x46>
 800d0d0:	4b43      	ldr	r3, [pc, #268]	; (800d1e0 <xTaskIncrementTick+0x158>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	4b43      	ldr	r3, [pc, #268]	; (800d1e4 <xTaskIncrementTick+0x15c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a41      	ldr	r2, [pc, #260]	; (800d1e0 <xTaskIncrementTick+0x158>)
 800d0dc:	6013      	str	r3, [r2, #0]
 800d0de:	4a41      	ldr	r2, [pc, #260]	; (800d1e4 <xTaskIncrementTick+0x15c>)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	4b40      	ldr	r3, [pc, #256]	; (800d1e8 <xTaskIncrementTick+0x160>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	4a3f      	ldr	r2, [pc, #252]	; (800d1e8 <xTaskIncrementTick+0x160>)
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	f000 fb33 	bl	800d758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d0f2:	4b3e      	ldr	r3, [pc, #248]	; (800d1ec <xTaskIncrementTick+0x164>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	693a      	ldr	r2, [r7, #16]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d34d      	bcc.n	800d198 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0fc:	4b38      	ldr	r3, [pc, #224]	; (800d1e0 <xTaskIncrementTick+0x158>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d104      	bne.n	800d110 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d106:	4b39      	ldr	r3, [pc, #228]	; (800d1ec <xTaskIncrementTick+0x164>)
 800d108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d10c:	601a      	str	r2, [r3, #0]
					break;
 800d10e:	e043      	b.n	800d198 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d110:	4b33      	ldr	r3, [pc, #204]	; (800d1e0 <xTaskIncrementTick+0x158>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	429a      	cmp	r2, r3
 800d126:	d203      	bcs.n	800d130 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d128:	4a30      	ldr	r2, [pc, #192]	; (800d1ec <xTaskIncrementTick+0x164>)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d12e:	e033      	b.n	800d198 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	3304      	adds	r3, #4
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe fbb1 	bl	800b89c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d004      	beq.n	800d14c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	3318      	adds	r3, #24
 800d146:	4618      	mov	r0, r3
 800d148:	f7fe fba8 	bl	800b89c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	4618      	mov	r0, r3
 800d150:	f003 fbf8 	bl	8010944 <SEGGER_SYSVIEW_OnTaskStartReady>
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d158:	4b25      	ldr	r3, [pc, #148]	; (800d1f0 <xTaskIncrementTick+0x168>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d903      	bls.n	800d168 <xTaskIncrementTick+0xe0>
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d164:	4a22      	ldr	r2, [pc, #136]	; (800d1f0 <xTaskIncrementTick+0x168>)
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d16c:	4613      	mov	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4a1f      	ldr	r2, [pc, #124]	; (800d1f4 <xTaskIncrementTick+0x16c>)
 800d176:	441a      	add	r2, r3
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	3304      	adds	r3, #4
 800d17c:	4619      	mov	r1, r3
 800d17e:	4610      	mov	r0, r2
 800d180:	f7fe fb2f 	bl	800b7e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d188:	4b1b      	ldr	r3, [pc, #108]	; (800d1f8 <xTaskIncrementTick+0x170>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18e:	429a      	cmp	r2, r3
 800d190:	d3b4      	bcc.n	800d0fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d192:	2301      	movs	r3, #1
 800d194:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d196:	e7b1      	b.n	800d0fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d198:	4b17      	ldr	r3, [pc, #92]	; (800d1f8 <xTaskIncrementTick+0x170>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d19e:	4915      	ldr	r1, [pc, #84]	; (800d1f4 <xTaskIncrementTick+0x16c>)
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	440b      	add	r3, r1
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d901      	bls.n	800d1b4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d1b4:	4b11      	ldr	r3, [pc, #68]	; (800d1fc <xTaskIncrementTick+0x174>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d007      	beq.n	800d1cc <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	617b      	str	r3, [r7, #20]
 800d1c0:	e004      	b.n	800d1cc <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d1c2:	4b0f      	ldr	r3, [pc, #60]	; (800d200 <xTaskIncrementTick+0x178>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	4a0d      	ldr	r2, [pc, #52]	; (800d200 <xTaskIncrementTick+0x178>)
 800d1ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d1cc:	697b      	ldr	r3, [r7, #20]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	2000cfbc 	.word	0x2000cfbc
 800d1dc:	2000cf98 	.word	0x2000cf98
 800d1e0:	2000cf4c 	.word	0x2000cf4c
 800d1e4:	2000cf50 	.word	0x2000cf50
 800d1e8:	2000cfac 	.word	0x2000cfac
 800d1ec:	2000cfb4 	.word	0x2000cfb4
 800d1f0:	2000cf9c 	.word	0x2000cf9c
 800d1f4:	2000cac4 	.word	0x2000cac4
 800d1f8:	2000cac0 	.word	0x2000cac0
 800d1fc:	2000cfa8 	.word	0x2000cfa8
 800d200:	2000cfa4 	.word	0x2000cfa4

0800d204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d20a:	4b33      	ldr	r3, [pc, #204]	; (800d2d8 <vTaskSwitchContext+0xd4>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d003      	beq.n	800d21a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d212:	4b32      	ldr	r3, [pc, #200]	; (800d2dc <vTaskSwitchContext+0xd8>)
 800d214:	2201      	movs	r2, #1
 800d216:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d218:	e059      	b.n	800d2ce <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800d21a:	4b30      	ldr	r3, [pc, #192]	; (800d2dc <vTaskSwitchContext+0xd8>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d220:	4b2f      	ldr	r3, [pc, #188]	; (800d2e0 <vTaskSwitchContext+0xdc>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	e010      	b.n	800d24a <vTaskSwitchContext+0x46>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10a      	bne.n	800d244 <vTaskSwitchContext+0x40>
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	607b      	str	r3, [r7, #4]
}
 800d240:	bf00      	nop
 800d242:	e7fe      	b.n	800d242 <vTaskSwitchContext+0x3e>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3b01      	subs	r3, #1
 800d248:	60fb      	str	r3, [r7, #12]
 800d24a:	4926      	ldr	r1, [pc, #152]	; (800d2e4 <vTaskSwitchContext+0xe0>)
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	4613      	mov	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	440b      	add	r3, r1
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d0e4      	beq.n	800d228 <vTaskSwitchContext+0x24>
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	4613      	mov	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4a1e      	ldr	r2, [pc, #120]	; (800d2e4 <vTaskSwitchContext+0xe0>)
 800d26a:	4413      	add	r3, r2
 800d26c:	60bb      	str	r3, [r7, #8]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	605a      	str	r2, [r3, #4]
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	3308      	adds	r3, #8
 800d280:	429a      	cmp	r2, r3
 800d282:	d104      	bne.n	800d28e <vTaskSwitchContext+0x8a>
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	605a      	str	r2, [r3, #4]
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	4a14      	ldr	r2, [pc, #80]	; (800d2e8 <vTaskSwitchContext+0xe4>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	4a11      	ldr	r2, [pc, #68]	; (800d2e0 <vTaskSwitchContext+0xdc>)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800d29e:	4b12      	ldr	r3, [pc, #72]	; (800d2e8 <vTaskSwitchContext+0xe4>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3334      	adds	r3, #52	; 0x34
 800d2a4:	2205      	movs	r2, #5
 800d2a6:	4911      	ldr	r1, [pc, #68]	; (800d2ec <vTaskSwitchContext+0xe8>)
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f004 fb01 	bl	80118b0 <memcmp>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <vTaskSwitchContext+0xbc>
 800d2b4:	4b0c      	ldr	r3, [pc, #48]	; (800d2e8 <vTaskSwitchContext+0xe4>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f003 fb01 	bl	80108c0 <SEGGER_SYSVIEW_OnTaskStartExec>
 800d2be:	e001      	b.n	800d2c4 <vTaskSwitchContext+0xc0>
 800d2c0:	f003 faa0 	bl	8010804 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2c4:	4b08      	ldr	r3, [pc, #32]	; (800d2e8 <vTaskSwitchContext+0xe4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3354      	adds	r3, #84	; 0x54
 800d2ca:	4a09      	ldr	r2, [pc, #36]	; (800d2f0 <vTaskSwitchContext+0xec>)
 800d2cc:	6013      	str	r3, [r2, #0]
}
 800d2ce:	bf00      	nop
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	2000cfbc 	.word	0x2000cfbc
 800d2dc:	2000cfa8 	.word	0x2000cfa8
 800d2e0:	2000cf9c 	.word	0x2000cf9c
 800d2e4:	2000cac4 	.word	0x2000cac4
 800d2e8:	2000cac0 	.word	0x2000cac0
 800d2ec:	08011bfc 	.word	0x08011bfc
 800d2f0:	20002694 	.word	0x20002694

0800d2f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	60fb      	str	r3, [r7, #12]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d31a:	4b07      	ldr	r3, [pc, #28]	; (800d338 <vTaskPlaceOnEventList+0x44>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	3318      	adds	r3, #24
 800d320:	4619      	mov	r1, r3
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7fe fa81 	bl	800b82a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d328:	2101      	movs	r1, #1
 800d32a:	6838      	ldr	r0, [r7, #0]
 800d32c:	f000 fe00 	bl	800df30 <prvAddCurrentTaskToDelayedList>
}
 800d330:	bf00      	nop
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	2000cac0 	.word	0x2000cac0

0800d33c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10a      	bne.n	800d364 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	617b      	str	r3, [r7, #20]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d364:	4b0b      	ldr	r3, [pc, #44]	; (800d394 <vTaskPlaceOnEventListRestricted+0x58>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3318      	adds	r3, #24
 800d36a:	4619      	mov	r1, r3
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f7fe fa38 	bl	800b7e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d002      	beq.n	800d37e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d37c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800d37e:	2024      	movs	r0, #36	; 0x24
 800d380:	f002 fc94 	bl	800fcac <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	68b8      	ldr	r0, [r7, #8]
 800d388:	f000 fdd2 	bl	800df30 <prvAddCurrentTaskToDelayedList>
	}
 800d38c:	bf00      	nop
 800d38e:	3718      	adds	r7, #24
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	2000cac0 	.word	0x2000cac0

0800d398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10a      	bne.n	800d3c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	60fb      	str	r3, [r7, #12]
}
 800d3c0:	bf00      	nop
 800d3c2:	e7fe      	b.n	800d3c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	3318      	adds	r3, #24
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe fa67 	bl	800b89c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3ce:	4b20      	ldr	r3, [pc, #128]	; (800d450 <xTaskRemoveFromEventList+0xb8>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d121      	bne.n	800d41a <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fa5e 	bl	800b89c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f003 faae 	bl	8010944 <SEGGER_SYSVIEW_OnTaskStartReady>
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ec:	4b19      	ldr	r3, [pc, #100]	; (800d454 <xTaskRemoveFromEventList+0xbc>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d903      	bls.n	800d3fc <xTaskRemoveFromEventList+0x64>
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f8:	4a16      	ldr	r2, [pc, #88]	; (800d454 <xTaskRemoveFromEventList+0xbc>)
 800d3fa:	6013      	str	r3, [r2, #0]
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d400:	4613      	mov	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4a13      	ldr	r2, [pc, #76]	; (800d458 <xTaskRemoveFromEventList+0xc0>)
 800d40a:	441a      	add	r2, r3
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	3304      	adds	r3, #4
 800d410:	4619      	mov	r1, r3
 800d412:	4610      	mov	r0, r2
 800d414:	f7fe f9e5 	bl	800b7e2 <vListInsertEnd>
 800d418:	e005      	b.n	800d426 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	3318      	adds	r3, #24
 800d41e:	4619      	mov	r1, r3
 800d420:	480e      	ldr	r0, [pc, #56]	; (800d45c <xTaskRemoveFromEventList+0xc4>)
 800d422:	f7fe f9de 	bl	800b7e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42a:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <xTaskRemoveFromEventList+0xc8>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d430:	429a      	cmp	r2, r3
 800d432:	d905      	bls.n	800d440 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d434:	2301      	movs	r3, #1
 800d436:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d438:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <xTaskRemoveFromEventList+0xcc>)
 800d43a:	2201      	movs	r2, #1
 800d43c:	601a      	str	r2, [r3, #0]
 800d43e:	e001      	b.n	800d444 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 800d440:	2300      	movs	r3, #0
 800d442:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d444:	697b      	ldr	r3, [r7, #20]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	2000cfbc 	.word	0x2000cfbc
 800d454:	2000cf9c 	.word	0x2000cf9c
 800d458:	2000cac4 	.word	0x2000cac4
 800d45c:	2000cf54 	.word	0x2000cf54
 800d460:	2000cac0 	.word	0x2000cac0
 800d464:	2000cfa8 	.word	0x2000cfa8

0800d468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d470:	4b06      	ldr	r3, [pc, #24]	; (800d48c <vTaskInternalSetTimeOutState+0x24>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d478:	4b05      	ldr	r3, [pc, #20]	; (800d490 <vTaskInternalSetTimeOutState+0x28>)
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	605a      	str	r2, [r3, #4]
}
 800d480:	bf00      	nop
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	2000cfac 	.word	0x2000cfac
 800d490:	2000cf98 	.word	0x2000cf98

0800d494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d10a      	bne.n	800d4ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	613b      	str	r3, [r7, #16]
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	60fb      	str	r3, [r7, #12]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d4d6:	f001 fa0d 	bl	800e8f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4da:	4b1d      	ldr	r3, [pc, #116]	; (800d550 <xTaskCheckForTimeOut+0xbc>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	69ba      	ldr	r2, [r7, #24]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4f2:	d102      	bne.n	800d4fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	61fb      	str	r3, [r7, #28]
 800d4f8:	e023      	b.n	800d542 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	4b15      	ldr	r3, [pc, #84]	; (800d554 <xTaskCheckForTimeOut+0xc0>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	429a      	cmp	r2, r3
 800d504:	d007      	beq.n	800d516 <xTaskCheckForTimeOut+0x82>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	69ba      	ldr	r2, [r7, #24]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d302      	bcc.n	800d516 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d510:	2301      	movs	r3, #1
 800d512:	61fb      	str	r3, [r7, #28]
 800d514:	e015      	b.n	800d542 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d20b      	bcs.n	800d538 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	1ad2      	subs	r2, r2, r3
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff ff9b 	bl	800d468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d532:	2300      	movs	r3, #0
 800d534:	61fb      	str	r3, [r7, #28]
 800d536:	e004      	b.n	800d542 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d53e:	2301      	movs	r3, #1
 800d540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d542:	f001 fa07 	bl	800e954 <vPortExitCritical>

	return xReturn;
 800d546:	69fb      	ldr	r3, [r7, #28]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3720      	adds	r7, #32
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	2000cf98 	.word	0x2000cf98
 800d554:	2000cfac 	.word	0x2000cfac

0800d558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d558:	b480      	push	{r7}
 800d55a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d55c:	4b03      	ldr	r3, [pc, #12]	; (800d56c <vTaskMissedYield+0x14>)
 800d55e:	2201      	movs	r2, #1
 800d560:	601a      	str	r2, [r3, #0]
}
 800d562:	bf00      	nop
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	2000cfa8 	.word	0x2000cfa8

0800d570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d578:	f000 f854 	bl	800d624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d57c:	4b07      	ldr	r3, [pc, #28]	; (800d59c <prvIdleTask+0x2c>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d907      	bls.n	800d594 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d584:	4b06      	ldr	r3, [pc, #24]	; (800d5a0 <prvIdleTask+0x30>)
 800d586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d594:	f7f2 ffbe 	bl	8000514 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d598:	e7ee      	b.n	800d578 <prvIdleTask+0x8>
 800d59a:	bf00      	nop
 800d59c:	2000cac4 	.word	0x2000cac4
 800d5a0:	e000ed04 	.word	0xe000ed04

0800d5a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	607b      	str	r3, [r7, #4]
 800d5ae:	e00c      	b.n	800d5ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4a12      	ldr	r2, [pc, #72]	; (800d604 <prvInitialiseTaskLists+0x60>)
 800d5bc:	4413      	add	r3, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fe f8e2 	bl	800b788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	607b      	str	r3, [r7, #4]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b37      	cmp	r3, #55	; 0x37
 800d5ce:	d9ef      	bls.n	800d5b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5d0:	480d      	ldr	r0, [pc, #52]	; (800d608 <prvInitialiseTaskLists+0x64>)
 800d5d2:	f7fe f8d9 	bl	800b788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5d6:	480d      	ldr	r0, [pc, #52]	; (800d60c <prvInitialiseTaskLists+0x68>)
 800d5d8:	f7fe f8d6 	bl	800b788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5dc:	480c      	ldr	r0, [pc, #48]	; (800d610 <prvInitialiseTaskLists+0x6c>)
 800d5de:	f7fe f8d3 	bl	800b788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5e2:	480c      	ldr	r0, [pc, #48]	; (800d614 <prvInitialiseTaskLists+0x70>)
 800d5e4:	f7fe f8d0 	bl	800b788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5e8:	480b      	ldr	r0, [pc, #44]	; (800d618 <prvInitialiseTaskLists+0x74>)
 800d5ea:	f7fe f8cd 	bl	800b788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5ee:	4b0b      	ldr	r3, [pc, #44]	; (800d61c <prvInitialiseTaskLists+0x78>)
 800d5f0:	4a05      	ldr	r2, [pc, #20]	; (800d608 <prvInitialiseTaskLists+0x64>)
 800d5f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5f4:	4b0a      	ldr	r3, [pc, #40]	; (800d620 <prvInitialiseTaskLists+0x7c>)
 800d5f6:	4a05      	ldr	r2, [pc, #20]	; (800d60c <prvInitialiseTaskLists+0x68>)
 800d5f8:	601a      	str	r2, [r3, #0]
}
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	2000cac4 	.word	0x2000cac4
 800d608:	2000cf24 	.word	0x2000cf24
 800d60c:	2000cf38 	.word	0x2000cf38
 800d610:	2000cf54 	.word	0x2000cf54
 800d614:	2000cf68 	.word	0x2000cf68
 800d618:	2000cf80 	.word	0x2000cf80
 800d61c:	2000cf4c 	.word	0x2000cf4c
 800d620:	2000cf50 	.word	0x2000cf50

0800d624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d62a:	e019      	b.n	800d660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d62c:	f001 f962 	bl	800e8f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d630:	4b10      	ldr	r3, [pc, #64]	; (800d674 <prvCheckTasksWaitingTermination+0x50>)
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	3304      	adds	r3, #4
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fe f92d 	bl	800b89c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d642:	4b0d      	ldr	r3, [pc, #52]	; (800d678 <prvCheckTasksWaitingTermination+0x54>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	3b01      	subs	r3, #1
 800d648:	4a0b      	ldr	r2, [pc, #44]	; (800d678 <prvCheckTasksWaitingTermination+0x54>)
 800d64a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d64c:	4b0b      	ldr	r3, [pc, #44]	; (800d67c <prvCheckTasksWaitingTermination+0x58>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3b01      	subs	r3, #1
 800d652:	4a0a      	ldr	r2, [pc, #40]	; (800d67c <prvCheckTasksWaitingTermination+0x58>)
 800d654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d656:	f001 f97d 	bl	800e954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f848 	bl	800d6f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d660:	4b06      	ldr	r3, [pc, #24]	; (800d67c <prvCheckTasksWaitingTermination+0x58>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1e1      	bne.n	800d62c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d668:	bf00      	nop
 800d66a:	bf00      	nop
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	2000cf68 	.word	0x2000cf68
 800d678:	2000cf94 	.word	0x2000cf94
 800d67c:	2000cf7c 	.word	0x2000cf7c

0800d680 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d688:	2300      	movs	r3, #0
 800d68a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d68c:	e005      	b.n	800d69a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	3301      	adds	r3, #1
 800d692:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	3301      	adds	r3, #1
 800d698:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	2ba5      	cmp	r3, #165	; 0xa5
 800d6a0:	d0f5      	beq.n	800d68e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	089b      	lsrs	r3, r3, #2
 800d6a6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	b29b      	uxth	r3, r3
	}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d102      	bne.n	800d6cc <uxTaskGetStackHighWaterMark+0x14>
 800d6c6:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <uxTaskGetStackHighWaterMark+0x34>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	e000      	b.n	800d6ce <uxTaskGetStackHighWaterMark+0x16>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d6d6:	6938      	ldr	r0, [r7, #16]
 800d6d8:	f7ff ffd2 	bl	800d680 <prvTaskCheckFreeStackSpace>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
	}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	2000cac0 	.word	0x2000cac0

0800d6f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3354      	adds	r3, #84	; 0x54
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f004 f9eb 	bl	8011ad8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d108      	bne.n	800d71e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d710:	4618      	mov	r0, r3
 800d712:	f001 fb2b 	bl	800ed6c <vPortFree>
				vPortFree( pxTCB );
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f001 fb28 	bl	800ed6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d71c:	e018      	b.n	800d750 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d724:	2b01      	cmp	r3, #1
 800d726:	d103      	bne.n	800d730 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f001 fb1f 	bl	800ed6c <vPortFree>
	}
 800d72e:	e00f      	b.n	800d750 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d736:	2b02      	cmp	r3, #2
 800d738:	d00a      	beq.n	800d750 <prvDeleteTCB+0x60>
	__asm volatile
 800d73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	60fb      	str	r3, [r7, #12]
}
 800d74c:	bf00      	nop
 800d74e:	e7fe      	b.n	800d74e <prvDeleteTCB+0x5e>
	}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d75e:	4b0c      	ldr	r3, [pc, #48]	; (800d790 <prvResetNextTaskUnblockTime+0x38>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d104      	bne.n	800d772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d768:	4b0a      	ldr	r3, [pc, #40]	; (800d794 <prvResetNextTaskUnblockTime+0x3c>)
 800d76a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d76e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d770:	e008      	b.n	800d784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d772:	4b07      	ldr	r3, [pc, #28]	; (800d790 <prvResetNextTaskUnblockTime+0x38>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	4a04      	ldr	r2, [pc, #16]	; (800d794 <prvResetNextTaskUnblockTime+0x3c>)
 800d782:	6013      	str	r3, [r2, #0]
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	2000cf4c 	.word	0x2000cf4c
 800d794:	2000cfb4 	.word	0x2000cfb4

0800d798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d79e:	4b0b      	ldr	r3, [pc, #44]	; (800d7cc <xTaskGetSchedulerState+0x34>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d102      	bne.n	800d7ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	607b      	str	r3, [r7, #4]
 800d7aa:	e008      	b.n	800d7be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ac:	4b08      	ldr	r3, [pc, #32]	; (800d7d0 <xTaskGetSchedulerState+0x38>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d102      	bne.n	800d7ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	607b      	str	r3, [r7, #4]
 800d7b8:	e001      	b.n	800d7be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7be:	687b      	ldr	r3, [r7, #4]
	}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	2000cfa0 	.word	0x2000cfa0
 800d7d0:	2000cfbc 	.word	0x2000cfbc

0800d7d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d056      	beq.n	800d898 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ee:	4b2d      	ldr	r3, [pc, #180]	; (800d8a4 <xTaskPriorityInherit+0xd0>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d246      	bcs.n	800d886 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	db06      	blt.n	800d80e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d800:	4b28      	ldr	r3, [pc, #160]	; (800d8a4 <xTaskPriorityInherit+0xd0>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	6959      	ldr	r1, [r3, #20]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d816:	4613      	mov	r3, r2
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	4a22      	ldr	r2, [pc, #136]	; (800d8a8 <xTaskPriorityInherit+0xd4>)
 800d820:	4413      	add	r3, r2
 800d822:	4299      	cmp	r1, r3
 800d824:	d122      	bne.n	800d86c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	3304      	adds	r3, #4
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe f836 	bl	800b89c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d830:	4b1c      	ldr	r3, [pc, #112]	; (800d8a4 <xTaskPriorityInherit+0xd0>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83e:	4b1b      	ldr	r3, [pc, #108]	; (800d8ac <xTaskPriorityInherit+0xd8>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	d903      	bls.n	800d84e <xTaskPriorityInherit+0x7a>
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84a:	4a18      	ldr	r2, [pc, #96]	; (800d8ac <xTaskPriorityInherit+0xd8>)
 800d84c:	6013      	str	r3, [r2, #0]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d852:	4613      	mov	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4a13      	ldr	r2, [pc, #76]	; (800d8a8 <xTaskPriorityInherit+0xd4>)
 800d85c:	441a      	add	r2, r3
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	3304      	adds	r3, #4
 800d862:	4619      	mov	r1, r3
 800d864:	4610      	mov	r0, r2
 800d866:	f7fd ffbc 	bl	800b7e2 <vListInsertEnd>
 800d86a:	e004      	b.n	800d876 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d86c:	4b0d      	ldr	r3, [pc, #52]	; (800d8a4 <xTaskPriorityInherit+0xd0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4619      	mov	r1, r3
 800d87a:	2049      	movs	r0, #73	; 0x49
 800d87c:	f002 fa34 	bl	800fce8 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d880:	2301      	movs	r3, #1
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	e008      	b.n	800d898 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d88a:	4b06      	ldr	r3, [pc, #24]	; (800d8a4 <xTaskPriorityInherit+0xd0>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	429a      	cmp	r2, r3
 800d892:	d201      	bcs.n	800d898 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d894:	2301      	movs	r3, #1
 800d896:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d898:	68fb      	ldr	r3, [r7, #12]
	}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	2000cac0 	.word	0x2000cac0
 800d8a8:	2000cac4 	.word	0x2000cac4
 800d8ac:	2000cf9c 	.word	0x2000cf9c

0800d8b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d05b      	beq.n	800d97e <xTaskPriorityDisinherit+0xce>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8c6:	4b30      	ldr	r3, [pc, #192]	; (800d988 <xTaskPriorityDisinherit+0xd8>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d00a      	beq.n	800d8e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d4:	f383 8811 	msr	BASEPRI, r3
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	60fb      	str	r3, [r7, #12]
}
 800d8e2:	bf00      	nop
 800d8e4:	e7fe      	b.n	800d8e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10a      	bne.n	800d904 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	60bb      	str	r3, [r7, #8]
}
 800d900:	bf00      	nop
 800d902:	e7fe      	b.n	800d902 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d908:	1e5a      	subs	r2, r3, #1
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d916:	429a      	cmp	r2, r3
 800d918:	d031      	beq.n	800d97e <xTaskPriorityDisinherit+0xce>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d12d      	bne.n	800d97e <xTaskPriorityDisinherit+0xce>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	3304      	adds	r3, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f7fd ffb8 	bl	800b89c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4619      	mov	r1, r3
 800d930:	204a      	movs	r0, #74	; 0x4a
 800d932:	f002 f9d9 	bl	800fce8 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d942:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94e:	4b0f      	ldr	r3, [pc, #60]	; (800d98c <xTaskPriorityDisinherit+0xdc>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d903      	bls.n	800d95e <xTaskPriorityDisinherit+0xae>
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95a:	4a0c      	ldr	r2, [pc, #48]	; (800d98c <xTaskPriorityDisinherit+0xdc>)
 800d95c:	6013      	str	r3, [r2, #0]
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d962:	4613      	mov	r3, r2
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4413      	add	r3, r2
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	4a09      	ldr	r2, [pc, #36]	; (800d990 <xTaskPriorityDisinherit+0xe0>)
 800d96c:	441a      	add	r2, r3
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	3304      	adds	r3, #4
 800d972:	4619      	mov	r1, r3
 800d974:	4610      	mov	r0, r2
 800d976:	f7fd ff34 	bl	800b7e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d97a:	2301      	movs	r3, #1
 800d97c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d97e:	697b      	ldr	r3, [r7, #20]
	}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	2000cac0 	.word	0x2000cac0
 800d98c:	2000cf9c 	.word	0x2000cf9c
 800d990:	2000cac4 	.word	0x2000cac4

0800d994 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d994:	b580      	push	{r7, lr}
 800d996:	b088      	sub	sp, #32
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d073      	beq.n	800da94 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d10a      	bne.n	800d9ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b8:	f383 8811 	msr	BASEPRI, r3
 800d9bc:	f3bf 8f6f 	isb	sy
 800d9c0:	f3bf 8f4f 	dsb	sy
 800d9c4:	60fb      	str	r3, [r7, #12]
}
 800d9c6:	bf00      	nop
 800d9c8:	e7fe      	b.n	800d9c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9ce:	683a      	ldr	r2, [r7, #0]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d902      	bls.n	800d9da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	61fb      	str	r3, [r7, #28]
 800d9d8:	e002      	b.n	800d9e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e4:	69fa      	ldr	r2, [r7, #28]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d054      	beq.n	800da94 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d14f      	bne.n	800da94 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d9f4:	4b29      	ldr	r3, [pc, #164]	; (800da9c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	69ba      	ldr	r2, [r7, #24]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d10a      	bne.n	800da14 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	60bb      	str	r3, [r7, #8]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4619      	mov	r1, r3
 800da18:	204a      	movs	r0, #74	; 0x4a
 800da1a:	f002 f965 	bl	800fce8 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da22:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	69fa      	ldr	r2, [r7, #28]
 800da28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	699b      	ldr	r3, [r3, #24]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	db04      	blt.n	800da3c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	6959      	ldr	r1, [r3, #20]
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	4613      	mov	r3, r2
 800da44:	009b      	lsls	r3, r3, #2
 800da46:	4413      	add	r3, r2
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	4a15      	ldr	r2, [pc, #84]	; (800daa0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800da4c:	4413      	add	r3, r2
 800da4e:	4299      	cmp	r1, r3
 800da50:	d120      	bne.n	800da94 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	3304      	adds	r3, #4
 800da56:	4618      	mov	r0, r3
 800da58:	f7fd ff20 	bl	800b89c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	4618      	mov	r0, r3
 800da60:	f002 ff70 	bl	8010944 <SEGGER_SYSVIEW_OnTaskStartReady>
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da68:	4b0e      	ldr	r3, [pc, #56]	; (800daa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d903      	bls.n	800da78 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	4a0b      	ldr	r2, [pc, #44]	; (800daa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7c:	4613      	mov	r3, r2
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4413      	add	r3, r2
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4a06      	ldr	r2, [pc, #24]	; (800daa0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800da86:	441a      	add	r2, r3
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	3304      	adds	r3, #4
 800da8c:	4619      	mov	r1, r3
 800da8e:	4610      	mov	r0, r2
 800da90:	f7fd fea7 	bl	800b7e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da94:	bf00      	nop
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	2000cac0 	.word	0x2000cac0
 800daa0:	2000cac4 	.word	0x2000cac4
 800daa4:	2000cf9c 	.word	0x2000cf9c

0800daa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800daa8:	b480      	push	{r7}
 800daaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800daac:	4b07      	ldr	r3, [pc, #28]	; (800dacc <pvTaskIncrementMutexHeldCount+0x24>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d004      	beq.n	800dabe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dab4:	4b05      	ldr	r3, [pc, #20]	; (800dacc <pvTaskIncrementMutexHeldCount+0x24>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800daba:	3201      	adds	r2, #1
 800dabc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dabe:	4b03      	ldr	r3, [pc, #12]	; (800dacc <pvTaskIncrementMutexHeldCount+0x24>)
 800dac0:	681b      	ldr	r3, [r3, #0]
	}
 800dac2:	4618      	mov	r0, r3
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	2000cac0 	.word	0x2000cac0

0800dad0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af02      	add	r7, sp, #8
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800dade:	f000 ff09 	bl	800e8f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800dae2:	4b2d      	ldr	r3, [pc, #180]	; (800db98 <xTaskNotifyWait+0xc8>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b02      	cmp	r3, #2
 800daee:	d01c      	beq.n	800db2a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800daf0:	4b29      	ldr	r3, [pc, #164]	; (800db98 <xTaskNotifyWait+0xc8>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	43d2      	mvns	r2, r2
 800dafc:	400a      	ands	r2, r1
 800dafe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800db02:	4b25      	ldr	r3, [pc, #148]	; (800db98 <xTaskNotifyWait+0xc8>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00b      	beq.n	800db2a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db12:	2101      	movs	r1, #1
 800db14:	6838      	ldr	r0, [r7, #0]
 800db16:	f000 fa0b 	bl	800df30 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800db1a:	4b20      	ldr	r3, [pc, #128]	; (800db9c <xTaskNotifyWait+0xcc>)
 800db1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800db2a:	f000 ff13 	bl	800e954 <vPortExitCritical>

		taskENTER_CRITICAL();
 800db2e:	f000 fee1 	bl	800e8f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	4613      	mov	r3, r2
 800db3a:	68ba      	ldr	r2, [r7, #8]
 800db3c:	68f9      	ldr	r1, [r7, #12]
 800db3e:	2040      	movs	r0, #64	; 0x40
 800db40:	f002 f9de 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d005      	beq.n	800db56 <xTaskNotifyWait+0x86>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800db4a:	4b13      	ldr	r3, [pc, #76]	; (800db98 <xTaskNotifyWait+0xc8>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800db56:	4b10      	ldr	r3, [pc, #64]	; (800db98 <xTaskNotifyWait+0xc8>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	2b02      	cmp	r3, #2
 800db62:	d002      	beq.n	800db6a <xTaskNotifyWait+0x9a>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800db64:	2300      	movs	r3, #0
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	e00a      	b.n	800db80 <xTaskNotifyWait+0xb0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800db6a:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <xTaskNotifyWait+0xc8>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	43d2      	mvns	r2, r2
 800db76:	400a      	ands	r2, r1
 800db78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800db7c:	2301      	movs	r3, #1
 800db7e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db80:	4b05      	ldr	r3, [pc, #20]	; (800db98 <xTaskNotifyWait+0xc8>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800db8a:	f000 fee3 	bl	800e954 <vPortExitCritical>

		return xReturn;
 800db8e:	697b      	ldr	r3, [r7, #20]
	}
 800db90:	4618      	mov	r0, r3
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	2000cac0 	.word	0x2000cac0
 800db9c:	e000ed04 	.word	0xe000ed04

0800dba0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b08c      	sub	sp, #48	; 0x30
 800dba4:	af02      	add	r7, sp, #8
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	60b9      	str	r1, [r7, #8]
 800dbaa:	603b      	str	r3, [r7, #0]
 800dbac:	4613      	mov	r3, r2
 800dbae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10a      	bne.n	800dbd0 <xTaskGenericNotify+0x30>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	61bb      	str	r3, [r7, #24]
}
 800dbcc:	bf00      	nop
 800dbce:	e7fe      	b.n	800dbce <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800dbd4:	f000 fe8e 	bl	800e8f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d004      	beq.n	800dbe8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800dbde:	6a3b      	ldr	r3, [r7, #32]
 800dbe0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dbe8:	6a3b      	ldr	r3, [r7, #32]
 800dbea:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800dbee:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dbf0:	6a3b      	ldr	r3, [r7, #32]
 800dbf2:	2202      	movs	r2, #2
 800dbf4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800dbf8:	79fb      	ldrb	r3, [r7, #7]
 800dbfa:	2b04      	cmp	r3, #4
 800dbfc:	d82d      	bhi.n	800dc5a <xTaskGenericNotify+0xba>
 800dbfe:	a201      	add	r2, pc, #4	; (adr r2, 800dc04 <xTaskGenericNotify+0x64>)
 800dc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc04:	0800dc7d 	.word	0x0800dc7d
 800dc08:	0800dc19 	.word	0x0800dc19
 800dc0c:	0800dc2b 	.word	0x0800dc2b
 800dc10:	0800dc3b 	.word	0x0800dc3b
 800dc14:	0800dc45 	.word	0x0800dc45
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800dc18:	6a3b      	ldr	r3, [r7, #32]
 800dc1a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	431a      	orrs	r2, r3
 800dc22:	6a3b      	ldr	r3, [r7, #32]
 800dc24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800dc28:	e02b      	b.n	800dc82 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	6a3b      	ldr	r3, [r7, #32]
 800dc34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800dc38:	e023      	b.n	800dc82 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800dc42:	e01e      	b.n	800dc82 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dc44:	7ffb      	ldrb	r3, [r7, #31]
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d004      	beq.n	800dc54 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dc4a:	6a3b      	ldr	r3, [r7, #32]
 800dc4c:	68ba      	ldr	r2, [r7, #8]
 800dc4e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dc52:	e016      	b.n	800dc82 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800dc54:	2300      	movs	r3, #0
 800dc56:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800dc58:	e013      	b.n	800dc82 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dc60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc64:	d00c      	beq.n	800dc80 <xTaskGenericNotify+0xe0>
	__asm volatile
 800dc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6a:	f383 8811 	msr	BASEPRI, r3
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	f3bf 8f4f 	dsb	sy
 800dc76:	617b      	str	r3, [r7, #20]
}
 800dc78:	bf00      	nop
 800dc7a:	e7fe      	b.n	800dc7a <xTaskGenericNotify+0xda>
					break;
 800dc7c:	bf00      	nop
 800dc7e:	e000      	b.n	800dc82 <xTaskGenericNotify+0xe2>

					break;
 800dc80:	bf00      	nop
			}

			traceTASK_NOTIFY();
 800dc82:	6a3b      	ldr	r3, [r7, #32]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f002 feff 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	79fa      	ldrb	r2, [r7, #7]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	4613      	mov	r3, r2
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	203e      	movs	r0, #62	; 0x3e
 800dc98:	f002 f932 	bl	800ff00 <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dc9c:	7ffb      	ldrb	r3, [r7, #31]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d13e      	bne.n	800dd20 <xTaskGenericNotify+0x180>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dca2:	6a3b      	ldr	r3, [r7, #32]
 800dca4:	3304      	adds	r3, #4
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fd fdf8 	bl	800b89c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800dcac:	6a3b      	ldr	r3, [r7, #32]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f002 fe48 	bl	8010944 <SEGGER_SYSVIEW_OnTaskStartReady>
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb8:	4b1d      	ldr	r3, [pc, #116]	; (800dd30 <xTaskGenericNotify+0x190>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d903      	bls.n	800dcc8 <xTaskGenericNotify+0x128>
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc4:	4a1a      	ldr	r2, [pc, #104]	; (800dd30 <xTaskGenericNotify+0x190>)
 800dcc6:	6013      	str	r3, [r2, #0]
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dccc:	4613      	mov	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4a17      	ldr	r2, [pc, #92]	; (800dd34 <xTaskGenericNotify+0x194>)
 800dcd6:	441a      	add	r2, r3
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	4619      	mov	r1, r3
 800dcde:	4610      	mov	r0, r2
 800dce0:	f7fd fd7f 	bl	800b7e2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dce4:	6a3b      	ldr	r3, [r7, #32]
 800dce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00a      	beq.n	800dd02 <xTaskGenericNotify+0x162>
	__asm volatile
 800dcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf0:	f383 8811 	msr	BASEPRI, r3
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	613b      	str	r3, [r7, #16]
}
 800dcfe:	bf00      	nop
 800dd00:	e7fe      	b.n	800dd00 <xTaskGenericNotify+0x160>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd06:	4b0c      	ldr	r3, [pc, #48]	; (800dd38 <xTaskGenericNotify+0x198>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d907      	bls.n	800dd20 <xTaskGenericNotify+0x180>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800dd10:	4b0a      	ldr	r3, [pc, #40]	; (800dd3c <xTaskGenericNotify+0x19c>)
 800dd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd16:	601a      	str	r2, [r3, #0]
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dd20:	f000 fe18 	bl	800e954 <vPortExitCritical>

		return xReturn;
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3728      	adds	r7, #40	; 0x28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	2000cf9c 	.word	0x2000cf9c
 800dd34:	2000cac4 	.word	0x2000cac4
 800dd38:	2000cac0 	.word	0x2000cac0
 800dd3c:	e000ed04 	.word	0xe000ed04

0800dd40 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b090      	sub	sp, #64	; 0x40
 800dd44:	af02      	add	r7, sp, #8
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	603b      	str	r3, [r7, #0]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800dd50:	2301      	movs	r3, #1
 800dd52:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10a      	bne.n	800dd70 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800dd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5e:	f383 8811 	msr	BASEPRI, r3
 800dd62:	f3bf 8f6f 	isb	sy
 800dd66:	f3bf 8f4f 	dsb	sy
 800dd6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd6c:	bf00      	nop
 800dd6e:	e7fe      	b.n	800dd6e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd70:	f000 feaa 	bl	800eac8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800dd78:	f3ef 8211 	mrs	r2, BASEPRI
 800dd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	623a      	str	r2, [r7, #32]
 800dd8e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800dd90:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd92:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d004      	beq.n	800dda4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ddaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ddae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb0:	2202      	movs	r2, #2
 800ddb2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800ddb6:	79fb      	ldrb	r3, [r7, #7]
 800ddb8:	2b04      	cmp	r3, #4
 800ddba:	d82f      	bhi.n	800de1c <xTaskGenericNotifyFromISR+0xdc>
 800ddbc:	a201      	add	r2, pc, #4	; (adr r2, 800ddc4 <xTaskGenericNotifyFromISR+0x84>)
 800ddbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc2:	bf00      	nop
 800ddc4:	0800de3f 	.word	0x0800de3f
 800ddc8:	0800ddd9 	.word	0x0800ddd9
 800ddcc:	0800ddeb 	.word	0x0800ddeb
 800ddd0:	0800ddfb 	.word	0x0800ddfb
 800ddd4:	0800de05 	.word	0x0800de05
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddda:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	431a      	orrs	r2, r3
 800dde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800dde8:	e02c      	b.n	800de44 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ddea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ddf0:	1c5a      	adds	r2, r3, #1
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ddf8:	e024      	b.n	800de44 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800de02:	e01f      	b.n	800de44 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800de04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de08:	2b02      	cmp	r3, #2
 800de0a:	d004      	beq.n	800de16 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800de0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0e:	68ba      	ldr	r2, [r7, #8]
 800de10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800de14:	e016      	b.n	800de44 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800de16:	2300      	movs	r3, #0
 800de18:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800de1a:	e013      	b.n	800de44 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800de1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800de22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de26:	d00c      	beq.n	800de42 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800de28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	61bb      	str	r3, [r7, #24]
}
 800de3a:	bf00      	nop
 800de3c:	e7fe      	b.n	800de3c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800de3e:	bf00      	nop
 800de40:	e000      	b.n	800de44 <xTaskGenericNotifyFromISR+0x104>
					break;
 800de42:	bf00      	nop
			}

			traceTASK_NOTIFY_FROM_ISR();
 800de44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de46:	4618      	mov	r0, r3
 800de48:	f002 fe1e 	bl	8010a88 <SEGGER_SYSVIEW_ShrinkId>
 800de4c:	79f9      	ldrb	r1, [r7, #7]
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de52:	9201      	str	r2, [sp, #4]
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	460b      	mov	r3, r1
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	4601      	mov	r1, r0
 800de5c:	203f      	movs	r0, #63	; 0x3f
 800de5e:	f002 f8e1 	bl	8010024 <SEGGER_SYSVIEW_RecordU32x5>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800de62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de66:	2b01      	cmp	r3, #1
 800de68:	d14a      	bne.n	800df00 <xTaskGenericNotifyFromISR+0x1c0>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00a      	beq.n	800de88 <xTaskGenericNotifyFromISR+0x148>
	__asm volatile
 800de72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de76:	f383 8811 	msr	BASEPRI, r3
 800de7a:	f3bf 8f6f 	isb	sy
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	617b      	str	r3, [r7, #20]
}
 800de84:	bf00      	nop
 800de86:	e7fe      	b.n	800de86 <xTaskGenericNotifyFromISR+0x146>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de88:	4b23      	ldr	r3, [pc, #140]	; (800df18 <xTaskGenericNotifyFromISR+0x1d8>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d121      	bne.n	800ded4 <xTaskGenericNotifyFromISR+0x194>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de92:	3304      	adds	r3, #4
 800de94:	4618      	mov	r0, r3
 800de96:	f7fd fd01 	bl	800b89c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9c:	4618      	mov	r0, r3
 800de9e:	f002 fd51 	bl	8010944 <SEGGER_SYSVIEW_OnTaskStartReady>
 800dea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea6:	4b1d      	ldr	r3, [pc, #116]	; (800df1c <xTaskGenericNotifyFromISR+0x1dc>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d903      	bls.n	800deb6 <xTaskGenericNotifyFromISR+0x176>
 800deae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb2:	4a1a      	ldr	r2, [pc, #104]	; (800df1c <xTaskGenericNotifyFromISR+0x1dc>)
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deba:	4613      	mov	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4413      	add	r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	4a17      	ldr	r2, [pc, #92]	; (800df20 <xTaskGenericNotifyFromISR+0x1e0>)
 800dec4:	441a      	add	r2, r3
 800dec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec8:	3304      	adds	r3, #4
 800deca:	4619      	mov	r1, r3
 800decc:	4610      	mov	r0, r2
 800dece:	f7fd fc88 	bl	800b7e2 <vListInsertEnd>
 800ded2:	e005      	b.n	800dee0 <xTaskGenericNotifyFromISR+0x1a0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	3318      	adds	r3, #24
 800ded8:	4619      	mov	r1, r3
 800deda:	4812      	ldr	r0, [pc, #72]	; (800df24 <xTaskGenericNotifyFromISR+0x1e4>)
 800dedc:	f7fd fc81 	bl	800b7e2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee4:	4b10      	ldr	r3, [pc, #64]	; (800df28 <xTaskGenericNotifyFromISR+0x1e8>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deea:	429a      	cmp	r2, r3
 800deec:	d908      	bls.n	800df00 <xTaskGenericNotifyFromISR+0x1c0>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800deee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <xTaskGenericNotifyFromISR+0x1ba>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800def4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def6:	2201      	movs	r2, #1
 800def8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800defa:	4b0c      	ldr	r3, [pc, #48]	; (800df2c <xTaskGenericNotifyFromISR+0x1ec>)
 800defc:	2201      	movs	r2, #1
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df02:	613b      	str	r3, [r7, #16]
	__asm volatile
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f383 8811 	msr	BASEPRI, r3
}
 800df0a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800df0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800df0e:	4618      	mov	r0, r3
 800df10:	3738      	adds	r7, #56	; 0x38
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	2000cfbc 	.word	0x2000cfbc
 800df1c:	2000cf9c 	.word	0x2000cf9c
 800df20:	2000cac4 	.word	0x2000cac4
 800df24:	2000cf54 	.word	0x2000cf54
 800df28:	2000cac0 	.word	0x2000cac0
 800df2c:	2000cfa8 	.word	0x2000cfa8

0800df30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df3a:	4b2a      	ldr	r3, [pc, #168]	; (800dfe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df40:	4b29      	ldr	r3, [pc, #164]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3304      	adds	r3, #4
 800df46:	4618      	mov	r0, r3
 800df48:	f7fd fca8 	bl	800b89c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df52:	d110      	bne.n	800df76 <prvAddCurrentTaskToDelayedList+0x46>
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00d      	beq.n	800df76 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800df5a:	4b23      	ldr	r3, [pc, #140]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	211b      	movs	r1, #27
 800df60:	4618      	mov	r0, r3
 800df62:	f002 fd31 	bl	80109c8 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df66:	4b20      	ldr	r3, [pc, #128]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	3304      	adds	r3, #4
 800df6c:	4619      	mov	r1, r3
 800df6e:	481f      	ldr	r0, [pc, #124]	; (800dfec <prvAddCurrentTaskToDelayedList+0xbc>)
 800df70:	f7fd fc37 	bl	800b7e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df74:	e032      	b.n	800dfdc <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4413      	add	r3, r2
 800df7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df7e:	4b1a      	ldr	r3, [pc, #104]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d20f      	bcs.n	800dfae <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800df8e:	4b16      	ldr	r3, [pc, #88]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2104      	movs	r1, #4
 800df94:	4618      	mov	r0, r3
 800df96:	f002 fd17 	bl	80109c8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df9a:	4b15      	ldr	r3, [pc, #84]	; (800dff0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	4b12      	ldr	r3, [pc, #72]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3304      	adds	r3, #4
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	f7fd fc3f 	bl	800b82a <vListInsert>
}
 800dfac:	e016      	b.n	800dfdc <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 800dfae:	4b0e      	ldr	r3, [pc, #56]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2104      	movs	r1, #4
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f002 fd07 	bl	80109c8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfba:	4b0e      	ldr	r3, [pc, #56]	; (800dff4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	4b0a      	ldr	r3, [pc, #40]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	3304      	adds	r3, #4
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	f7fd fc2f 	bl	800b82a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dfcc:	4b0a      	ldr	r3, [pc, #40]	; (800dff8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d202      	bcs.n	800dfdc <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 800dfd6:	4a08      	ldr	r2, [pc, #32]	; (800dff8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	6013      	str	r3, [r2, #0]
}
 800dfdc:	bf00      	nop
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	2000cf98 	.word	0x2000cf98
 800dfe8:	2000cac0 	.word	0x2000cac0
 800dfec:	2000cf80 	.word	0x2000cf80
 800dff0:	2000cf50 	.word	0x2000cf50
 800dff4:	2000cf4c 	.word	0x2000cf4c
 800dff8:	2000cfb4 	.word	0x2000cfb4

0800dffc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b08a      	sub	sp, #40	; 0x28
 800e000:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e002:	2300      	movs	r3, #0
 800e004:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e006:	f000 fb07 	bl	800e618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e00a:	4b1c      	ldr	r3, [pc, #112]	; (800e07c <xTimerCreateTimerTask+0x80>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d021      	beq.n	800e056 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e012:	2300      	movs	r3, #0
 800e014:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e016:	2300      	movs	r3, #0
 800e018:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e01a:	1d3a      	adds	r2, r7, #4
 800e01c:	f107 0108 	add.w	r1, r7, #8
 800e020:	f107 030c 	add.w	r3, r7, #12
 800e024:	4618      	mov	r0, r3
 800e026:	f7fd fb95 	bl	800b754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e02a:	6879      	ldr	r1, [r7, #4]
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	9202      	str	r2, [sp, #8]
 800e032:	9301      	str	r3, [sp, #4]
 800e034:	2302      	movs	r3, #2
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	2300      	movs	r3, #0
 800e03a:	460a      	mov	r2, r1
 800e03c:	4910      	ldr	r1, [pc, #64]	; (800e080 <xTimerCreateTimerTask+0x84>)
 800e03e:	4811      	ldr	r0, [pc, #68]	; (800e084 <xTimerCreateTimerTask+0x88>)
 800e040:	f7fe fcc0 	bl	800c9c4 <xTaskCreateStatic>
 800e044:	4603      	mov	r3, r0
 800e046:	4a10      	ldr	r2, [pc, #64]	; (800e088 <xTimerCreateTimerTask+0x8c>)
 800e048:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e04a:	4b0f      	ldr	r3, [pc, #60]	; (800e088 <xTimerCreateTimerTask+0x8c>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d001      	beq.n	800e056 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e052:	2301      	movs	r3, #1
 800e054:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10a      	bne.n	800e072 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	613b      	str	r3, [r7, #16]
}
 800e06e:	bf00      	nop
 800e070:	e7fe      	b.n	800e070 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e072:	697b      	ldr	r3, [r7, #20]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	2000cff0 	.word	0x2000cff0
 800e080:	08011c04 	.word	0x08011c04
 800e084:	0800e1c1 	.word	0x0800e1c1
 800e088:	2000cff4 	.word	0x2000cff4

0800e08c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08a      	sub	sp, #40	; 0x28
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e09a:	2300      	movs	r3, #0
 800e09c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10a      	bne.n	800e0ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800e0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a8:	f383 8811 	msr	BASEPRI, r3
 800e0ac:	f3bf 8f6f 	isb	sy
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	623b      	str	r3, [r7, #32]
}
 800e0b6:	bf00      	nop
 800e0b8:	e7fe      	b.n	800e0b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e0ba:	4b1a      	ldr	r3, [pc, #104]	; (800e124 <xTimerGenericCommand+0x98>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d02a      	beq.n	800e118 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2b05      	cmp	r3, #5
 800e0d2:	dc18      	bgt.n	800e106 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e0d4:	f7ff fb60 	bl	800d798 <xTaskGetSchedulerState>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d109      	bne.n	800e0f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e0de:	4b11      	ldr	r3, [pc, #68]	; (800e124 <xTimerGenericCommand+0x98>)
 800e0e0:	6818      	ldr	r0, [r3, #0]
 800e0e2:	f107 0110 	add.w	r1, r7, #16
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ea:	f7fd fd41 	bl	800bb70 <xQueueGenericSend>
 800e0ee:	6278      	str	r0, [r7, #36]	; 0x24
 800e0f0:	e012      	b.n	800e118 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e0f2:	4b0c      	ldr	r3, [pc, #48]	; (800e124 <xTimerGenericCommand+0x98>)
 800e0f4:	6818      	ldr	r0, [r3, #0]
 800e0f6:	f107 0110 	add.w	r1, r7, #16
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f7fd fd37 	bl	800bb70 <xQueueGenericSend>
 800e102:	6278      	str	r0, [r7, #36]	; 0x24
 800e104:	e008      	b.n	800e118 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e106:	4b07      	ldr	r3, [pc, #28]	; (800e124 <xTimerGenericCommand+0x98>)
 800e108:	6818      	ldr	r0, [r3, #0]
 800e10a:	f107 0110 	add.w	r1, r7, #16
 800e10e:	2300      	movs	r3, #0
 800e110:	683a      	ldr	r2, [r7, #0]
 800e112:	f7fd fe53 	bl	800bdbc <xQueueGenericSendFromISR>
 800e116:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3728      	adds	r7, #40	; 0x28
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	2000cff0 	.word	0x2000cff0

0800e128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b088      	sub	sp, #32
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e132:	4b22      	ldr	r3, [pc, #136]	; (800e1bc <prvProcessExpiredTimer+0x94>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	3304      	adds	r3, #4
 800e140:	4618      	mov	r0, r3
 800e142:	f7fd fbab 	bl	800b89c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e14c:	f003 0304 	and.w	r3, r3, #4
 800e150:	2b00      	cmp	r3, #0
 800e152:	d022      	beq.n	800e19a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	699a      	ldr	r2, [r3, #24]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	18d1      	adds	r1, r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	6978      	ldr	r0, [r7, #20]
 800e162:	f000 f8d1 	bl	800e308 <prvInsertTimerInActiveList>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d01f      	beq.n	800e1ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e16c:	2300      	movs	r3, #0
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	2300      	movs	r3, #0
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	2100      	movs	r1, #0
 800e176:	6978      	ldr	r0, [r7, #20]
 800e178:	f7ff ff88 	bl	800e08c <xTimerGenericCommand>
 800e17c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d113      	bne.n	800e1ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	60fb      	str	r3, [r7, #12]
}
 800e196:	bf00      	nop
 800e198:	e7fe      	b.n	800e198 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1a0:	f023 0301 	bic.w	r3, r3, #1
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	6a1b      	ldr	r3, [r3, #32]
 800e1b0:	6978      	ldr	r0, [r7, #20]
 800e1b2:	4798      	blx	r3
}
 800e1b4:	bf00      	nop
 800e1b6:	3718      	adds	r7, #24
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	2000cfe8 	.word	0x2000cfe8

0800e1c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1c8:	f107 0308 	add.w	r3, r7, #8
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f000 f857 	bl	800e280 <prvGetNextExpireTime>
 800e1d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f000 f803 	bl	800e1e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e1de:	f000 f8d5 	bl	800e38c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1e2:	e7f1      	b.n	800e1c8 <prvTimerTask+0x8>

0800e1e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e1ee:	f7fe fe79 	bl	800cee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1f2:	f107 0308 	add.w	r3, r7, #8
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f000 f866 	bl	800e2c8 <prvSampleTimeNow>
 800e1fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d130      	bne.n	800e266 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d10a      	bne.n	800e220 <prvProcessTimerOrBlockTask+0x3c>
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d806      	bhi.n	800e220 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e212:	f7fe fe75 	bl	800cf00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e216:	68f9      	ldr	r1, [r7, #12]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff ff85 	bl	800e128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e21e:	e024      	b.n	800e26a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d008      	beq.n	800e238 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e226:	4b13      	ldr	r3, [pc, #76]	; (800e274 <prvProcessTimerOrBlockTask+0x90>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d101      	bne.n	800e234 <prvProcessTimerOrBlockTask+0x50>
 800e230:	2301      	movs	r3, #1
 800e232:	e000      	b.n	800e236 <prvProcessTimerOrBlockTask+0x52>
 800e234:	2300      	movs	r3, #0
 800e236:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e238:	4b0f      	ldr	r3, [pc, #60]	; (800e278 <prvProcessTimerOrBlockTask+0x94>)
 800e23a:	6818      	ldr	r0, [r3, #0]
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	683a      	ldr	r2, [r7, #0]
 800e244:	4619      	mov	r1, r3
 800e246:	f7fe fb89 	bl	800c95c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e24a:	f7fe fe59 	bl	800cf00 <xTaskResumeAll>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10a      	bne.n	800e26a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e254:	4b09      	ldr	r3, [pc, #36]	; (800e27c <prvProcessTimerOrBlockTask+0x98>)
 800e256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e25a:	601a      	str	r2, [r3, #0]
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	f3bf 8f6f 	isb	sy
}
 800e264:	e001      	b.n	800e26a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e266:	f7fe fe4b 	bl	800cf00 <xTaskResumeAll>
}
 800e26a:	bf00      	nop
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	2000cfec 	.word	0x2000cfec
 800e278:	2000cff0 	.word	0x2000cff0
 800e27c:	e000ed04 	.word	0xe000ed04

0800e280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e288:	4b0e      	ldr	r3, [pc, #56]	; (800e2c4 <prvGetNextExpireTime+0x44>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <prvGetNextExpireTime+0x16>
 800e292:	2201      	movs	r2, #1
 800e294:	e000      	b.n	800e298 <prvGetNextExpireTime+0x18>
 800e296:	2200      	movs	r2, #0
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d105      	bne.n	800e2b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2a4:	4b07      	ldr	r3, [pc, #28]	; (800e2c4 <prvGetNextExpireTime+0x44>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	e001      	b.n	800e2b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	2000cfe8 	.word	0x2000cfe8

0800e2c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e2d0:	f7fe feb8 	bl	800d044 <xTaskGetTickCount>
 800e2d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e2d6:	4b0b      	ldr	r3, [pc, #44]	; (800e304 <prvSampleTimeNow+0x3c>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d205      	bcs.n	800e2ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e2e0:	f000 f936 	bl	800e550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	601a      	str	r2, [r3, #0]
 800e2ea:	e002      	b.n	800e2f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e2f2:	4a04      	ldr	r2, [pc, #16]	; (800e304 <prvSampleTimeNow+0x3c>)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	2000cff8 	.word	0x2000cff8

0800e308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e316:	2300      	movs	r3, #0
 800e318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e326:	68ba      	ldr	r2, [r7, #8]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d812      	bhi.n	800e354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	1ad2      	subs	r2, r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	699b      	ldr	r3, [r3, #24]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d302      	bcc.n	800e342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e33c:	2301      	movs	r3, #1
 800e33e:	617b      	str	r3, [r7, #20]
 800e340:	e01b      	b.n	800e37a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e342:	4b10      	ldr	r3, [pc, #64]	; (800e384 <prvInsertTimerInActiveList+0x7c>)
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	3304      	adds	r3, #4
 800e34a:	4619      	mov	r1, r3
 800e34c:	4610      	mov	r0, r2
 800e34e:	f7fd fa6c 	bl	800b82a <vListInsert>
 800e352:	e012      	b.n	800e37a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d206      	bcs.n	800e36a <prvInsertTimerInActiveList+0x62>
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	429a      	cmp	r2, r3
 800e362:	d302      	bcc.n	800e36a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e364:	2301      	movs	r3, #1
 800e366:	617b      	str	r3, [r7, #20]
 800e368:	e007      	b.n	800e37a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e36a:	4b07      	ldr	r3, [pc, #28]	; (800e388 <prvInsertTimerInActiveList+0x80>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	3304      	adds	r3, #4
 800e372:	4619      	mov	r1, r3
 800e374:	4610      	mov	r0, r2
 800e376:	f7fd fa58 	bl	800b82a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e37a:	697b      	ldr	r3, [r7, #20]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	2000cfec 	.word	0x2000cfec
 800e388:	2000cfe8 	.word	0x2000cfe8

0800e38c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08e      	sub	sp, #56	; 0x38
 800e390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e392:	e0ca      	b.n	800e52a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	da18      	bge.n	800e3cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e39a:	1d3b      	adds	r3, r7, #4
 800e39c:	3304      	adds	r3, #4
 800e39e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d10a      	bne.n	800e3bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	61fb      	str	r3, [r7, #28]
}
 800e3b8:	bf00      	nop
 800e3ba:	e7fe      	b.n	800e3ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3c2:	6850      	ldr	r0, [r2, #4]
 800e3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3c6:	6892      	ldr	r2, [r2, #8]
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f2c0 80aa 	blt.w	800e528 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3da:	695b      	ldr	r3, [r3, #20]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fd fa59 	bl	800b89c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3ea:	463b      	mov	r3, r7
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7ff ff6b 	bl	800e2c8 <prvSampleTimeNow>
 800e3f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b09      	cmp	r3, #9
 800e3f8:	f200 8097 	bhi.w	800e52a <prvProcessReceivedCommands+0x19e>
 800e3fc:	a201      	add	r2, pc, #4	; (adr r2, 800e404 <prvProcessReceivedCommands+0x78>)
 800e3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e402:	bf00      	nop
 800e404:	0800e42d 	.word	0x0800e42d
 800e408:	0800e42d 	.word	0x0800e42d
 800e40c:	0800e42d 	.word	0x0800e42d
 800e410:	0800e4a1 	.word	0x0800e4a1
 800e414:	0800e4b5 	.word	0x0800e4b5
 800e418:	0800e4ff 	.word	0x0800e4ff
 800e41c:	0800e42d 	.word	0x0800e42d
 800e420:	0800e42d 	.word	0x0800e42d
 800e424:	0800e4a1 	.word	0x0800e4a1
 800e428:	0800e4b5 	.word	0x0800e4b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e432:	f043 0301 	orr.w	r3, r3, #1
 800e436:	b2da      	uxtb	r2, r3
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	18d1      	adds	r1, r2, r3
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e44c:	f7ff ff5c 	bl	800e308 <prvInsertTimerInActiveList>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d069      	beq.n	800e52a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e45c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e464:	f003 0304 	and.w	r3, r3, #4
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d05e      	beq.n	800e52a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e46c:	68ba      	ldr	r2, [r7, #8]
 800e46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	441a      	add	r2, r3
 800e474:	2300      	movs	r3, #0
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	2300      	movs	r3, #0
 800e47a:	2100      	movs	r1, #0
 800e47c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e47e:	f7ff fe05 	bl	800e08c <xTimerGenericCommand>
 800e482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e484:	6a3b      	ldr	r3, [r7, #32]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d14f      	bne.n	800e52a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48e:	f383 8811 	msr	BASEPRI, r3
 800e492:	f3bf 8f6f 	isb	sy
 800e496:	f3bf 8f4f 	dsb	sy
 800e49a:	61bb      	str	r3, [r7, #24]
}
 800e49c:	bf00      	nop
 800e49e:	e7fe      	b.n	800e49e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4a6:	f023 0301 	bic.w	r3, r3, #1
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e4b2:	e03a      	b.n	800e52a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ba:	f043 0301 	orr.w	r3, r3, #1
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ce:	699b      	ldr	r3, [r3, #24]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10a      	bne.n	800e4ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	617b      	str	r3, [r7, #20]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ec:	699a      	ldr	r2, [r3, #24]
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	18d1      	adds	r1, r2, r3
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4f8:	f7ff ff06 	bl	800e308 <prvInsertTimerInActiveList>
					break;
 800e4fc:	e015      	b.n	800e52a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e504:	f003 0302 	and.w	r3, r3, #2
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d103      	bne.n	800e514 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e50c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e50e:	f000 fc2d 	bl	800ed6c <vPortFree>
 800e512:	e00a      	b.n	800e52a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e51a:	f023 0301 	bic.w	r3, r3, #1
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e526:	e000      	b.n	800e52a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e52a:	4b08      	ldr	r3, [pc, #32]	; (800e54c <prvProcessReceivedCommands+0x1c0>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	1d39      	adds	r1, r7, #4
 800e530:	2200      	movs	r2, #0
 800e532:	4618      	mov	r0, r3
 800e534:	f7fd fd92 	bl	800c05c <xQueueReceive>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f47f af2a 	bne.w	800e394 <prvProcessReceivedCommands+0x8>
	}
}
 800e540:	bf00      	nop
 800e542:	bf00      	nop
 800e544:	3730      	adds	r7, #48	; 0x30
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	2000cff0 	.word	0x2000cff0

0800e550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b088      	sub	sp, #32
 800e554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e556:	e048      	b.n	800e5ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e558:	4b2d      	ldr	r3, [pc, #180]	; (800e610 <prvSwitchTimerLists+0xc0>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e562:	4b2b      	ldr	r3, [pc, #172]	; (800e610 <prvSwitchTimerLists+0xc0>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	3304      	adds	r3, #4
 800e570:	4618      	mov	r0, r3
 800e572:	f7fd f993 	bl	800b89c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	6a1b      	ldr	r3, [r3, #32]
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e584:	f003 0304 	and.w	r3, r3, #4
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d02e      	beq.n	800e5ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	4413      	add	r3, r2
 800e594:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d90e      	bls.n	800e5bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	68ba      	ldr	r2, [r7, #8]
 800e5a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5aa:	4b19      	ldr	r3, [pc, #100]	; (800e610 <prvSwitchTimerLists+0xc0>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	3304      	adds	r3, #4
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	f7fd f938 	bl	800b82a <vListInsert>
 800e5ba:	e016      	b.n	800e5ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e5bc:	2300      	movs	r3, #0
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	693a      	ldr	r2, [r7, #16]
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f7ff fd60 	bl	800e08c <xTimerGenericCommand>
 800e5cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d10a      	bne.n	800e5ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d8:	f383 8811 	msr	BASEPRI, r3
 800e5dc:	f3bf 8f6f 	isb	sy
 800e5e0:	f3bf 8f4f 	dsb	sy
 800e5e4:	603b      	str	r3, [r7, #0]
}
 800e5e6:	bf00      	nop
 800e5e8:	e7fe      	b.n	800e5e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5ea:	4b09      	ldr	r3, [pc, #36]	; (800e610 <prvSwitchTimerLists+0xc0>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1b1      	bne.n	800e558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e5f4:	4b06      	ldr	r3, [pc, #24]	; (800e610 <prvSwitchTimerLists+0xc0>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e5fa:	4b06      	ldr	r3, [pc, #24]	; (800e614 <prvSwitchTimerLists+0xc4>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a04      	ldr	r2, [pc, #16]	; (800e610 <prvSwitchTimerLists+0xc0>)
 800e600:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e602:	4a04      	ldr	r2, [pc, #16]	; (800e614 <prvSwitchTimerLists+0xc4>)
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	6013      	str	r3, [r2, #0]
}
 800e608:	bf00      	nop
 800e60a:	3718      	adds	r7, #24
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	2000cfe8 	.word	0x2000cfe8
 800e614:	2000cfec 	.word	0x2000cfec

0800e618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e61e:	f000 f969 	bl	800e8f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e622:	4b15      	ldr	r3, [pc, #84]	; (800e678 <prvCheckForValidListAndQueue+0x60>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d120      	bne.n	800e66c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e62a:	4814      	ldr	r0, [pc, #80]	; (800e67c <prvCheckForValidListAndQueue+0x64>)
 800e62c:	f7fd f8ac 	bl	800b788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e630:	4813      	ldr	r0, [pc, #76]	; (800e680 <prvCheckForValidListAndQueue+0x68>)
 800e632:	f7fd f8a9 	bl	800b788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e636:	4b13      	ldr	r3, [pc, #76]	; (800e684 <prvCheckForValidListAndQueue+0x6c>)
 800e638:	4a10      	ldr	r2, [pc, #64]	; (800e67c <prvCheckForValidListAndQueue+0x64>)
 800e63a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e63c:	4b12      	ldr	r3, [pc, #72]	; (800e688 <prvCheckForValidListAndQueue+0x70>)
 800e63e:	4a10      	ldr	r2, [pc, #64]	; (800e680 <prvCheckForValidListAndQueue+0x68>)
 800e640:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e642:	2300      	movs	r3, #0
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	4b11      	ldr	r3, [pc, #68]	; (800e68c <prvCheckForValidListAndQueue+0x74>)
 800e648:	4a11      	ldr	r2, [pc, #68]	; (800e690 <prvCheckForValidListAndQueue+0x78>)
 800e64a:	2110      	movs	r1, #16
 800e64c:	200a      	movs	r0, #10
 800e64e:	f7fd f9b7 	bl	800b9c0 <xQueueGenericCreateStatic>
 800e652:	4603      	mov	r3, r0
 800e654:	4a08      	ldr	r2, [pc, #32]	; (800e678 <prvCheckForValidListAndQueue+0x60>)
 800e656:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e658:	4b07      	ldr	r3, [pc, #28]	; (800e678 <prvCheckForValidListAndQueue+0x60>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d005      	beq.n	800e66c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e660:	4b05      	ldr	r3, [pc, #20]	; (800e678 <prvCheckForValidListAndQueue+0x60>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	490b      	ldr	r1, [pc, #44]	; (800e694 <prvCheckForValidListAndQueue+0x7c>)
 800e666:	4618      	mov	r0, r3
 800e668:	f7fe f946 	bl	800c8f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e66c:	f000 f972 	bl	800e954 <vPortExitCritical>
}
 800e670:	bf00      	nop
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	2000cff0 	.word	0x2000cff0
 800e67c:	2000cfc0 	.word	0x2000cfc0
 800e680:	2000cfd4 	.word	0x2000cfd4
 800e684:	2000cfe8 	.word	0x2000cfe8
 800e688:	2000cfec 	.word	0x2000cfec
 800e68c:	2000d09c 	.word	0x2000d09c
 800e690:	2000cffc 	.word	0x2000cffc
 800e694:	08011c0c 	.word	0x08011c0c

0800e698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3b04      	subs	r3, #4
 800e6a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3b04      	subs	r3, #4
 800e6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	f023 0201 	bic.w	r2, r3, #1
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	3b04      	subs	r3, #4
 800e6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e6c8:	4a0c      	ldr	r2, [pc, #48]	; (800e6fc <pxPortInitialiseStack+0x64>)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3b14      	subs	r3, #20
 800e6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	3b04      	subs	r3, #4
 800e6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f06f 0202 	mvn.w	r2, #2
 800e6e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	3b20      	subs	r3, #32
 800e6ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	0800e701 	.word	0x0800e701

0800e700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e70a:	4b12      	ldr	r3, [pc, #72]	; (800e754 <prvTaskExitError+0x54>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e712:	d00a      	beq.n	800e72a <prvTaskExitError+0x2a>
	__asm volatile
 800e714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e718:	f383 8811 	msr	BASEPRI, r3
 800e71c:	f3bf 8f6f 	isb	sy
 800e720:	f3bf 8f4f 	dsb	sy
 800e724:	60fb      	str	r3, [r7, #12]
}
 800e726:	bf00      	nop
 800e728:	e7fe      	b.n	800e728 <prvTaskExitError+0x28>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	60bb      	str	r3, [r7, #8]
}
 800e73c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e73e:	bf00      	nop
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d0fc      	beq.n	800e740 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e746:	bf00      	nop
 800e748:	bf00      	nop
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	2000261c 	.word	0x2000261c
	...

0800e760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e760:	4b07      	ldr	r3, [pc, #28]	; (800e780 <pxCurrentTCBConst2>)
 800e762:	6819      	ldr	r1, [r3, #0]
 800e764:	6808      	ldr	r0, [r1, #0]
 800e766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76a:	f380 8809 	msr	PSP, r0
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f04f 0000 	mov.w	r0, #0
 800e776:	f380 8811 	msr	BASEPRI, r0
 800e77a:	4770      	bx	lr
 800e77c:	f3af 8000 	nop.w

0800e780 <pxCurrentTCBConst2>:
 800e780:	2000cac0 	.word	0x2000cac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e784:	bf00      	nop
 800e786:	bf00      	nop

0800e788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e788:	4808      	ldr	r0, [pc, #32]	; (800e7ac <prvPortStartFirstTask+0x24>)
 800e78a:	6800      	ldr	r0, [r0, #0]
 800e78c:	6800      	ldr	r0, [r0, #0]
 800e78e:	f380 8808 	msr	MSP, r0
 800e792:	f04f 0000 	mov.w	r0, #0
 800e796:	f380 8814 	msr	CONTROL, r0
 800e79a:	b662      	cpsie	i
 800e79c:	b661      	cpsie	f
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	df00      	svc	0
 800e7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e7aa:	bf00      	nop
 800e7ac:	e000ed08 	.word	0xe000ed08

0800e7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e7b6:	4b46      	ldr	r3, [pc, #280]	; (800e8d0 <xPortStartScheduler+0x120>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a46      	ldr	r2, [pc, #280]	; (800e8d4 <xPortStartScheduler+0x124>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d10a      	bne.n	800e7d6 <xPortStartScheduler+0x26>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	613b      	str	r3, [r7, #16]
}
 800e7d2:	bf00      	nop
 800e7d4:	e7fe      	b.n	800e7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7d6:	4b3e      	ldr	r3, [pc, #248]	; (800e8d0 <xPortStartScheduler+0x120>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4a3f      	ldr	r2, [pc, #252]	; (800e8d8 <xPortStartScheduler+0x128>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d10a      	bne.n	800e7f6 <xPortStartScheduler+0x46>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	60fb      	str	r3, [r7, #12]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7f6:	4b39      	ldr	r3, [pc, #228]	; (800e8dc <xPortStartScheduler+0x12c>)
 800e7f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	22ff      	movs	r2, #255	; 0xff
 800e806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e810:	78fb      	ldrb	r3, [r7, #3]
 800e812:	b2db      	uxtb	r3, r3
 800e814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	4b31      	ldr	r3, [pc, #196]	; (800e8e0 <xPortStartScheduler+0x130>)
 800e81c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e81e:	4b31      	ldr	r3, [pc, #196]	; (800e8e4 <xPortStartScheduler+0x134>)
 800e820:	2207      	movs	r2, #7
 800e822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e824:	e009      	b.n	800e83a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e826:	4b2f      	ldr	r3, [pc, #188]	; (800e8e4 <xPortStartScheduler+0x134>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	4a2d      	ldr	r2, [pc, #180]	; (800e8e4 <xPortStartScheduler+0x134>)
 800e82e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	b2db      	uxtb	r3, r3
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	b2db      	uxtb	r3, r3
 800e838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e83a:	78fb      	ldrb	r3, [r7, #3]
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e842:	2b80      	cmp	r3, #128	; 0x80
 800e844:	d0ef      	beq.n	800e826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e846:	4b27      	ldr	r3, [pc, #156]	; (800e8e4 <xPortStartScheduler+0x134>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f1c3 0307 	rsb	r3, r3, #7
 800e84e:	2b04      	cmp	r3, #4
 800e850:	d00a      	beq.n	800e868 <xPortStartScheduler+0xb8>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	60bb      	str	r3, [r7, #8]
}
 800e864:	bf00      	nop
 800e866:	e7fe      	b.n	800e866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e868:	4b1e      	ldr	r3, [pc, #120]	; (800e8e4 <xPortStartScheduler+0x134>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	021b      	lsls	r3, r3, #8
 800e86e:	4a1d      	ldr	r2, [pc, #116]	; (800e8e4 <xPortStartScheduler+0x134>)
 800e870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e872:	4b1c      	ldr	r3, [pc, #112]	; (800e8e4 <xPortStartScheduler+0x134>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e87a:	4a1a      	ldr	r2, [pc, #104]	; (800e8e4 <xPortStartScheduler+0x134>)
 800e87c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	b2da      	uxtb	r2, r3
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e886:	4b18      	ldr	r3, [pc, #96]	; (800e8e8 <xPortStartScheduler+0x138>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4a17      	ldr	r2, [pc, #92]	; (800e8e8 <xPortStartScheduler+0x138>)
 800e88c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e892:	4b15      	ldr	r3, [pc, #84]	; (800e8e8 <xPortStartScheduler+0x138>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a14      	ldr	r2, [pc, #80]	; (800e8e8 <xPortStartScheduler+0x138>)
 800e898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e89c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e89e:	f000 f8e5 	bl	800ea6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e8a2:	4b12      	ldr	r3, [pc, #72]	; (800e8ec <xPortStartScheduler+0x13c>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e8a8:	f000 f904 	bl	800eab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e8ac:	4b10      	ldr	r3, [pc, #64]	; (800e8f0 <xPortStartScheduler+0x140>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a0f      	ldr	r2, [pc, #60]	; (800e8f0 <xPortStartScheduler+0x140>)
 800e8b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e8b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e8b8:	f7ff ff66 	bl	800e788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e8bc:	f7fe fca2 	bl	800d204 <vTaskSwitchContext>
	prvTaskExitError();
 800e8c0:	f7ff ff1e 	bl	800e700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3718      	adds	r7, #24
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	e000ed00 	.word	0xe000ed00
 800e8d4:	410fc271 	.word	0x410fc271
 800e8d8:	410fc270 	.word	0x410fc270
 800e8dc:	e000e400 	.word	0xe000e400
 800e8e0:	2000d0ec 	.word	0x2000d0ec
 800e8e4:	2000d0f0 	.word	0x2000d0f0
 800e8e8:	e000ed20 	.word	0xe000ed20
 800e8ec:	2000261c 	.word	0x2000261c
 800e8f0:	e000ef34 	.word	0xe000ef34

0800e8f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	607b      	str	r3, [r7, #4]
}
 800e90c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e90e:	4b0f      	ldr	r3, [pc, #60]	; (800e94c <vPortEnterCritical+0x58>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	3301      	adds	r3, #1
 800e914:	4a0d      	ldr	r2, [pc, #52]	; (800e94c <vPortEnterCritical+0x58>)
 800e916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e918:	4b0c      	ldr	r3, [pc, #48]	; (800e94c <vPortEnterCritical+0x58>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d10f      	bne.n	800e940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e920:	4b0b      	ldr	r3, [pc, #44]	; (800e950 <vPortEnterCritical+0x5c>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00a      	beq.n	800e940 <vPortEnterCritical+0x4c>
	__asm volatile
 800e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	603b      	str	r3, [r7, #0]
}
 800e93c:	bf00      	nop
 800e93e:	e7fe      	b.n	800e93e <vPortEnterCritical+0x4a>
	}
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	2000261c 	.word	0x2000261c
 800e950:	e000ed04 	.word	0xe000ed04

0800e954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e95a:	4b12      	ldr	r3, [pc, #72]	; (800e9a4 <vPortExitCritical+0x50>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10a      	bne.n	800e978 <vPortExitCritical+0x24>
	__asm volatile
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	607b      	str	r3, [r7, #4]
}
 800e974:	bf00      	nop
 800e976:	e7fe      	b.n	800e976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e978:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <vPortExitCritical+0x50>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	3b01      	subs	r3, #1
 800e97e:	4a09      	ldr	r2, [pc, #36]	; (800e9a4 <vPortExitCritical+0x50>)
 800e980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e982:	4b08      	ldr	r3, [pc, #32]	; (800e9a4 <vPortExitCritical+0x50>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d105      	bne.n	800e996 <vPortExitCritical+0x42>
 800e98a:	2300      	movs	r3, #0
 800e98c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	f383 8811 	msr	BASEPRI, r3
}
 800e994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e996:	bf00      	nop
 800e998:	370c      	adds	r7, #12
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	2000261c 	.word	0x2000261c
	...

0800e9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e9b0:	f3ef 8009 	mrs	r0, PSP
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	4b15      	ldr	r3, [pc, #84]	; (800ea10 <pxCurrentTCBConst>)
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	f01e 0f10 	tst.w	lr, #16
 800e9c0:	bf08      	it	eq
 800e9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ca:	6010      	str	r0, [r2, #0]
 800e9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e9d4:	f380 8811 	msr	BASEPRI, r0
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f7fe fc10 	bl	800d204 <vTaskSwitchContext>
 800e9e4:	f04f 0000 	mov.w	r0, #0
 800e9e8:	f380 8811 	msr	BASEPRI, r0
 800e9ec:	bc09      	pop	{r0, r3}
 800e9ee:	6819      	ldr	r1, [r3, #0]
 800e9f0:	6808      	ldr	r0, [r1, #0]
 800e9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f6:	f01e 0f10 	tst.w	lr, #16
 800e9fa:	bf08      	it	eq
 800e9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea00:	f380 8809 	msr	PSP, r0
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	f3af 8000 	nop.w

0800ea10 <pxCurrentTCBConst>:
 800ea10:	2000cac0 	.word	0x2000cac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop

0800ea18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	607b      	str	r3, [r7, #4]
}
 800ea30:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 800ea32:	f001 fe6d 	bl	8010710 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea36:	f7fe fb27 	bl	800d088 <xTaskIncrementTick>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d006      	beq.n	800ea4e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800ea40:	f001 fec4 	bl	80107cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea44:	4b08      	ldr	r3, [pc, #32]	; (800ea68 <xPortSysTickHandler+0x50>)
 800ea46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea4a:	601a      	str	r2, [r3, #0]
 800ea4c:	e001      	b.n	800ea52 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800ea4e:	f001 fea1 	bl	8010794 <SEGGER_SYSVIEW_RecordExitISR>
 800ea52:	2300      	movs	r3, #0
 800ea54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	f383 8811 	msr	BASEPRI, r3
}
 800ea5c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea5e:	bf00      	nop
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	e000ed04 	.word	0xe000ed04

0800ea6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea70:	4b0b      	ldr	r3, [pc, #44]	; (800eaa0 <vPortSetupTimerInterrupt+0x34>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea76:	4b0b      	ldr	r3, [pc, #44]	; (800eaa4 <vPortSetupTimerInterrupt+0x38>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea7c:	4b0a      	ldr	r3, [pc, #40]	; (800eaa8 <vPortSetupTimerInterrupt+0x3c>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a0a      	ldr	r2, [pc, #40]	; (800eaac <vPortSetupTimerInterrupt+0x40>)
 800ea82:	fba2 2303 	umull	r2, r3, r2, r3
 800ea86:	099b      	lsrs	r3, r3, #6
 800ea88:	4a09      	ldr	r2, [pc, #36]	; (800eab0 <vPortSetupTimerInterrupt+0x44>)
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea8e:	4b04      	ldr	r3, [pc, #16]	; (800eaa0 <vPortSetupTimerInterrupt+0x34>)
 800ea90:	2207      	movs	r2, #7
 800ea92:	601a      	str	r2, [r3, #0]
}
 800ea94:	bf00      	nop
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	e000e010 	.word	0xe000e010
 800eaa4:	e000e018 	.word	0xe000e018
 800eaa8:	20002584 	.word	0x20002584
 800eaac:	10624dd3 	.word	0x10624dd3
 800eab0:	e000e014 	.word	0xe000e014

0800eab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eac4 <vPortEnableVFP+0x10>
 800eab8:	6801      	ldr	r1, [r0, #0]
 800eaba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eabe:	6001      	str	r1, [r0, #0]
 800eac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eac2:	bf00      	nop
 800eac4:	e000ed88 	.word	0xe000ed88

0800eac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eace:	f3ef 8305 	mrs	r3, IPSR
 800ead2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b0f      	cmp	r3, #15
 800ead8:	d914      	bls.n	800eb04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eada:	4a17      	ldr	r2, [pc, #92]	; (800eb38 <vPortValidateInterruptPriority+0x70>)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	4413      	add	r3, r2
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eae4:	4b15      	ldr	r3, [pc, #84]	; (800eb3c <vPortValidateInterruptPriority+0x74>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	7afa      	ldrb	r2, [r7, #11]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d20a      	bcs.n	800eb04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	607b      	str	r3, [r7, #4]
}
 800eb00:	bf00      	nop
 800eb02:	e7fe      	b.n	800eb02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb04:	4b0e      	ldr	r3, [pc, #56]	; (800eb40 <vPortValidateInterruptPriority+0x78>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb0c:	4b0d      	ldr	r3, [pc, #52]	; (800eb44 <vPortValidateInterruptPriority+0x7c>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d90a      	bls.n	800eb2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb18:	f383 8811 	msr	BASEPRI, r3
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	603b      	str	r3, [r7, #0]
}
 800eb26:	bf00      	nop
 800eb28:	e7fe      	b.n	800eb28 <vPortValidateInterruptPriority+0x60>
	}
 800eb2a:	bf00      	nop
 800eb2c:	3714      	adds	r7, #20
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	e000e3f0 	.word	0xe000e3f0
 800eb3c:	2000d0ec 	.word	0x2000d0ec
 800eb40:	e000ed0c 	.word	0xe000ed0c
 800eb44:	2000d0f0 	.word	0x2000d0f0

0800eb48 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb4e:	4b1f      	ldr	r3, [pc, #124]	; (800ebcc <vSetVarulMaxPRIGROUPValue+0x84>)
 800eb50:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	22ff      	movs	r2, #255	; 0xff
 800eb56:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb60:	4b1b      	ldr	r3, [pc, #108]	; (800ebd0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800eb62:	2207      	movs	r2, #7
 800eb64:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb66:	e009      	b.n	800eb7c <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 800eb68:	4b19      	ldr	r3, [pc, #100]	; (800ebd0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	4a18      	ldr	r2, [pc, #96]	; (800ebd0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800eb70:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb72:	79fb      	ldrb	r3, [r7, #7]
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	005b      	lsls	r3, r3, #1
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb7c:	79fb      	ldrb	r3, [r7, #7]
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb84:	2b80      	cmp	r3, #128	; 0x80
 800eb86:	d0ef      	beq.n	800eb68 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb88:	4b11      	ldr	r3, [pc, #68]	; (800ebd0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f1c3 0307 	rsb	r3, r3, #7
 800eb90:	2b04      	cmp	r3, #4
 800eb92:	d00a      	beq.n	800ebaa <vSetVarulMaxPRIGROUPValue+0x62>
	__asm volatile
 800eb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	60bb      	str	r3, [r7, #8]
}
 800eba6:	bf00      	nop
 800eba8:	e7fe      	b.n	800eba8 <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ebaa:	4b09      	ldr	r3, [pc, #36]	; (800ebd0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	021b      	lsls	r3, r3, #8
 800ebb0:	4a07      	ldr	r2, [pc, #28]	; (800ebd0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800ebb2:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ebb4:	4b06      	ldr	r3, [pc, #24]	; (800ebd0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebbc:	4a04      	ldr	r2, [pc, #16]	; (800ebd0 <vSetVarulMaxPRIGROUPValue+0x88>)
 800ebbe:	6013      	str	r3, [r2, #0]
}
 800ebc0:	bf00      	nop
 800ebc2:	3714      	adds	r7, #20
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	e000e400 	.word	0xe000e400
 800ebd0:	2000d0f0 	.word	0x2000d0f0

0800ebd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b08a      	sub	sp, #40	; 0x28
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebe0:	f7fe f980 	bl	800cee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebe4:	4b5b      	ldr	r3, [pc, #364]	; (800ed54 <pvPortMalloc+0x180>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d101      	bne.n	800ebf0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebec:	f000 f920 	bl	800ee30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebf0:	4b59      	ldr	r3, [pc, #356]	; (800ed58 <pvPortMalloc+0x184>)
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f040 8093 	bne.w	800ed24 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d01d      	beq.n	800ec40 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ec04:	2208      	movs	r2, #8
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4413      	add	r3, r2
 800ec0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f003 0307 	and.w	r3, r3, #7
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d014      	beq.n	800ec40 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f023 0307 	bic.w	r3, r3, #7
 800ec1c:	3308      	adds	r3, #8
 800ec1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00a      	beq.n	800ec40 <pvPortMalloc+0x6c>
	__asm volatile
 800ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	617b      	str	r3, [r7, #20]
}
 800ec3c:	bf00      	nop
 800ec3e:	e7fe      	b.n	800ec3e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d06e      	beq.n	800ed24 <pvPortMalloc+0x150>
 800ec46:	4b45      	ldr	r3, [pc, #276]	; (800ed5c <pvPortMalloc+0x188>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d869      	bhi.n	800ed24 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec50:	4b43      	ldr	r3, [pc, #268]	; (800ed60 <pvPortMalloc+0x18c>)
 800ec52:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec54:	4b42      	ldr	r3, [pc, #264]	; (800ed60 <pvPortMalloc+0x18c>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec5a:	e004      	b.n	800ec66 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d903      	bls.n	800ec78 <pvPortMalloc+0xa4>
 800ec70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1f1      	bne.n	800ec5c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec78:	4b36      	ldr	r3, [pc, #216]	; (800ed54 <pvPortMalloc+0x180>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d050      	beq.n	800ed24 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec82:	6a3b      	ldr	r3, [r7, #32]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2208      	movs	r2, #8
 800ec88:	4413      	add	r3, r2
 800ec8a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	1ad2      	subs	r2, r2, r3
 800ec9c:	2308      	movs	r3, #8
 800ec9e:	005b      	lsls	r3, r3, #1
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d91f      	bls.n	800ece4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4413      	add	r3, r2
 800ecaa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	f003 0307 	and.w	r3, r3, #7
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00a      	beq.n	800eccc <pvPortMalloc+0xf8>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	613b      	str	r3, [r7, #16]
}
 800ecc8:	bf00      	nop
 800ecca:	e7fe      	b.n	800ecca <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	685a      	ldr	r2, [r3, #4]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	1ad2      	subs	r2, r2, r3
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ecde:	69b8      	ldr	r0, [r7, #24]
 800ece0:	f000 f908 	bl	800eef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ece4:	4b1d      	ldr	r3, [pc, #116]	; (800ed5c <pvPortMalloc+0x188>)
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	1ad3      	subs	r3, r2, r3
 800ecee:	4a1b      	ldr	r2, [pc, #108]	; (800ed5c <pvPortMalloc+0x188>)
 800ecf0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecf2:	4b1a      	ldr	r3, [pc, #104]	; (800ed5c <pvPortMalloc+0x188>)
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	4b1b      	ldr	r3, [pc, #108]	; (800ed64 <pvPortMalloc+0x190>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d203      	bcs.n	800ed06 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ecfe:	4b17      	ldr	r3, [pc, #92]	; (800ed5c <pvPortMalloc+0x188>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4a18      	ldr	r2, [pc, #96]	; (800ed64 <pvPortMalloc+0x190>)
 800ed04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed08:	685a      	ldr	r2, [r3, #4]
 800ed0a:	4b13      	ldr	r3, [pc, #76]	; (800ed58 <pvPortMalloc+0x184>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	431a      	orrs	r2, r3
 800ed10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	2200      	movs	r2, #0
 800ed18:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ed1a:	4b13      	ldr	r3, [pc, #76]	; (800ed68 <pvPortMalloc+0x194>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	4a11      	ldr	r2, [pc, #68]	; (800ed68 <pvPortMalloc+0x194>)
 800ed22:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed24:	f7fe f8ec 	bl	800cf00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	f003 0307 	and.w	r3, r3, #7
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00a      	beq.n	800ed48 <pvPortMalloc+0x174>
	__asm volatile
 800ed32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed36:	f383 8811 	msr	BASEPRI, r3
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	60fb      	str	r3, [r7, #12]
}
 800ed44:	bf00      	nop
 800ed46:	e7fe      	b.n	800ed46 <pvPortMalloc+0x172>
	return pvReturn;
 800ed48:	69fb      	ldr	r3, [r7, #28]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3728      	adds	r7, #40	; 0x28
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	20010cfc 	.word	0x20010cfc
 800ed58:	20010d10 	.word	0x20010d10
 800ed5c:	20010d00 	.word	0x20010d00
 800ed60:	20010cf4 	.word	0x20010cf4
 800ed64:	20010d04 	.word	0x20010d04
 800ed68:	20010d08 	.word	0x20010d08

0800ed6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d04d      	beq.n	800ee1a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed7e:	2308      	movs	r3, #8
 800ed80:	425b      	negs	r3, r3
 800ed82:	697a      	ldr	r2, [r7, #20]
 800ed84:	4413      	add	r3, r2
 800ed86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	685a      	ldr	r2, [r3, #4]
 800ed90:	4b24      	ldr	r3, [pc, #144]	; (800ee24 <vPortFree+0xb8>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4013      	ands	r3, r2
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d10a      	bne.n	800edb0 <vPortFree+0x44>
	__asm volatile
 800ed9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9e:	f383 8811 	msr	BASEPRI, r3
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	f3bf 8f4f 	dsb	sy
 800edaa:	60fb      	str	r3, [r7, #12]
}
 800edac:	bf00      	nop
 800edae:	e7fe      	b.n	800edae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00a      	beq.n	800edce <vPortFree+0x62>
	__asm volatile
 800edb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbc:	f383 8811 	msr	BASEPRI, r3
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	60bb      	str	r3, [r7, #8]
}
 800edca:	bf00      	nop
 800edcc:	e7fe      	b.n	800edcc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	4b14      	ldr	r3, [pc, #80]	; (800ee24 <vPortFree+0xb8>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4013      	ands	r3, r2
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d01e      	beq.n	800ee1a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d11a      	bne.n	800ee1a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	685a      	ldr	r2, [r3, #4]
 800ede8:	4b0e      	ldr	r3, [pc, #56]	; (800ee24 <vPortFree+0xb8>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	43db      	mvns	r3, r3
 800edee:	401a      	ands	r2, r3
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800edf4:	f7fe f876 	bl	800cee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	685a      	ldr	r2, [r3, #4]
 800edfc:	4b0a      	ldr	r3, [pc, #40]	; (800ee28 <vPortFree+0xbc>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4413      	add	r3, r2
 800ee02:	4a09      	ldr	r2, [pc, #36]	; (800ee28 <vPortFree+0xbc>)
 800ee04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee06:	6938      	ldr	r0, [r7, #16]
 800ee08:	f000 f874 	bl	800eef4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ee0c:	4b07      	ldr	r3, [pc, #28]	; (800ee2c <vPortFree+0xc0>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	3301      	adds	r3, #1
 800ee12:	4a06      	ldr	r2, [pc, #24]	; (800ee2c <vPortFree+0xc0>)
 800ee14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ee16:	f7fe f873 	bl	800cf00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee1a:	bf00      	nop
 800ee1c:	3718      	adds	r7, #24
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	20010d10 	.word	0x20010d10
 800ee28:	20010d00 	.word	0x20010d00
 800ee2c:	20010d0c 	.word	0x20010d0c

0800ee30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee30:	b480      	push	{r7}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ee3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee3c:	4b27      	ldr	r3, [pc, #156]	; (800eedc <prvHeapInit+0xac>)
 800ee3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f003 0307 	and.w	r3, r3, #7
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d00c      	beq.n	800ee64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	3307      	adds	r3, #7
 800ee4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f023 0307 	bic.w	r3, r3, #7
 800ee56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	1ad3      	subs	r3, r2, r3
 800ee5e:	4a1f      	ldr	r2, [pc, #124]	; (800eedc <prvHeapInit+0xac>)
 800ee60:	4413      	add	r3, r2
 800ee62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee68:	4a1d      	ldr	r2, [pc, #116]	; (800eee0 <prvHeapInit+0xb0>)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee6e:	4b1c      	ldr	r3, [pc, #112]	; (800eee0 <prvHeapInit+0xb0>)
 800ee70:	2200      	movs	r2, #0
 800ee72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	68ba      	ldr	r2, [r7, #8]
 800ee78:	4413      	add	r3, r2
 800ee7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee7c:	2208      	movs	r2, #8
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	1a9b      	subs	r3, r3, r2
 800ee82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f023 0307 	bic.w	r3, r3, #7
 800ee8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4a15      	ldr	r2, [pc, #84]	; (800eee4 <prvHeapInit+0xb4>)
 800ee90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee92:	4b14      	ldr	r3, [pc, #80]	; (800eee4 <prvHeapInit+0xb4>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2200      	movs	r2, #0
 800ee98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee9a:	4b12      	ldr	r3, [pc, #72]	; (800eee4 <prvHeapInit+0xb4>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	1ad2      	subs	r2, r2, r3
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eeb0:	4b0c      	ldr	r3, [pc, #48]	; (800eee4 <prvHeapInit+0xb4>)
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	4a0a      	ldr	r2, [pc, #40]	; (800eee8 <prvHeapInit+0xb8>)
 800eebe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	4a09      	ldr	r2, [pc, #36]	; (800eeec <prvHeapInit+0xbc>)
 800eec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eec8:	4b09      	ldr	r3, [pc, #36]	; (800eef0 <prvHeapInit+0xc0>)
 800eeca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eece:	601a      	str	r2, [r3, #0]
}
 800eed0:	bf00      	nop
 800eed2:	3714      	adds	r7, #20
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr
 800eedc:	2000d0f4 	.word	0x2000d0f4
 800eee0:	20010cf4 	.word	0x20010cf4
 800eee4:	20010cfc 	.word	0x20010cfc
 800eee8:	20010d04 	.word	0x20010d04
 800eeec:	20010d00 	.word	0x20010d00
 800eef0:	20010d10 	.word	0x20010d10

0800eef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eefc:	4b28      	ldr	r3, [pc, #160]	; (800efa0 <prvInsertBlockIntoFreeList+0xac>)
 800eefe:	60fb      	str	r3, [r7, #12]
 800ef00:	e002      	b.n	800ef08 <prvInsertBlockIntoFreeList+0x14>
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	60fb      	str	r3, [r7, #12]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d8f7      	bhi.n	800ef02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d108      	bne.n	800ef36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	685a      	ldr	r2, [r3, #4]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	441a      	add	r2, r3
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	68ba      	ldr	r2, [r7, #8]
 800ef40:	441a      	add	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d118      	bne.n	800ef7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	4b15      	ldr	r3, [pc, #84]	; (800efa4 <prvInsertBlockIntoFreeList+0xb0>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d00d      	beq.n	800ef72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	685a      	ldr	r2, [r3, #4]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	441a      	add	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	e008      	b.n	800ef84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef72:	4b0c      	ldr	r3, [pc, #48]	; (800efa4 <prvInsertBlockIntoFreeList+0xb0>)
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	601a      	str	r2, [r3, #0]
 800ef7a:	e003      	b.n	800ef84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d002      	beq.n	800ef92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef92:	bf00      	nop
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	20010cf4 	.word	0x20010cf4
 800efa4:	20010cfc 	.word	0x20010cfc

0800efa8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800efa8:	b580      	push	{r7, lr}
 800efaa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800efac:	4803      	ldr	r0, [pc, #12]	; (800efbc <_cbSendSystemDesc+0x14>)
 800efae:	f001 fb59 	bl	8010664 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick,I#56=VSYNC_Callback,I#72=SPI_RxCpltCallback");
 800efb2:	4803      	ldr	r0, [pc, #12]	; (800efc0 <_cbSendSystemDesc+0x18>)
 800efb4:	f001 fb56 	bl	8010664 <SEGGER_SYSVIEW_SendSysDesc>
}
 800efb8:	bf00      	nop
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	08011c14 	.word	0x08011c14
 800efc0:	08011c50 	.word	0x08011c50

0800efc4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800efc4:	b580      	push	{r7, lr}
 800efc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800efc8:	4b06      	ldr	r3, [pc, #24]	; (800efe4 <SEGGER_SYSVIEW_Conf+0x20>)
 800efca:	6818      	ldr	r0, [r3, #0]
 800efcc:	4b05      	ldr	r3, [pc, #20]	; (800efe4 <SEGGER_SYSVIEW_Conf+0x20>)
 800efce:	6819      	ldr	r1, [r3, #0]
 800efd0:	4b05      	ldr	r3, [pc, #20]	; (800efe8 <SEGGER_SYSVIEW_Conf+0x24>)
 800efd2:	4a06      	ldr	r2, [pc, #24]	; (800efec <SEGGER_SYSVIEW_Conf+0x28>)
 800efd4:	f000 fe16 	bl	800fc04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800efd8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800efdc:	f000 fe56 	bl	800fc8c <SEGGER_SYSVIEW_SetRAMBase>
}
 800efe0:	bf00      	nop
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	20002584 	.word	0x20002584
 800efe8:	0800efa9 	.word	0x0800efa9
 800efec:	08011dac 	.word	0x08011dac

0800eff0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800eff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800eff6:	2300      	movs	r3, #0
 800eff8:	607b      	str	r3, [r7, #4]
 800effa:	e048      	b.n	800f08e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800effc:	4929      	ldr	r1, [pc, #164]	; (800f0a4 <_cbSendTaskList+0xb4>)
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	4613      	mov	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4413      	add	r3, r2
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	440b      	add	r3, r1
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe fb53 	bl	800d6b8 <uxTaskGetStackHighWaterMark>
 800f012:	4601      	mov	r1, r0
 800f014:	4823      	ldr	r0, [pc, #140]	; (800f0a4 <_cbSendTaskList+0xb4>)
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	4613      	mov	r3, r2
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	4413      	add	r3, r2
 800f01e:	009b      	lsls	r3, r3, #2
 800f020:	4403      	add	r3, r0
 800f022:	3310      	adds	r3, #16
 800f024:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800f026:	491f      	ldr	r1, [pc, #124]	; (800f0a4 <_cbSendTaskList+0xb4>)
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	4613      	mov	r3, r2
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	4413      	add	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	440b      	add	r3, r1
 800f034:	6818      	ldr	r0, [r3, #0]
 800f036:	491b      	ldr	r1, [pc, #108]	; (800f0a4 <_cbSendTaskList+0xb4>)
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	4613      	mov	r3, r2
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	4413      	add	r3, r2
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	440b      	add	r3, r1
 800f044:	3304      	adds	r3, #4
 800f046:	6819      	ldr	r1, [r3, #0]
 800f048:	4c16      	ldr	r4, [pc, #88]	; (800f0a4 <_cbSendTaskList+0xb4>)
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	4613      	mov	r3, r2
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	4413      	add	r3, r2
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	4423      	add	r3, r4
 800f056:	3308      	adds	r3, #8
 800f058:	681c      	ldr	r4, [r3, #0]
 800f05a:	4d12      	ldr	r5, [pc, #72]	; (800f0a4 <_cbSendTaskList+0xb4>)
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	4613      	mov	r3, r2
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	4413      	add	r3, r2
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	442b      	add	r3, r5
 800f068:	330c      	adds	r3, #12
 800f06a:	681d      	ldr	r5, [r3, #0]
 800f06c:	4e0d      	ldr	r6, [pc, #52]	; (800f0a4 <_cbSendTaskList+0xb4>)
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	4613      	mov	r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	4433      	add	r3, r6
 800f07a:	3310      	adds	r3, #16
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	462b      	mov	r3, r5
 800f082:	4622      	mov	r2, r4
 800f084:	f000 f8be 	bl	800f204 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	3301      	adds	r3, #1
 800f08c:	607b      	str	r3, [r7, #4]
 800f08e:	4b06      	ldr	r3, [pc, #24]	; (800f0a8 <_cbSendTaskList+0xb8>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	429a      	cmp	r2, r3
 800f096:	d3b1      	bcc.n	800effc <_cbSendTaskList+0xc>
  }
}
 800f098:	bf00      	nop
 800f09a:	bf00      	nop
 800f09c:	370c      	adds	r7, #12
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	20010d14 	.word	0x20010d14
 800f0a8:	20010db4 	.word	0x20010db4

0800f0ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800f0ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f0b0:	b082      	sub	sp, #8
 800f0b2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800f0b4:	f7fd ffd6 	bl	800d064 <xTaskGetTickCountFromISR>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	469a      	mov	sl, r3
 800f0be:	4693      	mov	fp, r2
 800f0c0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800f0c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	f04f 0a00 	mov.w	sl, #0
 800f0d0:	f04f 0b00 	mov.w	fp, #0
 800f0d4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f0d8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800f0dc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800f0e0:	4652      	mov	r2, sl
 800f0e2:	465b      	mov	r3, fp
 800f0e4:	1a14      	subs	r4, r2, r0
 800f0e6:	eb63 0501 	sbc.w	r5, r3, r1
 800f0ea:	f04f 0200 	mov.w	r2, #0
 800f0ee:	f04f 0300 	mov.w	r3, #0
 800f0f2:	00ab      	lsls	r3, r5, #2
 800f0f4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f0f8:	00a2      	lsls	r2, r4, #2
 800f0fa:	4614      	mov	r4, r2
 800f0fc:	461d      	mov	r5, r3
 800f0fe:	eb14 0800 	adds.w	r8, r4, r0
 800f102:	eb45 0901 	adc.w	r9, r5, r1
 800f106:	f04f 0200 	mov.w	r2, #0
 800f10a:	f04f 0300 	mov.w	r3, #0
 800f10e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f11a:	4690      	mov	r8, r2
 800f11c:	4699      	mov	r9, r3
 800f11e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800f122:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800f126:	4610      	mov	r0, r2
 800f128:	4619      	mov	r1, r3
 800f12a:	3708      	adds	r7, #8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800f134 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800f134:	b580      	push	{r7, lr}
 800f136:	b086      	sub	sp, #24
 800f138:	af02      	add	r7, sp, #8
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
 800f140:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800f142:	2205      	movs	r2, #5
 800f144:	492b      	ldr	r1, [pc, #172]	; (800f1f4 <SYSVIEW_AddTask+0xc0>)
 800f146:	68b8      	ldr	r0, [r7, #8]
 800f148:	f002 fbb2 	bl	80118b0 <memcmp>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d04b      	beq.n	800f1ea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800f152:	4b29      	ldr	r3, [pc, #164]	; (800f1f8 <SYSVIEW_AddTask+0xc4>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b07      	cmp	r3, #7
 800f158:	d903      	bls.n	800f162 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800f15a:	4828      	ldr	r0, [pc, #160]	; (800f1fc <SYSVIEW_AddTask+0xc8>)
 800f15c:	f001 fd80 	bl	8010c60 <SEGGER_SYSVIEW_Warn>
    return;
 800f160:	e044      	b.n	800f1ec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800f162:	4b25      	ldr	r3, [pc, #148]	; (800f1f8 <SYSVIEW_AddTask+0xc4>)
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	4926      	ldr	r1, [pc, #152]	; (800f200 <SYSVIEW_AddTask+0xcc>)
 800f168:	4613      	mov	r3, r2
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	4413      	add	r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	440b      	add	r3, r1
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800f176:	4b20      	ldr	r3, [pc, #128]	; (800f1f8 <SYSVIEW_AddTask+0xc4>)
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	4921      	ldr	r1, [pc, #132]	; (800f200 <SYSVIEW_AddTask+0xcc>)
 800f17c:	4613      	mov	r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	4413      	add	r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	440b      	add	r3, r1
 800f186:	3304      	adds	r3, #4
 800f188:	68ba      	ldr	r2, [r7, #8]
 800f18a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800f18c:	4b1a      	ldr	r3, [pc, #104]	; (800f1f8 <SYSVIEW_AddTask+0xc4>)
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	491b      	ldr	r1, [pc, #108]	; (800f200 <SYSVIEW_AddTask+0xcc>)
 800f192:	4613      	mov	r3, r2
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	4413      	add	r3, r2
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	440b      	add	r3, r1
 800f19c:	3308      	adds	r3, #8
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800f1a2:	4b15      	ldr	r3, [pc, #84]	; (800f1f8 <SYSVIEW_AddTask+0xc4>)
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	4916      	ldr	r1, [pc, #88]	; (800f200 <SYSVIEW_AddTask+0xcc>)
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	009b      	lsls	r3, r3, #2
 800f1ac:	4413      	add	r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	440b      	add	r3, r1
 800f1b2:	330c      	adds	r3, #12
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800f1b8:	4b0f      	ldr	r3, [pc, #60]	; (800f1f8 <SYSVIEW_AddTask+0xc4>)
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	4910      	ldr	r1, [pc, #64]	; (800f200 <SYSVIEW_AddTask+0xcc>)
 800f1be:	4613      	mov	r3, r2
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	4413      	add	r3, r2
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	440b      	add	r3, r1
 800f1c8:	3310      	adds	r3, #16
 800f1ca:	69ba      	ldr	r2, [r7, #24]
 800f1cc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800f1ce:	4b0a      	ldr	r3, [pc, #40]	; (800f1f8 <SYSVIEW_AddTask+0xc4>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	4a08      	ldr	r2, [pc, #32]	; (800f1f8 <SYSVIEW_AddTask+0xc4>)
 800f1d6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	9300      	str	r3, [sp, #0]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	68b9      	ldr	r1, [r7, #8]
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f000 f80e 	bl	800f204 <SYSVIEW_SendTaskInfo>
 800f1e8:	e000      	b.n	800f1ec <SYSVIEW_AddTask+0xb8>
    return;
 800f1ea:	bf00      	nop

}
 800f1ec:	3710      	adds	r7, #16
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	08011c8c 	.word	0x08011c8c
 800f1f8:	20010db4 	.word	0x20010db4
 800f1fc:	08011c94 	.word	0x08011c94
 800f200:	20010d14 	.word	0x20010d14

0800f204 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800f204:	b580      	push	{r7, lr}
 800f206:	b08a      	sub	sp, #40	; 0x28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
 800f210:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800f212:	f107 0314 	add.w	r3, r7, #20
 800f216:	2214      	movs	r2, #20
 800f218:	2100      	movs	r1, #0
 800f21a:	4618      	mov	r0, r3
 800f21c:	f002 fb66 	bl	80118ec <memset>
  TaskInfo.TaskID     = TaskID;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800f230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f232:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800f234:	f107 0314 	add.w	r3, r7, #20
 800f238:	4618      	mov	r0, r3
 800f23a:	f001 f91b 	bl	8010474 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800f23e:	bf00      	nop
 800f240:	3728      	adds	r7, #40	; 0x28
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
	...

0800f248 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800f24e:	4b26      	ldr	r3, [pc, #152]	; (800f2e8 <_DoInit+0xa0>)
 800f250:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800f252:	22a8      	movs	r2, #168	; 0xa8
 800f254:	2100      	movs	r1, #0
 800f256:	6838      	ldr	r0, [r7, #0]
 800f258:	f002 fb48 	bl	80118ec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	2203      	movs	r2, #3
 800f260:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2203      	movs	r2, #3
 800f266:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	4a20      	ldr	r2, [pc, #128]	; (800f2ec <_DoInit+0xa4>)
 800f26c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	4a1f      	ldr	r2, [pc, #124]	; (800f2f0 <_DoInit+0xa8>)
 800f272:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f27a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2200      	movs	r2, #0
 800f280:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	2200      	movs	r2, #0
 800f286:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	2200      	movs	r2, #0
 800f28c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	4a16      	ldr	r2, [pc, #88]	; (800f2ec <_DoInit+0xa4>)
 800f292:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	4a17      	ldr	r2, [pc, #92]	; (800f2f4 <_DoInit+0xac>)
 800f298:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	2210      	movs	r2, #16
 800f29e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800f2b2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	607b      	str	r3, [r7, #4]
 800f2ba:	e00c      	b.n	800f2d6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f1c3 030f 	rsb	r3, r3, #15
 800f2c2:	4a0d      	ldr	r2, [pc, #52]	; (800f2f8 <_DoInit+0xb0>)
 800f2c4:	5cd1      	ldrb	r1, [r2, r3]
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4413      	add	r3, r2
 800f2cc:	460a      	mov	r2, r1
 800f2ce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	607b      	str	r3, [r7, #4]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b0f      	cmp	r3, #15
 800f2da:	d9ef      	bls.n	800f2bc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800f2dc:	f3bf 8f5f 	dmb	sy
}
 800f2e0:	bf00      	nop
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	20010db8 	.word	0x20010db8
 800f2ec:	08011ce4 	.word	0x08011ce4
 800f2f0:	20010e60 	.word	0x20010e60
 800f2f4:	20011260 	.word	0x20011260
 800f2f8:	08011db4 	.word	0x08011db4

0800f2fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08c      	sub	sp, #48	; 0x30
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800f308:	4b3e      	ldr	r3, [pc, #248]	; (800f404 <SEGGER_RTT_ReadNoLock+0x108>)
 800f30a:	623b      	str	r3, [r7, #32]
 800f30c:	6a3b      	ldr	r3, [r7, #32]
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	b2db      	uxtb	r3, r3
 800f312:	2b00      	cmp	r3, #0
 800f314:	d101      	bne.n	800f31a <SEGGER_RTT_ReadNoLock+0x1e>
 800f316:	f7ff ff97 	bl	800f248 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	4613      	mov	r3, r2
 800f31e:	005b      	lsls	r3, r3, #1
 800f320:	4413      	add	r3, r2
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	3360      	adds	r3, #96	; 0x60
 800f326:	4a37      	ldr	r2, [pc, #220]	; (800f404 <SEGGER_RTT_ReadNoLock+0x108>)
 800f328:	4413      	add	r3, r2
 800f32a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800f33c:	2300      	movs	r3, #0
 800f33e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800f340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	429a      	cmp	r2, r3
 800f346:	d92b      	bls.n	800f3a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	689a      	ldr	r2, [r3, #8]
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800f352:	697a      	ldr	r2, [r7, #20]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4293      	cmp	r3, r2
 800f358:	bf28      	it	cs
 800f35a:	4613      	movcs	r3, r2
 800f35c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f364:	4413      	add	r3, r2
 800f366:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800f368:	697a      	ldr	r2, [r7, #20]
 800f36a:	6939      	ldr	r1, [r7, #16]
 800f36c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f36e:	f002 faaf 	bl	80118d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800f372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	4413      	add	r3, r2
 800f378:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800f37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	4413      	add	r3, r2
 800f380:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800f38a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	4413      	add	r3, r2
 800f390:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f398:	429a      	cmp	r2, r3
 800f39a:	d101      	bne.n	800f3a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800f39c:	2300      	movs	r3, #0
 800f39e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800f3a0:	69ba      	ldr	r2, [r7, #24]
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800f3a8:	697a      	ldr	r2, [r7, #20]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	bf28      	it	cs
 800f3b0:	4613      	movcs	r3, r2
 800f3b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d019      	beq.n	800f3ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	4413      	add	r3, r2
 800f3c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	6939      	ldr	r1, [r7, #16]
 800f3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3ca:	f002 fa81 	bl	80118d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800f3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800f3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	4413      	add	r3, r2
 800f3dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800f3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800f3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d002      	beq.n	800f3fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3730      	adds	r7, #48	; 0x30
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	20010db8 	.word	0x20010db8

0800f408 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08c      	sub	sp, #48	; 0x30
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	62fb      	str	r3, [r7, #44]	; 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	4613      	mov	r3, r2
 800f41e:	005b      	lsls	r3, r3, #1
 800f420:	4413      	add	r3, r2
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	4a38      	ldr	r2, [pc, #224]	; (800f508 <SEGGER_RTT_WriteSkipNoLock+0x100>)
 800f426:	4413      	add	r3, r2
 800f428:	62bb      	str	r3, [r7, #40]	; 0x28
  RdOff = pRing->RdOff;
 800f42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42c:	691b      	ldr	r3, [r3, #16]
 800f42e:	627b      	str	r3, [r7, #36]	; 0x24
  WrOff = pRing->WrOff;
 800f430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	623b      	str	r3, [r7, #32]
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800f436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f438:	685a      	ldr	r2, [r3, #4]
 800f43a:	6a3b      	ldr	r3, [r7, #32]
 800f43c:	4413      	add	r3, r2
 800f43e:	61fb      	str	r3, [r7, #28]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 800f440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f442:	6a3b      	ldr	r3, [r7, #32]
 800f444:	429a      	cmp	r2, r3
 800f446:	d842      	bhi.n	800f4ce <SEGGER_RTT_WriteSkipNoLock+0xc6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800f448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44a:	689a      	ldr	r2, [r3, #8]
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	1ad3      	subs	r3, r2, r3
 800f450:	3b01      	subs	r3, #1
 800f452:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 1)?
 800f454:	69ba      	ldr	r2, [r7, #24]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d30d      	bcc.n	800f478 <SEGGER_RTT_WriteSkipNoLock+0x70>
      memcpy((void*)pDst, pData, NumBytes);
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f460:	69f8      	ldr	r0, [r7, #28]
 800f462:	f002 fa35 	bl	80118d0 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f466:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 800f46a:	6a3a      	ldr	r2, [r7, #32]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	441a      	add	r2, r3
 800f470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f472:	60da      	str	r2, [r3, #12]
      return 1;
 800f474:	2301      	movs	r3, #1
 800f476:	e042      	b.n	800f4fe <SEGGER_RTT_WriteSkipNoLock+0xf6>
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 800f478:	69ba      	ldr	r2, [r7, #24]
 800f47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47c:	4413      	add	r3, r2
 800f47e:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 800f480:	69ba      	ldr	r2, [r7, #24]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	429a      	cmp	r2, r3
 800f486:	d339      	bcc.n	800f4fc <SEGGER_RTT_WriteSkipNoLock+0xf4>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 800f488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48a:	689a      	ldr	r2, [r3, #8]
 800f48c:	6a3b      	ldr	r3, [r7, #32]
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f496:	69f8      	ldr	r0, [r7, #28]
 800f498:	f002 fa1a 	bl	80118d0 <memcpy>
      NumBytes -= Rem;
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	607b      	str	r3, [r7, #4]
      // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
      // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
      // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00a      	beq.n	800f4c0 <SEGGER_RTT_WriteSkipNoLock+0xb8>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800f4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	61fb      	str	r3, [r7, #28]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 800f4b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	69f8      	ldr	r0, [r7, #28]
 800f4bc:	f002 fa08 	bl	80118d0 <memcpy>
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f4c0:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = NumBytes;
 800f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	60da      	str	r2, [r3, #12]
      return 1;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e017      	b.n	800f4fe <SEGGER_RTT_WriteSkipNoLock+0xf6>
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
 800f4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4d0:	6a3b      	ldr	r3, [r7, #32]
 800f4d2:	1ad3      	subs	r3, r2, r3
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 800f4d8:	69ba      	ldr	r2, [r7, #24]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d30d      	bcc.n	800f4fc <SEGGER_RTT_WriteSkipNoLock+0xf4>
      memcpy((void*)pDst, pData, NumBytes);
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4e4:	69f8      	ldr	r0, [r7, #28]
 800f4e6:	f002 f9f3 	bl	80118d0 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f4ea:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 800f4ee:	6a3a      	ldr	r2, [r7, #32]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	441a      	add	r2, r3
 800f4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f6:	60da      	str	r2, [r3, #12]
      return 1;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e000      	b.n	800f4fe <SEGGER_RTT_WriteSkipNoLock+0xf6>
    }
  }
  return 0;     // No space in buffer
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3730      	adds	r7, #48	; 0x30
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	20010db8 	.word	0x20010db8

0800f50c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b088      	sub	sp, #32
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
 800f518:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800f51a:	4b3d      	ldr	r3, [pc, #244]	; (800f610 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800f51c:	61bb      	str	r3, [r7, #24]
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	b2db      	uxtb	r3, r3
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <SEGGER_RTT_AllocUpBuffer+0x20>
 800f528:	f7ff fe8e 	bl	800f248 <_DoInit>
  SEGGER_RTT_LOCK();
 800f52c:	f3ef 8311 	mrs	r3, BASEPRI
 800f530:	f04f 0120 	mov.w	r1, #32
 800f534:	f381 8811 	msr	BASEPRI, r1
 800f538:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800f53a:	4b35      	ldr	r3, [pc, #212]	; (800f610 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800f53c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800f542:	6939      	ldr	r1, [r7, #16]
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	4613      	mov	r3, r2
 800f54a:	005b      	lsls	r3, r3, #1
 800f54c:	4413      	add	r3, r2
 800f54e:	00db      	lsls	r3, r3, #3
 800f550:	440b      	add	r3, r1
 800f552:	3304      	adds	r3, #4
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d008      	beq.n	800f56c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	3301      	adds	r3, #1
 800f55e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	69fa      	ldr	r2, [r7, #28]
 800f566:	429a      	cmp	r2, r3
 800f568:	dbeb      	blt.n	800f542 <SEGGER_RTT_AllocUpBuffer+0x36>
 800f56a:	e000      	b.n	800f56e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800f56c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	691b      	ldr	r3, [r3, #16]
 800f572:	69fa      	ldr	r2, [r7, #28]
 800f574:	429a      	cmp	r2, r3
 800f576:	da3f      	bge.n	800f5f8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800f578:	6939      	ldr	r1, [r7, #16]
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	1c5a      	adds	r2, r3, #1
 800f57e:	4613      	mov	r3, r2
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	4413      	add	r3, r2
 800f584:	00db      	lsls	r3, r3, #3
 800f586:	440b      	add	r3, r1
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800f58c:	6939      	ldr	r1, [r7, #16]
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	1c5a      	adds	r2, r3, #1
 800f592:	4613      	mov	r3, r2
 800f594:	005b      	lsls	r3, r3, #1
 800f596:	4413      	add	r3, r2
 800f598:	00db      	lsls	r3, r3, #3
 800f59a:	440b      	add	r3, r1
 800f59c:	3304      	adds	r3, #4
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800f5a2:	6939      	ldr	r1, [r7, #16]
 800f5a4:	69fa      	ldr	r2, [r7, #28]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	005b      	lsls	r3, r3, #1
 800f5aa:	4413      	add	r3, r2
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	440b      	add	r3, r1
 800f5b0:	3320      	adds	r3, #32
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800f5b6:	6939      	ldr	r1, [r7, #16]
 800f5b8:	69fa      	ldr	r2, [r7, #28]
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	005b      	lsls	r3, r3, #1
 800f5be:	4413      	add	r3, r2
 800f5c0:	00db      	lsls	r3, r3, #3
 800f5c2:	440b      	add	r3, r1
 800f5c4:	3328      	adds	r3, #40	; 0x28
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800f5ca:	6939      	ldr	r1, [r7, #16]
 800f5cc:	69fa      	ldr	r2, [r7, #28]
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	005b      	lsls	r3, r3, #1
 800f5d2:	4413      	add	r3, r2
 800f5d4:	00db      	lsls	r3, r3, #3
 800f5d6:	440b      	add	r3, r1
 800f5d8:	3324      	adds	r3, #36	; 0x24
 800f5da:	2200      	movs	r2, #0
 800f5dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800f5de:	6939      	ldr	r1, [r7, #16]
 800f5e0:	69fa      	ldr	r2, [r7, #28]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	4413      	add	r3, r2
 800f5e8:	00db      	lsls	r3, r3, #3
 800f5ea:	440b      	add	r3, r1
 800f5ec:	332c      	adds	r3, #44	; 0x2c
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f5f2:	f3bf 8f5f 	dmb	sy
 800f5f6:	e002      	b.n	800f5fe <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800f5f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5fc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800f604:	69fb      	ldr	r3, [r7, #28]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3720      	adds	r7, #32
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	20010db8 	.word	0x20010db8

0800f614 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800f614:	b580      	push	{r7, lr}
 800f616:	b08a      	sub	sp, #40	; 0x28
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
 800f620:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800f622:	4b21      	ldr	r3, [pc, #132]	; (800f6a8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800f624:	623b      	str	r3, [r7, #32]
 800f626:	6a3b      	ldr	r3, [r7, #32]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d101      	bne.n	800f634 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800f630:	f7ff fe0a 	bl	800f248 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800f634:	4b1c      	ldr	r3, [pc, #112]	; (800f6a8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800f636:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2b02      	cmp	r3, #2
 800f63c:	d82c      	bhi.n	800f698 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800f63e:	f3ef 8311 	mrs	r3, BASEPRI
 800f642:	f04f 0120 	mov.w	r1, #32
 800f646:	f381 8811 	msr	BASEPRI, r1
 800f64a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	4613      	mov	r3, r2
 800f650:	005b      	lsls	r3, r3, #1
 800f652:	4413      	add	r3, r2
 800f654:	00db      	lsls	r3, r3, #3
 800f656:	3360      	adds	r3, #96	; 0x60
 800f658:	69fa      	ldr	r2, [r7, #28]
 800f65a:	4413      	add	r3, r2
 800f65c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d00e      	beq.n	800f682 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2200      	movs	r2, #0
 800f67a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2200      	movs	r2, #0
 800f680:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f686:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f688:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800f692:	2300      	movs	r3, #0
 800f694:	627b      	str	r3, [r7, #36]	; 0x24
 800f696:	e002      	b.n	800f69e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800f698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f69c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3728      	adds	r7, #40	; 0x28
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	20010db8 	.word	0x20010db8

0800f6ac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800f6ac:	b480      	push	{r7}
 800f6ae:	b087      	sub	sp, #28
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00f      	beq.n	800f6e2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800f6c2:	e002      	b.n	800f6ca <_EncodeStr+0x1e>
      Len++;
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1f6      	bne.n	800f6c4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800f6d6:	693a      	ldr	r2, [r7, #16]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d901      	bls.n	800f6e2 <_EncodeStr+0x36>
      Len = Limit;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	2bfe      	cmp	r3, #254	; 0xfe
 800f6e6:	d806      	bhi.n	800f6f6 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	1c5a      	adds	r2, r3, #1
 800f6ec:	60fa      	str	r2, [r7, #12]
 800f6ee:	693a      	ldr	r2, [r7, #16]
 800f6f0:	b2d2      	uxtb	r2, r2
 800f6f2:	701a      	strb	r2, [r3, #0]
 800f6f4:	e011      	b.n	800f71a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	1c5a      	adds	r2, r3, #1
 800f6fa:	60fa      	str	r2, [r7, #12]
 800f6fc:	22ff      	movs	r2, #255	; 0xff
 800f6fe:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	1c5a      	adds	r2, r3, #1
 800f704:	60fa      	str	r2, [r7, #12]
 800f706:	693a      	ldr	r2, [r7, #16]
 800f708:	b2d2      	uxtb	r2, r2
 800f70a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	0a19      	lsrs	r1, r3, #8
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	60fa      	str	r2, [r7, #12]
 800f716:	b2ca      	uxtb	r2, r1
 800f718:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800f71a:	2300      	movs	r3, #0
 800f71c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800f71e:	e00a      	b.n	800f736 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	1c53      	adds	r3, r2, #1
 800f724:	60bb      	str	r3, [r7, #8]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	1c59      	adds	r1, r3, #1
 800f72a:	60f9      	str	r1, [r7, #12]
 800f72c:	7812      	ldrb	r2, [r2, #0]
 800f72e:	701a      	strb	r2, [r3, #0]
    n++;
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	3301      	adds	r3, #1
 800f734:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800f736:	697a      	ldr	r2, [r7, #20]
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d3f0      	bcc.n	800f720 <_EncodeStr+0x74>
  }
  return pPayload;
 800f73e:	68fb      	ldr	r3, [r7, #12]
}
 800f740:	4618      	mov	r0, r3
 800f742:	371c      	adds	r7, #28
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	3307      	adds	r3, #7
}
 800f758:	4618      	mov	r0, r3
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f76a:	4b35      	ldr	r3, [pc, #212]	; (800f840 <_HandleIncomingPacket+0xdc>)
 800f76c:	7e1b      	ldrb	r3, [r3, #24]
 800f76e:	4618      	mov	r0, r3
 800f770:	1cfb      	adds	r3, r7, #3
 800f772:	2201      	movs	r2, #1
 800f774:	4619      	mov	r1, r3
 800f776:	f7ff fdc1 	bl	800f2fc <SEGGER_RTT_ReadNoLock>
 800f77a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d052      	beq.n	800f828 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800f782:	78fb      	ldrb	r3, [r7, #3]
 800f784:	2b80      	cmp	r3, #128	; 0x80
 800f786:	d031      	beq.n	800f7ec <_HandleIncomingPacket+0x88>
 800f788:	2b80      	cmp	r3, #128	; 0x80
 800f78a:	dc40      	bgt.n	800f80e <_HandleIncomingPacket+0xaa>
 800f78c:	2b07      	cmp	r3, #7
 800f78e:	dc15      	bgt.n	800f7bc <_HandleIncomingPacket+0x58>
 800f790:	2b00      	cmp	r3, #0
 800f792:	dd3c      	ble.n	800f80e <_HandleIncomingPacket+0xaa>
 800f794:	3b01      	subs	r3, #1
 800f796:	2b06      	cmp	r3, #6
 800f798:	d839      	bhi.n	800f80e <_HandleIncomingPacket+0xaa>
 800f79a:	a201      	add	r2, pc, #4	; (adr r2, 800f7a0 <_HandleIncomingPacket+0x3c>)
 800f79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a0:	0800f7c3 	.word	0x0800f7c3
 800f7a4:	0800f7c9 	.word	0x0800f7c9
 800f7a8:	0800f7cf 	.word	0x0800f7cf
 800f7ac:	0800f7d5 	.word	0x0800f7d5
 800f7b0:	0800f7db 	.word	0x0800f7db
 800f7b4:	0800f7e1 	.word	0x0800f7e1
 800f7b8:	0800f7e7 	.word	0x0800f7e7
 800f7bc:	2b7f      	cmp	r3, #127	; 0x7f
 800f7be:	d035      	beq.n	800f82c <_HandleIncomingPacket+0xc8>
 800f7c0:	e025      	b.n	800f80e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800f7c2:	f000 fcdd 	bl	8010180 <SEGGER_SYSVIEW_Start>
      break;
 800f7c6:	e036      	b.n	800f836 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800f7c8:	f000 fd94 	bl	80102f4 <SEGGER_SYSVIEW_Stop>
      break;
 800f7cc:	e033      	b.n	800f836 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800f7ce:	f000 ff6d 	bl	80106ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 800f7d2:	e030      	b.n	800f836 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800f7d4:	f000 ff32 	bl	801063c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800f7d8:	e02d      	b.n	800f836 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800f7da:	f000 fdb1 	bl	8010340 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800f7de:	e02a      	b.n	800f836 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800f7e0:	f001 fa00 	bl	8010be4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800f7e4:	e027      	b.n	800f836 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800f7e6:	f001 f9df 	bl	8010ba8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800f7ea:	e024      	b.n	800f836 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f7ec:	4b14      	ldr	r3, [pc, #80]	; (800f840 <_HandleIncomingPacket+0xdc>)
 800f7ee:	7e1b      	ldrb	r3, [r3, #24]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	1cfb      	adds	r3, r7, #3
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	f7ff fd80 	bl	800f2fc <SEGGER_RTT_ReadNoLock>
 800f7fc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d015      	beq.n	800f830 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800f804:	78fb      	ldrb	r3, [r7, #3]
 800f806:	4618      	mov	r0, r3
 800f808:	f001 f94e 	bl	8010aa8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800f80c:	e010      	b.n	800f830 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800f80e:	78fb      	ldrb	r3, [r7, #3]
 800f810:	b25b      	sxtb	r3, r3
 800f812:	2b00      	cmp	r3, #0
 800f814:	da0e      	bge.n	800f834 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f816:	4b0a      	ldr	r3, [pc, #40]	; (800f840 <_HandleIncomingPacket+0xdc>)
 800f818:	7e1b      	ldrb	r3, [r3, #24]
 800f81a:	4618      	mov	r0, r3
 800f81c:	1cfb      	adds	r3, r7, #3
 800f81e:	2201      	movs	r2, #1
 800f820:	4619      	mov	r1, r3
 800f822:	f7ff fd6b 	bl	800f2fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800f826:	e005      	b.n	800f834 <_HandleIncomingPacket+0xd0>
    }
  }
 800f828:	bf00      	nop
 800f82a:	e004      	b.n	800f836 <_HandleIncomingPacket+0xd2>
      break;
 800f82c:	bf00      	nop
 800f82e:	e002      	b.n	800f836 <_HandleIncomingPacket+0xd2>
      break;
 800f830:	bf00      	nop
 800f832:	e000      	b.n	800f836 <_HandleIncomingPacket+0xd2>
      break;
 800f834:	bf00      	nop
}
 800f836:	bf00      	nop
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	20011678 	.word	0x20011678

0800f844 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800f844:	b580      	push	{r7, lr}
 800f846:	b08c      	sub	sp, #48	; 0x30
 800f848:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800f84a:	2301      	movs	r3, #1
 800f84c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800f84e:	1d3b      	adds	r3, r7, #4
 800f850:	3301      	adds	r3, #1
 800f852:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f858:	4b31      	ldr	r3, [pc, #196]	; (800f920 <_TrySendOverflowPacket+0xdc>)
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f85e:	e00b      	b.n	800f878 <_TrySendOverflowPacket+0x34>
 800f860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f862:	b2da      	uxtb	r2, r3
 800f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f866:	1c59      	adds	r1, r3, #1
 800f868:	62f9      	str	r1, [r7, #44]	; 0x2c
 800f86a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f86e:	b2d2      	uxtb	r2, r2
 800f870:	701a      	strb	r2, [r3, #0]
 800f872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f874:	09db      	lsrs	r3, r3, #7
 800f876:	62bb      	str	r3, [r7, #40]	; 0x28
 800f878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87a:	2b7f      	cmp	r3, #127	; 0x7f
 800f87c:	d8f0      	bhi.n	800f860 <_TrySendOverflowPacket+0x1c>
 800f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f886:	b2d2      	uxtb	r2, r2
 800f888:	701a      	strb	r2, [r3, #0]
 800f88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800f88e:	4b25      	ldr	r3, [pc, #148]	; (800f924 <_TrySendOverflowPacket+0xe0>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800f894:	4b22      	ldr	r3, [pc, #136]	; (800f920 <_TrySendOverflowPacket+0xdc>)
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	69ba      	ldr	r2, [r7, #24]
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	623b      	str	r3, [r7, #32]
 800f8a6:	e00b      	b.n	800f8c0 <_TrySendOverflowPacket+0x7c>
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	b2da      	uxtb	r2, r3
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	1c59      	adds	r1, r3, #1
 800f8b0:	6279      	str	r1, [r7, #36]	; 0x24
 800f8b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f8b6:	b2d2      	uxtb	r2, r2
 800f8b8:	701a      	strb	r2, [r3, #0]
 800f8ba:	6a3b      	ldr	r3, [r7, #32]
 800f8bc:	09db      	lsrs	r3, r3, #7
 800f8be:	623b      	str	r3, [r7, #32]
 800f8c0:	6a3b      	ldr	r3, [r7, #32]
 800f8c2:	2b7f      	cmp	r3, #127	; 0x7f
 800f8c4:	d8f0      	bhi.n	800f8a8 <_TrySendOverflowPacket+0x64>
 800f8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c8:	1c5a      	adds	r2, r3, #1
 800f8ca:	627a      	str	r2, [r7, #36]	; 0x24
 800f8cc:	6a3a      	ldr	r2, [r7, #32]
 800f8ce:	b2d2      	uxtb	r2, r2
 800f8d0:	701a      	strb	r2, [r3, #0]
 800f8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800f8d6:	4b12      	ldr	r3, [pc, #72]	; (800f920 <_TrySendOverflowPacket+0xdc>)
 800f8d8:	785b      	ldrb	r3, [r3, #1]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	1d3b      	adds	r3, r7, #4
 800f8de:	69fa      	ldr	r2, [r7, #28]
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	1d3b      	adds	r3, r7, #4
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	f7ff fd8e 	bl	800f408 <SEGGER_RTT_WriteSkipNoLock>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d009      	beq.n	800f90a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800f8f6:	4a0a      	ldr	r2, [pc, #40]	; (800f920 <_TrySendOverflowPacket+0xdc>)
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800f8fc:	4b08      	ldr	r3, [pc, #32]	; (800f920 <_TrySendOverflowPacket+0xdc>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	3b01      	subs	r3, #1
 800f902:	b2da      	uxtb	r2, r3
 800f904:	4b06      	ldr	r3, [pc, #24]	; (800f920 <_TrySendOverflowPacket+0xdc>)
 800f906:	701a      	strb	r2, [r3, #0]
 800f908:	e004      	b.n	800f914 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800f90a:	4b05      	ldr	r3, [pc, #20]	; (800f920 <_TrySendOverflowPacket+0xdc>)
 800f90c:	695b      	ldr	r3, [r3, #20]
 800f90e:	3301      	adds	r3, #1
 800f910:	4a03      	ldr	r2, [pc, #12]	; (800f920 <_TrySendOverflowPacket+0xdc>)
 800f912:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800f914:	693b      	ldr	r3, [r7, #16]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3730      	adds	r7, #48	; 0x30
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	20011678 	.word	0x20011678
 800f924:	e0001004 	.word	0xe0001004

0800f928 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800f928:	b580      	push	{r7, lr}
 800f92a:	b08a      	sub	sp, #40	; 0x28
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800f934:	4b98      	ldr	r3, [pc, #608]	; (800fb98 <_SendPacket+0x270>)
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d010      	beq.n	800f95e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800f93c:	4b96      	ldr	r3, [pc, #600]	; (800fb98 <_SendPacket+0x270>)
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	f000 812d 	beq.w	800fba0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800f946:	4b94      	ldr	r3, [pc, #592]	; (800fb98 <_SendPacket+0x270>)
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d109      	bne.n	800f962 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800f94e:	f7ff ff79 	bl	800f844 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800f952:	4b91      	ldr	r3, [pc, #580]	; (800fb98 <_SendPacket+0x270>)
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	2b01      	cmp	r3, #1
 800f958:	f040 8124 	bne.w	800fba4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800f95c:	e001      	b.n	800f962 <_SendPacket+0x3a>
    goto Send;
 800f95e:	bf00      	nop
 800f960:	e000      	b.n	800f964 <_SendPacket+0x3c>
Send:
 800f962:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2b1f      	cmp	r3, #31
 800f968:	d809      	bhi.n	800f97e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800f96a:	4b8b      	ldr	r3, [pc, #556]	; (800fb98 <_SendPacket+0x270>)
 800f96c:	69da      	ldr	r2, [r3, #28]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	fa22 f303 	lsr.w	r3, r2, r3
 800f974:	f003 0301 	and.w	r3, r3, #1
 800f978:	2b00      	cmp	r3, #0
 800f97a:	f040 8115 	bne.w	800fba8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2b17      	cmp	r3, #23
 800f982:	d807      	bhi.n	800f994 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	3b01      	subs	r3, #1
 800f988:	60fb      	str	r3, [r7, #12]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	b2da      	uxtb	r2, r3
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	701a      	strb	r2, [r3, #0]
 800f992:	e0c4      	b.n	800fb1e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800f994:	68ba      	ldr	r2, [r7, #8]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	1ad3      	subs	r3, r2, r3
 800f99a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	2b7f      	cmp	r3, #127	; 0x7f
 800f9a0:	d912      	bls.n	800f9c8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	09da      	lsrs	r2, r3, #7
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	60fb      	str	r3, [r7, #12]
 800f9ac:	b2d2      	uxtb	r2, r2
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	3a01      	subs	r2, #1
 800f9ba:	60fa      	str	r2, [r7, #12]
 800f9bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	701a      	strb	r2, [r3, #0]
 800f9c6:	e006      	b.n	800f9d6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	60fb      	str	r3, [r7, #12]
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2b7e      	cmp	r3, #126	; 0x7e
 800f9da:	d807      	bhi.n	800f9ec <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	60fb      	str	r3, [r7, #12]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	701a      	strb	r2, [r3, #0]
 800f9ea:	e098      	b.n	800fb1e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f9f2:	d212      	bcs.n	800fa1a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	09da      	lsrs	r2, r3, #7
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	60fb      	str	r3, [r7, #12]
 800f9fe:	b2d2      	uxtb	r2, r2
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	3a01      	subs	r2, #1
 800fa0c:	60fa      	str	r2, [r7, #12]
 800fa0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa12:	b2da      	uxtb	r2, r3
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	701a      	strb	r2, [r3, #0]
 800fa18:	e081      	b.n	800fb1e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa20:	d21d      	bcs.n	800fa5e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	0b9a      	lsrs	r2, r3, #14
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	3b01      	subs	r3, #1
 800fa2a:	60fb      	str	r3, [r7, #12]
 800fa2c:	b2d2      	uxtb	r2, r2
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	09db      	lsrs	r3, r3, #7
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	3a01      	subs	r2, #1
 800fa3c:	60fa      	str	r2, [r7, #12]
 800fa3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	3a01      	subs	r2, #1
 800fa50:	60fa      	str	r2, [r7, #12]
 800fa52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa56:	b2da      	uxtb	r2, r3
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	701a      	strb	r2, [r3, #0]
 800fa5c:	e05f      	b.n	800fb1e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa64:	d228      	bcs.n	800fab8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	0d5a      	lsrs	r2, r3, #21
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	60fb      	str	r3, [r7, #12]
 800fa70:	b2d2      	uxtb	r2, r2
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	0b9b      	lsrs	r3, r3, #14
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	3a01      	subs	r2, #1
 800fa80:	60fa      	str	r2, [r7, #12]
 800fa82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa86:	b2da      	uxtb	r2, r3
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	09db      	lsrs	r3, r3, #7
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	3a01      	subs	r2, #1
 800fa96:	60fa      	str	r2, [r7, #12]
 800fa98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa9c:	b2da      	uxtb	r2, r3
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	3a01      	subs	r2, #1
 800faaa:	60fa      	str	r2, [r7, #12]
 800faac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fab0:	b2da      	uxtb	r2, r3
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	701a      	strb	r2, [r3, #0]
 800fab6:	e032      	b.n	800fb1e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	0f1a      	lsrs	r2, r3, #28
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	3b01      	subs	r3, #1
 800fac0:	60fb      	str	r3, [r7, #12]
 800fac2:	b2d2      	uxtb	r2, r2
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	0d5b      	lsrs	r3, r3, #21
 800facc:	b2db      	uxtb	r3, r3
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	3a01      	subs	r2, #1
 800fad2:	60fa      	str	r2, [r7, #12]
 800fad4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fad8:	b2da      	uxtb	r2, r3
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	0b9b      	lsrs	r3, r3, #14
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	3a01      	subs	r2, #1
 800fae8:	60fa      	str	r2, [r7, #12]
 800faea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800faee:	b2da      	uxtb	r2, r3
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	09db      	lsrs	r3, r3, #7
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	3a01      	subs	r2, #1
 800fafe:	60fa      	str	r2, [r7, #12]
 800fb00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fb04:	b2da      	uxtb	r2, r3
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	68fa      	ldr	r2, [r7, #12]
 800fb10:	3a01      	subs	r2, #1
 800fb12:	60fa      	str	r2, [r7, #12]
 800fb14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fb18:	b2da      	uxtb	r2, r3
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800fb1e:	4b1f      	ldr	r3, [pc, #124]	; (800fb9c <_SendPacket+0x274>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800fb24:	4b1c      	ldr	r3, [pc, #112]	; (800fb98 <_SendPacket+0x270>)
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	69ba      	ldr	r2, [r7, #24]
 800fb2a:	1ad3      	subs	r3, r2, r3
 800fb2c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	627b      	str	r3, [r7, #36]	; 0x24
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	623b      	str	r3, [r7, #32]
 800fb36:	e00b      	b.n	800fb50 <_SendPacket+0x228>
 800fb38:	6a3b      	ldr	r3, [r7, #32]
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	1c59      	adds	r1, r3, #1
 800fb40:	6279      	str	r1, [r7, #36]	; 0x24
 800fb42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fb46:	b2d2      	uxtb	r2, r2
 800fb48:	701a      	strb	r2, [r3, #0]
 800fb4a:	6a3b      	ldr	r3, [r7, #32]
 800fb4c:	09db      	lsrs	r3, r3, #7
 800fb4e:	623b      	str	r3, [r7, #32]
 800fb50:	6a3b      	ldr	r3, [r7, #32]
 800fb52:	2b7f      	cmp	r3, #127	; 0x7f
 800fb54:	d8f0      	bhi.n	800fb38 <_SendPacket+0x210>
 800fb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	627a      	str	r2, [r7, #36]	; 0x24
 800fb5c:	6a3a      	ldr	r2, [r7, #32]
 800fb5e:	b2d2      	uxtb	r2, r2
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800fb66:	4b0c      	ldr	r3, [pc, #48]	; (800fb98 <_SendPacket+0x270>)
 800fb68:	785b      	ldrb	r3, [r3, #1]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	1ad3      	subs	r3, r2, r3
 800fb72:	461a      	mov	r2, r3
 800fb74:	68f9      	ldr	r1, [r7, #12]
 800fb76:	f7ff fc47 	bl	800f408 <SEGGER_RTT_WriteSkipNoLock>
 800fb7a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d003      	beq.n	800fb8a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800fb82:	4a05      	ldr	r2, [pc, #20]	; (800fb98 <_SendPacket+0x270>)
 800fb84:	69bb      	ldr	r3, [r7, #24]
 800fb86:	60d3      	str	r3, [r2, #12]
 800fb88:	e00f      	b.n	800fbaa <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800fb8a:	4b03      	ldr	r3, [pc, #12]	; (800fb98 <_SendPacket+0x270>)
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	b2da      	uxtb	r2, r3
 800fb92:	4b01      	ldr	r3, [pc, #4]	; (800fb98 <_SendPacket+0x270>)
 800fb94:	701a      	strb	r2, [r3, #0]
 800fb96:	e008      	b.n	800fbaa <_SendPacket+0x282>
 800fb98:	20011678 	.word	0x20011678
 800fb9c:	e0001004 	.word	0xe0001004
    goto SendDone;
 800fba0:	bf00      	nop
 800fba2:	e002      	b.n	800fbaa <_SendPacket+0x282>
      goto SendDone;
 800fba4:	bf00      	nop
 800fba6:	e000      	b.n	800fbaa <_SendPacket+0x282>
      goto SendDone;
 800fba8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800fbaa:	4b14      	ldr	r3, [pc, #80]	; (800fbfc <_SendPacket+0x2d4>)
 800fbac:	7e1b      	ldrb	r3, [r3, #24]
 800fbae:	4619      	mov	r1, r3
 800fbb0:	4a13      	ldr	r2, [pc, #76]	; (800fc00 <_SendPacket+0x2d8>)
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	005b      	lsls	r3, r3, #1
 800fbb6:	440b      	add	r3, r1
 800fbb8:	00db      	lsls	r3, r3, #3
 800fbba:	4413      	add	r3, r2
 800fbbc:	336c      	adds	r3, #108	; 0x6c
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	4b0e      	ldr	r3, [pc, #56]	; (800fbfc <_SendPacket+0x2d4>)
 800fbc2:	7e1b      	ldrb	r3, [r3, #24]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	490e      	ldr	r1, [pc, #56]	; (800fc00 <_SendPacket+0x2d8>)
 800fbc8:	4603      	mov	r3, r0
 800fbca:	005b      	lsls	r3, r3, #1
 800fbcc:	4403      	add	r3, r0
 800fbce:	00db      	lsls	r3, r3, #3
 800fbd0:	440b      	add	r3, r1
 800fbd2:	3370      	adds	r3, #112	; 0x70
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d00b      	beq.n	800fbf2 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800fbda:	4b08      	ldr	r3, [pc, #32]	; (800fbfc <_SendPacket+0x2d4>)
 800fbdc:	789b      	ldrb	r3, [r3, #2]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d107      	bne.n	800fbf2 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800fbe2:	4b06      	ldr	r3, [pc, #24]	; (800fbfc <_SendPacket+0x2d4>)
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800fbe8:	f7ff fdbc 	bl	800f764 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800fbec:	4b03      	ldr	r3, [pc, #12]	; (800fbfc <_SendPacket+0x2d4>)
 800fbee:	2200      	movs	r2, #0
 800fbf0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800fbf2:	bf00      	nop
 800fbf4:	3728      	adds	r7, #40	; 0x28
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	20011678 	.word	0x20011678
 800fc00:	20010db8 	.word	0x20010db8

0800fc04 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b086      	sub	sp, #24
 800fc08:	af02      	add	r7, sp, #8
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
 800fc10:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800fc12:	2300      	movs	r3, #0
 800fc14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fc18:	4917      	ldr	r1, [pc, #92]	; (800fc78 <SEGGER_SYSVIEW_Init+0x74>)
 800fc1a:	4818      	ldr	r0, [pc, #96]	; (800fc7c <SEGGER_SYSVIEW_Init+0x78>)
 800fc1c:	f7ff fc76 	bl	800f50c <SEGGER_RTT_AllocUpBuffer>
 800fc20:	4603      	mov	r3, r0
 800fc22:	b2da      	uxtb	r2, r3
 800fc24:	4b16      	ldr	r3, [pc, #88]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc26:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800fc28:	4b15      	ldr	r3, [pc, #84]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc2a:	785a      	ldrb	r2, [r3, #1]
 800fc2c:	4b14      	ldr	r3, [pc, #80]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc2e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800fc30:	4b13      	ldr	r3, [pc, #76]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc32:	7e1b      	ldrb	r3, [r3, #24]
 800fc34:	4618      	mov	r0, r3
 800fc36:	2300      	movs	r3, #0
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	2308      	movs	r3, #8
 800fc3c:	4a11      	ldr	r2, [pc, #68]	; (800fc84 <SEGGER_SYSVIEW_Init+0x80>)
 800fc3e:	490f      	ldr	r1, [pc, #60]	; (800fc7c <SEGGER_SYSVIEW_Init+0x78>)
 800fc40:	f7ff fce8 	bl	800f614 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800fc44:	4b0e      	ldr	r3, [pc, #56]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc46:	2200      	movs	r2, #0
 800fc48:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800fc4a:	4b0f      	ldr	r3, [pc, #60]	; (800fc88 <SEGGER_SYSVIEW_Init+0x84>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4a0c      	ldr	r2, [pc, #48]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc50:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800fc52:	4a0b      	ldr	r2, [pc, #44]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800fc58:	4a09      	ldr	r2, [pc, #36]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800fc5e:	4a08      	ldr	r2, [pc, #32]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800fc64:	4a06      	ldr	r2, [pc, #24]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800fc6a:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <SEGGER_SYSVIEW_Init+0x7c>)
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800fc70:	bf00      	nop
 800fc72:	3710      	adds	r7, #16
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	20011270 	.word	0x20011270
 800fc7c:	08011cf0 	.word	0x08011cf0
 800fc80:	20011678 	.word	0x20011678
 800fc84:	20011670 	.word	0x20011670
 800fc88:	e0001004 	.word	0xe0001004

0800fc8c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800fc94:	4a04      	ldr	r2, [pc, #16]	; (800fca8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6113      	str	r3, [r2, #16]
}
 800fc9a:	bf00      	nop
 800fc9c:	370c      	adds	r7, #12
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop
 800fca8:	20011678 	.word	0x20011678

0800fcac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800fcb4:	f3ef 8311 	mrs	r3, BASEPRI
 800fcb8:	f04f 0120 	mov.w	r1, #32
 800fcbc:	f381 8811 	msr	BASEPRI, r1
 800fcc0:	60fb      	str	r3, [r7, #12]
 800fcc2:	4808      	ldr	r0, [pc, #32]	; (800fce4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800fcc4:	f7ff fd42 	bl	800f74c <_PreparePacket>
 800fcc8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	68b9      	ldr	r1, [r7, #8]
 800fcce:	68b8      	ldr	r0, [r7, #8]
 800fcd0:	f7ff fe2a 	bl	800f928 <_SendPacket>
  RECORD_END();
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f383 8811 	msr	BASEPRI, r3
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	200116a8 	.word	0x200116a8

0800fce8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800fcf2:	f3ef 8311 	mrs	r3, BASEPRI
 800fcf6:	f04f 0120 	mov.w	r1, #32
 800fcfa:	f381 8811 	msr	BASEPRI, r1
 800fcfe:	617b      	str	r3, [r7, #20]
 800fd00:	4816      	ldr	r0, [pc, #88]	; (800fd5c <SEGGER_SYSVIEW_RecordU32+0x74>)
 800fd02:	f7ff fd23 	bl	800f74c <_PreparePacket>
 800fd06:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	61fb      	str	r3, [r7, #28]
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	61bb      	str	r3, [r7, #24]
 800fd14:	e00b      	b.n	800fd2e <SEGGER_SYSVIEW_RecordU32+0x46>
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	1c59      	adds	r1, r3, #1
 800fd1e:	61f9      	str	r1, [r7, #28]
 800fd20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fd24:	b2d2      	uxtb	r2, r2
 800fd26:	701a      	strb	r2, [r3, #0]
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	09db      	lsrs	r3, r3, #7
 800fd2c:	61bb      	str	r3, [r7, #24]
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	2b7f      	cmp	r3, #127	; 0x7f
 800fd32:	d8f0      	bhi.n	800fd16 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	61fa      	str	r2, [r7, #28]
 800fd3a:	69ba      	ldr	r2, [r7, #24]
 800fd3c:	b2d2      	uxtb	r2, r2
 800fd3e:	701a      	strb	r2, [r3, #0]
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	68f9      	ldr	r1, [r7, #12]
 800fd48:	6938      	ldr	r0, [r7, #16]
 800fd4a:	f7ff fded 	bl	800f928 <_SendPacket>
  RECORD_END();
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	f383 8811 	msr	BASEPRI, r3
}
 800fd54:	bf00      	nop
 800fd56:	3720      	adds	r7, #32
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	200116a8 	.word	0x200116a8

0800fd60 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08c      	sub	sp, #48	; 0x30
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800fd6c:	f3ef 8311 	mrs	r3, BASEPRI
 800fd70:	f04f 0120 	mov.w	r1, #32
 800fd74:	f381 8811 	msr	BASEPRI, r1
 800fd78:	61fb      	str	r3, [r7, #28]
 800fd7a:	4825      	ldr	r0, [pc, #148]	; (800fe10 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800fd7c:	f7ff fce6 	bl	800f74c <_PreparePacket>
 800fd80:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd8e:	e00b      	b.n	800fda8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800fd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd92:	b2da      	uxtb	r2, r3
 800fd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd96:	1c59      	adds	r1, r3, #1
 800fd98:	62f9      	str	r1, [r7, #44]	; 0x2c
 800fd9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fd9e:	b2d2      	uxtb	r2, r2
 800fda0:	701a      	strb	r2, [r3, #0]
 800fda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda4:	09db      	lsrs	r3, r3, #7
 800fda6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdaa:	2b7f      	cmp	r3, #127	; 0x7f
 800fdac:	d8f0      	bhi.n	800fd90 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800fdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb0:	1c5a      	adds	r2, r3, #1
 800fdb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fdb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdb6:	b2d2      	uxtb	r2, r2
 800fdb8:	701a      	strb	r2, [r3, #0]
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	627b      	str	r3, [r7, #36]	; 0x24
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	623b      	str	r3, [r7, #32]
 800fdc6:	e00b      	b.n	800fde0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800fdc8:	6a3b      	ldr	r3, [r7, #32]
 800fdca:	b2da      	uxtb	r2, r3
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	1c59      	adds	r1, r3, #1
 800fdd0:	6279      	str	r1, [r7, #36]	; 0x24
 800fdd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fdd6:	b2d2      	uxtb	r2, r2
 800fdd8:	701a      	strb	r2, [r3, #0]
 800fdda:	6a3b      	ldr	r3, [r7, #32]
 800fddc:	09db      	lsrs	r3, r3, #7
 800fdde:	623b      	str	r3, [r7, #32]
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	2b7f      	cmp	r3, #127	; 0x7f
 800fde4:	d8f0      	bhi.n	800fdc8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800fde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde8:	1c5a      	adds	r2, r3, #1
 800fdea:	627a      	str	r2, [r7, #36]	; 0x24
 800fdec:	6a3a      	ldr	r2, [r7, #32]
 800fdee:	b2d2      	uxtb	r2, r2
 800fdf0:	701a      	strb	r2, [r3, #0]
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	6979      	ldr	r1, [r7, #20]
 800fdfa:	69b8      	ldr	r0, [r7, #24]
 800fdfc:	f7ff fd94 	bl	800f928 <_SendPacket>
  RECORD_END();
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	f383 8811 	msr	BASEPRI, r3
}
 800fe06:	bf00      	nop
 800fe08:	3730      	adds	r7, #48	; 0x30
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	200116a8 	.word	0x200116a8

0800fe14 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b08e      	sub	sp, #56	; 0x38
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	607a      	str	r2, [r7, #4]
 800fe20:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800fe22:	f3ef 8311 	mrs	r3, BASEPRI
 800fe26:	f04f 0120 	mov.w	r1, #32
 800fe2a:	f381 8811 	msr	BASEPRI, r1
 800fe2e:	61fb      	str	r3, [r7, #28]
 800fe30:	4832      	ldr	r0, [pc, #200]	; (800fefc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800fe32:	f7ff fc8b 	bl	800f74c <_PreparePacket>
 800fe36:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800fe38:	69bb      	ldr	r3, [r7, #24]
 800fe3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	633b      	str	r3, [r7, #48]	; 0x30
 800fe44:	e00b      	b.n	800fe5e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800fe46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe4c:	1c59      	adds	r1, r3, #1
 800fe4e:	6379      	str	r1, [r7, #52]	; 0x34
 800fe50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fe54:	b2d2      	uxtb	r2, r2
 800fe56:	701a      	strb	r2, [r3, #0]
 800fe58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5a:	09db      	lsrs	r3, r3, #7
 800fe5c:	633b      	str	r3, [r7, #48]	; 0x30
 800fe5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe60:	2b7f      	cmp	r3, #127	; 0x7f
 800fe62:	d8f0      	bhi.n	800fe46 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800fe64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe66:	1c5a      	adds	r2, r3, #1
 800fe68:	637a      	str	r2, [r7, #52]	; 0x34
 800fe6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe6c:	b2d2      	uxtb	r2, r2
 800fe6e:	701a      	strb	r2, [r3, #0]
 800fe70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe7c:	e00b      	b.n	800fe96 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800fe7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe80:	b2da      	uxtb	r2, r3
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	1c59      	adds	r1, r3, #1
 800fe86:	62f9      	str	r1, [r7, #44]	; 0x2c
 800fe88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fe8c:	b2d2      	uxtb	r2, r2
 800fe8e:	701a      	strb	r2, [r3, #0]
 800fe90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe92:	09db      	lsrs	r3, r3, #7
 800fe94:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe98:	2b7f      	cmp	r3, #127	; 0x7f
 800fe9a:	d8f0      	bhi.n	800fe7e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800fe9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea4:	b2d2      	uxtb	r2, r2
 800fea6:	701a      	strb	r2, [r3, #0]
 800fea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	627b      	str	r3, [r7, #36]	; 0x24
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	623b      	str	r3, [r7, #32]
 800feb4:	e00b      	b.n	800fece <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800feb6:	6a3b      	ldr	r3, [r7, #32]
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800febc:	1c59      	adds	r1, r3, #1
 800febe:	6279      	str	r1, [r7, #36]	; 0x24
 800fec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fec4:	b2d2      	uxtb	r2, r2
 800fec6:	701a      	strb	r2, [r3, #0]
 800fec8:	6a3b      	ldr	r3, [r7, #32]
 800feca:	09db      	lsrs	r3, r3, #7
 800fecc:	623b      	str	r3, [r7, #32]
 800fece:	6a3b      	ldr	r3, [r7, #32]
 800fed0:	2b7f      	cmp	r3, #127	; 0x7f
 800fed2:	d8f0      	bhi.n	800feb6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800fed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed6:	1c5a      	adds	r2, r3, #1
 800fed8:	627a      	str	r2, [r7, #36]	; 0x24
 800feda:	6a3a      	ldr	r2, [r7, #32]
 800fedc:	b2d2      	uxtb	r2, r2
 800fede:	701a      	strb	r2, [r3, #0]
 800fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	6979      	ldr	r1, [r7, #20]
 800fee8:	69b8      	ldr	r0, [r7, #24]
 800feea:	f7ff fd1d 	bl	800f928 <_SendPacket>
  RECORD_END();
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	f383 8811 	msr	BASEPRI, r3
}
 800fef4:	bf00      	nop
 800fef6:	3738      	adds	r7, #56	; 0x38
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	200116a8 	.word	0x200116a8

0800ff00 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b090      	sub	sp, #64	; 0x40
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	60f8      	str	r0, [r7, #12]
 800ff08:	60b9      	str	r1, [r7, #8]
 800ff0a:	607a      	str	r2, [r7, #4]
 800ff0c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ff0e:	f3ef 8311 	mrs	r3, BASEPRI
 800ff12:	f04f 0120 	mov.w	r1, #32
 800ff16:	f381 8811 	msr	BASEPRI, r1
 800ff1a:	61fb      	str	r3, [r7, #28]
 800ff1c:	4840      	ldr	r0, [pc, #256]	; (8010020 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800ff1e:	f7ff fc15 	bl	800f74c <_PreparePacket>
 800ff22:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff30:	e00b      	b.n	800ff4a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	b2da      	uxtb	r2, r3
 800ff36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff38:	1c59      	adds	r1, r3, #1
 800ff3a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ff3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ff40:	b2d2      	uxtb	r2, r2
 800ff42:	701a      	strb	r2, [r3, #0]
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	09db      	lsrs	r3, r3, #7
 800ff48:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4c:	2b7f      	cmp	r3, #127	; 0x7f
 800ff4e:	d8f0      	bhi.n	800ff32 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800ff50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ff56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff58:	b2d2      	uxtb	r2, r2
 800ff5a:	701a      	strb	r2, [r3, #0]
 800ff5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	637b      	str	r3, [r7, #52]	; 0x34
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	633b      	str	r3, [r7, #48]	; 0x30
 800ff68:	e00b      	b.n	800ff82 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ff6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6c:	b2da      	uxtb	r2, r3
 800ff6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff70:	1c59      	adds	r1, r3, #1
 800ff72:	6379      	str	r1, [r7, #52]	; 0x34
 800ff74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ff78:	b2d2      	uxtb	r2, r2
 800ff7a:	701a      	strb	r2, [r3, #0]
 800ff7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7e:	09db      	lsrs	r3, r3, #7
 800ff80:	633b      	str	r3, [r7, #48]	; 0x30
 800ff82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff84:	2b7f      	cmp	r3, #127	; 0x7f
 800ff86:	d8f0      	bhi.n	800ff6a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ff88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff8a:	1c5a      	adds	r2, r3, #1
 800ff8c:	637a      	str	r2, [r7, #52]	; 0x34
 800ff8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff90:	b2d2      	uxtb	r2, r2
 800ff92:	701a      	strb	r2, [r3, #0]
 800ff94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ffa0:	e00b      	b.n	800ffba <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800ffa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa4:	b2da      	uxtb	r2, r3
 800ffa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa8:	1c59      	adds	r1, r3, #1
 800ffaa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ffac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ffb0:	b2d2      	uxtb	r2, r2
 800ffb2:	701a      	strb	r2, [r3, #0]
 800ffb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb6:	09db      	lsrs	r3, r3, #7
 800ffb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ffba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbc:	2b7f      	cmp	r3, #127	; 0x7f
 800ffbe:	d8f0      	bhi.n	800ffa2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800ffc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc2:	1c5a      	adds	r2, r3, #1
 800ffc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ffc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffc8:	b2d2      	uxtb	r2, r2
 800ffca:	701a      	strb	r2, [r3, #0]
 800ffcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	627b      	str	r3, [r7, #36]	; 0x24
 800ffd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffd6:	623b      	str	r3, [r7, #32]
 800ffd8:	e00b      	b.n	800fff2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800ffda:	6a3b      	ldr	r3, [r7, #32]
 800ffdc:	b2da      	uxtb	r2, r3
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	1c59      	adds	r1, r3, #1
 800ffe2:	6279      	str	r1, [r7, #36]	; 0x24
 800ffe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ffe8:	b2d2      	uxtb	r2, r2
 800ffea:	701a      	strb	r2, [r3, #0]
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	09db      	lsrs	r3, r3, #7
 800fff0:	623b      	str	r3, [r7, #32]
 800fff2:	6a3b      	ldr	r3, [r7, #32]
 800fff4:	2b7f      	cmp	r3, #127	; 0x7f
 800fff6:	d8f0      	bhi.n	800ffda <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	1c5a      	adds	r2, r3, #1
 800fffc:	627a      	str	r2, [r7, #36]	; 0x24
 800fffe:	6a3a      	ldr	r2, [r7, #32]
 8010000:	b2d2      	uxtb	r2, r2
 8010002:	701a      	strb	r2, [r3, #0]
 8010004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010006:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	6979      	ldr	r1, [r7, #20]
 801000c:	69b8      	ldr	r0, [r7, #24]
 801000e:	f7ff fc8b 	bl	800f928 <_SendPacket>
  RECORD_END();
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	f383 8811 	msr	BASEPRI, r3
}
 8010018:	bf00      	nop
 801001a:	3740      	adds	r7, #64	; 0x40
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	200116a8 	.word	0x200116a8

08010024 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8010024:	b580      	push	{r7, lr}
 8010026:	b092      	sub	sp, #72	; 0x48
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	607a      	str	r2, [r7, #4]
 8010030:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8010032:	f3ef 8311 	mrs	r3, BASEPRI
 8010036:	f04f 0120 	mov.w	r1, #32
 801003a:	f381 8811 	msr	BASEPRI, r1
 801003e:	61fb      	str	r3, [r7, #28]
 8010040:	484e      	ldr	r0, [pc, #312]	; (801017c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8010042:	f7ff fb83 	bl	800f74c <_PreparePacket>
 8010046:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	647b      	str	r3, [r7, #68]	; 0x44
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	643b      	str	r3, [r7, #64]	; 0x40
 8010054:	e00b      	b.n	801006e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8010056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010058:	b2da      	uxtb	r2, r3
 801005a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801005c:	1c59      	adds	r1, r3, #1
 801005e:	6479      	str	r1, [r7, #68]	; 0x44
 8010060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010064:	b2d2      	uxtb	r2, r2
 8010066:	701a      	strb	r2, [r3, #0]
 8010068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801006a:	09db      	lsrs	r3, r3, #7
 801006c:	643b      	str	r3, [r7, #64]	; 0x40
 801006e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010070:	2b7f      	cmp	r3, #127	; 0x7f
 8010072:	d8f0      	bhi.n	8010056 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8010074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010076:	1c5a      	adds	r2, r3, #1
 8010078:	647a      	str	r2, [r7, #68]	; 0x44
 801007a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801007c:	b2d2      	uxtb	r2, r2
 801007e:	701a      	strb	r2, [r3, #0]
 8010080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010082:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	63bb      	str	r3, [r7, #56]	; 0x38
 801008c:	e00b      	b.n	80100a6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 801008e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010090:	b2da      	uxtb	r2, r3
 8010092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010094:	1c59      	adds	r1, r3, #1
 8010096:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801009c:	b2d2      	uxtb	r2, r2
 801009e:	701a      	strb	r2, [r3, #0]
 80100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a2:	09db      	lsrs	r3, r3, #7
 80100a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80100a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a8:	2b7f      	cmp	r3, #127	; 0x7f
 80100aa:	d8f0      	bhi.n	801008e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80100ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ae:	1c5a      	adds	r2, r3, #1
 80100b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80100b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100b4:	b2d2      	uxtb	r2, r2
 80100b6:	701a      	strb	r2, [r3, #0]
 80100b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	637b      	str	r3, [r7, #52]	; 0x34
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	633b      	str	r3, [r7, #48]	; 0x30
 80100c4:	e00b      	b.n	80100de <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	b2da      	uxtb	r2, r3
 80100ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100cc:	1c59      	adds	r1, r3, #1
 80100ce:	6379      	str	r1, [r7, #52]	; 0x34
 80100d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80100d4:	b2d2      	uxtb	r2, r2
 80100d6:	701a      	strb	r2, [r3, #0]
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	09db      	lsrs	r3, r3, #7
 80100dc:	633b      	str	r3, [r7, #48]	; 0x30
 80100de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e0:	2b7f      	cmp	r3, #127	; 0x7f
 80100e2:	d8f0      	bhi.n	80100c6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80100e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e6:	1c5a      	adds	r2, r3, #1
 80100e8:	637a      	str	r2, [r7, #52]	; 0x34
 80100ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100ec:	b2d2      	uxtb	r2, r2
 80100ee:	701a      	strb	r2, [r3, #0]
 80100f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80100fc:	e00b      	b.n	8010116 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80100fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010100:	b2da      	uxtb	r2, r3
 8010102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010104:	1c59      	adds	r1, r3, #1
 8010106:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801010c:	b2d2      	uxtb	r2, r2
 801010e:	701a      	strb	r2, [r3, #0]
 8010110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010112:	09db      	lsrs	r3, r3, #7
 8010114:	62bb      	str	r3, [r7, #40]	; 0x28
 8010116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010118:	2b7f      	cmp	r3, #127	; 0x7f
 801011a:	d8f0      	bhi.n	80100fe <SEGGER_SYSVIEW_RecordU32x5+0xda>
 801011c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011e:	1c5a      	adds	r2, r3, #1
 8010120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010124:	b2d2      	uxtb	r2, r2
 8010126:	701a      	strb	r2, [r3, #0]
 8010128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	627b      	str	r3, [r7, #36]	; 0x24
 8010130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010132:	623b      	str	r3, [r7, #32]
 8010134:	e00b      	b.n	801014e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8010136:	6a3b      	ldr	r3, [r7, #32]
 8010138:	b2da      	uxtb	r2, r3
 801013a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013c:	1c59      	adds	r1, r3, #1
 801013e:	6279      	str	r1, [r7, #36]	; 0x24
 8010140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010144:	b2d2      	uxtb	r2, r2
 8010146:	701a      	strb	r2, [r3, #0]
 8010148:	6a3b      	ldr	r3, [r7, #32]
 801014a:	09db      	lsrs	r3, r3, #7
 801014c:	623b      	str	r3, [r7, #32]
 801014e:	6a3b      	ldr	r3, [r7, #32]
 8010150:	2b7f      	cmp	r3, #127	; 0x7f
 8010152:	d8f0      	bhi.n	8010136 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8010154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010156:	1c5a      	adds	r2, r3, #1
 8010158:	627a      	str	r2, [r7, #36]	; 0x24
 801015a:	6a3a      	ldr	r2, [r7, #32]
 801015c:	b2d2      	uxtb	r2, r2
 801015e:	701a      	strb	r2, [r3, #0]
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010164:	68fa      	ldr	r2, [r7, #12]
 8010166:	6979      	ldr	r1, [r7, #20]
 8010168:	69b8      	ldr	r0, [r7, #24]
 801016a:	f7ff fbdd 	bl	800f928 <_SendPacket>
  RECORD_END();
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	f383 8811 	msr	BASEPRI, r3
}
 8010174:	bf00      	nop
 8010176:	3748      	adds	r7, #72	; 0x48
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	200116a8 	.word	0x200116a8

08010180 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8010180:	b580      	push	{r7, lr}
 8010182:	b08c      	sub	sp, #48	; 0x30
 8010184:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8010186:	4b58      	ldr	r3, [pc, #352]	; (80102e8 <SEGGER_SYSVIEW_Start+0x168>)
 8010188:	2201      	movs	r2, #1
 801018a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 801018c:	f3ef 8311 	mrs	r3, BASEPRI
 8010190:	f04f 0120 	mov.w	r1, #32
 8010194:	f381 8811 	msr	BASEPRI, r1
 8010198:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 801019a:	4b53      	ldr	r3, [pc, #332]	; (80102e8 <SEGGER_SYSVIEW_Start+0x168>)
 801019c:	785b      	ldrb	r3, [r3, #1]
 801019e:	220a      	movs	r2, #10
 80101a0:	4952      	ldr	r1, [pc, #328]	; (80102ec <SEGGER_SYSVIEW_Start+0x16c>)
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff f930 	bl	800f408 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80101ae:	200a      	movs	r0, #10
 80101b0:	f7ff fd7c 	bl	800fcac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80101b4:	f3ef 8311 	mrs	r3, BASEPRI
 80101b8:	f04f 0120 	mov.w	r1, #32
 80101bc:	f381 8811 	msr	BASEPRI, r1
 80101c0:	60bb      	str	r3, [r7, #8]
 80101c2:	484b      	ldr	r0, [pc, #300]	; (80102f0 <SEGGER_SYSVIEW_Start+0x170>)
 80101c4:	f7ff fac2 	bl	800f74c <_PreparePacket>
 80101c8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101d2:	4b45      	ldr	r3, [pc, #276]	; (80102e8 <SEGGER_SYSVIEW_Start+0x168>)
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80101d8:	e00b      	b.n	80101f2 <SEGGER_SYSVIEW_Start+0x72>
 80101da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101dc:	b2da      	uxtb	r2, r3
 80101de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e0:	1c59      	adds	r1, r3, #1
 80101e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80101e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80101e8:	b2d2      	uxtb	r2, r2
 80101ea:	701a      	strb	r2, [r3, #0]
 80101ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ee:	09db      	lsrs	r3, r3, #7
 80101f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80101f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f4:	2b7f      	cmp	r3, #127	; 0x7f
 80101f6:	d8f0      	bhi.n	80101da <SEGGER_SYSVIEW_Start+0x5a>
 80101f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fa:	1c5a      	adds	r2, r3, #1
 80101fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80101fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010200:	b2d2      	uxtb	r2, r2
 8010202:	701a      	strb	r2, [r3, #0]
 8010204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010206:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	627b      	str	r3, [r7, #36]	; 0x24
 801020c:	4b36      	ldr	r3, [pc, #216]	; (80102e8 <SEGGER_SYSVIEW_Start+0x168>)
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	623b      	str	r3, [r7, #32]
 8010212:	e00b      	b.n	801022c <SEGGER_SYSVIEW_Start+0xac>
 8010214:	6a3b      	ldr	r3, [r7, #32]
 8010216:	b2da      	uxtb	r2, r3
 8010218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021a:	1c59      	adds	r1, r3, #1
 801021c:	6279      	str	r1, [r7, #36]	; 0x24
 801021e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010222:	b2d2      	uxtb	r2, r2
 8010224:	701a      	strb	r2, [r3, #0]
 8010226:	6a3b      	ldr	r3, [r7, #32]
 8010228:	09db      	lsrs	r3, r3, #7
 801022a:	623b      	str	r3, [r7, #32]
 801022c:	6a3b      	ldr	r3, [r7, #32]
 801022e:	2b7f      	cmp	r3, #127	; 0x7f
 8010230:	d8f0      	bhi.n	8010214 <SEGGER_SYSVIEW_Start+0x94>
 8010232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	627a      	str	r2, [r7, #36]	; 0x24
 8010238:	6a3a      	ldr	r2, [r7, #32]
 801023a:	b2d2      	uxtb	r2, r2
 801023c:	701a      	strb	r2, [r3, #0]
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	61fb      	str	r3, [r7, #28]
 8010246:	4b28      	ldr	r3, [pc, #160]	; (80102e8 <SEGGER_SYSVIEW_Start+0x168>)
 8010248:	691b      	ldr	r3, [r3, #16]
 801024a:	61bb      	str	r3, [r7, #24]
 801024c:	e00b      	b.n	8010266 <SEGGER_SYSVIEW_Start+0xe6>
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	b2da      	uxtb	r2, r3
 8010252:	69fb      	ldr	r3, [r7, #28]
 8010254:	1c59      	adds	r1, r3, #1
 8010256:	61f9      	str	r1, [r7, #28]
 8010258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801025c:	b2d2      	uxtb	r2, r2
 801025e:	701a      	strb	r2, [r3, #0]
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	09db      	lsrs	r3, r3, #7
 8010264:	61bb      	str	r3, [r7, #24]
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	2b7f      	cmp	r3, #127	; 0x7f
 801026a:	d8f0      	bhi.n	801024e <SEGGER_SYSVIEW_Start+0xce>
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	1c5a      	adds	r2, r3, #1
 8010270:	61fa      	str	r2, [r7, #28]
 8010272:	69ba      	ldr	r2, [r7, #24]
 8010274:	b2d2      	uxtb	r2, r2
 8010276:	701a      	strb	r2, [r3, #0]
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	617b      	str	r3, [r7, #20]
 8010280:	2300      	movs	r3, #0
 8010282:	613b      	str	r3, [r7, #16]
 8010284:	e00b      	b.n	801029e <SEGGER_SYSVIEW_Start+0x11e>
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	b2da      	uxtb	r2, r3
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	1c59      	adds	r1, r3, #1
 801028e:	6179      	str	r1, [r7, #20]
 8010290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010294:	b2d2      	uxtb	r2, r2
 8010296:	701a      	strb	r2, [r3, #0]
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	09db      	lsrs	r3, r3, #7
 801029c:	613b      	str	r3, [r7, #16]
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	2b7f      	cmp	r3, #127	; 0x7f
 80102a2:	d8f0      	bhi.n	8010286 <SEGGER_SYSVIEW_Start+0x106>
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	617a      	str	r2, [r7, #20]
 80102aa:	693a      	ldr	r2, [r7, #16]
 80102ac:	b2d2      	uxtb	r2, r2
 80102ae:	701a      	strb	r2, [r3, #0]
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80102b4:	2218      	movs	r2, #24
 80102b6:	6839      	ldr	r1, [r7, #0]
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f7ff fb35 	bl	800f928 <_SendPacket>
      RECORD_END();
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80102c4:	4b08      	ldr	r3, [pc, #32]	; (80102e8 <SEGGER_SYSVIEW_Start+0x168>)
 80102c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80102cc:	4b06      	ldr	r3, [pc, #24]	; (80102e8 <SEGGER_SYSVIEW_Start+0x168>)
 80102ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80102d2:	f000 f9eb 	bl	80106ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80102d6:	f000 f9b1 	bl	801063c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80102da:	f000 fc83 	bl	8010be4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80102de:	bf00      	nop
 80102e0:	3730      	adds	r7, #48	; 0x30
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	20011678 	.word	0x20011678
 80102ec:	08011dc8 	.word	0x08011dc8
 80102f0:	200116a8 	.word	0x200116a8

080102f4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80102fa:	f3ef 8311 	mrs	r3, BASEPRI
 80102fe:	f04f 0120 	mov.w	r1, #32
 8010302:	f381 8811 	msr	BASEPRI, r1
 8010306:	607b      	str	r3, [r7, #4]
 8010308:	480b      	ldr	r0, [pc, #44]	; (8010338 <SEGGER_SYSVIEW_Stop+0x44>)
 801030a:	f7ff fa1f 	bl	800f74c <_PreparePacket>
 801030e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8010310:	4b0a      	ldr	r3, [pc, #40]	; (801033c <SEGGER_SYSVIEW_Stop+0x48>)
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d007      	beq.n	8010328 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8010318:	220b      	movs	r2, #11
 801031a:	6839      	ldr	r1, [r7, #0]
 801031c:	6838      	ldr	r0, [r7, #0]
 801031e:	f7ff fb03 	bl	800f928 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8010322:	4b06      	ldr	r3, [pc, #24]	; (801033c <SEGGER_SYSVIEW_Stop+0x48>)
 8010324:	2200      	movs	r2, #0
 8010326:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f383 8811 	msr	BASEPRI, r3
}
 801032e:	bf00      	nop
 8010330:	3708      	adds	r7, #8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	200116a8 	.word	0x200116a8
 801033c:	20011678 	.word	0x20011678

08010340 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8010340:	b580      	push	{r7, lr}
 8010342:	b08c      	sub	sp, #48	; 0x30
 8010344:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010346:	f3ef 8311 	mrs	r3, BASEPRI
 801034a:	f04f 0120 	mov.w	r1, #32
 801034e:	f381 8811 	msr	BASEPRI, r1
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	4845      	ldr	r0, [pc, #276]	; (801046c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8010356:	f7ff f9f9 	bl	800f74c <_PreparePacket>
 801035a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010364:	4b42      	ldr	r3, [pc, #264]	; (8010470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	62bb      	str	r3, [r7, #40]	; 0x28
 801036a:	e00b      	b.n	8010384 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 801036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036e:	b2da      	uxtb	r2, r3
 8010370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010372:	1c59      	adds	r1, r3, #1
 8010374:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801037a:	b2d2      	uxtb	r2, r2
 801037c:	701a      	strb	r2, [r3, #0]
 801037e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010380:	09db      	lsrs	r3, r3, #7
 8010382:	62bb      	str	r3, [r7, #40]	; 0x28
 8010384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010386:	2b7f      	cmp	r3, #127	; 0x7f
 8010388:	d8f0      	bhi.n	801036c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	1c5a      	adds	r2, r3, #1
 801038e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010392:	b2d2      	uxtb	r2, r2
 8010394:	701a      	strb	r2, [r3, #0]
 8010396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010398:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	627b      	str	r3, [r7, #36]	; 0x24
 801039e:	4b34      	ldr	r3, [pc, #208]	; (8010470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	623b      	str	r3, [r7, #32]
 80103a4:	e00b      	b.n	80103be <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80103a6:	6a3b      	ldr	r3, [r7, #32]
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ac:	1c59      	adds	r1, r3, #1
 80103ae:	6279      	str	r1, [r7, #36]	; 0x24
 80103b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80103b4:	b2d2      	uxtb	r2, r2
 80103b6:	701a      	strb	r2, [r3, #0]
 80103b8:	6a3b      	ldr	r3, [r7, #32]
 80103ba:	09db      	lsrs	r3, r3, #7
 80103bc:	623b      	str	r3, [r7, #32]
 80103be:	6a3b      	ldr	r3, [r7, #32]
 80103c0:	2b7f      	cmp	r3, #127	; 0x7f
 80103c2:	d8f0      	bhi.n	80103a6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80103c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c6:	1c5a      	adds	r2, r3, #1
 80103c8:	627a      	str	r2, [r7, #36]	; 0x24
 80103ca:	6a3a      	ldr	r2, [r7, #32]
 80103cc:	b2d2      	uxtb	r2, r2
 80103ce:	701a      	strb	r2, [r3, #0]
 80103d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	61fb      	str	r3, [r7, #28]
 80103d8:	4b25      	ldr	r3, [pc, #148]	; (8010470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	61bb      	str	r3, [r7, #24]
 80103de:	e00b      	b.n	80103f8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	b2da      	uxtb	r2, r3
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	1c59      	adds	r1, r3, #1
 80103e8:	61f9      	str	r1, [r7, #28]
 80103ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80103ee:	b2d2      	uxtb	r2, r2
 80103f0:	701a      	strb	r2, [r3, #0]
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	09db      	lsrs	r3, r3, #7
 80103f6:	61bb      	str	r3, [r7, #24]
 80103f8:	69bb      	ldr	r3, [r7, #24]
 80103fa:	2b7f      	cmp	r3, #127	; 0x7f
 80103fc:	d8f0      	bhi.n	80103e0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	1c5a      	adds	r2, r3, #1
 8010402:	61fa      	str	r2, [r7, #28]
 8010404:	69ba      	ldr	r2, [r7, #24]
 8010406:	b2d2      	uxtb	r2, r2
 8010408:	701a      	strb	r2, [r3, #0]
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	617b      	str	r3, [r7, #20]
 8010412:	2300      	movs	r3, #0
 8010414:	613b      	str	r3, [r7, #16]
 8010416:	e00b      	b.n	8010430 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	b2da      	uxtb	r2, r3
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	1c59      	adds	r1, r3, #1
 8010420:	6179      	str	r1, [r7, #20]
 8010422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010426:	b2d2      	uxtb	r2, r2
 8010428:	701a      	strb	r2, [r3, #0]
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	09db      	lsrs	r3, r3, #7
 801042e:	613b      	str	r3, [r7, #16]
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	2b7f      	cmp	r3, #127	; 0x7f
 8010434:	d8f0      	bhi.n	8010418 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	1c5a      	adds	r2, r3, #1
 801043a:	617a      	str	r2, [r7, #20]
 801043c:	693a      	ldr	r2, [r7, #16]
 801043e:	b2d2      	uxtb	r2, r2
 8010440:	701a      	strb	r2, [r3, #0]
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8010446:	2218      	movs	r2, #24
 8010448:	6879      	ldr	r1, [r7, #4]
 801044a:	68b8      	ldr	r0, [r7, #8]
 801044c:	f7ff fa6c 	bl	800f928 <_SendPacket>
  RECORD_END();
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8010456:	4b06      	ldr	r3, [pc, #24]	; (8010470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045a:	2b00      	cmp	r3, #0
 801045c:	d002      	beq.n	8010464 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 801045e:	4b04      	ldr	r3, [pc, #16]	; (8010470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010462:	4798      	blx	r3
  }
}
 8010464:	bf00      	nop
 8010466:	3730      	adds	r7, #48	; 0x30
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	200116a8 	.word	0x200116a8
 8010470:	20011678 	.word	0x20011678

08010474 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8010474:	b580      	push	{r7, lr}
 8010476:	b092      	sub	sp, #72	; 0x48
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 801047c:	f3ef 8311 	mrs	r3, BASEPRI
 8010480:	f04f 0120 	mov.w	r1, #32
 8010484:	f381 8811 	msr	BASEPRI, r1
 8010488:	617b      	str	r3, [r7, #20]
 801048a:	486a      	ldr	r0, [pc, #424]	; (8010634 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 801048c:	f7ff f95e 	bl	800f74c <_PreparePacket>
 8010490:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	647b      	str	r3, [r7, #68]	; 0x44
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	4b66      	ldr	r3, [pc, #408]	; (8010638 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80104a0:	691b      	ldr	r3, [r3, #16]
 80104a2:	1ad3      	subs	r3, r2, r3
 80104a4:	643b      	str	r3, [r7, #64]	; 0x40
 80104a6:	e00b      	b.n	80104c0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80104a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104aa:	b2da      	uxtb	r2, r3
 80104ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104ae:	1c59      	adds	r1, r3, #1
 80104b0:	6479      	str	r1, [r7, #68]	; 0x44
 80104b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80104b6:	b2d2      	uxtb	r2, r2
 80104b8:	701a      	strb	r2, [r3, #0]
 80104ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104bc:	09db      	lsrs	r3, r3, #7
 80104be:	643b      	str	r3, [r7, #64]	; 0x40
 80104c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104c2:	2b7f      	cmp	r3, #127	; 0x7f
 80104c4:	d8f0      	bhi.n	80104a8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80104c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104c8:	1c5a      	adds	r2, r3, #1
 80104ca:	647a      	str	r2, [r7, #68]	; 0x44
 80104cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80104ce:	b2d2      	uxtb	r2, r2
 80104d0:	701a      	strb	r2, [r3, #0]
 80104d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	689b      	ldr	r3, [r3, #8]
 80104de:	63bb      	str	r3, [r7, #56]	; 0x38
 80104e0:	e00b      	b.n	80104fa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80104e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104e8:	1c59      	adds	r1, r3, #1
 80104ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80104ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80104f0:	b2d2      	uxtb	r2, r2
 80104f2:	701a      	strb	r2, [r3, #0]
 80104f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f6:	09db      	lsrs	r3, r3, #7
 80104f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80104fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fc:	2b7f      	cmp	r3, #127	; 0x7f
 80104fe:	d8f0      	bhi.n	80104e2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8010500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010508:	b2d2      	uxtb	r2, r2
 801050a:	701a      	strb	r2, [r3, #0]
 801050c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801050e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	2220      	movs	r2, #32
 8010516:	4619      	mov	r1, r3
 8010518:	68f8      	ldr	r0, [r7, #12]
 801051a:	f7ff f8c7 	bl	800f6ac <_EncodeStr>
 801051e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8010520:	2209      	movs	r2, #9
 8010522:	68f9      	ldr	r1, [r7, #12]
 8010524:	6938      	ldr	r0, [r7, #16]
 8010526:	f7ff f9ff 	bl	800f928 <_SendPacket>
  //
  pPayload = pPayloadStart;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	637b      	str	r3, [r7, #52]	; 0x34
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	4b40      	ldr	r3, [pc, #256]	; (8010638 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8010538:	691b      	ldr	r3, [r3, #16]
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	633b      	str	r3, [r7, #48]	; 0x30
 801053e:	e00b      	b.n	8010558 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8010540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010542:	b2da      	uxtb	r2, r3
 8010544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010546:	1c59      	adds	r1, r3, #1
 8010548:	6379      	str	r1, [r7, #52]	; 0x34
 801054a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801054e:	b2d2      	uxtb	r2, r2
 8010550:	701a      	strb	r2, [r3, #0]
 8010552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010554:	09db      	lsrs	r3, r3, #7
 8010556:	633b      	str	r3, [r7, #48]	; 0x30
 8010558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055a:	2b7f      	cmp	r3, #127	; 0x7f
 801055c:	d8f0      	bhi.n	8010540 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 801055e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010560:	1c5a      	adds	r2, r3, #1
 8010562:	637a      	str	r2, [r7, #52]	; 0x34
 8010564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010566:	b2d2      	uxtb	r2, r2
 8010568:	701a      	strb	r2, [r3, #0]
 801056a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	62bb      	str	r3, [r7, #40]	; 0x28
 8010578:	e00b      	b.n	8010592 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 801057a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057c:	b2da      	uxtb	r2, r3
 801057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010580:	1c59      	adds	r1, r3, #1
 8010582:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010588:	b2d2      	uxtb	r2, r2
 801058a:	701a      	strb	r2, [r3, #0]
 801058c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058e:	09db      	lsrs	r3, r3, #7
 8010590:	62bb      	str	r3, [r7, #40]	; 0x28
 8010592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010594:	2b7f      	cmp	r3, #127	; 0x7f
 8010596:	d8f0      	bhi.n	801057a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8010598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801059e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105a0:	b2d2      	uxtb	r2, r2
 80105a2:	701a      	strb	r2, [r3, #0]
 80105a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	627b      	str	r3, [r7, #36]	; 0x24
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	691b      	ldr	r3, [r3, #16]
 80105b0:	623b      	str	r3, [r7, #32]
 80105b2:	e00b      	b.n	80105cc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80105b4:	6a3b      	ldr	r3, [r7, #32]
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ba:	1c59      	adds	r1, r3, #1
 80105bc:	6279      	str	r1, [r7, #36]	; 0x24
 80105be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80105c2:	b2d2      	uxtb	r2, r2
 80105c4:	701a      	strb	r2, [r3, #0]
 80105c6:	6a3b      	ldr	r3, [r7, #32]
 80105c8:	09db      	lsrs	r3, r3, #7
 80105ca:	623b      	str	r3, [r7, #32]
 80105cc:	6a3b      	ldr	r3, [r7, #32]
 80105ce:	2b7f      	cmp	r3, #127	; 0x7f
 80105d0:	d8f0      	bhi.n	80105b4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80105d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d4:	1c5a      	adds	r2, r3, #1
 80105d6:	627a      	str	r2, [r7, #36]	; 0x24
 80105d8:	6a3a      	ldr	r2, [r7, #32]
 80105da:	b2d2      	uxtb	r2, r2
 80105dc:	701a      	strb	r2, [r3, #0]
 80105de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	61fb      	str	r3, [r7, #28]
 80105e6:	2300      	movs	r3, #0
 80105e8:	61bb      	str	r3, [r7, #24]
 80105ea:	e00b      	b.n	8010604 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80105ec:	69bb      	ldr	r3, [r7, #24]
 80105ee:	b2da      	uxtb	r2, r3
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	1c59      	adds	r1, r3, #1
 80105f4:	61f9      	str	r1, [r7, #28]
 80105f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80105fa:	b2d2      	uxtb	r2, r2
 80105fc:	701a      	strb	r2, [r3, #0]
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	09db      	lsrs	r3, r3, #7
 8010602:	61bb      	str	r3, [r7, #24]
 8010604:	69bb      	ldr	r3, [r7, #24]
 8010606:	2b7f      	cmp	r3, #127	; 0x7f
 8010608:	d8f0      	bhi.n	80105ec <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	1c5a      	adds	r2, r3, #1
 801060e:	61fa      	str	r2, [r7, #28]
 8010610:	69ba      	ldr	r2, [r7, #24]
 8010612:	b2d2      	uxtb	r2, r2
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 801061a:	2215      	movs	r2, #21
 801061c:	68f9      	ldr	r1, [r7, #12]
 801061e:	6938      	ldr	r0, [r7, #16]
 8010620:	f7ff f982 	bl	800f928 <_SendPacket>
  RECORD_END();
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	f383 8811 	msr	BASEPRI, r3
}
 801062a:	bf00      	nop
 801062c:	3748      	adds	r7, #72	; 0x48
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	200116a8 	.word	0x200116a8
 8010638:	20011678 	.word	0x20011678

0801063c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 801063c:	b580      	push	{r7, lr}
 801063e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8010640:	4b07      	ldr	r3, [pc, #28]	; (8010660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010642:	6a1b      	ldr	r3, [r3, #32]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d008      	beq.n	801065a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8010648:	4b05      	ldr	r3, [pc, #20]	; (8010660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801064a:	6a1b      	ldr	r3, [r3, #32]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d003      	beq.n	801065a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8010652:	4b03      	ldr	r3, [pc, #12]	; (8010660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010654:	6a1b      	ldr	r3, [r3, #32]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	4798      	blx	r3
  }
}
 801065a:	bf00      	nop
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	20011678 	.word	0x20011678

08010664 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8010664:	b580      	push	{r7, lr}
 8010666:	b086      	sub	sp, #24
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801066c:	f3ef 8311 	mrs	r3, BASEPRI
 8010670:	f04f 0120 	mov.w	r1, #32
 8010674:	f381 8811 	msr	BASEPRI, r1
 8010678:	617b      	str	r3, [r7, #20]
 801067a:	480b      	ldr	r0, [pc, #44]	; (80106a8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 801067c:	f7ff f866 	bl	800f74c <_PreparePacket>
 8010680:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010682:	2280      	movs	r2, #128	; 0x80
 8010684:	6879      	ldr	r1, [r7, #4]
 8010686:	6938      	ldr	r0, [r7, #16]
 8010688:	f7ff f810 	bl	800f6ac <_EncodeStr>
 801068c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 801068e:	220e      	movs	r2, #14
 8010690:	68f9      	ldr	r1, [r7, #12]
 8010692:	6938      	ldr	r0, [r7, #16]
 8010694:	f7ff f948 	bl	800f928 <_SendPacket>
  RECORD_END();
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	f383 8811 	msr	BASEPRI, r3
}
 801069e:	bf00      	nop
 80106a0:	3718      	adds	r7, #24
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	200116a8 	.word	0x200116a8

080106ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80106ac:	b590      	push	{r4, r7, lr}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80106b2:	4b15      	ldr	r3, [pc, #84]	; (8010708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80106b4:	6a1b      	ldr	r3, [r3, #32]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d01a      	beq.n	80106f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80106ba:	4b13      	ldr	r3, [pc, #76]	; (8010708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80106bc:	6a1b      	ldr	r3, [r3, #32]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d015      	beq.n	80106f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80106c4:	4b10      	ldr	r3, [pc, #64]	; (8010708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80106c6:	6a1b      	ldr	r3, [r3, #32]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4798      	blx	r3
 80106cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80106d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80106d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80106d6:	f04f 0200 	mov.w	r2, #0
 80106da:	f04f 0300 	mov.w	r3, #0
 80106de:	000a      	movs	r2, r1
 80106e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80106e2:	4613      	mov	r3, r2
 80106e4:	461a      	mov	r2, r3
 80106e6:	4621      	mov	r1, r4
 80106e8:	200d      	movs	r0, #13
 80106ea:	f7ff fb39 	bl	800fd60 <SEGGER_SYSVIEW_RecordU32x2>
 80106ee:	e006      	b.n	80106fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80106f0:	4b06      	ldr	r3, [pc, #24]	; (801070c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4619      	mov	r1, r3
 80106f6:	200c      	movs	r0, #12
 80106f8:	f7ff faf6 	bl	800fce8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80106fc:	bf00      	nop
 80106fe:	bf00      	nop
 8010700:	370c      	adds	r7, #12
 8010702:	46bd      	mov	sp, r7
 8010704:	bd90      	pop	{r4, r7, pc}
 8010706:	bf00      	nop
 8010708:	20011678 	.word	0x20011678
 801070c:	e0001004 	.word	0xe0001004

08010710 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010716:	f3ef 8311 	mrs	r3, BASEPRI
 801071a:	f04f 0120 	mov.w	r1, #32
 801071e:	f381 8811 	msr	BASEPRI, r1
 8010722:	60fb      	str	r3, [r7, #12]
 8010724:	4819      	ldr	r0, [pc, #100]	; (801078c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8010726:	f7ff f811 	bl	800f74c <_PreparePacket>
 801072a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8010730:	4b17      	ldr	r3, [pc, #92]	; (8010790 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010738:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	617b      	str	r3, [r7, #20]
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	613b      	str	r3, [r7, #16]
 8010742:	e00b      	b.n	801075c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	b2da      	uxtb	r2, r3
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	1c59      	adds	r1, r3, #1
 801074c:	6179      	str	r1, [r7, #20]
 801074e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010752:	b2d2      	uxtb	r2, r2
 8010754:	701a      	strb	r2, [r3, #0]
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	09db      	lsrs	r3, r3, #7
 801075a:	613b      	str	r3, [r7, #16]
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	2b7f      	cmp	r3, #127	; 0x7f
 8010760:	d8f0      	bhi.n	8010744 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	1c5a      	adds	r2, r3, #1
 8010766:	617a      	str	r2, [r7, #20]
 8010768:	693a      	ldr	r2, [r7, #16]
 801076a:	b2d2      	uxtb	r2, r2
 801076c:	701a      	strb	r2, [r3, #0]
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8010772:	2202      	movs	r2, #2
 8010774:	6879      	ldr	r1, [r7, #4]
 8010776:	68b8      	ldr	r0, [r7, #8]
 8010778:	f7ff f8d6 	bl	800f928 <_SendPacket>
  RECORD_END();
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f383 8811 	msr	BASEPRI, r3
}
 8010782:	bf00      	nop
 8010784:	3718      	adds	r7, #24
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	200116a8 	.word	0x200116a8
 8010790:	e000ed04 	.word	0xe000ed04

08010794 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801079a:	f3ef 8311 	mrs	r3, BASEPRI
 801079e:	f04f 0120 	mov.w	r1, #32
 80107a2:	f381 8811 	msr	BASEPRI, r1
 80107a6:	607b      	str	r3, [r7, #4]
 80107a8:	4807      	ldr	r0, [pc, #28]	; (80107c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80107aa:	f7fe ffcf 	bl	800f74c <_PreparePacket>
 80107ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80107b0:	2203      	movs	r2, #3
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6838      	ldr	r0, [r7, #0]
 80107b6:	f7ff f8b7 	bl	800f928 <_SendPacket>
  RECORD_END();
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f383 8811 	msr	BASEPRI, r3
}
 80107c0:	bf00      	nop
 80107c2:	3708      	adds	r7, #8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	200116a8 	.word	0x200116a8

080107cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80107d2:	f3ef 8311 	mrs	r3, BASEPRI
 80107d6:	f04f 0120 	mov.w	r1, #32
 80107da:	f381 8811 	msr	BASEPRI, r1
 80107de:	607b      	str	r3, [r7, #4]
 80107e0:	4807      	ldr	r0, [pc, #28]	; (8010800 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80107e2:	f7fe ffb3 	bl	800f74c <_PreparePacket>
 80107e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80107e8:	2212      	movs	r2, #18
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	6838      	ldr	r0, [r7, #0]
 80107ee:	f7ff f89b 	bl	800f928 <_SendPacket>
  RECORD_END();
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f383 8811 	msr	BASEPRI, r3
}
 80107f8:	bf00      	nop
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	200116a8 	.word	0x200116a8

08010804 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801080a:	f3ef 8311 	mrs	r3, BASEPRI
 801080e:	f04f 0120 	mov.w	r1, #32
 8010812:	f381 8811 	msr	BASEPRI, r1
 8010816:	607b      	str	r3, [r7, #4]
 8010818:	4807      	ldr	r0, [pc, #28]	; (8010838 <SEGGER_SYSVIEW_OnIdle+0x34>)
 801081a:	f7fe ff97 	bl	800f74c <_PreparePacket>
 801081e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8010820:	2211      	movs	r2, #17
 8010822:	6839      	ldr	r1, [r7, #0]
 8010824:	6838      	ldr	r0, [r7, #0]
 8010826:	f7ff f87f 	bl	800f928 <_SendPacket>
  RECORD_END();
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f383 8811 	msr	BASEPRI, r3
}
 8010830:	bf00      	nop
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	200116a8 	.word	0x200116a8

0801083c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 801083c:	b580      	push	{r7, lr}
 801083e:	b088      	sub	sp, #32
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010844:	f3ef 8311 	mrs	r3, BASEPRI
 8010848:	f04f 0120 	mov.w	r1, #32
 801084c:	f381 8811 	msr	BASEPRI, r1
 8010850:	617b      	str	r3, [r7, #20]
 8010852:	4819      	ldr	r0, [pc, #100]	; (80108b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8010854:	f7fe ff7a 	bl	800f74c <_PreparePacket>
 8010858:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801085e:	4b17      	ldr	r3, [pc, #92]	; (80108bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8010860:	691b      	ldr	r3, [r3, #16]
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	1ad3      	subs	r3, r2, r3
 8010866:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	61fb      	str	r3, [r7, #28]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	61bb      	str	r3, [r7, #24]
 8010870:	e00b      	b.n	801088a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8010872:	69bb      	ldr	r3, [r7, #24]
 8010874:	b2da      	uxtb	r2, r3
 8010876:	69fb      	ldr	r3, [r7, #28]
 8010878:	1c59      	adds	r1, r3, #1
 801087a:	61f9      	str	r1, [r7, #28]
 801087c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010880:	b2d2      	uxtb	r2, r2
 8010882:	701a      	strb	r2, [r3, #0]
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	09db      	lsrs	r3, r3, #7
 8010888:	61bb      	str	r3, [r7, #24]
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	2b7f      	cmp	r3, #127	; 0x7f
 801088e:	d8f0      	bhi.n	8010872 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	1c5a      	adds	r2, r3, #1
 8010894:	61fa      	str	r2, [r7, #28]
 8010896:	69ba      	ldr	r2, [r7, #24]
 8010898:	b2d2      	uxtb	r2, r2
 801089a:	701a      	strb	r2, [r3, #0]
 801089c:	69fb      	ldr	r3, [r7, #28]
 801089e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80108a0:	2208      	movs	r2, #8
 80108a2:	68f9      	ldr	r1, [r7, #12]
 80108a4:	6938      	ldr	r0, [r7, #16]
 80108a6:	f7ff f83f 	bl	800f928 <_SendPacket>
  RECORD_END();
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	f383 8811 	msr	BASEPRI, r3
}
 80108b0:	bf00      	nop
 80108b2:	3720      	adds	r7, #32
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	200116a8 	.word	0x200116a8
 80108bc:	20011678 	.word	0x20011678

080108c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80108c8:	f3ef 8311 	mrs	r3, BASEPRI
 80108cc:	f04f 0120 	mov.w	r1, #32
 80108d0:	f381 8811 	msr	BASEPRI, r1
 80108d4:	617b      	str	r3, [r7, #20]
 80108d6:	4819      	ldr	r0, [pc, #100]	; (801093c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80108d8:	f7fe ff38 	bl	800f74c <_PreparePacket>
 80108dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80108e2:	4b17      	ldr	r3, [pc, #92]	; (8010940 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80108e4:	691b      	ldr	r3, [r3, #16]
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	61fb      	str	r3, [r7, #28]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	61bb      	str	r3, [r7, #24]
 80108f4:	e00b      	b.n	801090e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	b2da      	uxtb	r2, r3
 80108fa:	69fb      	ldr	r3, [r7, #28]
 80108fc:	1c59      	adds	r1, r3, #1
 80108fe:	61f9      	str	r1, [r7, #28]
 8010900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010904:	b2d2      	uxtb	r2, r2
 8010906:	701a      	strb	r2, [r3, #0]
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	09db      	lsrs	r3, r3, #7
 801090c:	61bb      	str	r3, [r7, #24]
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	2b7f      	cmp	r3, #127	; 0x7f
 8010912:	d8f0      	bhi.n	80108f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8010914:	69fb      	ldr	r3, [r7, #28]
 8010916:	1c5a      	adds	r2, r3, #1
 8010918:	61fa      	str	r2, [r7, #28]
 801091a:	69ba      	ldr	r2, [r7, #24]
 801091c:	b2d2      	uxtb	r2, r2
 801091e:	701a      	strb	r2, [r3, #0]
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8010924:	2204      	movs	r2, #4
 8010926:	68f9      	ldr	r1, [r7, #12]
 8010928:	6938      	ldr	r0, [r7, #16]
 801092a:	f7fe fffd 	bl	800f928 <_SendPacket>
  RECORD_END();
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	f383 8811 	msr	BASEPRI, r3
}
 8010934:	bf00      	nop
 8010936:	3720      	adds	r7, #32
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	200116a8 	.word	0x200116a8
 8010940:	20011678 	.word	0x20011678

08010944 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8010944:	b580      	push	{r7, lr}
 8010946:	b088      	sub	sp, #32
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801094c:	f3ef 8311 	mrs	r3, BASEPRI
 8010950:	f04f 0120 	mov.w	r1, #32
 8010954:	f381 8811 	msr	BASEPRI, r1
 8010958:	617b      	str	r3, [r7, #20]
 801095a:	4819      	ldr	r0, [pc, #100]	; (80109c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 801095c:	f7fe fef6 	bl	800f74c <_PreparePacket>
 8010960:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8010966:	4b17      	ldr	r3, [pc, #92]	; (80109c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	61fb      	str	r3, [r7, #28]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	61bb      	str	r3, [r7, #24]
 8010978:	e00b      	b.n	8010992 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	b2da      	uxtb	r2, r3
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	1c59      	adds	r1, r3, #1
 8010982:	61f9      	str	r1, [r7, #28]
 8010984:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010988:	b2d2      	uxtb	r2, r2
 801098a:	701a      	strb	r2, [r3, #0]
 801098c:	69bb      	ldr	r3, [r7, #24]
 801098e:	09db      	lsrs	r3, r3, #7
 8010990:	61bb      	str	r3, [r7, #24]
 8010992:	69bb      	ldr	r3, [r7, #24]
 8010994:	2b7f      	cmp	r3, #127	; 0x7f
 8010996:	d8f0      	bhi.n	801097a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8010998:	69fb      	ldr	r3, [r7, #28]
 801099a:	1c5a      	adds	r2, r3, #1
 801099c:	61fa      	str	r2, [r7, #28]
 801099e:	69ba      	ldr	r2, [r7, #24]
 80109a0:	b2d2      	uxtb	r2, r2
 80109a2:	701a      	strb	r2, [r3, #0]
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80109a8:	2206      	movs	r2, #6
 80109aa:	68f9      	ldr	r1, [r7, #12]
 80109ac:	6938      	ldr	r0, [r7, #16]
 80109ae:	f7fe ffbb 	bl	800f928 <_SendPacket>
  RECORD_END();
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	f383 8811 	msr	BASEPRI, r3
}
 80109b8:	bf00      	nop
 80109ba:	3720      	adds	r7, #32
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	200116a8 	.word	0x200116a8
 80109c4:	20011678 	.word	0x20011678

080109c8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b08a      	sub	sp, #40	; 0x28
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80109d2:	f3ef 8311 	mrs	r3, BASEPRI
 80109d6:	f04f 0120 	mov.w	r1, #32
 80109da:	f381 8811 	msr	BASEPRI, r1
 80109de:	617b      	str	r3, [r7, #20]
 80109e0:	4827      	ldr	r0, [pc, #156]	; (8010a80 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80109e2:	f7fe feb3 	bl	800f74c <_PreparePacket>
 80109e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80109ec:	4b25      	ldr	r3, [pc, #148]	; (8010a84 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80109ee:	691b      	ldr	r3, [r3, #16]
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	1ad3      	subs	r3, r2, r3
 80109f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	627b      	str	r3, [r7, #36]	; 0x24
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	623b      	str	r3, [r7, #32]
 80109fe:	e00b      	b.n	8010a18 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8010a00:	6a3b      	ldr	r3, [r7, #32]
 8010a02:	b2da      	uxtb	r2, r3
 8010a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a06:	1c59      	adds	r1, r3, #1
 8010a08:	6279      	str	r1, [r7, #36]	; 0x24
 8010a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010a0e:	b2d2      	uxtb	r2, r2
 8010a10:	701a      	strb	r2, [r3, #0]
 8010a12:	6a3b      	ldr	r3, [r7, #32]
 8010a14:	09db      	lsrs	r3, r3, #7
 8010a16:	623b      	str	r3, [r7, #32]
 8010a18:	6a3b      	ldr	r3, [r7, #32]
 8010a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8010a1c:	d8f0      	bhi.n	8010a00 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8010a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a20:	1c5a      	adds	r2, r3, #1
 8010a22:	627a      	str	r2, [r7, #36]	; 0x24
 8010a24:	6a3a      	ldr	r2, [r7, #32]
 8010a26:	b2d2      	uxtb	r2, r2
 8010a28:	701a      	strb	r2, [r3, #0]
 8010a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	61fb      	str	r3, [r7, #28]
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	61bb      	str	r3, [r7, #24]
 8010a36:	e00b      	b.n	8010a50 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	b2da      	uxtb	r2, r3
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	1c59      	adds	r1, r3, #1
 8010a40:	61f9      	str	r1, [r7, #28]
 8010a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010a46:	b2d2      	uxtb	r2, r2
 8010a48:	701a      	strb	r2, [r3, #0]
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	09db      	lsrs	r3, r3, #7
 8010a4e:	61bb      	str	r3, [r7, #24]
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	2b7f      	cmp	r3, #127	; 0x7f
 8010a54:	d8f0      	bhi.n	8010a38 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	1c5a      	adds	r2, r3, #1
 8010a5a:	61fa      	str	r2, [r7, #28]
 8010a5c:	69ba      	ldr	r2, [r7, #24]
 8010a5e:	b2d2      	uxtb	r2, r2
 8010a60:	701a      	strb	r2, [r3, #0]
 8010a62:	69fb      	ldr	r3, [r7, #28]
 8010a64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8010a66:	2207      	movs	r2, #7
 8010a68:	68f9      	ldr	r1, [r7, #12]
 8010a6a:	6938      	ldr	r0, [r7, #16]
 8010a6c:	f7fe ff5c 	bl	800f928 <_SendPacket>
  RECORD_END();
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	f383 8811 	msr	BASEPRI, r3
}
 8010a76:	bf00      	nop
 8010a78:	3728      	adds	r7, #40	; 0x28
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	200116a8 	.word	0x200116a8
 8010a84:	20011678 	.word	0x20011678

08010a88 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8010a90:	4b04      	ldr	r3, [pc, #16]	; (8010aa4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8010a92:	691b      	ldr	r3, [r3, #16]
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	1ad3      	subs	r3, r2, r3
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr
 8010aa4:	20011678 	.word	0x20011678

08010aa8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b08c      	sub	sp, #48	; 0x30
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	4603      	mov	r3, r0
 8010ab0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8010ab2:	4b3b      	ldr	r3, [pc, #236]	; (8010ba0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d06d      	beq.n	8010b96 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8010aba:	4b39      	ldr	r3, [pc, #228]	; (8010ba0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ac4:	e008      	b.n	8010ad8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8010ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac8:	691b      	ldr	r3, [r3, #16]
 8010aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8010acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d007      	beq.n	8010ae2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8010ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ad8:	79fb      	ldrb	r3, [r7, #7]
 8010ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d3f2      	bcc.n	8010ac6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8010ae0:	e000      	b.n	8010ae4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8010ae2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8010ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d055      	beq.n	8010b96 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010aea:	f3ef 8311 	mrs	r3, BASEPRI
 8010aee:	f04f 0120 	mov.w	r1, #32
 8010af2:	f381 8811 	msr	BASEPRI, r1
 8010af6:	617b      	str	r3, [r7, #20]
 8010af8:	482a      	ldr	r0, [pc, #168]	; (8010ba4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8010afa:	f7fe fe27 	bl	800f74c <_PreparePacket>
 8010afe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	627b      	str	r3, [r7, #36]	; 0x24
 8010b08:	79fb      	ldrb	r3, [r7, #7]
 8010b0a:	623b      	str	r3, [r7, #32]
 8010b0c:	e00b      	b.n	8010b26 <SEGGER_SYSVIEW_SendModule+0x7e>
 8010b0e:	6a3b      	ldr	r3, [r7, #32]
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b14:	1c59      	adds	r1, r3, #1
 8010b16:	6279      	str	r1, [r7, #36]	; 0x24
 8010b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010b1c:	b2d2      	uxtb	r2, r2
 8010b1e:	701a      	strb	r2, [r3, #0]
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	09db      	lsrs	r3, r3, #7
 8010b24:	623b      	str	r3, [r7, #32]
 8010b26:	6a3b      	ldr	r3, [r7, #32]
 8010b28:	2b7f      	cmp	r3, #127	; 0x7f
 8010b2a:	d8f0      	bhi.n	8010b0e <SEGGER_SYSVIEW_SendModule+0x66>
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	1c5a      	adds	r2, r3, #1
 8010b30:	627a      	str	r2, [r7, #36]	; 0x24
 8010b32:	6a3a      	ldr	r2, [r7, #32]
 8010b34:	b2d2      	uxtb	r2, r2
 8010b36:	701a      	strb	r2, [r3, #0]
 8010b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	61fb      	str	r3, [r7, #28]
 8010b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	61bb      	str	r3, [r7, #24]
 8010b46:	e00b      	b.n	8010b60 <SEGGER_SYSVIEW_SendModule+0xb8>
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	b2da      	uxtb	r2, r3
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	1c59      	adds	r1, r3, #1
 8010b50:	61f9      	str	r1, [r7, #28]
 8010b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010b56:	b2d2      	uxtb	r2, r2
 8010b58:	701a      	strb	r2, [r3, #0]
 8010b5a:	69bb      	ldr	r3, [r7, #24]
 8010b5c:	09db      	lsrs	r3, r3, #7
 8010b5e:	61bb      	str	r3, [r7, #24]
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	2b7f      	cmp	r3, #127	; 0x7f
 8010b64:	d8f0      	bhi.n	8010b48 <SEGGER_SYSVIEW_SendModule+0xa0>
 8010b66:	69fb      	ldr	r3, [r7, #28]
 8010b68:	1c5a      	adds	r2, r3, #1
 8010b6a:	61fa      	str	r2, [r7, #28]
 8010b6c:	69ba      	ldr	r2, [r7, #24]
 8010b6e:	b2d2      	uxtb	r2, r2
 8010b70:	701a      	strb	r2, [r3, #0]
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2280      	movs	r2, #128	; 0x80
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	68f8      	ldr	r0, [r7, #12]
 8010b80:	f7fe fd94 	bl	800f6ac <_EncodeStr>
 8010b84:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8010b86:	2216      	movs	r2, #22
 8010b88:	68f9      	ldr	r1, [r7, #12]
 8010b8a:	6938      	ldr	r0, [r7, #16]
 8010b8c:	f7fe fecc 	bl	800f928 <_SendPacket>
      RECORD_END();
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8010b96:	bf00      	nop
 8010b98:	3730      	adds	r7, #48	; 0x30
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	200116a0 	.word	0x200116a0
 8010ba4:	200116a8 	.word	0x200116a8

08010ba8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8010bae:	4b0c      	ldr	r3, [pc, #48]	; (8010be0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d00f      	beq.n	8010bd6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8010bb6:	4b0a      	ldr	r3, [pc, #40]	; (8010be0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d002      	beq.n	8010bca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1f2      	bne.n	8010bbc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8010bd6:	bf00      	nop
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	200116a0 	.word	0x200116a0

08010be4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8010bea:	f3ef 8311 	mrs	r3, BASEPRI
 8010bee:	f04f 0120 	mov.w	r1, #32
 8010bf2:	f381 8811 	msr	BASEPRI, r1
 8010bf6:	60fb      	str	r3, [r7, #12]
 8010bf8:	4817      	ldr	r0, [pc, #92]	; (8010c58 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8010bfa:	f7fe fda7 	bl	800f74c <_PreparePacket>
 8010bfe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	617b      	str	r3, [r7, #20]
 8010c08:	4b14      	ldr	r3, [pc, #80]	; (8010c5c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	613b      	str	r3, [r7, #16]
 8010c0e:	e00b      	b.n	8010c28 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	b2da      	uxtb	r2, r3
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	1c59      	adds	r1, r3, #1
 8010c18:	6179      	str	r1, [r7, #20]
 8010c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010c1e:	b2d2      	uxtb	r2, r2
 8010c20:	701a      	strb	r2, [r3, #0]
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	09db      	lsrs	r3, r3, #7
 8010c26:	613b      	str	r3, [r7, #16]
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8010c2c:	d8f0      	bhi.n	8010c10 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	1c5a      	adds	r2, r3, #1
 8010c32:	617a      	str	r2, [r7, #20]
 8010c34:	693a      	ldr	r2, [r7, #16]
 8010c36:	b2d2      	uxtb	r2, r2
 8010c38:	701a      	strb	r2, [r3, #0]
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8010c3e:	221b      	movs	r2, #27
 8010c40:	6879      	ldr	r1, [r7, #4]
 8010c42:	68b8      	ldr	r0, [r7, #8]
 8010c44:	f7fe fe70 	bl	800f928 <_SendPacket>
  RECORD_END();
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f383 8811 	msr	BASEPRI, r3
}
 8010c4e:	bf00      	nop
 8010c50:	3718      	adds	r7, #24
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	200116a8 	.word	0x200116a8
 8010c5c:	200116a4 	.word	0x200116a4

08010c60 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b08a      	sub	sp, #40	; 0x28
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010c68:	f3ef 8311 	mrs	r3, BASEPRI
 8010c6c:	f04f 0120 	mov.w	r1, #32
 8010c70:	f381 8811 	msr	BASEPRI, r1
 8010c74:	617b      	str	r3, [r7, #20]
 8010c76:	4827      	ldr	r0, [pc, #156]	; (8010d14 <SEGGER_SYSVIEW_Warn+0xb4>)
 8010c78:	f7fe fd68 	bl	800f74c <_PreparePacket>
 8010c7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010c7e:	2280      	movs	r2, #128	; 0x80
 8010c80:	6879      	ldr	r1, [r7, #4]
 8010c82:	6938      	ldr	r0, [r7, #16]
 8010c84:	f7fe fd12 	bl	800f6ac <_EncodeStr>
 8010c88:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8010c8e:	2301      	movs	r3, #1
 8010c90:	623b      	str	r3, [r7, #32]
 8010c92:	e00b      	b.n	8010cac <SEGGER_SYSVIEW_Warn+0x4c>
 8010c94:	6a3b      	ldr	r3, [r7, #32]
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9a:	1c59      	adds	r1, r3, #1
 8010c9c:	6279      	str	r1, [r7, #36]	; 0x24
 8010c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010ca2:	b2d2      	uxtb	r2, r2
 8010ca4:	701a      	strb	r2, [r3, #0]
 8010ca6:	6a3b      	ldr	r3, [r7, #32]
 8010ca8:	09db      	lsrs	r3, r3, #7
 8010caa:	623b      	str	r3, [r7, #32]
 8010cac:	6a3b      	ldr	r3, [r7, #32]
 8010cae:	2b7f      	cmp	r3, #127	; 0x7f
 8010cb0:	d8f0      	bhi.n	8010c94 <SEGGER_SYSVIEW_Warn+0x34>
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb4:	1c5a      	adds	r2, r3, #1
 8010cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8010cb8:	6a3a      	ldr	r2, [r7, #32]
 8010cba:	b2d2      	uxtb	r2, r2
 8010cbc:	701a      	strb	r2, [r3, #0]
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	61fb      	str	r3, [r7, #28]
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	61bb      	str	r3, [r7, #24]
 8010cca:	e00b      	b.n	8010ce4 <SEGGER_SYSVIEW_Warn+0x84>
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	b2da      	uxtb	r2, r3
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	1c59      	adds	r1, r3, #1
 8010cd4:	61f9      	str	r1, [r7, #28]
 8010cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010cda:	b2d2      	uxtb	r2, r2
 8010cdc:	701a      	strb	r2, [r3, #0]
 8010cde:	69bb      	ldr	r3, [r7, #24]
 8010ce0:	09db      	lsrs	r3, r3, #7
 8010ce2:	61bb      	str	r3, [r7, #24]
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8010ce8:	d8f0      	bhi.n	8010ccc <SEGGER_SYSVIEW_Warn+0x6c>
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	1c5a      	adds	r2, r3, #1
 8010cee:	61fa      	str	r2, [r7, #28]
 8010cf0:	69ba      	ldr	r2, [r7, #24]
 8010cf2:	b2d2      	uxtb	r2, r2
 8010cf4:	701a      	strb	r2, [r3, #0]
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8010cfa:	221a      	movs	r2, #26
 8010cfc:	68f9      	ldr	r1, [r7, #12]
 8010cfe:	6938      	ldr	r0, [r7, #16]
 8010d00:	f7fe fe12 	bl	800f928 <_SendPacket>
  RECORD_END();
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	f383 8811 	msr	BASEPRI, r3
}
 8010d0a:	bf00      	nop
 8010d0c:	3728      	adds	r7, #40	; 0x28
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	200116a8 	.word	0x200116a8

08010d18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	4912      	ldr	r1, [pc, #72]	; (8010d68 <MX_USB_DEVICE_Init+0x50>)
 8010d20:	4812      	ldr	r0, [pc, #72]	; (8010d6c <MX_USB_DEVICE_Init+0x54>)
 8010d22:	f7f8 fd99 	bl	8009858 <USBD_Init>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d001      	beq.n	8010d30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010d2c:	f7f0 f858 	bl	8000de0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010d30:	490f      	ldr	r1, [pc, #60]	; (8010d70 <MX_USB_DEVICE_Init+0x58>)
 8010d32:	480e      	ldr	r0, [pc, #56]	; (8010d6c <MX_USB_DEVICE_Init+0x54>)
 8010d34:	f7f8 fdc0 	bl	80098b8 <USBD_RegisterClass>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010d3e:	f7f0 f84f 	bl	8000de0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010d42:	490c      	ldr	r1, [pc, #48]	; (8010d74 <MX_USB_DEVICE_Init+0x5c>)
 8010d44:	4809      	ldr	r0, [pc, #36]	; (8010d6c <MX_USB_DEVICE_Init+0x54>)
 8010d46:	f7f8 fcb1 	bl	80096ac <USBD_CDC_RegisterInterface>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d001      	beq.n	8010d54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010d50:	f7f0 f846 	bl	8000de0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010d54:	4805      	ldr	r0, [pc, #20]	; (8010d6c <MX_USB_DEVICE_Init+0x54>)
 8010d56:	f7f8 fde5 	bl	8009924 <USBD_Start>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d001      	beq.n	8010d64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010d60:	f7f0 f83e 	bl	8000de0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010d64:	bf00      	nop
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	20002634 	.word	0x20002634
 8010d6c:	2001178c 	.word	0x2001178c
 8010d70:	2000259c 	.word	0x2000259c
 8010d74:	20002620 	.word	0x20002620

08010d78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	4905      	ldr	r1, [pc, #20]	; (8010d94 <CDC_Init_FS+0x1c>)
 8010d80:	4805      	ldr	r0, [pc, #20]	; (8010d98 <CDC_Init_FS+0x20>)
 8010d82:	f7f8 fcad 	bl	80096e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010d86:	4905      	ldr	r1, [pc, #20]	; (8010d9c <CDC_Init_FS+0x24>)
 8010d88:	4803      	ldr	r0, [pc, #12]	; (8010d98 <CDC_Init_FS+0x20>)
 8010d8a:	f7f8 fccb 	bl	8009724 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010d8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	20012268 	.word	0x20012268
 8010d98:	2001178c 	.word	0x2001178c
 8010d9c:	20011a68 	.word	0x20011a68

08010da0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010da0:	b480      	push	{r7}
 8010da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010da4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	4603      	mov	r3, r0
 8010db8:	6039      	str	r1, [r7, #0]
 8010dba:	71fb      	strb	r3, [r7, #7]
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010dc0:	79fb      	ldrb	r3, [r7, #7]
 8010dc2:	2b23      	cmp	r3, #35	; 0x23
 8010dc4:	d84a      	bhi.n	8010e5c <CDC_Control_FS+0xac>
 8010dc6:	a201      	add	r2, pc, #4	; (adr r2, 8010dcc <CDC_Control_FS+0x1c>)
 8010dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dcc:	08010e5d 	.word	0x08010e5d
 8010dd0:	08010e5d 	.word	0x08010e5d
 8010dd4:	08010e5d 	.word	0x08010e5d
 8010dd8:	08010e5d 	.word	0x08010e5d
 8010ddc:	08010e5d 	.word	0x08010e5d
 8010de0:	08010e5d 	.word	0x08010e5d
 8010de4:	08010e5d 	.word	0x08010e5d
 8010de8:	08010e5d 	.word	0x08010e5d
 8010dec:	08010e5d 	.word	0x08010e5d
 8010df0:	08010e5d 	.word	0x08010e5d
 8010df4:	08010e5d 	.word	0x08010e5d
 8010df8:	08010e5d 	.word	0x08010e5d
 8010dfc:	08010e5d 	.word	0x08010e5d
 8010e00:	08010e5d 	.word	0x08010e5d
 8010e04:	08010e5d 	.word	0x08010e5d
 8010e08:	08010e5d 	.word	0x08010e5d
 8010e0c:	08010e5d 	.word	0x08010e5d
 8010e10:	08010e5d 	.word	0x08010e5d
 8010e14:	08010e5d 	.word	0x08010e5d
 8010e18:	08010e5d 	.word	0x08010e5d
 8010e1c:	08010e5d 	.word	0x08010e5d
 8010e20:	08010e5d 	.word	0x08010e5d
 8010e24:	08010e5d 	.word	0x08010e5d
 8010e28:	08010e5d 	.word	0x08010e5d
 8010e2c:	08010e5d 	.word	0x08010e5d
 8010e30:	08010e5d 	.word	0x08010e5d
 8010e34:	08010e5d 	.word	0x08010e5d
 8010e38:	08010e5d 	.word	0x08010e5d
 8010e3c:	08010e5d 	.word	0x08010e5d
 8010e40:	08010e5d 	.word	0x08010e5d
 8010e44:	08010e5d 	.word	0x08010e5d
 8010e48:	08010e5d 	.word	0x08010e5d
 8010e4c:	08010e5d 	.word	0x08010e5d
 8010e50:	08010e5d 	.word	0x08010e5d
 8010e54:	08010e5d 	.word	0x08010e5d
 8010e58:	08010e5d 	.word	0x08010e5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010e5c:	bf00      	nop
  }

  return (USBD_OK);
 8010e5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr

08010e6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010e76:	6879      	ldr	r1, [r7, #4]
 8010e78:	4805      	ldr	r0, [pc, #20]	; (8010e90 <CDC_Receive_FS+0x24>)
 8010e7a:	f7f8 fc53 	bl	8009724 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010e7e:	4804      	ldr	r0, [pc, #16]	; (8010e90 <CDC_Receive_FS+0x24>)
 8010e80:	f7f8 fcb4 	bl	80097ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010e84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	2001178c 	.word	0x2001178c

08010e94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010ea4:	4b0d      	ldr	r3, [pc, #52]	; (8010edc <CDC_Transmit_FS+0x48>)
 8010ea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d001      	beq.n	8010eba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e00b      	b.n	8010ed2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010eba:	887b      	ldrh	r3, [r7, #2]
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	6879      	ldr	r1, [r7, #4]
 8010ec0:	4806      	ldr	r0, [pc, #24]	; (8010edc <CDC_Transmit_FS+0x48>)
 8010ec2:	f7f8 fc0d 	bl	80096e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010ec6:	4805      	ldr	r0, [pc, #20]	; (8010edc <CDC_Transmit_FS+0x48>)
 8010ec8:	f7f8 fc4a 	bl	8009760 <USBD_CDC_TransmitPacket>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	2001178c 	.word	0x2001178c

08010ee0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b087      	sub	sp, #28
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	4613      	mov	r3, r2
 8010eec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	371c      	adds	r7, #28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr
	...

08010f04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	6039      	str	r1, [r7, #0]
 8010f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	2212      	movs	r2, #18
 8010f14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010f16:	4b03      	ldr	r3, [pc, #12]	; (8010f24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr
 8010f24:	20002654 	.word	0x20002654

08010f28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	4603      	mov	r3, r0
 8010f30:	6039      	str	r1, [r7, #0]
 8010f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	2204      	movs	r2, #4
 8010f38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010f3a:	4b03      	ldr	r3, [pc, #12]	; (8010f48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	370c      	adds	r7, #12
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr
 8010f48:	20002674 	.word	0x20002674

08010f4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	4603      	mov	r3, r0
 8010f54:	6039      	str	r1, [r7, #0]
 8010f56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010f58:	79fb      	ldrb	r3, [r7, #7]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d105      	bne.n	8010f6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010f5e:	683a      	ldr	r2, [r7, #0]
 8010f60:	4907      	ldr	r1, [pc, #28]	; (8010f80 <USBD_FS_ProductStrDescriptor+0x34>)
 8010f62:	4808      	ldr	r0, [pc, #32]	; (8010f84 <USBD_FS_ProductStrDescriptor+0x38>)
 8010f64:	f7f9 feb4 	bl	800acd0 <USBD_GetString>
 8010f68:	e004      	b.n	8010f74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	4904      	ldr	r1, [pc, #16]	; (8010f80 <USBD_FS_ProductStrDescriptor+0x34>)
 8010f6e:	4805      	ldr	r0, [pc, #20]	; (8010f84 <USBD_FS_ProductStrDescriptor+0x38>)
 8010f70:	f7f9 feae 	bl	800acd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f74:	4b02      	ldr	r3, [pc, #8]	; (8010f80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3708      	adds	r7, #8
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	20012a68 	.word	0x20012a68
 8010f84:	08011cf8 	.word	0x08011cf8

08010f88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	4603      	mov	r3, r0
 8010f90:	6039      	str	r1, [r7, #0]
 8010f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010f94:	683a      	ldr	r2, [r7, #0]
 8010f96:	4904      	ldr	r1, [pc, #16]	; (8010fa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010f98:	4804      	ldr	r0, [pc, #16]	; (8010fac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010f9a:	f7f9 fe99 	bl	800acd0 <USBD_GetString>
  return USBD_StrDesc;
 8010f9e:	4b02      	ldr	r3, [pc, #8]	; (8010fa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	20012a68 	.word	0x20012a68
 8010fac:	08011d0c 	.word	0x08011d0c

08010fb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	6039      	str	r1, [r7, #0]
 8010fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	221a      	movs	r2, #26
 8010fc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010fc2:	f000 f855 	bl	8011070 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010fc6:	4b02      	ldr	r3, [pc, #8]	; (8010fd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3708      	adds	r7, #8
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	20002678 	.word	0x20002678

08010fd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	4603      	mov	r3, r0
 8010fdc:	6039      	str	r1, [r7, #0]
 8010fde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010fe0:	79fb      	ldrb	r3, [r7, #7]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d105      	bne.n	8010ff2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	4907      	ldr	r1, [pc, #28]	; (8011008 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010fea:	4808      	ldr	r0, [pc, #32]	; (801100c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010fec:	f7f9 fe70 	bl	800acd0 <USBD_GetString>
 8010ff0:	e004      	b.n	8010ffc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010ff2:	683a      	ldr	r2, [r7, #0]
 8010ff4:	4904      	ldr	r1, [pc, #16]	; (8011008 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010ff6:	4805      	ldr	r0, [pc, #20]	; (801100c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010ff8:	f7f9 fe6a 	bl	800acd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ffc:	4b02      	ldr	r3, [pc, #8]	; (8011008 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3708      	adds	r7, #8
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
 8011006:	bf00      	nop
 8011008:	20012a68 	.word	0x20012a68
 801100c:	08011d10 	.word	0x08011d10

08011010 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	4603      	mov	r3, r0
 8011018:	6039      	str	r1, [r7, #0]
 801101a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801101c:	79fb      	ldrb	r3, [r7, #7]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d105      	bne.n	801102e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011022:	683a      	ldr	r2, [r7, #0]
 8011024:	4907      	ldr	r1, [pc, #28]	; (8011044 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011026:	4808      	ldr	r0, [pc, #32]	; (8011048 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011028:	f7f9 fe52 	bl	800acd0 <USBD_GetString>
 801102c:	e004      	b.n	8011038 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	4904      	ldr	r1, [pc, #16]	; (8011044 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011032:	4805      	ldr	r0, [pc, #20]	; (8011048 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011034:	f7f9 fe4c 	bl	800acd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011038:	4b02      	ldr	r3, [pc, #8]	; (8011044 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801103a:	4618      	mov	r0, r3
 801103c:	3708      	adds	r7, #8
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	20012a68 	.word	0x20012a68
 8011048:	08011d1c 	.word	0x08011d1c

0801104c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	4603      	mov	r3, r0
 8011054:	6039      	str	r1, [r7, #0]
 8011056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	220c      	movs	r2, #12
 801105c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801105e:	4b03      	ldr	r3, [pc, #12]	; (801106c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011060:	4618      	mov	r0, r3
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr
 801106c:	20002668 	.word	0x20002668

08011070 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011076:	4b0f      	ldr	r3, [pc, #60]	; (80110b4 <Get_SerialNum+0x44>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801107c:	4b0e      	ldr	r3, [pc, #56]	; (80110b8 <Get_SerialNum+0x48>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011082:	4b0e      	ldr	r3, [pc, #56]	; (80110bc <Get_SerialNum+0x4c>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4413      	add	r3, r2
 801108e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d009      	beq.n	80110aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011096:	2208      	movs	r2, #8
 8011098:	4909      	ldr	r1, [pc, #36]	; (80110c0 <Get_SerialNum+0x50>)
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f000 f814 	bl	80110c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80110a0:	2204      	movs	r2, #4
 80110a2:	4908      	ldr	r1, [pc, #32]	; (80110c4 <Get_SerialNum+0x54>)
 80110a4:	68b8      	ldr	r0, [r7, #8]
 80110a6:	f000 f80f 	bl	80110c8 <IntToUnicode>
  }
}
 80110aa:	bf00      	nop
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	1fff7a10 	.word	0x1fff7a10
 80110b8:	1fff7a14 	.word	0x1fff7a14
 80110bc:	1fff7a18 	.word	0x1fff7a18
 80110c0:	2000267a 	.word	0x2000267a
 80110c4:	2000268a 	.word	0x2000268a

080110c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b087      	sub	sp, #28
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	4613      	mov	r3, r2
 80110d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80110d6:	2300      	movs	r3, #0
 80110d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80110da:	2300      	movs	r3, #0
 80110dc:	75fb      	strb	r3, [r7, #23]
 80110de:	e027      	b.n	8011130 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	0f1b      	lsrs	r3, r3, #28
 80110e4:	2b09      	cmp	r3, #9
 80110e6:	d80b      	bhi.n	8011100 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	0f1b      	lsrs	r3, r3, #28
 80110ec:	b2da      	uxtb	r2, r3
 80110ee:	7dfb      	ldrb	r3, [r7, #23]
 80110f0:	005b      	lsls	r3, r3, #1
 80110f2:	4619      	mov	r1, r3
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	440b      	add	r3, r1
 80110f8:	3230      	adds	r2, #48	; 0x30
 80110fa:	b2d2      	uxtb	r2, r2
 80110fc:	701a      	strb	r2, [r3, #0]
 80110fe:	e00a      	b.n	8011116 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	0f1b      	lsrs	r3, r3, #28
 8011104:	b2da      	uxtb	r2, r3
 8011106:	7dfb      	ldrb	r3, [r7, #23]
 8011108:	005b      	lsls	r3, r3, #1
 801110a:	4619      	mov	r1, r3
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	440b      	add	r3, r1
 8011110:	3237      	adds	r2, #55	; 0x37
 8011112:	b2d2      	uxtb	r2, r2
 8011114:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	011b      	lsls	r3, r3, #4
 801111a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801111c:	7dfb      	ldrb	r3, [r7, #23]
 801111e:	005b      	lsls	r3, r3, #1
 8011120:	3301      	adds	r3, #1
 8011122:	68ba      	ldr	r2, [r7, #8]
 8011124:	4413      	add	r3, r2
 8011126:	2200      	movs	r2, #0
 8011128:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801112a:	7dfb      	ldrb	r3, [r7, #23]
 801112c:	3301      	adds	r3, #1
 801112e:	75fb      	strb	r3, [r7, #23]
 8011130:	7dfa      	ldrb	r2, [r7, #23]
 8011132:	79fb      	ldrb	r3, [r7, #7]
 8011134:	429a      	cmp	r2, r3
 8011136:	d3d3      	bcc.n	80110e0 <IntToUnicode+0x18>
  }
}
 8011138:	bf00      	nop
 801113a:	bf00      	nop
 801113c:	371c      	adds	r7, #28
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr
	...

08011148 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b0a0      	sub	sp, #128	; 0x80
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011150:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011154:	2200      	movs	r2, #0
 8011156:	601a      	str	r2, [r3, #0]
 8011158:	605a      	str	r2, [r3, #4]
 801115a:	609a      	str	r2, [r3, #8]
 801115c:	60da      	str	r2, [r3, #12]
 801115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011160:	f107 0310 	add.w	r3, r7, #16
 8011164:	225c      	movs	r2, #92	; 0x5c
 8011166:	2100      	movs	r1, #0
 8011168:	4618      	mov	r0, r3
 801116a:	f000 fbbf 	bl	80118ec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011176:	d149      	bne.n	801120c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801117c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 801117e:	2300      	movs	r3, #0
 8011180:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011182:	f107 0310 	add.w	r3, r7, #16
 8011186:	4618      	mov	r0, r3
 8011188:	f7f3 fc06 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d001      	beq.n	8011196 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8011192:	f7ef fe25 	bl	8000de0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011196:	2300      	movs	r3, #0
 8011198:	60fb      	str	r3, [r7, #12]
 801119a:	4b1e      	ldr	r3, [pc, #120]	; (8011214 <HAL_PCD_MspInit+0xcc>)
 801119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801119e:	4a1d      	ldr	r2, [pc, #116]	; (8011214 <HAL_PCD_MspInit+0xcc>)
 80111a0:	f043 0301 	orr.w	r3, r3, #1
 80111a4:	6313      	str	r3, [r2, #48]	; 0x30
 80111a6:	4b1b      	ldr	r3, [pc, #108]	; (8011214 <HAL_PCD_MspInit+0xcc>)
 80111a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111aa:	f003 0301 	and.w	r3, r3, #1
 80111ae:	60fb      	str	r3, [r7, #12]
 80111b0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80111b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80111b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111b8:	2302      	movs	r3, #2
 80111ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111bc:	2300      	movs	r3, #0
 80111be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80111c0:	2303      	movs	r3, #3
 80111c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80111c4:	230a      	movs	r3, #10
 80111c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80111c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80111cc:	4619      	mov	r1, r3
 80111ce:	4812      	ldr	r0, [pc, #72]	; (8011218 <HAL_PCD_MspInit+0xd0>)
 80111d0:	f7f0 fe48 	bl	8001e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80111d4:	4b0f      	ldr	r3, [pc, #60]	; (8011214 <HAL_PCD_MspInit+0xcc>)
 80111d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111d8:	4a0e      	ldr	r2, [pc, #56]	; (8011214 <HAL_PCD_MspInit+0xcc>)
 80111da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111de:	6353      	str	r3, [r2, #52]	; 0x34
 80111e0:	2300      	movs	r3, #0
 80111e2:	60bb      	str	r3, [r7, #8]
 80111e4:	4b0b      	ldr	r3, [pc, #44]	; (8011214 <HAL_PCD_MspInit+0xcc>)
 80111e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111e8:	4a0a      	ldr	r2, [pc, #40]	; (8011214 <HAL_PCD_MspInit+0xcc>)
 80111ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80111ee:	6453      	str	r3, [r2, #68]	; 0x44
 80111f0:	4b08      	ldr	r3, [pc, #32]	; (8011214 <HAL_PCD_MspInit+0xcc>)
 80111f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111f8:	60bb      	str	r3, [r7, #8]
 80111fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80111fc:	2200      	movs	r2, #0
 80111fe:	2105      	movs	r1, #5
 8011200:	2043      	movs	r0, #67	; 0x43
 8011202:	f7f0 f9f5 	bl	80015f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011206:	2043      	movs	r0, #67	; 0x43
 8011208:	f7f0 fa0e 	bl	8001628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801120c:	bf00      	nop
 801120e:	3780      	adds	r7, #128	; 0x80
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	40023800 	.word	0x40023800
 8011218:	40020000 	.word	0x40020000

0801121c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f7f8 fbc3 	bl	80099be <USBD_LL_SetupStage>
}
 8011238:	bf00      	nop
 801123a:	3708      	adds	r7, #8
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}

08011240 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	460b      	mov	r3, r1
 801124a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011252:	78fa      	ldrb	r2, [r7, #3]
 8011254:	6879      	ldr	r1, [r7, #4]
 8011256:	4613      	mov	r3, r2
 8011258:	00db      	lsls	r3, r3, #3
 801125a:	4413      	add	r3, r2
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	440b      	add	r3, r1
 8011260:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	78fb      	ldrb	r3, [r7, #3]
 8011268:	4619      	mov	r1, r3
 801126a:	f7f8 fbfd 	bl	8009a68 <USBD_LL_DataOutStage>
}
 801126e:	bf00      	nop
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}

08011276 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011276:	b580      	push	{r7, lr}
 8011278:	b082      	sub	sp, #8
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	460b      	mov	r3, r1
 8011280:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011288:	78fa      	ldrb	r2, [r7, #3]
 801128a:	6879      	ldr	r1, [r7, #4]
 801128c:	4613      	mov	r3, r2
 801128e:	00db      	lsls	r3, r3, #3
 8011290:	4413      	add	r3, r2
 8011292:	009b      	lsls	r3, r3, #2
 8011294:	440b      	add	r3, r1
 8011296:	334c      	adds	r3, #76	; 0x4c
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	78fb      	ldrb	r3, [r7, #3]
 801129c:	4619      	mov	r1, r3
 801129e:	f7f8 fc96 	bl	8009bce <USBD_LL_DataInStage>
}
 80112a2:	bf00      	nop
 80112a4:	3708      	adds	r7, #8
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}

080112aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112aa:	b580      	push	{r7, lr}
 80112ac:	b082      	sub	sp, #8
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7f8 fdca 	bl	8009e52 <USBD_LL_SOF>
}
 80112be:	bf00      	nop
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}

080112c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b084      	sub	sp, #16
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80112ce:	2301      	movs	r3, #1
 80112d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d102      	bne.n	80112e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80112da:	2300      	movs	r3, #0
 80112dc:	73fb      	strb	r3, [r7, #15]
 80112de:	e008      	b.n	80112f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	2b02      	cmp	r3, #2
 80112e6:	d102      	bne.n	80112ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80112e8:	2301      	movs	r3, #1
 80112ea:	73fb      	strb	r3, [r7, #15]
 80112ec:	e001      	b.n	80112f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80112ee:	f7ef fd77 	bl	8000de0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80112f8:	7bfa      	ldrb	r2, [r7, #15]
 80112fa:	4611      	mov	r1, r2
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f8 fd6a 	bl	8009dd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011308:	4618      	mov	r0, r3
 801130a:	f7f8 fd12 	bl	8009d32 <USBD_LL_Reset>
}
 801130e:	bf00      	nop
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
	...

08011318 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011326:	4618      	mov	r0, r3
 8011328:	f7f8 fd65 	bl	8009df6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	6812      	ldr	r2, [r2, #0]
 801133a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801133e:	f043 0301 	orr.w	r3, r3, #1
 8011342:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6a1b      	ldr	r3, [r3, #32]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d005      	beq.n	8011358 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801134c:	4b04      	ldr	r3, [pc, #16]	; (8011360 <HAL_PCD_SuspendCallback+0x48>)
 801134e:	691b      	ldr	r3, [r3, #16]
 8011350:	4a03      	ldr	r2, [pc, #12]	; (8011360 <HAL_PCD_SuspendCallback+0x48>)
 8011352:	f043 0306 	orr.w	r3, r3, #6
 8011356:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011358:	bf00      	nop
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	e000ed00 	.word	0xe000ed00

08011364 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011372:	4618      	mov	r0, r3
 8011374:	f7f8 fd55 	bl	8009e22 <USBD_LL_Resume>
}
 8011378:	bf00      	nop
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	460b      	mov	r3, r1
 801138a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011392:	78fa      	ldrb	r2, [r7, #3]
 8011394:	4611      	mov	r1, r2
 8011396:	4618      	mov	r0, r3
 8011398:	f7f8 fdad 	bl	8009ef6 <USBD_LL_IsoOUTIncomplete>
}
 801139c:	bf00      	nop
 801139e:	3708      	adds	r7, #8
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	460b      	mov	r3, r1
 80113ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80113b6:	78fa      	ldrb	r2, [r7, #3]
 80113b8:	4611      	mov	r1, r2
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7f8 fd69 	bl	8009e92 <USBD_LL_IsoINIncomplete>
}
 80113c0:	bf00      	nop
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7f8 fdbf 	bl	8009f5a <USBD_LL_DevConnected>
}
 80113dc:	bf00      	nop
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7f8 fdbc 	bl	8009f70 <USBD_LL_DevDisconnected>
}
 80113f8:	bf00      	nop
 80113fa:	3708      	adds	r7, #8
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d13c      	bne.n	801148a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011410:	4a20      	ldr	r2, [pc, #128]	; (8011494 <USBD_LL_Init+0x94>)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	4a1e      	ldr	r2, [pc, #120]	; (8011494 <USBD_LL_Init+0x94>)
 801141c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011420:	4b1c      	ldr	r3, [pc, #112]	; (8011494 <USBD_LL_Init+0x94>)
 8011422:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011426:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011428:	4b1a      	ldr	r3, [pc, #104]	; (8011494 <USBD_LL_Init+0x94>)
 801142a:	2206      	movs	r2, #6
 801142c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801142e:	4b19      	ldr	r3, [pc, #100]	; (8011494 <USBD_LL_Init+0x94>)
 8011430:	2202      	movs	r2, #2
 8011432:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011434:	4b17      	ldr	r3, [pc, #92]	; (8011494 <USBD_LL_Init+0x94>)
 8011436:	2200      	movs	r2, #0
 8011438:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801143a:	4b16      	ldr	r3, [pc, #88]	; (8011494 <USBD_LL_Init+0x94>)
 801143c:	2202      	movs	r2, #2
 801143e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011440:	4b14      	ldr	r3, [pc, #80]	; (8011494 <USBD_LL_Init+0x94>)
 8011442:	2200      	movs	r2, #0
 8011444:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011446:	4b13      	ldr	r3, [pc, #76]	; (8011494 <USBD_LL_Init+0x94>)
 8011448:	2200      	movs	r2, #0
 801144a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801144c:	4b11      	ldr	r3, [pc, #68]	; (8011494 <USBD_LL_Init+0x94>)
 801144e:	2200      	movs	r2, #0
 8011450:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011452:	4b10      	ldr	r3, [pc, #64]	; (8011494 <USBD_LL_Init+0x94>)
 8011454:	2200      	movs	r2, #0
 8011456:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011458:	4b0e      	ldr	r3, [pc, #56]	; (8011494 <USBD_LL_Init+0x94>)
 801145a:	2200      	movs	r2, #0
 801145c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801145e:	480d      	ldr	r0, [pc, #52]	; (8011494 <USBD_LL_Init+0x94>)
 8011460:	f7f1 fe85 	bl	800316e <HAL_PCD_Init>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d001      	beq.n	801146e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801146a:	f7ef fcb9 	bl	8000de0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801146e:	2180      	movs	r1, #128	; 0x80
 8011470:	4808      	ldr	r0, [pc, #32]	; (8011494 <USBD_LL_Init+0x94>)
 8011472:	f7f3 f910 	bl	8004696 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011476:	2240      	movs	r2, #64	; 0x40
 8011478:	2100      	movs	r1, #0
 801147a:	4806      	ldr	r0, [pc, #24]	; (8011494 <USBD_LL_Init+0x94>)
 801147c:	f7f3 f8c4 	bl	8004608 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011480:	2280      	movs	r2, #128	; 0x80
 8011482:	2101      	movs	r1, #1
 8011484:	4803      	ldr	r0, [pc, #12]	; (8011494 <USBD_LL_Init+0x94>)
 8011486:	f7f3 f8bf 	bl	8004608 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801148a:	2300      	movs	r3, #0
}
 801148c:	4618      	mov	r0, r3
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	20012c68 	.word	0x20012c68

08011498 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114a0:	2300      	movs	r3, #0
 80114a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114a4:	2300      	movs	r3, #0
 80114a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7f1 ff81 	bl	80033b6 <HAL_PCD_Start>
 80114b4:	4603      	mov	r3, r0
 80114b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114b8:	7bfb      	ldrb	r3, [r7, #15]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f000 f990 	bl	80117e0 <USBD_Get_USB_Status>
 80114c0:	4603      	mov	r3, r0
 80114c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3710      	adds	r7, #16
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}

080114ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80114ce:	b580      	push	{r7, lr}
 80114d0:	b084      	sub	sp, #16
 80114d2:	af00      	add	r7, sp, #0
 80114d4:	6078      	str	r0, [r7, #4]
 80114d6:	4608      	mov	r0, r1
 80114d8:	4611      	mov	r1, r2
 80114da:	461a      	mov	r2, r3
 80114dc:	4603      	mov	r3, r0
 80114de:	70fb      	strb	r3, [r7, #3]
 80114e0:	460b      	mov	r3, r1
 80114e2:	70bb      	strb	r3, [r7, #2]
 80114e4:	4613      	mov	r3, r2
 80114e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114ec:	2300      	movs	r3, #0
 80114ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80114f6:	78bb      	ldrb	r3, [r7, #2]
 80114f8:	883a      	ldrh	r2, [r7, #0]
 80114fa:	78f9      	ldrb	r1, [r7, #3]
 80114fc:	f7f2 fc7f 	bl	8003dfe <HAL_PCD_EP_Open>
 8011500:	4603      	mov	r3, r0
 8011502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011504:	7bfb      	ldrb	r3, [r7, #15]
 8011506:	4618      	mov	r0, r3
 8011508:	f000 f96a 	bl	80117e0 <USBD_Get_USB_Status>
 801150c:	4603      	mov	r3, r0
 801150e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011510:	7bbb      	ldrb	r3, [r7, #14]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801151a:	b580      	push	{r7, lr}
 801151c:	b084      	sub	sp, #16
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
 8011522:	460b      	mov	r3, r1
 8011524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011526:	2300      	movs	r3, #0
 8011528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801152a:	2300      	movs	r3, #0
 801152c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011534:	78fa      	ldrb	r2, [r7, #3]
 8011536:	4611      	mov	r1, r2
 8011538:	4618      	mov	r0, r3
 801153a:	f7f2 fcc8 	bl	8003ece <HAL_PCD_EP_Close>
 801153e:	4603      	mov	r3, r0
 8011540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011542:	7bfb      	ldrb	r3, [r7, #15]
 8011544:	4618      	mov	r0, r3
 8011546:	f000 f94b 	bl	80117e0 <USBD_Get_USB_Status>
 801154a:	4603      	mov	r3, r0
 801154c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801154e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3710      	adds	r7, #16
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	460b      	mov	r3, r1
 8011562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011564:	2300      	movs	r3, #0
 8011566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011568:	2300      	movs	r3, #0
 801156a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011572:	78fa      	ldrb	r2, [r7, #3]
 8011574:	4611      	mov	r1, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7f2 fda0 	bl	80040bc <HAL_PCD_EP_SetStall>
 801157c:	4603      	mov	r3, r0
 801157e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	4618      	mov	r0, r3
 8011584:	f000 f92c 	bl	80117e0 <USBD_Get_USB_Status>
 8011588:	4603      	mov	r3, r0
 801158a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801158c:	7bbb      	ldrb	r3, [r7, #14]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	460b      	mov	r3, r1
 80115a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115a2:	2300      	movs	r3, #0
 80115a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115b0:	78fa      	ldrb	r2, [r7, #3]
 80115b2:	4611      	mov	r1, r2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7f2 fde5 	bl	8004184 <HAL_PCD_EP_ClrStall>
 80115ba:	4603      	mov	r3, r0
 80115bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115be:	7bfb      	ldrb	r3, [r7, #15]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f000 f90d 	bl	80117e0 <USBD_Get_USB_Status>
 80115c6:	4603      	mov	r3, r0
 80115c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3710      	adds	r7, #16
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	460b      	mov	r3, r1
 80115de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80115e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	da0b      	bge.n	8011608 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80115f0:	78fb      	ldrb	r3, [r7, #3]
 80115f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80115f6:	68f9      	ldr	r1, [r7, #12]
 80115f8:	4613      	mov	r3, r2
 80115fa:	00db      	lsls	r3, r3, #3
 80115fc:	4413      	add	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	440b      	add	r3, r1
 8011602:	333e      	adds	r3, #62	; 0x3e
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	e00b      	b.n	8011620 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011608:	78fb      	ldrb	r3, [r7, #3]
 801160a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801160e:	68f9      	ldr	r1, [r7, #12]
 8011610:	4613      	mov	r3, r2
 8011612:	00db      	lsls	r3, r3, #3
 8011614:	4413      	add	r3, r2
 8011616:	009b      	lsls	r3, r3, #2
 8011618:	440b      	add	r3, r1
 801161a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801161e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011620:	4618      	mov	r0, r3
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	460b      	mov	r3, r1
 8011636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011638:	2300      	movs	r3, #0
 801163a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801163c:	2300      	movs	r3, #0
 801163e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011646:	78fa      	ldrb	r2, [r7, #3]
 8011648:	4611      	mov	r1, r2
 801164a:	4618      	mov	r0, r3
 801164c:	f7f2 fbb2 	bl	8003db4 <HAL_PCD_SetAddress>
 8011650:	4603      	mov	r3, r0
 8011652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011654:	7bfb      	ldrb	r3, [r7, #15]
 8011656:	4618      	mov	r0, r3
 8011658:	f000 f8c2 	bl	80117e0 <USBD_Get_USB_Status>
 801165c:	4603      	mov	r3, r0
 801165e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011660:	7bbb      	ldrb	r3, [r7, #14]
}
 8011662:	4618      	mov	r0, r3
 8011664:	3710      	adds	r7, #16
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}

0801166a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801166a:	b580      	push	{r7, lr}
 801166c:	b086      	sub	sp, #24
 801166e:	af00      	add	r7, sp, #0
 8011670:	60f8      	str	r0, [r7, #12]
 8011672:	607a      	str	r2, [r7, #4]
 8011674:	603b      	str	r3, [r7, #0]
 8011676:	460b      	mov	r3, r1
 8011678:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011688:	7af9      	ldrb	r1, [r7, #11]
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	687a      	ldr	r2, [r7, #4]
 801168e:	f7f2 fccb 	bl	8004028 <HAL_PCD_EP_Transmit>
 8011692:	4603      	mov	r3, r0
 8011694:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011696:	7dfb      	ldrb	r3, [r7, #23]
 8011698:	4618      	mov	r0, r3
 801169a:	f000 f8a1 	bl	80117e0 <USBD_Get_USB_Status>
 801169e:	4603      	mov	r3, r0
 80116a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3718      	adds	r7, #24
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b086      	sub	sp, #24
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	607a      	str	r2, [r7, #4]
 80116b6:	603b      	str	r3, [r7, #0]
 80116b8:	460b      	mov	r3, r1
 80116ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116bc:	2300      	movs	r3, #0
 80116be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116c0:	2300      	movs	r3, #0
 80116c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80116ca:	7af9      	ldrb	r1, [r7, #11]
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	f7f2 fc47 	bl	8003f62 <HAL_PCD_EP_Receive>
 80116d4:	4603      	mov	r3, r0
 80116d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116d8:	7dfb      	ldrb	r3, [r7, #23]
 80116da:	4618      	mov	r0, r3
 80116dc:	f000 f880 	bl	80117e0 <USBD_Get_USB_Status>
 80116e0:	4603      	mov	r3, r0
 80116e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3718      	adds	r7, #24
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}

080116ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80116ee:	b580      	push	{r7, lr}
 80116f0:	b082      	sub	sp, #8
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	460b      	mov	r3, r1
 80116f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011700:	78fa      	ldrb	r2, [r7, #3]
 8011702:	4611      	mov	r1, r2
 8011704:	4618      	mov	r0, r3
 8011706:	f7f2 fc77 	bl	8003ff8 <HAL_PCD_EP_GetRxCount>
 801170a:	4603      	mov	r3, r0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	460b      	mov	r3, r1
 801171e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011720:	78fb      	ldrb	r3, [r7, #3]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d002      	beq.n	801172c <HAL_PCDEx_LPM_Callback+0x18>
 8011726:	2b01      	cmp	r3, #1
 8011728:	d01f      	beq.n	801176a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801172a:	e03b      	b.n	80117a4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6a1b      	ldr	r3, [r3, #32]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d007      	beq.n	8011744 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8011734:	f7ef f850 	bl	80007d8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011738:	4b1c      	ldr	r3, [pc, #112]	; (80117ac <HAL_PCDEx_LPM_Callback+0x98>)
 801173a:	691b      	ldr	r3, [r3, #16]
 801173c:	4a1b      	ldr	r2, [pc, #108]	; (80117ac <HAL_PCDEx_LPM_Callback+0x98>)
 801173e:	f023 0306 	bic.w	r3, r3, #6
 8011742:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	6812      	ldr	r2, [r2, #0]
 8011752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011756:	f023 0301 	bic.w	r3, r3, #1
 801175a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011762:	4618      	mov	r0, r3
 8011764:	f7f8 fb5d 	bl	8009e22 <USBD_LL_Resume>
    break;
 8011768:	e01c      	b.n	80117a4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	6812      	ldr	r2, [r2, #0]
 8011778:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801177c:	f043 0301 	orr.w	r3, r3, #1
 8011780:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011788:	4618      	mov	r0, r3
 801178a:	f7f8 fb34 	bl	8009df6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a1b      	ldr	r3, [r3, #32]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d005      	beq.n	80117a2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011796:	4b05      	ldr	r3, [pc, #20]	; (80117ac <HAL_PCDEx_LPM_Callback+0x98>)
 8011798:	691b      	ldr	r3, [r3, #16]
 801179a:	4a04      	ldr	r2, [pc, #16]	; (80117ac <HAL_PCDEx_LPM_Callback+0x98>)
 801179c:	f043 0306 	orr.w	r3, r3, #6
 80117a0:	6113      	str	r3, [r2, #16]
    break;
 80117a2:	bf00      	nop
}
 80117a4:	bf00      	nop
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	e000ed00 	.word	0xe000ed00

080117b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80117b8:	4b03      	ldr	r3, [pc, #12]	; (80117c8 <USBD_static_malloc+0x18>)
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	370c      	adds	r7, #12
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr
 80117c6:	bf00      	nop
 80117c8:	20013174 	.word	0x20013174

080117cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b083      	sub	sp, #12
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]

}
 80117d4:	bf00      	nop
 80117d6:	370c      	adds	r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b085      	sub	sp, #20
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	4603      	mov	r3, r0
 80117e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80117ee:	79fb      	ldrb	r3, [r7, #7]
 80117f0:	2b03      	cmp	r3, #3
 80117f2:	d817      	bhi.n	8011824 <USBD_Get_USB_Status+0x44>
 80117f4:	a201      	add	r2, pc, #4	; (adr r2, 80117fc <USBD_Get_USB_Status+0x1c>)
 80117f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117fa:	bf00      	nop
 80117fc:	0801180d 	.word	0x0801180d
 8011800:	08011813 	.word	0x08011813
 8011804:	08011819 	.word	0x08011819
 8011808:	0801181f 	.word	0x0801181f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801180c:	2300      	movs	r3, #0
 801180e:	73fb      	strb	r3, [r7, #15]
    break;
 8011810:	e00b      	b.n	801182a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011812:	2303      	movs	r3, #3
 8011814:	73fb      	strb	r3, [r7, #15]
    break;
 8011816:	e008      	b.n	801182a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011818:	2301      	movs	r3, #1
 801181a:	73fb      	strb	r3, [r7, #15]
    break;
 801181c:	e005      	b.n	801182a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801181e:	2303      	movs	r3, #3
 8011820:	73fb      	strb	r3, [r7, #15]
    break;
 8011822:	e002      	b.n	801182a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011824:	2303      	movs	r3, #3
 8011826:	73fb      	strb	r3, [r7, #15]
    break;
 8011828:	bf00      	nop
  }
  return usb_status;
 801182a:	7bfb      	ldrb	r3, [r7, #15]
}
 801182c:	4618      	mov	r0, r3
 801182e:	3714      	adds	r7, #20
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <__errno>:
 8011838:	4b01      	ldr	r3, [pc, #4]	; (8011840 <__errno+0x8>)
 801183a:	6818      	ldr	r0, [r3, #0]
 801183c:	4770      	bx	lr
 801183e:	bf00      	nop
 8011840:	20002694 	.word	0x20002694

08011844 <__libc_init_array>:
 8011844:	b570      	push	{r4, r5, r6, lr}
 8011846:	4d0d      	ldr	r5, [pc, #52]	; (801187c <__libc_init_array+0x38>)
 8011848:	4c0d      	ldr	r4, [pc, #52]	; (8011880 <__libc_init_array+0x3c>)
 801184a:	1b64      	subs	r4, r4, r5
 801184c:	10a4      	asrs	r4, r4, #2
 801184e:	2600      	movs	r6, #0
 8011850:	42a6      	cmp	r6, r4
 8011852:	d109      	bne.n	8011868 <__libc_init_array+0x24>
 8011854:	4d0b      	ldr	r5, [pc, #44]	; (8011884 <__libc_init_array+0x40>)
 8011856:	4c0c      	ldr	r4, [pc, #48]	; (8011888 <__libc_init_array+0x44>)
 8011858:	f000 f9b6 	bl	8011bc8 <_init>
 801185c:	1b64      	subs	r4, r4, r5
 801185e:	10a4      	asrs	r4, r4, #2
 8011860:	2600      	movs	r6, #0
 8011862:	42a6      	cmp	r6, r4
 8011864:	d105      	bne.n	8011872 <__libc_init_array+0x2e>
 8011866:	bd70      	pop	{r4, r5, r6, pc}
 8011868:	f855 3b04 	ldr.w	r3, [r5], #4
 801186c:	4798      	blx	r3
 801186e:	3601      	adds	r6, #1
 8011870:	e7ee      	b.n	8011850 <__libc_init_array+0xc>
 8011872:	f855 3b04 	ldr.w	r3, [r5], #4
 8011876:	4798      	blx	r3
 8011878:	3601      	adds	r6, #1
 801187a:	e7f2      	b.n	8011862 <__libc_init_array+0x1e>
 801187c:	08011e3c 	.word	0x08011e3c
 8011880:	08011e3c 	.word	0x08011e3c
 8011884:	08011e3c 	.word	0x08011e3c
 8011888:	08011e40 	.word	0x08011e40

0801188c <__retarget_lock_acquire_recursive>:
 801188c:	4770      	bx	lr

0801188e <__retarget_lock_release_recursive>:
 801188e:	4770      	bx	lr

08011890 <malloc>:
 8011890:	4b02      	ldr	r3, [pc, #8]	; (801189c <malloc+0xc>)
 8011892:	4601      	mov	r1, r0
 8011894:	6818      	ldr	r0, [r3, #0]
 8011896:	f000 b89d 	b.w	80119d4 <_malloc_r>
 801189a:	bf00      	nop
 801189c:	20002694 	.word	0x20002694

080118a0 <free>:
 80118a0:	4b02      	ldr	r3, [pc, #8]	; (80118ac <free+0xc>)
 80118a2:	4601      	mov	r1, r0
 80118a4:	6818      	ldr	r0, [r3, #0]
 80118a6:	f000 b829 	b.w	80118fc <_free_r>
 80118aa:	bf00      	nop
 80118ac:	20002694 	.word	0x20002694

080118b0 <memcmp>:
 80118b0:	b510      	push	{r4, lr}
 80118b2:	3901      	subs	r1, #1
 80118b4:	4402      	add	r2, r0
 80118b6:	4290      	cmp	r0, r2
 80118b8:	d101      	bne.n	80118be <memcmp+0xe>
 80118ba:	2000      	movs	r0, #0
 80118bc:	e005      	b.n	80118ca <memcmp+0x1a>
 80118be:	7803      	ldrb	r3, [r0, #0]
 80118c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80118c4:	42a3      	cmp	r3, r4
 80118c6:	d001      	beq.n	80118cc <memcmp+0x1c>
 80118c8:	1b18      	subs	r0, r3, r4
 80118ca:	bd10      	pop	{r4, pc}
 80118cc:	3001      	adds	r0, #1
 80118ce:	e7f2      	b.n	80118b6 <memcmp+0x6>

080118d0 <memcpy>:
 80118d0:	440a      	add	r2, r1
 80118d2:	4291      	cmp	r1, r2
 80118d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80118d8:	d100      	bne.n	80118dc <memcpy+0xc>
 80118da:	4770      	bx	lr
 80118dc:	b510      	push	{r4, lr}
 80118de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118e6:	4291      	cmp	r1, r2
 80118e8:	d1f9      	bne.n	80118de <memcpy+0xe>
 80118ea:	bd10      	pop	{r4, pc}

080118ec <memset>:
 80118ec:	4402      	add	r2, r0
 80118ee:	4603      	mov	r3, r0
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d100      	bne.n	80118f6 <memset+0xa>
 80118f4:	4770      	bx	lr
 80118f6:	f803 1b01 	strb.w	r1, [r3], #1
 80118fa:	e7f9      	b.n	80118f0 <memset+0x4>

080118fc <_free_r>:
 80118fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118fe:	2900      	cmp	r1, #0
 8011900:	d044      	beq.n	801198c <_free_r+0x90>
 8011902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011906:	9001      	str	r0, [sp, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	f1a1 0404 	sub.w	r4, r1, #4
 801190e:	bfb8      	it	lt
 8011910:	18e4      	addlt	r4, r4, r3
 8011912:	f000 f94d 	bl	8011bb0 <__malloc_lock>
 8011916:	4a1e      	ldr	r2, [pc, #120]	; (8011990 <_free_r+0x94>)
 8011918:	9801      	ldr	r0, [sp, #4]
 801191a:	6813      	ldr	r3, [r2, #0]
 801191c:	b933      	cbnz	r3, 801192c <_free_r+0x30>
 801191e:	6063      	str	r3, [r4, #4]
 8011920:	6014      	str	r4, [r2, #0]
 8011922:	b003      	add	sp, #12
 8011924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011928:	f000 b948 	b.w	8011bbc <__malloc_unlock>
 801192c:	42a3      	cmp	r3, r4
 801192e:	d908      	bls.n	8011942 <_free_r+0x46>
 8011930:	6825      	ldr	r5, [r4, #0]
 8011932:	1961      	adds	r1, r4, r5
 8011934:	428b      	cmp	r3, r1
 8011936:	bf01      	itttt	eq
 8011938:	6819      	ldreq	r1, [r3, #0]
 801193a:	685b      	ldreq	r3, [r3, #4]
 801193c:	1949      	addeq	r1, r1, r5
 801193e:	6021      	streq	r1, [r4, #0]
 8011940:	e7ed      	b.n	801191e <_free_r+0x22>
 8011942:	461a      	mov	r2, r3
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	b10b      	cbz	r3, 801194c <_free_r+0x50>
 8011948:	42a3      	cmp	r3, r4
 801194a:	d9fa      	bls.n	8011942 <_free_r+0x46>
 801194c:	6811      	ldr	r1, [r2, #0]
 801194e:	1855      	adds	r5, r2, r1
 8011950:	42a5      	cmp	r5, r4
 8011952:	d10b      	bne.n	801196c <_free_r+0x70>
 8011954:	6824      	ldr	r4, [r4, #0]
 8011956:	4421      	add	r1, r4
 8011958:	1854      	adds	r4, r2, r1
 801195a:	42a3      	cmp	r3, r4
 801195c:	6011      	str	r1, [r2, #0]
 801195e:	d1e0      	bne.n	8011922 <_free_r+0x26>
 8011960:	681c      	ldr	r4, [r3, #0]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	6053      	str	r3, [r2, #4]
 8011966:	4421      	add	r1, r4
 8011968:	6011      	str	r1, [r2, #0]
 801196a:	e7da      	b.n	8011922 <_free_r+0x26>
 801196c:	d902      	bls.n	8011974 <_free_r+0x78>
 801196e:	230c      	movs	r3, #12
 8011970:	6003      	str	r3, [r0, #0]
 8011972:	e7d6      	b.n	8011922 <_free_r+0x26>
 8011974:	6825      	ldr	r5, [r4, #0]
 8011976:	1961      	adds	r1, r4, r5
 8011978:	428b      	cmp	r3, r1
 801197a:	bf04      	itt	eq
 801197c:	6819      	ldreq	r1, [r3, #0]
 801197e:	685b      	ldreq	r3, [r3, #4]
 8011980:	6063      	str	r3, [r4, #4]
 8011982:	bf04      	itt	eq
 8011984:	1949      	addeq	r1, r1, r5
 8011986:	6021      	streq	r1, [r4, #0]
 8011988:	6054      	str	r4, [r2, #4]
 801198a:	e7ca      	b.n	8011922 <_free_r+0x26>
 801198c:	b003      	add	sp, #12
 801198e:	bd30      	pop	{r4, r5, pc}
 8011990:	20013398 	.word	0x20013398

08011994 <sbrk_aligned>:
 8011994:	b570      	push	{r4, r5, r6, lr}
 8011996:	4e0e      	ldr	r6, [pc, #56]	; (80119d0 <sbrk_aligned+0x3c>)
 8011998:	460c      	mov	r4, r1
 801199a:	6831      	ldr	r1, [r6, #0]
 801199c:	4605      	mov	r5, r0
 801199e:	b911      	cbnz	r1, 80119a6 <sbrk_aligned+0x12>
 80119a0:	f000 f8f6 	bl	8011b90 <_sbrk_r>
 80119a4:	6030      	str	r0, [r6, #0]
 80119a6:	4621      	mov	r1, r4
 80119a8:	4628      	mov	r0, r5
 80119aa:	f000 f8f1 	bl	8011b90 <_sbrk_r>
 80119ae:	1c43      	adds	r3, r0, #1
 80119b0:	d00a      	beq.n	80119c8 <sbrk_aligned+0x34>
 80119b2:	1cc4      	adds	r4, r0, #3
 80119b4:	f024 0403 	bic.w	r4, r4, #3
 80119b8:	42a0      	cmp	r0, r4
 80119ba:	d007      	beq.n	80119cc <sbrk_aligned+0x38>
 80119bc:	1a21      	subs	r1, r4, r0
 80119be:	4628      	mov	r0, r5
 80119c0:	f000 f8e6 	bl	8011b90 <_sbrk_r>
 80119c4:	3001      	adds	r0, #1
 80119c6:	d101      	bne.n	80119cc <sbrk_aligned+0x38>
 80119c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80119cc:	4620      	mov	r0, r4
 80119ce:	bd70      	pop	{r4, r5, r6, pc}
 80119d0:	2001339c 	.word	0x2001339c

080119d4 <_malloc_r>:
 80119d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d8:	1ccd      	adds	r5, r1, #3
 80119da:	f025 0503 	bic.w	r5, r5, #3
 80119de:	3508      	adds	r5, #8
 80119e0:	2d0c      	cmp	r5, #12
 80119e2:	bf38      	it	cc
 80119e4:	250c      	movcc	r5, #12
 80119e6:	2d00      	cmp	r5, #0
 80119e8:	4607      	mov	r7, r0
 80119ea:	db01      	blt.n	80119f0 <_malloc_r+0x1c>
 80119ec:	42a9      	cmp	r1, r5
 80119ee:	d905      	bls.n	80119fc <_malloc_r+0x28>
 80119f0:	230c      	movs	r3, #12
 80119f2:	603b      	str	r3, [r7, #0]
 80119f4:	2600      	movs	r6, #0
 80119f6:	4630      	mov	r0, r6
 80119f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119fc:	4e2e      	ldr	r6, [pc, #184]	; (8011ab8 <_malloc_r+0xe4>)
 80119fe:	f000 f8d7 	bl	8011bb0 <__malloc_lock>
 8011a02:	6833      	ldr	r3, [r6, #0]
 8011a04:	461c      	mov	r4, r3
 8011a06:	bb34      	cbnz	r4, 8011a56 <_malloc_r+0x82>
 8011a08:	4629      	mov	r1, r5
 8011a0a:	4638      	mov	r0, r7
 8011a0c:	f7ff ffc2 	bl	8011994 <sbrk_aligned>
 8011a10:	1c43      	adds	r3, r0, #1
 8011a12:	4604      	mov	r4, r0
 8011a14:	d14d      	bne.n	8011ab2 <_malloc_r+0xde>
 8011a16:	6834      	ldr	r4, [r6, #0]
 8011a18:	4626      	mov	r6, r4
 8011a1a:	2e00      	cmp	r6, #0
 8011a1c:	d140      	bne.n	8011aa0 <_malloc_r+0xcc>
 8011a1e:	6823      	ldr	r3, [r4, #0]
 8011a20:	4631      	mov	r1, r6
 8011a22:	4638      	mov	r0, r7
 8011a24:	eb04 0803 	add.w	r8, r4, r3
 8011a28:	f000 f8b2 	bl	8011b90 <_sbrk_r>
 8011a2c:	4580      	cmp	r8, r0
 8011a2e:	d13a      	bne.n	8011aa6 <_malloc_r+0xd2>
 8011a30:	6821      	ldr	r1, [r4, #0]
 8011a32:	3503      	adds	r5, #3
 8011a34:	1a6d      	subs	r5, r5, r1
 8011a36:	f025 0503 	bic.w	r5, r5, #3
 8011a3a:	3508      	adds	r5, #8
 8011a3c:	2d0c      	cmp	r5, #12
 8011a3e:	bf38      	it	cc
 8011a40:	250c      	movcc	r5, #12
 8011a42:	4629      	mov	r1, r5
 8011a44:	4638      	mov	r0, r7
 8011a46:	f7ff ffa5 	bl	8011994 <sbrk_aligned>
 8011a4a:	3001      	adds	r0, #1
 8011a4c:	d02b      	beq.n	8011aa6 <_malloc_r+0xd2>
 8011a4e:	6823      	ldr	r3, [r4, #0]
 8011a50:	442b      	add	r3, r5
 8011a52:	6023      	str	r3, [r4, #0]
 8011a54:	e00e      	b.n	8011a74 <_malloc_r+0xa0>
 8011a56:	6822      	ldr	r2, [r4, #0]
 8011a58:	1b52      	subs	r2, r2, r5
 8011a5a:	d41e      	bmi.n	8011a9a <_malloc_r+0xc6>
 8011a5c:	2a0b      	cmp	r2, #11
 8011a5e:	d916      	bls.n	8011a8e <_malloc_r+0xba>
 8011a60:	1961      	adds	r1, r4, r5
 8011a62:	42a3      	cmp	r3, r4
 8011a64:	6025      	str	r5, [r4, #0]
 8011a66:	bf18      	it	ne
 8011a68:	6059      	strne	r1, [r3, #4]
 8011a6a:	6863      	ldr	r3, [r4, #4]
 8011a6c:	bf08      	it	eq
 8011a6e:	6031      	streq	r1, [r6, #0]
 8011a70:	5162      	str	r2, [r4, r5]
 8011a72:	604b      	str	r3, [r1, #4]
 8011a74:	4638      	mov	r0, r7
 8011a76:	f104 060b 	add.w	r6, r4, #11
 8011a7a:	f000 f89f 	bl	8011bbc <__malloc_unlock>
 8011a7e:	f026 0607 	bic.w	r6, r6, #7
 8011a82:	1d23      	adds	r3, r4, #4
 8011a84:	1af2      	subs	r2, r6, r3
 8011a86:	d0b6      	beq.n	80119f6 <_malloc_r+0x22>
 8011a88:	1b9b      	subs	r3, r3, r6
 8011a8a:	50a3      	str	r3, [r4, r2]
 8011a8c:	e7b3      	b.n	80119f6 <_malloc_r+0x22>
 8011a8e:	6862      	ldr	r2, [r4, #4]
 8011a90:	42a3      	cmp	r3, r4
 8011a92:	bf0c      	ite	eq
 8011a94:	6032      	streq	r2, [r6, #0]
 8011a96:	605a      	strne	r2, [r3, #4]
 8011a98:	e7ec      	b.n	8011a74 <_malloc_r+0xa0>
 8011a9a:	4623      	mov	r3, r4
 8011a9c:	6864      	ldr	r4, [r4, #4]
 8011a9e:	e7b2      	b.n	8011a06 <_malloc_r+0x32>
 8011aa0:	4634      	mov	r4, r6
 8011aa2:	6876      	ldr	r6, [r6, #4]
 8011aa4:	e7b9      	b.n	8011a1a <_malloc_r+0x46>
 8011aa6:	230c      	movs	r3, #12
 8011aa8:	603b      	str	r3, [r7, #0]
 8011aaa:	4638      	mov	r0, r7
 8011aac:	f000 f886 	bl	8011bbc <__malloc_unlock>
 8011ab0:	e7a1      	b.n	80119f6 <_malloc_r+0x22>
 8011ab2:	6025      	str	r5, [r4, #0]
 8011ab4:	e7de      	b.n	8011a74 <_malloc_r+0xa0>
 8011ab6:	bf00      	nop
 8011ab8:	20013398 	.word	0x20013398

08011abc <cleanup_glue>:
 8011abc:	b538      	push	{r3, r4, r5, lr}
 8011abe:	460c      	mov	r4, r1
 8011ac0:	6809      	ldr	r1, [r1, #0]
 8011ac2:	4605      	mov	r5, r0
 8011ac4:	b109      	cbz	r1, 8011aca <cleanup_glue+0xe>
 8011ac6:	f7ff fff9 	bl	8011abc <cleanup_glue>
 8011aca:	4621      	mov	r1, r4
 8011acc:	4628      	mov	r0, r5
 8011ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ad2:	f7ff bf13 	b.w	80118fc <_free_r>
	...

08011ad8 <_reclaim_reent>:
 8011ad8:	4b2c      	ldr	r3, [pc, #176]	; (8011b8c <_reclaim_reent+0xb4>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4283      	cmp	r3, r0
 8011ade:	b570      	push	{r4, r5, r6, lr}
 8011ae0:	4604      	mov	r4, r0
 8011ae2:	d051      	beq.n	8011b88 <_reclaim_reent+0xb0>
 8011ae4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011ae6:	b143      	cbz	r3, 8011afa <_reclaim_reent+0x22>
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d14a      	bne.n	8011b84 <_reclaim_reent+0xac>
 8011aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011af0:	6819      	ldr	r1, [r3, #0]
 8011af2:	b111      	cbz	r1, 8011afa <_reclaim_reent+0x22>
 8011af4:	4620      	mov	r0, r4
 8011af6:	f7ff ff01 	bl	80118fc <_free_r>
 8011afa:	6961      	ldr	r1, [r4, #20]
 8011afc:	b111      	cbz	r1, 8011b04 <_reclaim_reent+0x2c>
 8011afe:	4620      	mov	r0, r4
 8011b00:	f7ff fefc 	bl	80118fc <_free_r>
 8011b04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011b06:	b111      	cbz	r1, 8011b0e <_reclaim_reent+0x36>
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f7ff fef7 	bl	80118fc <_free_r>
 8011b0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011b10:	b111      	cbz	r1, 8011b18 <_reclaim_reent+0x40>
 8011b12:	4620      	mov	r0, r4
 8011b14:	f7ff fef2 	bl	80118fc <_free_r>
 8011b18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011b1a:	b111      	cbz	r1, 8011b22 <_reclaim_reent+0x4a>
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f7ff feed 	bl	80118fc <_free_r>
 8011b22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011b24:	b111      	cbz	r1, 8011b2c <_reclaim_reent+0x54>
 8011b26:	4620      	mov	r0, r4
 8011b28:	f7ff fee8 	bl	80118fc <_free_r>
 8011b2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011b2e:	b111      	cbz	r1, 8011b36 <_reclaim_reent+0x5e>
 8011b30:	4620      	mov	r0, r4
 8011b32:	f7ff fee3 	bl	80118fc <_free_r>
 8011b36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011b38:	b111      	cbz	r1, 8011b40 <_reclaim_reent+0x68>
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f7ff fede 	bl	80118fc <_free_r>
 8011b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b42:	b111      	cbz	r1, 8011b4a <_reclaim_reent+0x72>
 8011b44:	4620      	mov	r0, r4
 8011b46:	f7ff fed9 	bl	80118fc <_free_r>
 8011b4a:	69a3      	ldr	r3, [r4, #24]
 8011b4c:	b1e3      	cbz	r3, 8011b88 <_reclaim_reent+0xb0>
 8011b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011b50:	4620      	mov	r0, r4
 8011b52:	4798      	blx	r3
 8011b54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011b56:	b1b9      	cbz	r1, 8011b88 <_reclaim_reent+0xb0>
 8011b58:	4620      	mov	r0, r4
 8011b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b5e:	f7ff bfad 	b.w	8011abc <cleanup_glue>
 8011b62:	5949      	ldr	r1, [r1, r5]
 8011b64:	b941      	cbnz	r1, 8011b78 <_reclaim_reent+0xa0>
 8011b66:	3504      	adds	r5, #4
 8011b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b6a:	2d80      	cmp	r5, #128	; 0x80
 8011b6c:	68d9      	ldr	r1, [r3, #12]
 8011b6e:	d1f8      	bne.n	8011b62 <_reclaim_reent+0x8a>
 8011b70:	4620      	mov	r0, r4
 8011b72:	f7ff fec3 	bl	80118fc <_free_r>
 8011b76:	e7ba      	b.n	8011aee <_reclaim_reent+0x16>
 8011b78:	680e      	ldr	r6, [r1, #0]
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f7ff febe 	bl	80118fc <_free_r>
 8011b80:	4631      	mov	r1, r6
 8011b82:	e7ef      	b.n	8011b64 <_reclaim_reent+0x8c>
 8011b84:	2500      	movs	r5, #0
 8011b86:	e7ef      	b.n	8011b68 <_reclaim_reent+0x90>
 8011b88:	bd70      	pop	{r4, r5, r6, pc}
 8011b8a:	bf00      	nop
 8011b8c:	20002694 	.word	0x20002694

08011b90 <_sbrk_r>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	4d06      	ldr	r5, [pc, #24]	; (8011bac <_sbrk_r+0x1c>)
 8011b94:	2300      	movs	r3, #0
 8011b96:	4604      	mov	r4, r0
 8011b98:	4608      	mov	r0, r1
 8011b9a:	602b      	str	r3, [r5, #0]
 8011b9c:	f7ef fb74 	bl	8001288 <_sbrk>
 8011ba0:	1c43      	adds	r3, r0, #1
 8011ba2:	d102      	bne.n	8011baa <_sbrk_r+0x1a>
 8011ba4:	682b      	ldr	r3, [r5, #0]
 8011ba6:	b103      	cbz	r3, 8011baa <_sbrk_r+0x1a>
 8011ba8:	6023      	str	r3, [r4, #0]
 8011baa:	bd38      	pop	{r3, r4, r5, pc}
 8011bac:	200133a0 	.word	0x200133a0

08011bb0 <__malloc_lock>:
 8011bb0:	4801      	ldr	r0, [pc, #4]	; (8011bb8 <__malloc_lock+0x8>)
 8011bb2:	f7ff be6b 	b.w	801188c <__retarget_lock_acquire_recursive>
 8011bb6:	bf00      	nop
 8011bb8:	20013394 	.word	0x20013394

08011bbc <__malloc_unlock>:
 8011bbc:	4801      	ldr	r0, [pc, #4]	; (8011bc4 <__malloc_unlock+0x8>)
 8011bbe:	f7ff be66 	b.w	801188e <__retarget_lock_release_recursive>
 8011bc2:	bf00      	nop
 8011bc4:	20013394 	.word	0x20013394

08011bc8 <_init>:
 8011bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bca:	bf00      	nop
 8011bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bce:	bc08      	pop	{r3}
 8011bd0:	469e      	mov	lr, r3
 8011bd2:	4770      	bx	lr

08011bd4 <_fini>:
 8011bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bd6:	bf00      	nop
 8011bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bda:	bc08      	pop	{r3}
 8011bdc:	469e      	mov	lr, r3
 8011bde:	4770      	bx	lr
