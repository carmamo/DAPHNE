
F446RE_I2C_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b70  08004b70  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b78  08004b78  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000001c  08004b9c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08004b9c  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000328a7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003375  00000000  00000000  000528f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e20  00000000  00000000  00055c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002cb8  00000000  00000000  00058a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241ef  00000000  00000000  0005b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf5e  00000000  00000000  0007f92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3e39  00000000  00000000  0009b88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f6c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ca84  00000000  00000000  0017f718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800479c 	.word	0x0800479c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	0800479c 	.word	0x0800479c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b0a8      	sub	sp, #160	; 0xa0
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc33 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f89f 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9b5 	bl	8000884 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f989 	bl	8000830 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800051e:	f000 f959 	bl	80007d4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000522:	f000 f905 	bl	8000730 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  u8g2_Setup_ssd1306_i2c_128x64_noname_2(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay);
 8000526:	1d38      	adds	r0, r7, #4
 8000528:	4b40      	ldr	r3, [pc, #256]	; (800062c <main+0x124>)
 800052a:	4a41      	ldr	r2, [pc, #260]	; (8000630 <main+0x128>)
 800052c:	4941      	ldr	r1, [pc, #260]	; (8000634 <main+0x12c>)
 800052e:	f003 f9e1 	bl	80038f4 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>
  u8g2_SetI2CAddress(&u8g2,0x3C);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	223c      	movs	r2, #60	; 0x3c
 8000536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4618      	mov	r0, r3
 800053e:	f004 f863 	bl	8004608 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 f86d 	bl	8004626 <u8x8_SetPowerSave>

  TimeStamp_ms = HAL_GetTick();
 800054c:	f000 fc7a 	bl	8000e44 <HAL_GetTick>
 8000550:	4603      	mov	r3, r0
 8000552:	4a39      	ldr	r2, [pc, #228]	; (8000638 <main+0x130>)
 8000554:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  u8g2_FirstPage(&u8g2);
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f003 f978 	bl	800384e <u8g2_FirstPage>
	  do {
//		  u8g2_DrawBitmap(&u8g2, 0, 0, 128/8, 64, epd_bitmap_hypatia_demo);
		  u8g2_DrawBitmap(&u8g2, 0, 3, 128/8, 25, epd_bitmap_barra_medidor);
 800055e:	1d38      	adds	r0, r7, #4
 8000560:	4b36      	ldr	r3, [pc, #216]	; (800063c <main+0x134>)
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2319      	movs	r3, #25
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2310      	movs	r3, #16
 800056a:	2203      	movs	r2, #3
 800056c:	2100      	movs	r1, #0
 800056e:	f003 f86d 	bl	800364c <u8g2_DrawBitmap>
		  u8g2_DrawBitmap(&u8g2, 13, 32, 104/8, 30, epd_bitmap_hypatia_logo);
 8000572:	1d38      	adds	r0, r7, #4
 8000574:	4b32      	ldr	r3, [pc, #200]	; (8000640 <main+0x138>)
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	231e      	movs	r3, #30
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	230d      	movs	r3, #13
 800057e:	2220      	movs	r2, #32
 8000580:	210d      	movs	r1, #13
 8000582:	f003 f863 	bl	800364c <u8g2_DrawBitmap>
		  u8g2_DrawBox(&u8g2, 2, 16, MAP(progreso, 0, 4096, 0, 124), 10);
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <main+0x13c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	237c      	movs	r3, #124	; 0x7c
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000596:	2100      	movs	r1, #0
 8000598:	f000 fa6a 	bl	8000a70 <MAP>
 800059c:	4603      	mov	r3, r0
 800059e:	b29b      	uxth	r3, r3
 80005a0:	1d38      	adds	r0, r7, #4
 80005a2:	220a      	movs	r2, #10
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	2210      	movs	r2, #16
 80005a8:	2102      	movs	r1, #2
 80005aa:	f003 f88f 	bl	80036cc <u8g2_DrawBox>
//		  u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
//		  u8g2_DrawStr(&u8g2, 0, 15, "Hello World!");
//		  u8g2_DrawCircle(&u8g2, 64, 40, 10, U8G2_DRAW_ALL);

		  // animacion de puntos suspensivos
		  u8g2_DrawBitmap(&u8g2, 7, 58, 16/8, 2, epd_bitmap_allArray[frame]);
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <main+0x140>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a26      	ldr	r2, [pc, #152]	; (800064c <main+0x144>)
 80005b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b8:	1d38      	adds	r0, r7, #4
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2302      	movs	r3, #2
 80005c2:	223a      	movs	r2, #58	; 0x3a
 80005c4:	2107      	movs	r1, #7
 80005c6:	f003 f841 	bl	800364c <u8g2_DrawBitmap>

	  } while (u8g2_NextPage(&u8g2));
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f952 	bl	8003876 <u8g2_NextPage>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1c2      	bne.n	800055e <main+0x56>

	  HAL_ADC_Start(&hadc1);
 80005d8:	481d      	ldr	r0, [pc, #116]	; (8000650 <main+0x148>)
 80005da:	f000 fca7 	bl	8000f2c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0x148>)
 80005e4:	f000 fd74 	bl	80010d0 <HAL_ADC_PollForConversion>
	  progreso = HAL_ADC_GetValue(&hadc1);
 80005e8:	4819      	ldr	r0, [pc, #100]	; (8000650 <main+0x148>)
 80005ea:	f000 fdfc 	bl	80011e6 <HAL_ADC_GetValue>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <main+0x13c>)
 80005f4:	601a      	str	r2, [r3, #0]

	  if(HAL_GetTick() - TimeStamp_ms > 1000) {
 80005f6:	f000 fc25 	bl	8000e44 <HAL_GetTick>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <main+0x130>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000606:	d909      	bls.n	800061c <main+0x114>
		  TimeStamp_ms = HAL_GetTick();
 8000608:	f000 fc1c 	bl	8000e44 <HAL_GetTick>
 800060c:	4603      	mov	r3, r0
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <main+0x130>)
 8000610:	6013      	str	r3, [r2, #0]
		  frame++;
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <main+0x140>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <main+0x140>)
 800061a:	6013      	str	r3, [r2, #0]
	  }
	  if(frame > 3) frame = 0;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <main+0x140>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b03      	cmp	r3, #3
 8000622:	dd98      	ble.n	8000556 <main+0x4e>
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <main+0x140>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
	  u8g2_FirstPage(&u8g2);
 800062a:	e794      	b.n	8000556 <main+0x4e>
 800062c:	08000961 	.word	0x08000961
 8000630:	080009a5 	.word	0x080009a5
 8000634:	08004af4 	.word	0x08004af4
 8000638:	20000120 	.word	0x20000120
 800063c:	0800493c 	.word	0x0800493c
 8000640:	080047b4 	.word	0x080047b4
 8000644:	20000118 	.word	0x20000118
 8000648:	2000011c 	.word	0x2000011c
 800064c:	20000000 	.word	0x20000000
 8000650:	20000038 	.word	0x20000038

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 f892 	bl	800478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SystemClock_Config+0xd8>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <SystemClock_Config+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f9e4 	bl	8002ab0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ee:	f000 f9db 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fe84 	bl	800241c <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071a:	f000 f9c5 	bl	8000aa8 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <MX_ADC1_Init+0x9c>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC1_Init+0x98>)
 800074a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_ADC1_Init+0xa0>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC1_Init+0x98>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x98>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000792:	f000 fb87 	bl	8000ea4 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 f984 	bl	8000aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC1_Init+0x98>)
 80007b2:	f000 fd25 	bl	8001200 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 f974 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000038 	.word	0x20000038
 80007cc:	40012000 	.word	0x40012000
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C1_Init+0x50>)
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_I2C1_Init+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_I2C1_Init+0x58>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_I2C1_Init+0x50>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_I2C1_Init+0x50>)
 8000812:	f001 f9b7 	bl	8001b84 <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 f944 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000080 	.word	0x20000080
 8000828:	40005400 	.word	0x40005400
 800082c:	00061a80 	.word	0x00061a80

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f002 fbc0 	bl	8002fec <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f919 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000d4 	.word	0x200000d4
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2c      	ldr	r2, [pc, #176]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	4812      	ldr	r0, [pc, #72]	; (8000958 <MX_GPIO_Init+0xd4>)
 8000910:	f001 f91e 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_GPIO_Init+0xd8>)
 800092c:	f000 ff7c 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_GPIO_Init+0xd4>)
 8000948:	f000 ff6e 	bl	8001828 <HAL_GPIO_Init>

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000
 800095c:	40020800 	.word	0x40020800

08000960 <u8x8_stm32_gpio_and_delay>:

/* USER CODE BEGIN 4 */

// Byte GPIO and Delay Callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	72fb      	strb	r3, [r7, #11]
 800096e:	4613      	mov	r3, r2
 8000970:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	2b28      	cmp	r3, #40	; 0x28
 8000976:	d002      	beq.n	800097e <u8x8_stm32_gpio_and_delay+0x1e>
 8000978:	2b29      	cmp	r3, #41	; 0x29
 800097a:	d004      	beq.n	8000986 <u8x8_stm32_gpio_and_delay+0x26>
 800097c:	e008      	b.n	8000990 <u8x8_stm32_gpio_and_delay+0x30>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800097e:	2001      	movs	r0, #1
 8000980:	f000 fa6c 	bl	8000e5c <HAL_Delay>
		break;
 8000984:	e009      	b.n	800099a <u8x8_stm32_gpio_and_delay+0x3a>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000986:	7abb      	ldrb	r3, [r7, #10]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fa67 	bl	8000e5c <HAL_Delay>
		break;
 800098e:	e004      	b.n	800099a <u8x8_stm32_gpio_and_delay+0x3a>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8000998:	bf00      	nop
	}
	return 1;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <u8x8_byte_i2c>:

// Communication Callback
uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	72fb      	strb	r3, [r7, #11]
 80009b2:	4613      	mov	r3, r2
 80009b4:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 80009b6:	7afb      	ldrb	r3, [r7, #11]
 80009b8:	3b14      	subs	r3, #20
 80009ba:	2b0c      	cmp	r3, #12
 80009bc:	d849      	bhi.n	8000a52 <u8x8_byte_i2c+0xae>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <u8x8_byte_i2c+0x20>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	08000a57 	.word	0x08000a57
 80009c8:	08000a53 	.word	0x08000a53
 80009cc:	08000a53 	.word	0x08000a53
 80009d0:	080009f9 	.word	0x080009f9
 80009d4:	08000a29 	.word	0x08000a29
 80009d8:	08000a31 	.word	0x08000a31
 80009dc:	08000a53 	.word	0x08000a53
 80009e0:	08000a53 	.word	0x08000a53
 80009e4:	08000a53 	.word	0x08000a53
 80009e8:	08000a53 	.word	0x08000a53
 80009ec:	08000a53 	.word	0x08000a53
 80009f0:	08000a53 	.word	0x08000a53
 80009f4:	08000a57 	.word	0x08000a57
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 80009fc:	e010      	b.n	8000a20 <u8x8_byte_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <u8x8_byte_i2c+0xc0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	b2d1      	uxtb	r1, r2
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <u8x8_byte_i2c+0xc0>)
 8000a08:	7011      	strb	r1, [r2, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	7819      	ldrb	r1, [r3, #0]
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <u8x8_byte_i2c+0xc4>)
 8000a12:	5499      	strb	r1, [r3, r2]
			data++;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	3301      	adds	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
			arg_int--;
 8000a1a:	7abb      	ldrb	r3, [r7, #10]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	72bb      	strb	r3, [r7, #10]
		while( arg_int > 0 )
 8000a20:	7abb      	ldrb	r3, [r7, #10]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <u8x8_byte_i2c+0x5a>
		}
		break;
 8000a26:	e017      	b.n	8000a58 <u8x8_byte_i2c+0xb4>
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <u8x8_byte_i2c+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	e013      	b.n	8000a58 <u8x8_byte_i2c+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8) << 1, buffer, buf_idx, 1000);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	b299      	uxth	r1, r3
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <u8x8_byte_i2c+0xc0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a46:	9200      	str	r2, [sp, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <u8x8_byte_i2c+0xc4>)
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <u8x8_byte_i2c+0xc8>)
 8000a4c:	f001 f9de 	bl	8001e0c <HAL_I2C_Master_Transmit>
		break;
 8000a50:	e002      	b.n	8000a58 <u8x8_byte_i2c+0xb4>
	default:
		return 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e001      	b.n	8000a5a <u8x8_byte_i2c+0xb6>
		break;
 8000a56:	bf00      	nop
	}
	return 1;
 8000a58:	2301      	movs	r3, #1
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000124 	.word	0x20000124
 8000a68:	20000128 	.word	0x20000128
 8000a6c:	20000080 	.word	0x20000080

08000a70 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	69b9      	ldr	r1, [r7, #24]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	1a8a      	subs	r2, r1, r2
 8000a8a:	fb03 f202 	mul.w	r2, r3, r2
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1acb      	subs	r3, r1, r3
 8000a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	4413      	add	r3, r2
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 fe64 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_ADC_MspInit+0x7c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d127      	bne.n	8000b76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_ADC_MspInit+0x84>)
 8000b72:	f000 fe59 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40012000 	.word	0x40012000
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_I2C_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12c      	bne.n	8000c08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_I2C_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_I2C_MspInit+0x88>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_I2C_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <HAL_I2C_MspInit+0x8c>)
 8000be8:	f000 fe1e 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_I2C_MspInit+0x88>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_I2C_MspInit+0x88>)
 8000bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_I2C_MspInit+0x88>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40005400 	.word	0x40005400
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12b      	bne.n	8000c96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c76:	230c      	movs	r3, #12
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c86:	2307      	movs	r3, #7
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_UART_MspInit+0x8c>)
 8000c92:	f000 fdc9 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f890 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d40:	4c0b      	ldr	r4, [pc, #44]	; (8000d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ffd7 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f003 fcf7 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fbd7 	bl	8000508 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d68:	08004b80 	.word	0x08004b80
  ldr r2, =_sbss
 8000d6c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d70:	20000250 	.word	0x20000250

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_Init+0x40>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_Init+0x40>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x40>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 fd0d 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fe82 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fd17 	bl	800180e <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df8:	f000 fced 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000010 	.word	0x20000010
 8000e14:	20000018 	.word	0x20000018
 8000e18:	20000014 	.word	0x20000014

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000018 	.word	0x20000018
 8000e40:	20000148 	.word	0x20000148

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000148 	.word	0x20000148

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffde 	bl	8000e44 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000018 	.word	0x20000018

08000ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e033      	b.n	8000f22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d109      	bne.n	8000ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fe1e 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d118      	bne.n	8000f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eea:	f023 0302 	bic.w	r3, r3, #2
 8000eee:	f043 0202 	orr.w	r2, r3, #2
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fab4 	bl	8001464 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f023 0303 	bic.w	r3, r3, #3
 8000f0a:	f043 0201 	orr.w	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	641a      	str	r2, [r3, #64]	; 0x40
 8000f12:	e001      	b.n	8000f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Start+0x1a>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e0b2      	b.n	80010ac <HAL_ADC_Start+0x180>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d018      	beq.n	8000f8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6c:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <HAL_ADC_Start+0x18c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a52      	ldr	r2, [pc, #328]	; (80010bc <HAL_ADC_Start+0x190>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9a      	lsrs	r2, r3, #18
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f80:	e002      	b.n	8000f88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f9      	bne.n	8000f82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d17a      	bne.n	8001092 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe0:	f023 0206 	bic.w	r2, r3, #6
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fe8:	e002      	b.n	8000ff0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_ADC_Start+0x194>)
 8000ffa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001004:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	2b00      	cmp	r3, #0
 8001010:	d12a      	bne.n	8001068 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <HAL_ADC_Start+0x198>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d015      	beq.n	8001048 <HAL_ADC_Start+0x11c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <HAL_ADC_Start+0x19c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d105      	bne.n	8001032 <HAL_ADC_Start+0x106>
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_ADC_Start+0x194>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00a      	beq.n	8001048 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a25      	ldr	r2, [pc, #148]	; (80010cc <HAL_ADC_Start+0x1a0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d136      	bne.n	80010aa <HAL_ADC_Start+0x17e>
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_ADC_Start+0x194>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d130      	bne.n	80010aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d129      	bne.n	80010aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	e020      	b.n	80010aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <HAL_ADC_Start+0x198>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11b      	bne.n	80010aa <HAL_ADC_Start+0x17e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d114      	bne.n	80010aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e00b      	b.n	80010aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f043 0210 	orr.w	r2, r3, #16
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000010 	.word	0x20000010
 80010bc:	431bde83 	.word	0x431bde83
 80010c0:	40012300 	.word	0x40012300
 80010c4:	40012000 	.word	0x40012000
 80010c8:	40012100 	.word	0x40012100
 80010cc:	40012200 	.word	0x40012200

080010d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ec:	d113      	bne.n	8001116 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010fc:	d10b      	bne.n	8001116 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f043 0220 	orr.w	r2, r3, #32
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e063      	b.n	80011de <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001116:	f7ff fe95 	bl	8000e44 <HAL_GetTick>
 800111a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800111c:	e021      	b.n	8001162 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001124:	d01d      	beq.n	8001162 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_ADC_PollForConversion+0x6c>
 800112c:	f7ff fe8a 	bl	8000e44 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d212      	bcs.n	8001162 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b02      	cmp	r3, #2
 8001148:	d00b      	beq.n	8001162 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f043 0204 	orr.w	r2, r3, #4
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e03d      	b.n	80011de <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b02      	cmp	r3, #2
 800116e:	d1d6      	bne.n	800111e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f06f 0212 	mvn.w	r2, #18
 8001178:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d123      	bne.n	80011dc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11f      	bne.n	80011dc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d111      	bne.n	80011dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1c>
 8001218:	2302      	movs	r3, #2
 800121a:	e113      	b.n	8001444 <HAL_ADC_ConfigChannel+0x244>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d925      	bls.n	8001278 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68d9      	ldr	r1, [r3, #12]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3b1e      	subs	r3, #30
 8001242:	2207      	movs	r2, #7
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43da      	mvns	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	400a      	ands	r2, r1
 8001250:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68d9      	ldr	r1, [r3, #12]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	4603      	mov	r3, r0
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4403      	add	r3, r0
 800126a:	3b1e      	subs	r3, #30
 800126c:	409a      	lsls	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	e022      	b.n	80012be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	2207      	movs	r2, #7
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	400a      	ands	r2, r1
 800129a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6919      	ldr	r1, [r3, #16]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4403      	add	r3, r0
 80012b4:	409a      	lsls	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d824      	bhi.n	8001310 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b05      	subs	r3, #5
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	400a      	ands	r2, r1
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3b05      	subs	r3, #5
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
 800130e:	e04c      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b0c      	cmp	r3, #12
 8001316:	d824      	bhi.n	8001362 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3b23      	subs	r3, #35	; 0x23
 800132a:	221f      	movs	r2, #31
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43da      	mvns	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b23      	subs	r3, #35	; 0x23
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
 8001360:	e023      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	3b41      	subs	r3, #65	; 0x41
 8001374:	221f      	movs	r2, #31
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3b41      	subs	r3, #65	; 0x41
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_ADC_ConfigChannel+0x250>)
 80013ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a28      	ldr	r2, [pc, #160]	; (8001454 <HAL_ADC_ConfigChannel+0x254>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d10f      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1d8>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b12      	cmp	r3, #18
 80013be:	d10b      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_ADC_ConfigChannel+0x254>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12b      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_ADC_ConfigChannel+0x258>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d003      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x1f4>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b11      	cmp	r3, #17
 80013f2:	d122      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_ADC_ConfigChannel+0x258>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d111      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_ADC_ConfigChannel+0x25c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_ADC_ConfigChannel+0x260>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9a      	lsrs	r2, r3, #18
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800142c:	e002      	b.n	8001434 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3b01      	subs	r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40012300 	.word	0x40012300
 8001454:	40012000 	.word	0x40012000
 8001458:	10000012 	.word	0x10000012
 800145c:	20000010 	.word	0x20000010
 8001460:	431bde83 	.word	0x431bde83

08001464 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800146c:	4b79      	ldr	r3, [pc, #484]	; (8001654 <ADC_Init+0x1f0>)
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	021a      	lsls	r2, r3, #8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6899      	ldr	r1, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <ADC_Init+0x1f4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d022      	beq.n	8001542 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800150a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800152c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6899      	ldr	r1, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	e00f      	b.n	8001562 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001560:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0202 	bic.w	r2, r2, #2
 8001570:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7e1b      	ldrb	r3, [r3, #24]
 800157c:	005a      	lsls	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01b      	beq.n	80015c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800159e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	3b01      	subs	r3, #1
 80015bc:	035a      	lsls	r2, r3, #13
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	e007      	b.n	80015d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	051a      	lsls	r2, r3, #20
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800160c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6899      	ldr	r1, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800161a:	025a      	lsls	r2, r3, #9
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	029a      	lsls	r2, r3, #10
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40012300 	.word	0x40012300
 8001658:	0f000001 	.word	0x0f000001

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff47 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff5c 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffb0 	bl	800177c <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e165      	b.n	8001b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 8154 	bne.w	8001b0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d005      	beq.n	800187a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	2b02      	cmp	r3, #2
 8001878:	d130      	bne.n	80018dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d017      	beq.n	8001918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	69b9      	ldr	r1, [r7, #24]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80ae 	beq.w	8001b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <HAL_GPIO_Init+0x300>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a5c      	ldr	r2, [pc, #368]	; (8001b28 <HAL_GPIO_Init+0x300>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_GPIO_Init+0x300>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_GPIO_Init+0x304>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <HAL_GPIO_Init+0x308>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d025      	beq.n	8001a42 <HAL_GPIO_Init+0x21a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4e      	ldr	r2, [pc, #312]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01f      	beq.n	8001a3e <HAL_GPIO_Init+0x216>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4d      	ldr	r2, [pc, #308]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <HAL_GPIO_Init+0x314>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0x20e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4b      	ldr	r2, [pc, #300]	; (8001b40 <HAL_GPIO_Init+0x318>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_Init+0x20a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_GPIO_Init+0x31c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a49      	ldr	r2, [pc, #292]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_Init+0x202>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00c      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a42:	2300      	movs	r3, #0
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a54:	4935      	ldr	r1, [pc, #212]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a86:	4a31      	ldr	r2, [pc, #196]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab0:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f67f ae96 	bls.w	8001844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40013c00 	.word	0x40013c00

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e12b      	b.n	8001dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe ffee 	bl	8000b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be8:	f000 fd0a 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8001bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a81      	ldr	r2, [pc, #516]	; (8001df8 <HAL_I2C_Init+0x274>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d807      	bhi.n	8001c08 <HAL_I2C_Init+0x84>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a80      	ldr	r2, [pc, #512]	; (8001dfc <HAL_I2C_Init+0x278>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e006      	b.n	8001c16 <HAL_I2C_Init+0x92>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4a7d      	ldr	r2, [pc, #500]	; (8001e00 <HAL_I2C_Init+0x27c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	bf94      	ite	ls
 8001c10:	2301      	movls	r3, #1
 8001c12:	2300      	movhi	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0e7      	b.n	8001dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a78      	ldr	r2, [pc, #480]	; (8001e04 <HAL_I2C_Init+0x280>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0c9b      	lsrs	r3, r3, #18
 8001c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a6a      	ldr	r2, [pc, #424]	; (8001df8 <HAL_I2C_Init+0x274>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d802      	bhi.n	8001c58 <HAL_I2C_Init+0xd4>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3301      	adds	r3, #1
 8001c56:	e009      	b.n	8001c6c <HAL_I2C_Init+0xe8>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a69      	ldr	r2, [pc, #420]	; (8001e08 <HAL_I2C_Init+0x284>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	495c      	ldr	r1, [pc, #368]	; (8001df8 <HAL_I2C_Init+0x274>)
 8001c88:	428b      	cmp	r3, r1
 8001c8a:	d819      	bhi.n	8001cc0 <HAL_I2C_Init+0x13c>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e59      	subs	r1, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9a:	1c59      	adds	r1, r3, #1
 8001c9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <HAL_I2C_Init+0x138>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1e59      	subs	r1, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cba:	e051      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e04f      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d111      	bne.n	8001cec <HAL_I2C_Init+0x168>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e58      	subs	r0, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	440b      	add	r3, r1
 8001cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e012      	b.n	8001d12 <HAL_I2C_Init+0x18e>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Init+0x196>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e022      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <HAL_I2C_Init+0x1bc>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e58      	subs	r0, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	440b      	add	r3, r1
 8001d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3e:	e00f      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	0099      	lsls	r1, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6809      	ldr	r1, [r1, #0]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6911      	ldr	r1, [r2, #16]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68d2      	ldr	r2, [r2, #12]
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	000186a0 	.word	0x000186a0
 8001dfc:	001e847f 	.word	0x001e847f
 8001e00:	003d08ff 	.word	0x003d08ff
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	10624dd3 	.word	0x10624dd3

08001e0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	461a      	mov	r2, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	817b      	strh	r3, [r7, #10]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff f810 	bl	8000e44 <HAL_GetTick>
 8001e24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	f040 80e0 	bne.w	8001ff4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2319      	movs	r3, #25
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4970      	ldr	r1, [pc, #448]	; (8002000 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f964 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e0d3      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_I2C_Master_Transmit+0x50>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0cc      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d007      	beq.n	8001e82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2221      	movs	r2, #33	; 0x21
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	893a      	ldrh	r2, [r7, #8]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	6a3a      	ldr	r2, [r7, #32]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f89c 	bl	8002008 <I2C_MasterRequestWrite>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e08d      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ef0:	e066      	b.n	8001fc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	6a39      	ldr	r1, [r7, #32]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f9de 	bl	80022b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00d      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d107      	bne.n	8001f1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06b      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d11b      	bne.n	8001f94 <HAL_I2C_Master_Transmit+0x188>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d017      	beq.n	8001f94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	6a39      	ldr	r1, [r7, #32]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f9ce 	bl	800233a <I2C_WaitOnBTFFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d107      	bne.n	8001fbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e01a      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d194      	bne.n	8001ef2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	00100002 	.word	0x00100002
 8002004:	ffff0000 	.word	0xffff0000

08002008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	460b      	mov	r3, r1
 8002016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d006      	beq.n	8002032 <I2C_MasterRequestWrite+0x2a>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d003      	beq.n	8002032 <I2C_MasterRequestWrite+0x2a>
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002030:	d108      	bne.n	8002044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e00b      	b.n	800205c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	2b12      	cmp	r3, #18
 800204a:	d107      	bne.n	800205c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f84f 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002082:	d103      	bne.n	800208c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e035      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002098:	d108      	bne.n	80020ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800209a:	897b      	ldrh	r3, [r7, #10]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	e01b      	b.n	80020e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020ac:	897b      	ldrh	r3, [r7, #10]
 80020ae:	11db      	asrs	r3, r3, #7
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f003 0306 	and.w	r3, r3, #6
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f063 030f 	orn	r3, r3, #15
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <I2C_MasterRequestWrite+0xfc>)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f875 	bl	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e010      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <I2C_MasterRequestWrite+0x100>)
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f865 	bl	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	00010008 	.word	0x00010008
 8002108:	00010002 	.word	0x00010002

0800210c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800211c:	e025      	b.n	800216a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002124:	d021      	beq.n	800216a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002126:	f7fe fe8d 	bl	8000e44 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d302      	bcc.n	800213c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d116      	bne.n	800216a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f043 0220 	orr.w	r2, r3, #32
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e023      	b.n	80021b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10d      	bne.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4013      	ands	r3, r2
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	bf0c      	ite	eq
 8002186:	2301      	moveq	r3, #1
 8002188:	2300      	movne	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	e00c      	b.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4013      	ands	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d0b6      	beq.n	800211e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c8:	e051      	b.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d8:	d123      	bne.n	8002222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e046      	b.n	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002228:	d021      	beq.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222a:	f7fe fe0b 	bl	8000e44 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	d302      	bcc.n	8002240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d116      	bne.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0220 	orr.w	r2, r3, #32
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e020      	b.n	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10c      	bne.n	8002292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4013      	ands	r3, r2
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	e00b      	b.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	43da      	mvns	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	4013      	ands	r3, r2
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d18d      	bne.n	80021ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c4:	e02d      	b.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f878 	bl	80023bc <I2C_IsAcknowledgeFailed>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e02d      	b.n	8002332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022dc:	d021      	beq.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7fe fdb1 	bl	8000e44 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d116      	bne.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e007      	b.n	8002332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d1ca      	bne.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002346:	e02d      	b.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f837 	bl	80023bc <I2C_IsAcknowledgeFailed>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e02d      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235e:	d021      	beq.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002360:	f7fe fd70 	bl	8000e44 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	d302      	bcc.n	8002376 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d1ca      	bne.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d2:	d11b      	bne.n	800240c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0cc      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b68      	ldr	r3, [pc, #416]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d90c      	bls.n	8002458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b8      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800247a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	494d      	ldr	r1, [pc, #308]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d044      	beq.n	800253c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d119      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e067      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 0203 	bic.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4934      	ldr	r1, [pc, #208]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250c:	f7fe fc9a 	bl	8000e44 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7fe fc96 	bl	8000e44 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e04f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 020c 	and.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d1eb      	bne.n	8002514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d20c      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e032      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4916      	ldr	r1, [pc, #88]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a2:	f000 f855 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	490a      	ldr	r1, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fbfa 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08004adc 	.word	0x08004adc
 80025e0:	20000010 	.word	0x20000010
 80025e4:	20000014 	.word	0x20000014

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000010 	.word	0x20000010

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	08004aec 	.word	0x08004aec

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffdc 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0b5b      	lsrs	r3, r3, #13
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	08004aec 	.word	0x08004aec

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002654:	b0ae      	sub	sp, #184	; 0xb8
 8002656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002676:	4bcb      	ldr	r3, [pc, #812]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b0c      	cmp	r3, #12
 8002680:	f200 8206 	bhi.w	8002a90 <HAL_RCC_GetSysClockFreq+0x440>
 8002684:	a201      	add	r2, pc, #4	; (adr r2, 800268c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	080026c1 	.word	0x080026c1
 8002690:	08002a91 	.word	0x08002a91
 8002694:	08002a91 	.word	0x08002a91
 8002698:	08002a91 	.word	0x08002a91
 800269c:	080026c9 	.word	0x080026c9
 80026a0:	08002a91 	.word	0x08002a91
 80026a4:	08002a91 	.word	0x08002a91
 80026a8:	08002a91 	.word	0x08002a91
 80026ac:	080026d1 	.word	0x080026d1
 80026b0:	08002a91 	.word	0x08002a91
 80026b4:	08002a91 	.word	0x08002a91
 80026b8:	08002a91 	.word	0x08002a91
 80026bc:	080028c1 	.word	0x080028c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4bb9      	ldr	r3, [pc, #740]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80026c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80026c6:	e1e7      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c8:	4bb8      	ldr	r3, [pc, #736]	; (80029ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80026ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026ce:	e1e3      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4bb4      	ldr	r3, [pc, #720]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026dc:	4bb1      	ldr	r3, [pc, #708]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d071      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e8:	4bae      	ldr	r3, [pc, #696]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80026f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002700:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800270a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800270e:	4622      	mov	r2, r4
 8002710:	462b      	mov	r3, r5
 8002712:	f04f 0000 	mov.w	r0, #0
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	0159      	lsls	r1, r3, #5
 800271c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002720:	0150      	lsls	r0, r2, #5
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4621      	mov	r1, r4
 8002728:	1a51      	subs	r1, r2, r1
 800272a:	6439      	str	r1, [r7, #64]	; 0x40
 800272c:	4629      	mov	r1, r5
 800272e:	eb63 0301 	sbc.w	r3, r3, r1
 8002732:	647b      	str	r3, [r7, #68]	; 0x44
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002740:	4649      	mov	r1, r9
 8002742:	018b      	lsls	r3, r1, #6
 8002744:	4641      	mov	r1, r8
 8002746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800274a:	4641      	mov	r1, r8
 800274c:	018a      	lsls	r2, r1, #6
 800274e:	4641      	mov	r1, r8
 8002750:	1a51      	subs	r1, r2, r1
 8002752:	63b9      	str	r1, [r7, #56]	; 0x38
 8002754:	4649      	mov	r1, r9
 8002756:	eb63 0301 	sbc.w	r3, r3, r1
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002768:	4649      	mov	r1, r9
 800276a:	00cb      	lsls	r3, r1, #3
 800276c:	4641      	mov	r1, r8
 800276e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002772:	4641      	mov	r1, r8
 8002774:	00ca      	lsls	r2, r1, #3
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	4603      	mov	r3, r0
 800277c:	4622      	mov	r2, r4
 800277e:	189b      	adds	r3, r3, r2
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
 8002782:	462b      	mov	r3, r5
 8002784:	460a      	mov	r2, r1
 8002786:	eb42 0303 	adc.w	r3, r2, r3
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002798:	4629      	mov	r1, r5
 800279a:	024b      	lsls	r3, r1, #9
 800279c:	4621      	mov	r1, r4
 800279e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027a2:	4621      	mov	r1, r4
 80027a4:	024a      	lsls	r2, r1, #9
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80027bc:	f7fd fd22 	bl	8000204 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027ca:	e067      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027cc:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80027dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80027e6:	2300      	movs	r3, #0
 80027e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80027ee:	4622      	mov	r2, r4
 80027f0:	462b      	mov	r3, r5
 80027f2:	f04f 0000 	mov.w	r0, #0
 80027f6:	f04f 0100 	mov.w	r1, #0
 80027fa:	0159      	lsls	r1, r3, #5
 80027fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002800:	0150      	lsls	r0, r2, #5
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4621      	mov	r1, r4
 8002808:	1a51      	subs	r1, r2, r1
 800280a:	62b9      	str	r1, [r7, #40]	; 0x28
 800280c:	4629      	mov	r1, r5
 800280e:	eb63 0301 	sbc.w	r3, r3, r1
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002820:	4649      	mov	r1, r9
 8002822:	018b      	lsls	r3, r1, #6
 8002824:	4641      	mov	r1, r8
 8002826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282a:	4641      	mov	r1, r8
 800282c:	018a      	lsls	r2, r1, #6
 800282e:	4641      	mov	r1, r8
 8002830:	ebb2 0a01 	subs.w	sl, r2, r1
 8002834:	4649      	mov	r1, r9
 8002836:	eb63 0b01 	sbc.w	fp, r3, r1
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002846:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800284a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800284e:	4692      	mov	sl, r2
 8002850:	469b      	mov	fp, r3
 8002852:	4623      	mov	r3, r4
 8002854:	eb1a 0303 	adds.w	r3, sl, r3
 8002858:	623b      	str	r3, [r7, #32]
 800285a:	462b      	mov	r3, r5
 800285c:	eb4b 0303 	adc.w	r3, fp, r3
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800286e:	4629      	mov	r1, r5
 8002870:	028b      	lsls	r3, r1, #10
 8002872:	4621      	mov	r1, r4
 8002874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002878:	4621      	mov	r1, r4
 800287a:	028a      	lsls	r2, r1, #10
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002884:	2200      	movs	r2, #0
 8002886:	673b      	str	r3, [r7, #112]	; 0x70
 8002888:	677a      	str	r2, [r7, #116]	; 0x74
 800288a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800288e:	f7fd fcb9 	bl	8000204 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4613      	mov	r3, r2
 8002898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800289c:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	3301      	adds	r3, #1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80028ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028be:	e0eb      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c0:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028cc:	4b35      	ldr	r3, [pc, #212]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d06b      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	2200      	movs	r2, #0
 80028e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80028e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	663b      	str	r3, [r7, #96]	; 0x60
 80028ec:	2300      	movs	r3, #0
 80028ee:	667b      	str	r3, [r7, #100]	; 0x64
 80028f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80028f4:	4622      	mov	r2, r4
 80028f6:	462b      	mov	r3, r5
 80028f8:	f04f 0000 	mov.w	r0, #0
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	0159      	lsls	r1, r3, #5
 8002902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002906:	0150      	lsls	r0, r2, #5
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4621      	mov	r1, r4
 800290e:	1a51      	subs	r1, r2, r1
 8002910:	61b9      	str	r1, [r7, #24]
 8002912:	4629      	mov	r1, r5
 8002914:	eb63 0301 	sbc.w	r3, r3, r1
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002926:	4659      	mov	r1, fp
 8002928:	018b      	lsls	r3, r1, #6
 800292a:	4651      	mov	r1, sl
 800292c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002930:	4651      	mov	r1, sl
 8002932:	018a      	lsls	r2, r1, #6
 8002934:	4651      	mov	r1, sl
 8002936:	ebb2 0801 	subs.w	r8, r2, r1
 800293a:	4659      	mov	r1, fp
 800293c:	eb63 0901 	sbc.w	r9, r3, r1
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800294c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002950:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002954:	4690      	mov	r8, r2
 8002956:	4699      	mov	r9, r3
 8002958:	4623      	mov	r3, r4
 800295a:	eb18 0303 	adds.w	r3, r8, r3
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	462b      	mov	r3, r5
 8002962:	eb49 0303 	adc.w	r3, r9, r3
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002974:	4629      	mov	r1, r5
 8002976:	024b      	lsls	r3, r1, #9
 8002978:	4621      	mov	r1, r4
 800297a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800297e:	4621      	mov	r1, r4
 8002980:	024a      	lsls	r2, r1, #9
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800298a:	2200      	movs	r2, #0
 800298c:	65bb      	str	r3, [r7, #88]	; 0x58
 800298e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002990:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002994:	f7fd fc36 	bl	8000204 <__aeabi_uldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4613      	mov	r3, r2
 800299e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029a2:	e065      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x420>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b0:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x458>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	2200      	movs	r2, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	4611      	mov	r1, r2
 80029bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029c0:	653b      	str	r3, [r7, #80]	; 0x50
 80029c2:	2300      	movs	r3, #0
 80029c4:	657b      	str	r3, [r7, #84]	; 0x54
 80029c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80029ca:	4642      	mov	r2, r8
 80029cc:	464b      	mov	r3, r9
 80029ce:	f04f 0000 	mov.w	r0, #0
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	0159      	lsls	r1, r3, #5
 80029d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029dc:	0150      	lsls	r0, r2, #5
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4641      	mov	r1, r8
 80029e4:	1a51      	subs	r1, r2, r1
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	4649      	mov	r1, r9
 80029ea:	eb63 0301 	sbc.w	r3, r3, r1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80029fc:	4659      	mov	r1, fp
 80029fe:	018b      	lsls	r3, r1, #6
 8002a00:	4651      	mov	r1, sl
 8002a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a06:	4651      	mov	r1, sl
 8002a08:	018a      	lsls	r2, r1, #6
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	1a54      	subs	r4, r2, r1
 8002a0e:	4659      	mov	r1, fp
 8002a10:	eb63 0501 	sbc.w	r5, r3, r1
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	00eb      	lsls	r3, r5, #3
 8002a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a22:	00e2      	lsls	r2, r4, #3
 8002a24:	4614      	mov	r4, r2
 8002a26:	461d      	mov	r5, r3
 8002a28:	4643      	mov	r3, r8
 8002a2a:	18e3      	adds	r3, r4, r3
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	464b      	mov	r3, r9
 8002a30:	eb45 0303 	adc.w	r3, r5, r3
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a42:	4629      	mov	r1, r5
 8002a44:	028b      	lsls	r3, r1, #10
 8002a46:	4621      	mov	r1, r4
 8002a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	028a      	lsls	r2, r1, #10
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a58:	2200      	movs	r2, #0
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a62:	f7fd fbcf 	bl	8000204 <__aeabi_uldivmod>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0f1b      	lsrs	r3, r3, #28
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a8e:	e003      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	37b8      	adds	r7, #184	; 0xb8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400

08002ab0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e28d      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8083 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ad0:	4b94      	ldr	r3, [pc, #592]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d019      	beq.n	8002b10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002adc:	4b91      	ldr	r3, [pc, #580]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ae8:	4b8e      	ldr	r3, [pc, #568]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af4:	d00c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4b8b      	ldr	r3, [pc, #556]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d112      	bne.n	8002b28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0e:	d10b      	bne.n	8002b28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	4b84      	ldr	r3, [pc, #528]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d05b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x124>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d157      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e25a      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x90>
 8002b32:	4b7c      	ldr	r3, [pc, #496]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7b      	ldr	r2, [pc, #492]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xcc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0xb4>
 8002b4a:	4b76      	ldr	r3, [pc, #472]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a75      	ldr	r2, [pc, #468]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a72      	ldr	r2, [pc, #456]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0xcc>
 8002b64:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6b      	ldr	r2, [pc, #428]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe f95e 	bl	8000e44 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f95a 	bl	8000e44 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e21f      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0xdc>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe f94a 	bl	8000e44 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe f946 	bl	8000e44 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e20b      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	4b57      	ldr	r3, [pc, #348]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x104>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d06f      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002be2:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d017      	beq.n	8002c1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bee:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d11c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x186>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e1d3      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4937      	ldr	r1, [pc, #220]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	e03a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_OscConfig+0x278>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe f8f3 	bl	8000e44 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe f8ef 	bl	8000e44 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1b4      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4925      	ldr	r1, [pc, #148]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCC_OscConfig+0x278>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe f8d2 	bl	8000e44 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7fe f8ce 	bl	8000e44 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e193      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d036      	beq.n	8002d3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe f8b2 	bl	8000e44 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7fe f8ae 	bl	8000e44 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e173      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x234>
 8002d02:	e01b      	b.n	8002d3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_OscConfig+0x27c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe f89b 	bl	8000e44 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	e00e      	b.n	8002d30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe f897 	bl	8000e44 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d907      	bls.n	8002d30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e15c      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470000 	.word	0x42470000
 8002d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b8a      	ldr	r3, [pc, #552]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ea      	bne.n	8002d12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8097 	beq.w	8002e78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b83      	ldr	r3, [pc, #524]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b7f      	ldr	r3, [pc, #508]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a7e      	ldr	r2, [pc, #504]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b79      	ldr	r3, [pc, #484]	; (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d118      	bne.n	8002db8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d86:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7fe f857 	bl	8000e44 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9a:	f7fe f853 	bl	8000e44 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e118      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	4b6c      	ldr	r3, [pc, #432]	; (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x31e>
 8002dc0:	4b66      	ldr	r3, [pc, #408]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6713      	str	r3, [r2, #112]	; 0x70
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x358>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x340>
 8002dd6:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a60      	ldr	r2, [pc, #384]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
 8002de2:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	4a5d      	ldr	r2, [pc, #372]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6713      	str	r3, [r2, #112]	; 0x70
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0x358>
 8002df0:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a59      	ldr	r2, [pc, #356]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a56      	ldr	r2, [pc, #344]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	f023 0304 	bic.w	r3, r3, #4
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d015      	beq.n	8002e3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe f818 	bl	8000e44 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7fe f814 	bl	8000e44 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0d7      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ee      	beq.n	8002e18 <HAL_RCC_OscConfig+0x368>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe f802 	bl	8000e44 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fd fffe 	bl	8000e44 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0c1      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5a:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ee      	bne.n	8002e44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	4a3a      	ldr	r2, [pc, #232]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80ad 	beq.w	8002fdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d060      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d145      	bne.n	8002f22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fd ffd2 	bl	8000e44 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fd ffce 	bl	8000e44 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e093      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	019b      	lsls	r3, r3, #6
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	491b      	ldr	r1, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fd ffa3 	bl	8000e44 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fd ff9f 	bl	8000e44 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e064      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x452>
 8002f20:	e05c      	b.n	8002fdc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fd ff8c 	bl	8000e44 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fd ff88 	bl	8000e44 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e04d      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x480>
 8002f4e:	e045      	b.n	8002fdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e040      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
 8002f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f68:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <HAL_RCC_OscConfig+0x538>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d030      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d129      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d122      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d119      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e03f      	b.n	800307e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fe02 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	; 0x24
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f829 	bl	8003088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b0c0      	sub	sp, #256	; 0x100
 800308e:	af00      	add	r7, sp, #0
 8003090:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a4:	68d9      	ldr	r1, [r3, #12]
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	ea40 0301 	orr.w	r3, r0, r1
 80030b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	431a      	orrs	r2, r3
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030e0:	f021 010c 	bic.w	r1, r1, #12
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030ee:	430b      	orrs	r3, r1
 80030f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003102:	6999      	ldr	r1, [r3, #24]
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	ea40 0301 	orr.w	r3, r0, r1
 800310e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <UART_SetConfig+0x2cc>)
 8003118:	429a      	cmp	r2, r3
 800311a:	d005      	beq.n	8003128 <UART_SetConfig+0xa0>
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <UART_SetConfig+0x2d0>)
 8003124:	429a      	cmp	r2, r3
 8003126:	d104      	bne.n	8003132 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7ff fa7e 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 800312c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003130:	e003      	b.n	800313a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003132:	f7ff fa65 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8003136:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003144:	f040 810c 	bne.w	8003360 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314c:	2200      	movs	r2, #0
 800314e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003152:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003156:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	1891      	adds	r1, r2, r2
 8003160:	65b9      	str	r1, [r7, #88]	; 0x58
 8003162:	415b      	adcs	r3, r3
 8003164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003166:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800316a:	4621      	mov	r1, r4
 800316c:	eb12 0801 	adds.w	r8, r2, r1
 8003170:	4629      	mov	r1, r5
 8003172:	eb43 0901 	adc.w	r9, r3, r1
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800318a:	4690      	mov	r8, r2
 800318c:	4699      	mov	r9, r3
 800318e:	4623      	mov	r3, r4
 8003190:	eb18 0303 	adds.w	r3, r8, r3
 8003194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003198:	462b      	mov	r3, r5
 800319a:	eb49 0303 	adc.w	r3, r9, r3
 800319e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031b6:	460b      	mov	r3, r1
 80031b8:	18db      	adds	r3, r3, r3
 80031ba:	653b      	str	r3, [r7, #80]	; 0x50
 80031bc:	4613      	mov	r3, r2
 80031be:	eb42 0303 	adc.w	r3, r2, r3
 80031c2:	657b      	str	r3, [r7, #84]	; 0x54
 80031c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031cc:	f7fd f81a 	bl	8000204 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4b61      	ldr	r3, [pc, #388]	; (800335c <UART_SetConfig+0x2d4>)
 80031d6:	fba3 2302 	umull	r2, r3, r3, r2
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	011c      	lsls	r4, r3, #4
 80031de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031f0:	4642      	mov	r2, r8
 80031f2:	464b      	mov	r3, r9
 80031f4:	1891      	adds	r1, r2, r2
 80031f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80031f8:	415b      	adcs	r3, r3
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003200:	4641      	mov	r1, r8
 8003202:	eb12 0a01 	adds.w	sl, r2, r1
 8003206:	4649      	mov	r1, r9
 8003208:	eb43 0b01 	adc.w	fp, r3, r1
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003218:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800321c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003220:	4692      	mov	sl, r2
 8003222:	469b      	mov	fp, r3
 8003224:	4643      	mov	r3, r8
 8003226:	eb1a 0303 	adds.w	r3, sl, r3
 800322a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800322e:	464b      	mov	r3, r9
 8003230:	eb4b 0303 	adc.w	r3, fp, r3
 8003234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003244:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003248:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800324c:	460b      	mov	r3, r1
 800324e:	18db      	adds	r3, r3, r3
 8003250:	643b      	str	r3, [r7, #64]	; 0x40
 8003252:	4613      	mov	r3, r2
 8003254:	eb42 0303 	adc.w	r3, r2, r3
 8003258:	647b      	str	r3, [r7, #68]	; 0x44
 800325a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800325e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003262:	f7fc ffcf 	bl	8000204 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4611      	mov	r1, r2
 800326c:	4b3b      	ldr	r3, [pc, #236]	; (800335c <UART_SetConfig+0x2d4>)
 800326e:	fba3 2301 	umull	r2, r3, r3, r1
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2264      	movs	r2, #100	; 0x64
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	1acb      	subs	r3, r1, r3
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003282:	4b36      	ldr	r3, [pc, #216]	; (800335c <UART_SetConfig+0x2d4>)
 8003284:	fba3 2302 	umull	r2, r3, r3, r2
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003290:	441c      	add	r4, r3
 8003292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003296:	2200      	movs	r2, #0
 8003298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800329c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032a4:	4642      	mov	r2, r8
 80032a6:	464b      	mov	r3, r9
 80032a8:	1891      	adds	r1, r2, r2
 80032aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80032ac:	415b      	adcs	r3, r3
 80032ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032b4:	4641      	mov	r1, r8
 80032b6:	1851      	adds	r1, r2, r1
 80032b8:	6339      	str	r1, [r7, #48]	; 0x30
 80032ba:	4649      	mov	r1, r9
 80032bc:	414b      	adcs	r3, r1
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032cc:	4659      	mov	r1, fp
 80032ce:	00cb      	lsls	r3, r1, #3
 80032d0:	4651      	mov	r1, sl
 80032d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032d6:	4651      	mov	r1, sl
 80032d8:	00ca      	lsls	r2, r1, #3
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	4642      	mov	r2, r8
 80032e2:	189b      	adds	r3, r3, r2
 80032e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e8:	464b      	mov	r3, r9
 80032ea:	460a      	mov	r2, r1
 80032ec:	eb42 0303 	adc.w	r3, r2, r3
 80032f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003300:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003304:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003308:	460b      	mov	r3, r1
 800330a:	18db      	adds	r3, r3, r3
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
 800330e:	4613      	mov	r3, r2
 8003310:	eb42 0303 	adc.w	r3, r2, r3
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800331a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800331e:	f7fc ff71 	bl	8000204 <__aeabi_uldivmod>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <UART_SetConfig+0x2d4>)
 8003328:	fba3 1302 	umull	r1, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2164      	movs	r1, #100	; 0x64
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	3332      	adds	r3, #50	; 0x32
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <UART_SetConfig+0x2d4>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	f003 0207 	and.w	r2, r3, #7
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4422      	add	r2, r4
 800334e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003350:	e105      	b.n	800355e <UART_SetConfig+0x4d6>
 8003352:	bf00      	nop
 8003354:	40011000 	.word	0x40011000
 8003358:	40011400 	.word	0x40011400
 800335c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003364:	2200      	movs	r2, #0
 8003366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800336a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800336e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003372:	4642      	mov	r2, r8
 8003374:	464b      	mov	r3, r9
 8003376:	1891      	adds	r1, r2, r2
 8003378:	6239      	str	r1, [r7, #32]
 800337a:	415b      	adcs	r3, r3
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003382:	4641      	mov	r1, r8
 8003384:	1854      	adds	r4, r2, r1
 8003386:	4649      	mov	r1, r9
 8003388:	eb43 0501 	adc.w	r5, r3, r1
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	00eb      	lsls	r3, r5, #3
 8003396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339a:	00e2      	lsls	r2, r4, #3
 800339c:	4614      	mov	r4, r2
 800339e:	461d      	mov	r5, r3
 80033a0:	4643      	mov	r3, r8
 80033a2:	18e3      	adds	r3, r4, r3
 80033a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033a8:	464b      	mov	r3, r9
 80033aa:	eb45 0303 	adc.w	r3, r5, r3
 80033ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033ce:	4629      	mov	r1, r5
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	4621      	mov	r1, r4
 80033d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033d8:	4621      	mov	r1, r4
 80033da:	008a      	lsls	r2, r1, #2
 80033dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033e0:	f7fc ff10 	bl	8000204 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4b60      	ldr	r3, [pc, #384]	; (800356c <UART_SetConfig+0x4e4>)
 80033ea:	fba3 2302 	umull	r2, r3, r3, r2
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	011c      	lsls	r4, r3, #4
 80033f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003400:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003404:	4642      	mov	r2, r8
 8003406:	464b      	mov	r3, r9
 8003408:	1891      	adds	r1, r2, r2
 800340a:	61b9      	str	r1, [r7, #24]
 800340c:	415b      	adcs	r3, r3
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003414:	4641      	mov	r1, r8
 8003416:	1851      	adds	r1, r2, r1
 8003418:	6139      	str	r1, [r7, #16]
 800341a:	4649      	mov	r1, r9
 800341c:	414b      	adcs	r3, r1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800342c:	4659      	mov	r1, fp
 800342e:	00cb      	lsls	r3, r1, #3
 8003430:	4651      	mov	r1, sl
 8003432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003436:	4651      	mov	r1, sl
 8003438:	00ca      	lsls	r2, r1, #3
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	4603      	mov	r3, r0
 8003440:	4642      	mov	r2, r8
 8003442:	189b      	adds	r3, r3, r2
 8003444:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003448:	464b      	mov	r3, r9
 800344a:	460a      	mov	r2, r1
 800344c:	eb42 0303 	adc.w	r3, r2, r3
 8003450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	67bb      	str	r3, [r7, #120]	; 0x78
 800345e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800346c:	4649      	mov	r1, r9
 800346e:	008b      	lsls	r3, r1, #2
 8003470:	4641      	mov	r1, r8
 8003472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003476:	4641      	mov	r1, r8
 8003478:	008a      	lsls	r2, r1, #2
 800347a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800347e:	f7fc fec1 	bl	8000204 <__aeabi_uldivmod>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <UART_SetConfig+0x4e4>)
 8003488:	fba3 1302 	umull	r1, r3, r3, r2
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	2164      	movs	r1, #100	; 0x64
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	3332      	adds	r3, #50	; 0x32
 800349a:	4a34      	ldr	r2, [pc, #208]	; (800356c <UART_SetConfig+0x4e4>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a6:	441c      	add	r4, r3
 80034a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ac:	2200      	movs	r2, #0
 80034ae:	673b      	str	r3, [r7, #112]	; 0x70
 80034b0:	677a      	str	r2, [r7, #116]	; 0x74
 80034b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034b6:	4642      	mov	r2, r8
 80034b8:	464b      	mov	r3, r9
 80034ba:	1891      	adds	r1, r2, r2
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	415b      	adcs	r3, r3
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034c6:	4641      	mov	r1, r8
 80034c8:	1851      	adds	r1, r2, r1
 80034ca:	6039      	str	r1, [r7, #0]
 80034cc:	4649      	mov	r1, r9
 80034ce:	414b      	adcs	r3, r1
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034de:	4659      	mov	r1, fp
 80034e0:	00cb      	lsls	r3, r1, #3
 80034e2:	4651      	mov	r1, sl
 80034e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e8:	4651      	mov	r1, sl
 80034ea:	00ca      	lsls	r2, r1, #3
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	4603      	mov	r3, r0
 80034f2:	4642      	mov	r2, r8
 80034f4:	189b      	adds	r3, r3, r2
 80034f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80034f8:	464b      	mov	r3, r9
 80034fa:	460a      	mov	r2, r1
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	663b      	str	r3, [r7, #96]	; 0x60
 800350c:	667a      	str	r2, [r7, #100]	; 0x64
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800351a:	4649      	mov	r1, r9
 800351c:	008b      	lsls	r3, r1, #2
 800351e:	4641      	mov	r1, r8
 8003520:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003524:	4641      	mov	r1, r8
 8003526:	008a      	lsls	r2, r1, #2
 8003528:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800352c:	f7fc fe6a 	bl	8000204 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <UART_SetConfig+0x4e4>)
 8003536:	fba3 1302 	umull	r1, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2164      	movs	r1, #100	; 0x64
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	3332      	adds	r3, #50	; 0x32
 8003548:	4a08      	ldr	r2, [pc, #32]	; (800356c <UART_SetConfig+0x4e4>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	f003 020f 	and.w	r2, r3, #15
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4422      	add	r2, r4
 800355c:	609a      	str	r2, [r3, #8]
}
 800355e:	bf00      	nop
 8003560:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003564:	46bd      	mov	sp, r7
 8003566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356a:	bf00      	nop
 800356c:	51eb851f 	.word	0x51eb851f

08003570 <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	461a      	mov	r2, r3
 800357e:	4603      	mov	r3, r0
 8003580:	817b      	strh	r3, [r7, #10]
 8003582:	460b      	mov	r3, r1
 8003584:	813b      	strh	r3, [r7, #8]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003590:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8003592:	7dbb      	ldrb	r3, [r7, #22]
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	757b      	strb	r3, [r7, #21]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80035a0:	897a      	ldrh	r2, [r7, #10]
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	4413      	add	r3, r2
 80035a6:	b298      	uxth	r0, r3
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	3301      	adds	r3, #1
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	893a      	ldrh	r2, [r7, #8]
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4603      	mov	r3, r0
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fb0d 	bl	8003bd6 <u8g2_IsIntersection>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d040      	beq.n	8003644 <u8g2_DrawHorizontalBitmap+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 80035c6:	e035      	b.n	8003634 <u8g2_DrawHorizontalBitmap+0xc4>
  {
    if ( *b & mask ) {
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	4013      	ands	r3, r2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <u8g2_DrawHorizontalBitmap+0x80>
      u8g2->draw_color = color;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	7dba      	ldrb	r2, [r7, #22]
 80035da:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80035de:	893a      	ldrh	r2, [r7, #8]
 80035e0:	8979      	ldrh	r1, [r7, #10]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2301      	movs	r3, #1
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fa36 	bl	8003a5a <u8g2_DrawHVLine>
 80035ee:	e010      	b.n	8003612 <u8g2_DrawHorizontalBitmap+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <u8g2_DrawHorizontalBitmap+0xa2>
      u8g2->draw_color = ncolor;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	7d7a      	ldrb	r2, [r7, #21]
 80035fe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8003602:	893a      	ldrh	r2, [r7, #8]
 8003604:	8979      	ldrh	r1, [r7, #10]
 8003606:	2300      	movs	r3, #0
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2301      	movs	r3, #1
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fa24 	bl	8003a5a <u8g2_DrawHVLine>
    }

    x++;
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	3301      	adds	r3, #1
 8003616:	817b      	strh	r3, [r7, #10]
    mask >>= 1;
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d104      	bne.n	800362e <u8g2_DrawHorizontalBitmap+0xbe>
    {
      mask = 128;
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	75fb      	strb	r3, [r7, #23]
      b++;
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	3301      	adds	r3, #1
 800362c:	623b      	str	r3, [r7, #32]
    }
    len--;
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	3b01      	subs	r3, #1
 8003632:	80fb      	strh	r3, [r7, #6]
  while(len > 0)
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1c6      	bne.n	80035c8 <u8g2_DrawHorizontalBitmap+0x58>
  }
  u8g2->draw_color = color;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	7dba      	ldrb	r2, [r7, #22]
 800363e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8003642:	e000      	b.n	8003646 <u8g2_DrawHorizontalBitmap+0xd6>
    return;
 8003644:	bf00      	nop
}
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	460b      	mov	r3, r1
 8003660:	813b      	strh	r3, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w;
  w = cnt;
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	82fb      	strh	r3, [r7, #22]
  w *= 8;
 800366a:	8afb      	ldrh	r3, [r7, #22]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003670:	897a      	ldrh	r2, [r7, #10]
 8003672:	8afb      	ldrh	r3, [r7, #22]
 8003674:	4413      	add	r3, r2
 8003676:	b298      	uxth	r0, r3
 8003678:	893a      	ldrh	r2, [r7, #8]
 800367a:	8c3b      	ldrh	r3, [r7, #32]
 800367c:	4413      	add	r3, r2
 800367e:	b29b      	uxth	r3, r3
 8003680:	893a      	ldrh	r2, [r7, #8]
 8003682:	8979      	ldrh	r1, [r7, #10]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4603      	mov	r3, r0
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 faa4 	bl	8003bd6 <u8g2_IsIntersection>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <u8g2_DrawBitmap+0x78>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8003694:	e012      	b.n	80036bc <u8g2_DrawBitmap+0x70>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 8003696:	8af8      	ldrh	r0, [r7, #22]
 8003698:	893a      	ldrh	r2, [r7, #8]
 800369a:	8979      	ldrh	r1, [r7, #10]
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	4603      	mov	r3, r0
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7ff ff64 	bl	8003570 <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	4413      	add	r3, r2
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 80036b0:	893b      	ldrh	r3, [r7, #8]
 80036b2:	3301      	adds	r3, #1
 80036b4:	813b      	strh	r3, [r7, #8]
    h--;
 80036b6:	8c3b      	ldrh	r3, [r7, #32]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 80036bc:	8c3b      	ldrh	r3, [r7, #32]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e9      	bne.n	8003696 <u8g2_DrawBitmap+0x4a>
 80036c2:	e000      	b.n	80036c6 <u8g2_DrawBitmap+0x7a>
    return;
 80036c4:	bf00      	nop
  }
}
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	817b      	strh	r3, [r7, #10]
 80036de:	460b      	mov	r3, r1
 80036e0:	813b      	strh	r3, [r7, #8]
 80036e2:	4613      	mov	r3, r2
 80036e4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80036e6:	897a      	ldrh	r2, [r7, #10]
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	4413      	add	r3, r2
 80036ec:	b298      	uxth	r0, r3
 80036ee:	893a      	ldrh	r2, [r7, #8]
 80036f0:	8b3b      	ldrh	r3, [r7, #24]
 80036f2:	4413      	add	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	893a      	ldrh	r2, [r7, #8]
 80036f8:	8979      	ldrh	r1, [r7, #10]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4603      	mov	r3, r0
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fa69 	bl	8003bd6 <u8g2_IsIntersection>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d012      	beq.n	8003730 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800370a:	e00d      	b.n	8003728 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	893a      	ldrh	r2, [r7, #8]
 8003710:	8979      	ldrh	r1, [r7, #10]
 8003712:	2000      	movs	r0, #0
 8003714:	9000      	str	r0, [sp, #0]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f99f 	bl	8003a5a <u8g2_DrawHVLine>
    y++;    
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	3301      	adds	r3, #1
 8003720:	813b      	strh	r3, [r7, #8]
    h--;
 8003722:	8b3b      	ldrh	r3, [r7, #24]
 8003724:	3b01      	subs	r3, #1
 8003726:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8003728:	8b3b      	ldrh	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ee      	bne.n	800370c <u8g2_DrawBox+0x40>
 800372e:	e000      	b.n	8003732 <u8g2_DrawBox+0x66>
    return;
 8003730:	bf00      	nop
  }
}
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	7c1b      	ldrb	r3, [r3, #16]
 8003746:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f810 	bl	800478c <memset>
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
 8003780:	4613      	mov	r3, r2
 8003782:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	7c1b      	ldrb	r3, [r3, #16]
 800378a:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	b29b      	uxth	r3, r3
 800379a:	89ba      	ldrh	r2, [r7, #12]
 800379c:	fb12 f303 	smulbb	r3, r2, r3
 80037a0:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80037a2:	89bb      	ldrh	r3, [r7, #12]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80037a8:	89bb      	ldrh	r3, [r7, #12]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4413      	add	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80037b0:	7bf9      	ldrb	r1, [r7, #15]
 80037b2:	78ba      	ldrb	r2, [r7, #2]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	460b      	mov	r3, r1
 80037ba:	2100      	movs	r1, #0
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fef2 	bl	80045a6 <u8x8_DrawTile>
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037dc:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037e4:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	7c5b      	ldrb	r3, [r3, #17]
 80037ec:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80037ee:	7bba      	ldrb	r2, [r7, #14]
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ffbd 	bl	8003774 <u8g2_send_tile_row>
    src_row++;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	3301      	adds	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	3301      	adds	r3, #1
 8003804:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	7b7b      	ldrb	r3, [r7, #13]
 800380a:	429a      	cmp	r2, r3
 800380c:	d203      	bcs.n	8003816 <u8g2_send_buffer+0x4c>
 800380e:	7bba      	ldrb	r2, [r7, #14]
 8003810:	7b3b      	ldrb	r3, [r7, #12]
 8003812:	429a      	cmp	r2, r3
 8003814:	d3eb      	bcc.n	80037ee <u8g2_send_buffer+0x24>
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff69 	bl	8003738 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003866:	2100      	movs	r1, #0
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ffd8 	bl	800381e <u8g2_SetBufferCurrTileRow>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ffa3 	bl	80037ca <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800388a:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	4413      	add	r3, r2
 8003896:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	7c5b      	ldrb	r3, [r3, #17]
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d304      	bcc.n	80038ae <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fecf 	bl	8004648 <u8x8_RefreshDisplay>
    return 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e00d      	b.n	80038ca <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff3d 	bl	8003738 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffab 	bl	800381e <u8g2_SetBufferCurrTileRow>
  return 1;
 80038c8:	2301      	movs	r3, #1
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <u8g2_m_16_8_2>:
  *page_cnt = 1;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_2(uint8_t *page_cnt)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	701a      	strb	r2, [r3, #0]
  return buf;
 80038e2:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <u8g2_m_16_8_2+0x1c>)
  #endif
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	2000014c 	.word	0x2000014c

080038f4 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>:
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 2 */
void u8g2_Setup_ssd1306_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x44>)
 800390a:	490c      	ldr	r1, [pc, #48]	; (800393c <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x48>)
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fefb 	bl	8004708 <u8x8_Setup>
  buf = u8g2_m_16_8_2(&tile_buf_height);
 8003912:	f107 0313 	add.w	r3, r7, #19
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ffdc 	bl	80038d4 <u8g2_m_16_8_2>
 800391c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800391e:	7cfa      	ldrb	r2, [r7, #19]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x4c>)
 8003926:	6979      	ldr	r1, [r7, #20]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fa3e 	bl	8003daa <u8g2_SetupBuffer>
}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	08004245 	.word	0x08004245
 800393c:	080044a1 	.word	0x080044a1
 8003940:	08003c2d 	.word	0x08003c2d

08003944 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return 0;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a04      	ldr	r2, [pc, #16]	; (8003978 <u8g2_SetFontPosBaseline+0x1c>)
 8003968:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	08003945 	.word	0x08003945

0800397c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	460b      	mov	r3, r1
 800398c:	80fb      	strh	r3, [r7, #6]
 800398e:	4613      	mov	r3, r2
 8003990:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003998:	8afb      	ldrh	r3, [r7, #22]
 800399a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	8abb      	ldrh	r3, [r7, #20]
 80039a2:	4413      	add	r3, r2
 80039a4:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80039a6:	8afa      	ldrh	r2, [r7, #22]
 80039a8:	8abb      	ldrh	r3, [r7, #20]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d90b      	bls.n	80039c6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80039ae:	8afa      	ldrh	r2, [r7, #22]
 80039b0:	88bb      	ldrh	r3, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d205      	bcs.n	80039c2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80039b6:	88bb      	ldrh	r3, [r7, #4]
 80039b8:	82bb      	strh	r3, [r7, #20]
      b--;
 80039ba:	8abb      	ldrh	r3, [r7, #20]
 80039bc:	3b01      	subs	r3, #1
 80039be:	82bb      	strh	r3, [r7, #20]
 80039c0:	e001      	b.n	80039c6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80039c6:	8afa      	ldrh	r2, [r7, #22]
 80039c8:	88bb      	ldrh	r3, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d301      	bcc.n	80039d2 <u8g2_clip_intersection2+0x56>
    return 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e01c      	b.n	8003a0c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80039d2:	8aba      	ldrh	r2, [r7, #20]
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d801      	bhi.n	80039de <u8g2_clip_intersection2+0x62>
    return 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	e016      	b.n	8003a0c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80039de:	8afa      	ldrh	r2, [r7, #22]
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d201      	bcs.n	80039ea <u8g2_clip_intersection2+0x6e>
    a = c;
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80039ea:	8aba      	ldrh	r2, [r7, #20]
 80039ec:	88bb      	ldrh	r3, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d901      	bls.n	80039f6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80039f2:	88bb      	ldrh	r3, [r7, #4]
 80039f4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8afa      	ldrh	r2, [r7, #22]
 80039fa:	801a      	strh	r2, [r3, #0]
  b -= a;
 80039fc:	8aba      	ldrh	r2, [r7, #20]
 80039fe:	8afb      	ldrh	r3, [r7, #22]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	8aba      	ldrh	r2, [r7, #20]
 8003a08:	801a      	strh	r2, [r3, #0]
  return 1;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	813b      	strh	r3, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	893a      	ldrh	r2, [r7, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003a40:	88f8      	ldrh	r0, [r7, #6]
 8003a42:	893a      	ldrh	r2, [r7, #8]
 8003a44:	8979      	ldrh	r1, [r7, #10]
 8003a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	47a0      	blx	r4
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}

08003a5a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003a5a:	b590      	push	{r4, r7, lr}
 8003a5c:	b087      	sub	sp, #28
 8003a5e:	af02      	add	r7, sp, #8
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	4608      	mov	r0, r1
 8003a64:	4611      	mov	r1, r2
 8003a66:	461a      	mov	r2, r3
 8003a68:	4603      	mov	r3, r0
 8003a6a:	817b      	strh	r3, [r7, #10]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	813b      	strh	r3, [r7, #8]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d075      	beq.n	8003b6a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d072      	beq.n	8003b6a <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d91a      	bls.n	8003ac0 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d109      	bne.n	8003aa6 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003a92:	897a      	ldrh	r2, [r7, #10]
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	817b      	strh	r3, [r7, #10]
	  x++;
 8003a9c:	897b      	ldrh	r3, [r7, #10]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	817b      	strh	r3, [r7, #10]
 8003aa4:	e00c      	b.n	8003ac0 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d108      	bne.n	8003ac0 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8003aae:	893a      	ldrh	r2, [r7, #8]
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	813b      	strh	r3, [r7, #8]
	  y++;
 8003ab8:	893b      	ldrh	r3, [r7, #8]
 8003aba:	3301      	adds	r3, #1
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8003ac0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003acc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11a      	bne.n	8003b0a <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003ada:	893b      	ldrh	r3, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d83b      	bhi.n	8003b58 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003ae6:	893b      	ldrh	r3, [r7, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d937      	bls.n	8003b5c <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003af8:	1db9      	adds	r1, r7, #6
 8003afa:	f107 000a 	add.w	r0, r7, #10
 8003afe:	f7ff ff3d 	bl	800397c <u8g2_clip_intersection2>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d11a      	bne.n	8003b3e <u8g2_DrawHVLine+0xe4>
	  return;
 8003b08:	e02f      	b.n	8003b6a <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003b10:	897b      	ldrh	r3, [r7, #10]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d824      	bhi.n	8003b60 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003b1c:	897b      	ldrh	r3, [r7, #10]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d920      	bls.n	8003b64 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003b2e:	1db9      	adds	r1, r7, #6
 8003b30:	f107 0008 	add.w	r0, r7, #8
 8003b34:	f7ff ff22 	bl	800397c <u8g2_clip_intersection2>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d014      	beq.n	8003b68 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	689c      	ldr	r4, [r3, #8]
 8003b44:	8979      	ldrh	r1, [r7, #10]
 8003b46:	893a      	ldrh	r2, [r7, #8]
 8003b48:	88f8      	ldrh	r0, [r7, #6]
 8003b4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	4603      	mov	r3, r0
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	47a0      	blx	r4
 8003b56:	e008      	b.n	8003b6a <u8g2_DrawHVLine+0x110>
	  return;
 8003b58:	bf00      	nop
 8003b5a:	e006      	b.n	8003b6a <u8g2_DrawHVLine+0x110>
	  return;
 8003b5c:	bf00      	nop
 8003b5e:	e004      	b.n	8003b6a <u8g2_DrawHVLine+0x110>
	  return;
 8003b60:	bf00      	nop
 8003b62:	e002      	b.n	8003b6a <u8g2_DrawHVLine+0x110>
	  return;
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <u8g2_DrawHVLine+0x110>
	  return;
 8003b68:	bf00      	nop
    }
}
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd90      	pop	{r4, r7, pc}

08003b70 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003b70:	b490      	push	{r4, r7}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4623      	mov	r3, r4
 8003b80:	80fb      	strh	r3, [r7, #6]
 8003b82:	4603      	mov	r3, r0
 8003b84:	80bb      	strh	r3, [r7, #4]
 8003b86:	460b      	mov	r3, r1
 8003b88:	807b      	strh	r3, [r7, #2]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	88bb      	ldrh	r3, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d20d      	bcs.n	8003bb2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8003b96:	883a      	ldrh	r2, [r7, #0]
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d901      	bls.n	8003ba2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e014      	b.n	8003bcc <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	883b      	ldrh	r3, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d901      	bls.n	8003bae <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00e      	b.n	8003bcc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e00c      	b.n	8003bcc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003bb2:	883a      	ldrh	r2, [r7, #0]
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d907      	bls.n	8003bca <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	883b      	ldrh	r3, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d901      	bls.n	8003bc6 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e002      	b.n	8003bcc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003bca:	2300      	movs	r3, #0
    }
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc90      	pop	{r4, r7}
 8003bd4:	4770      	bx	lr

08003bd6 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	4608      	mov	r0, r1
 8003be0:	4611      	mov	r1, r2
 8003be2:	461a      	mov	r2, r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	817b      	strh	r3, [r7, #10]
 8003be8:	460b      	mov	r3, r1
 8003bea:	813b      	strh	r3, [r7, #8]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8003bfc:	8b3b      	ldrh	r3, [r7, #24]
 8003bfe:	893a      	ldrh	r2, [r7, #8]
 8003c00:	f7ff ffb6 	bl	8003b70 <u8g2_is_intersection_decision_tree>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <u8g2_IsIntersection+0x38>
    return 0; 
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e00a      	b.n	8003c24 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	897a      	ldrh	r2, [r7, #10]
 8003c1e:	f7ff ffa7 	bl	8003b70 <u8g2_is_intersection_decision_tree>
 8003c22:	4603      	mov	r3, r0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	817b      	strh	r3, [r7, #10]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	813b      	strh	r3, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8003c46:	893b      	ldrh	r3, [r7, #8]
 8003c48:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003c4a:	7efb      	ldrb	r3, [r7, #27]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8003c56:	7e3a      	ldrb	r2, [r7, #24]
 8003c58:	7efb      	ldrb	r3, [r7, #27]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d801      	bhi.n	8003c76 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003c72:	7e3b      	ldrb	r3, [r7, #24]
 8003c74:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d001      	beq.n	8003c84 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003c80:	7e3b      	ldrb	r3, [r7, #24]
 8003c82:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003c84:	893b      	ldrh	r3, [r7, #8]
 8003c86:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003c88:	8afb      	ldrh	r3, [r7, #22]
 8003c8a:	f023 0307 	bic.w	r3, r3, #7
 8003c8e:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	7c1b      	ldrb	r3, [r3, #16]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	8afa      	ldrh	r2, [r7, #22]
 8003c9a:	fb12 f303 	smulbb	r3, r2, r3
 8003c9e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8003ca6:	8afb      	ldrh	r3, [r7, #22]
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8003cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d117      	bne.n	8003cee <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	7ebb      	ldrb	r3, [r7, #26]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	7e7b      	ldrb	r3, [r7, #25]
 8003cd2:	4053      	eors	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
	len--;
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e8      	bne.n	8003cbe <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003cec:	e038      	b.n	8003d60 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	7ebb      	ldrb	r3, [r7, #26]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	7e7b      	ldrb	r3, [r7, #25]
 8003d02:	4053      	eors	r3, r2
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003d0a:	7efb      	ldrb	r3, [r7, #27]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003d10:	7efb      	ldrb	r3, [r7, #27]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	76fb      	strb	r3, [r7, #27]
      len--;
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003d1e:	7efb      	ldrb	r3, [r7, #27]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d114      	bne.n	8003d4e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003d28:	461a      	mov	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d801      	bhi.n	8003d3e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d008      	beq.n	8003d5a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	767b      	strb	r3, [r7, #25]
 8003d4c:	e005      	b.n	8003d5a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003d4e:	7ebb      	ldrb	r3, [r7, #26]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003d54:	7e7b      	ldrb	r3, [r7, #25]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1c6      	bne.n	8003cee <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003d60:	bf00      	nop
 8003d62:	3724      	adds	r7, #36	; 0x24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	79fa      	ldrb	r2, [r7, #7]
 8003dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff ffad 	bl	8003d6c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fda2 	bl	800395c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e3c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003e3e:	89fb      	ldrh	r3, [r7, #14]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	89fa      	ldrh	r2, [r7, #14]
 8003e48:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	7c1b      	ldrb	r3, [r3, #16]
 8003e4e:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	89fa      	ldrh	r2, [r7, #14]
 8003e5a:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e62:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003e64:	89fb      	ldrh	r3, [r7, #14]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	89fa      	ldrh	r2, [r7, #14]
 8003e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e76:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003e78:	89fb      	ldrh	r3, [r7, #14]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003e80:	4413      	add	r3, r2
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	7c52      	ldrb	r2, [r2, #17]
 8003e86:	4293      	cmp	r3, r2
 8003e88:	dd08      	ble.n	8003e9c <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	7c5b      	ldrb	r3, [r3, #17]
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003e9c:	89fb      	ldrh	r3, [r7, #14]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003ebe:	89fb      	ldrh	r3, [r7, #14]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	8a9a      	ldrh	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	8ada      	ldrh	r2, [r3, #22]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af02      	add	r7, sp, #8
 8003ef0:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fe61 	bl	8003bd6 <u8g2_IsIntersection>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003f22:	e03b      	b.n	8003f9c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d205      	bcs.n	8003f48 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d905      	bls.n	8003f64 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d205      	bcs.n	8003f80 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d905      	bls.n	8003f9c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff3b 	bl	8003e28 <u8g2_update_dimension_common>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff7b 	bl	8003eea <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	461a      	mov	r2, r3
 800400a:	4603      	mov	r3, r0
 800400c:	817b      	strh	r3, [r7, #10]
 800400e:	460b      	mov	r3, r1
 8004010:	813b      	strh	r3, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004016:	88f8      	ldrh	r0, [r7, #6]
 8004018:	893a      	ldrh	r2, [r7, #8]
 800401a:	8979      	ldrh	r1, [r7, #10]
 800401c:	7e3b      	ldrb	r3, [r7, #24]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4603      	mov	r3, r0
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7ff fcf8 	bl	8003a18 <u8g2_draw_hv_line_2dir>
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	460b      	mov	r3, r1
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691c      	ldr	r4, [r3, #16]
 8004042:	7afa      	ldrb	r2, [r7, #11]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2117      	movs	r1, #23
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	47a0      	blx	r4
 800404c:	4603      	mov	r3, r0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bd90      	pop	{r4, r7, pc}

08004056 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004062:	1cfb      	adds	r3, r7, #3
 8004064:	461a      	mov	r2, r3
 8004066:	2101      	movs	r1, #1
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ffe1 	bl	8004030 <u8x8_byte_SendBytes>
 800406e:	4603      	mov	r3, r0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691c      	ldr	r4, [r3, #16]
 8004084:	2300      	movs	r3, #0
 8004086:	2200      	movs	r2, #0
 8004088:	2118      	movs	r1, #24
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	47a0      	blx	r4
 800408e:	4603      	mov	r3, r0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}

08004098 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691c      	ldr	r4, [r3, #16]
 80040a4:	2300      	movs	r3, #0
 80040a6:	2200      	movs	r2, #0
 80040a8:	2119      	movs	r1, #25
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	47a0      	blx	r4
 80040ae:	4603      	mov	r3, r0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd90      	pop	{r4, r7, pc}

080040b8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68dc      	ldr	r4, [r3, #12]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	2300      	movs	r3, #0
 80040cc:	2115      	movs	r1, #21
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	47a0      	blx	r4
 80040d2:	4603      	mov	r3, r0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd90      	pop	{r4, r7, pc}

080040dc <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68dc      	ldr	r4, [r3, #12]
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	2300      	movs	r3, #0
 80040f0:	2116      	movs	r1, #22
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	47a0      	blx	r4
 80040f6:	4603      	mov	r3, r0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}

08004100 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	460b      	mov	r3, r1
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68dc      	ldr	r4, [r3, #12]
 8004112:	7afa      	ldrb	r2, [r7, #11]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2117      	movs	r1, #23
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	47a0      	blx	r4
 800411c:	4603      	mov	r3, r0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bd90      	pop	{r4, r7, pc}

08004126 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004126:	b590      	push	{r4, r7, lr}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68dc      	ldr	r4, [r3, #12]
 8004132:	2300      	movs	r3, #0
 8004134:	2200      	movs	r2, #0
 8004136:	2118      	movs	r1, #24
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	47a0      	blx	r4
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bd90      	pop	{r4, r7, pc}

08004146 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004146:	b590      	push	{r4, r7, lr}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68dc      	ldr	r4, [r3, #12]
 8004152:	2300      	movs	r3, #0
 8004154:	2200      	movs	r2, #0
 8004156:	2119      	movs	r1, #25
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	47a0      	blx	r4
 800415c:	4603      	mov	r3, r0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bd90      	pop	{r4, r7, pc}

08004166 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004166:	b590      	push	{r4, r7, lr}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	73fb      	strb	r3, [r7, #15]
    data++;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2bfe      	cmp	r3, #254	; 0xfe
 8004180:	d031      	beq.n	80041e6 <u8x8_cad_SendSequence+0x80>
 8004182:	2bfe      	cmp	r3, #254	; 0xfe
 8004184:	dc3d      	bgt.n	8004202 <u8x8_cad_SendSequence+0x9c>
 8004186:	2b19      	cmp	r3, #25
 8004188:	dc3b      	bgt.n	8004202 <u8x8_cad_SendSequence+0x9c>
 800418a:	2b18      	cmp	r3, #24
 800418c:	da23      	bge.n	80041d6 <u8x8_cad_SendSequence+0x70>
 800418e:	2b16      	cmp	r3, #22
 8004190:	dc02      	bgt.n	8004198 <u8x8_cad_SendSequence+0x32>
 8004192:	2b15      	cmp	r3, #21
 8004194:	da03      	bge.n	800419e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004196:	e034      	b.n	8004202 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004198:	2b17      	cmp	r3, #23
 800419a:	d00e      	beq.n	80041ba <u8x8_cad_SendSequence+0x54>
	return;
 800419c:	e031      	b.n	8004202 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68dc      	ldr	r4, [r3, #12]
 80041a8:	7bba      	ldrb	r2, [r7, #14]
 80041aa:	7bf9      	ldrb	r1, [r7, #15]
 80041ac:	2300      	movs	r3, #0
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	47a0      	blx	r4
	  data++;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	603b      	str	r3, [r7, #0]
	  break;
 80041b8:	e022      	b.n	8004200 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80041c0:	f107 030e 	add.w	r3, r7, #14
 80041c4:	461a      	mov	r2, r3
 80041c6:	2101      	movs	r1, #1
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ff99 	bl	8004100 <u8x8_cad_SendData>
	  data++;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	603b      	str	r3, [r7, #0]
	  break;
 80041d4:	e014      	b.n	8004200 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68dc      	ldr	r4, [r3, #12]
 80041da:	7bf9      	ldrb	r1, [r7, #15]
 80041dc:	2300      	movs	r3, #0
 80041de:	2200      	movs	r2, #0
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	47a0      	blx	r4
	  break;
 80041e4:	e00c      	b.n	8004200 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80041ec:	7bbb      	ldrb	r3, [r7, #14]
 80041ee:	461a      	mov	r2, r3
 80041f0:	2129      	movs	r1, #41	; 0x29
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fa37 	bl	8004666 <u8x8_gpio_call>
	  data++;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	603b      	str	r3, [r7, #0]
	  break;
 80041fe:	bf00      	nop
    cmd = *data;
 8004200:	e7b6      	b.n	8004170 <u8x8_cad_SendSequence+0xa>
	return;
 8004202:	bf00      	nop
    }
  }
}
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	bd90      	pop	{r4, r7, pc}

0800420a <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800420a:	b590      	push	{r4, r7, lr}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	460b      	mov	r3, r1
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff ff2d 	bl	8004078 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800421e:	2140      	movs	r1, #64	; 0x40
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff ff18 	bl	8004056 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	691c      	ldr	r4, [r3, #16]
 800422a:	7afa      	ldrb	r2, [r7, #11]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2117      	movs	r1, #23
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff ff2f 	bl	8004098 <u8x8_byte_EndTransfer>
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bd90      	pop	{r4, r7, pc}
	...

08004244 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	72fb      	strb	r3, [r7, #11]
 8004252:	4613      	mov	r3, r2
 8004254:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	3b14      	subs	r3, #20
 800425a:	2b05      	cmp	r3, #5
 800425c:	d86e      	bhi.n	800433c <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	080042fb 	.word	0x080042fb
 8004268:	0800427d 	.word	0x0800427d
 800426c:	080042ab 	.word	0x080042ab
 8004270:	080042b7 	.word	0x080042b7
 8004274:	0800431f 	.word	0x0800431f
 8004278:	08004327 	.word	0x08004327
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800427c:	4b33      	ldr	r3, [pc, #204]	; (800434c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff ff07 	bl	8004098 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff fef4 	bl	8004078 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8004290:	2100      	movs	r1, #0
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fedf 	bl	8004056 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004298:	7abb      	ldrb	r3, [r7, #10]
 800429a:	4619      	mov	r1, r3
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff feda 	bl	8004056 <u8x8_byte_SendByte>
      in_transfer = 1;
 80042a2:	4b2a      	ldr	r3, [pc, #168]	; (800434c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80042a8:	e04a      	b.n	8004340 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80042aa:	7abb      	ldrb	r3, [r7, #10]
 80042ac:	4619      	mov	r1, r3
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7ff fed1 	bl	8004056 <u8x8_byte_SendByte>
      break;      
 80042b4:	e044      	b.n	8004340 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80042b6:	4b25      	ldr	r3, [pc, #148]	; (800434c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff feea 	bl	8004098 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80042c8:	e00a      	b.n	80042e0 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	2118      	movs	r1, #24
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff ff9b 	bl	800420a <u8x8_i2c_data_transfer>
	arg_int-=24;
 80042d4:	7abb      	ldrb	r3, [r7, #10]
 80042d6:	3b18      	subs	r3, #24
 80042d8:	72bb      	strb	r3, [r7, #10]
	p+=24;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	3318      	adds	r3, #24
 80042de:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80042e0:	7abb      	ldrb	r3, [r7, #10]
 80042e2:	2b18      	cmp	r3, #24
 80042e4:	d8f1      	bhi.n	80042ca <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80042e6:	7abb      	ldrb	r3, [r7, #10]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4619      	mov	r1, r3
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff ff8c 	bl	800420a <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80042f2:	4b16      	ldr	r3, [pc, #88]	; (800434c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
      break;
 80042f8:	e022      	b.n	8004340 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004300:	2bff      	cmp	r3, #255	; 0xff
 8004302:	d103      	bne.n	800430c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2278      	movs	r2, #120	; 0x78
 8004308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691c      	ldr	r4, [r3, #16]
 8004310:	7aba      	ldrb	r2, [r7, #10]
 8004312:	7af9      	ldrb	r1, [r7, #11]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	47a0      	blx	r4
 800431a:	4603      	mov	r3, r0
 800431c:	e011      	b.n	8004342 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
      break;
 8004324:	e00c      	b.n	8004340 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff feb2 	bl	8004098 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
      break;
 800433a:	e001      	b.n	8004340 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8004340:	2301      	movs	r3, #1
}
 8004342:	4618      	mov	r0, r3
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	bd90      	pop	{r4, r7, pc}
 800434a:	bf00      	nop
 800434c:	2000024c 	.word	0x2000024c

08004350 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	72fb      	strb	r3, [r7, #11]
 800435e:	4613      	mov	r3, r2
 8004360:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004362:	7afb      	ldrb	r3, [r7, #11]
 8004364:	3b0b      	subs	r3, #11
 8004366:	2b04      	cmp	r3, #4
 8004368:	f200 808a 	bhi.w	8004480 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004389 	.word	0x08004389
 8004378:	08004481 	.word	0x08004481
 800437c:	080043a3 	.word	0x080043a3
 8004380:	080043d5 	.word	0x080043d5
 8004384:	080043f5 	.word	0x080043f5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004388:	7abb      	ldrb	r3, [r7, #10]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800438e:	4940      	ldr	r1, [pc, #256]	; (8004490 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff fee8 	bl	8004166 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004396:	e075      	b.n	8004484 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004398:	493e      	ldr	r1, [pc, #248]	; (8004494 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff fee3 	bl	8004166 <u8x8_cad_SendSequence>
      break;
 80043a0:	e070      	b.n	8004484 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80043a2:	7abb      	ldrb	r3, [r7, #10]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80043a8:	493b      	ldr	r1, [pc, #236]	; (8004498 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fedb 	bl	8004166 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	7c9a      	ldrb	r2, [r3, #18]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80043bc:	e062      	b.n	8004484 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80043be:	4937      	ldr	r1, [pc, #220]	; (800449c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fed0 	bl	8004166 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	7cda      	ldrb	r2, [r3, #19]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80043d2:	e057      	b.n	8004484 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fea6 	bl	8004126 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80043da:	2181      	movs	r1, #129	; 0x81
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff fe6b 	bl	80040b8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80043e2:	7abb      	ldrb	r3, [r7, #10]
 80043e4:	4619      	mov	r1, r3
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff fe78 	bl	80040dc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff feaa 	bl	8004146 <u8x8_cad_EndTransfer>
      break;
 80043f2:	e047      	b.n	8004484 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff fe96 	bl	8004126 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	795b      	ldrb	r3, [r3, #5]
 80043fe:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	4413      	add	r3, r2
 8004410:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004412:	2140      	movs	r1, #64	; 0x40
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fe4f 	bl	80040b8 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f043 0310 	orr.w	r3, r3, #16
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4619      	mov	r1, r3
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fe45 	bl	80040b8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff fe4f 	bl	80040dc <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	799b      	ldrb	r3, [r3, #6]
 8004442:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff fe46 	bl	80040dc <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	791b      	ldrb	r3, [r3, #4]
 8004454:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800445c:	7dbb      	ldrb	r3, [r7, #22]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4619      	mov	r1, r3
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fe4a 	bl	8004100 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800446c:	7abb      	ldrb	r3, [r7, #10]
 800446e:	3b01      	subs	r3, #1
 8004470:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004472:	7abb      	ldrb	r3, [r7, #10]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1eb      	bne.n	8004450 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fe64 	bl	8004146 <u8x8_cad_EndTransfer>
      break;
 800447e:	e001      	b.n	8004484 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004484:	2301      	movs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	08004b38 	.word	0x08004b38
 8004494:	08004b40 	.word	0x08004b40
 8004498:	08004b48 	.word	0x08004b48
 800449c:	08004b50 	.word	0x08004b50

080044a0 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	72fb      	strb	r3, [r7, #11]
 80044ae:	4613      	mov	r3, r2
 80044b0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80044b2:	7aba      	ldrb	r2, [r7, #10]
 80044b4:	7af9      	ldrb	r1, [r7, #11]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ff49 	bl	8004350 <u8x8_d_ssd1306_sh1106_generic>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e014      	b.n	80044f2 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80044c8:	7afb      	ldrb	r3, [r7, #11]
 80044ca:	2b09      	cmp	r3, #9
 80044cc:	d009      	beq.n	80044e2 <u8x8_d_ssd1306_128x64_noname+0x42>
 80044ce:	2b0a      	cmp	r3, #10
 80044d0:	d10c      	bne.n	80044ec <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f82a 	bl	800452c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80044d8:	4908      	ldr	r1, [pc, #32]	; (80044fc <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff fe43 	bl	8004166 <u8x8_cad_SendSequence>
      break;
 80044e0:	e006      	b.n	80044f0 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80044e2:	4907      	ldr	r1, [pc, #28]	; (8004500 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f80d 	bl	8004504 <u8x8_d_helper_display_setup_memory>
      break;
 80044ea:	e001      	b.n	80044f0 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80044f0:	2301      	movs	r3, #1
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	08004b00 	.word	0x08004b00
 8004500:	08004b58 	.word	0x08004b58

08004504 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	7c9a      	ldrb	r2, [r3, #18]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695c      	ldr	r4, [r3, #20]
 8004538:	2300      	movs	r3, #0
 800453a:	2200      	movs	r2, #0
 800453c:	2128      	movs	r1, #40	; 0x28
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68dc      	ldr	r4, [r3, #12]
 8004546:	2300      	movs	r3, #0
 8004548:	2200      	movs	r2, #0
 800454a:	2114      	movs	r1, #20
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004550:	2201      	movs	r2, #1
 8004552:	214b      	movs	r1, #75	; 0x4b
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f886 	bl	8004666 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	791b      	ldrb	r3, [r3, #4]
 8004560:	461a      	mov	r2, r3
 8004562:	2129      	movs	r1, #41	; 0x29
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f87e 	bl	8004666 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800456a:	2200      	movs	r2, #0
 800456c:	214b      	movs	r1, #75	; 0x4b
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f879 	bl	8004666 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	791b      	ldrb	r3, [r3, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	2129      	movs	r1, #41	; 0x29
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f871 	bl	8004666 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004584:	2201      	movs	r2, #1
 8004586:	214b      	movs	r1, #75	; 0x4b
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f86c 	bl	8004666 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	795b      	ldrb	r3, [r3, #5]
 8004594:	461a      	mov	r2, r3
 8004596:	2129      	movs	r1, #41	; 0x29
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f864 	bl	8004666 <u8x8_gpio_call>
}    
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd90      	pop	{r4, r7, pc}

080045a6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80045a6:	b590      	push	{r4, r7, lr}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	4608      	mov	r0, r1
 80045b0:	4611      	mov	r1, r2
 80045b2:	461a      	mov	r2, r3
 80045b4:	4603      	mov	r3, r0
 80045b6:	70fb      	strb	r3, [r7, #3]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70bb      	strb	r3, [r7, #2]
 80045bc:	4613      	mov	r3, r2
 80045be:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80045c4:	78bb      	ldrb	r3, [r7, #2]
 80045c6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80045c8:	787b      	ldrb	r3, [r7, #1]
 80045ca:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689c      	ldr	r4, [r3, #8]
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	2201      	movs	r2, #1
 80045da:	210f      	movs	r1, #15
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	47a0      	blx	r4
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd90      	pop	{r4, r7, pc}

080045ea <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80045ea:	b590      	push	{r4, r7, lr}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689c      	ldr	r4, [r3, #8]
 80045f6:	2300      	movs	r3, #0
 80045f8:	2200      	movs	r2, #0
 80045fa:	2109      	movs	r1, #9
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	47a0      	blx	r4
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bd90      	pop	{r4, r7, pc}

08004608 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689c      	ldr	r4, [r3, #8]
 8004614:	2300      	movs	r3, #0
 8004616:	2200      	movs	r2, #0
 8004618:	210a      	movs	r1, #10
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bd90      	pop	{r4, r7, pc}

08004626 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004626:	b590      	push	{r4, r7, lr}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689c      	ldr	r4, [r3, #8]
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	2300      	movs	r3, #0
 800463a:	210b      	movs	r1, #11
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	47a0      	blx	r4
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bd90      	pop	{r4, r7, pc}

08004648 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689c      	ldr	r4, [r3, #8]
 8004654:	2300      	movs	r3, #0
 8004656:	2200      	movs	r2, #0
 8004658:	2110      	movs	r1, #16
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	47a0      	blx	r4
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	bd90      	pop	{r4, r7, pc}

08004666 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004666:	b590      	push	{r4, r7, lr}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	70fb      	strb	r3, [r7, #3]
 8004672:	4613      	mov	r3, r2
 8004674:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695c      	ldr	r4, [r3, #20]
 800467a:	78ba      	ldrb	r2, [r7, #2]
 800467c:	78f9      	ldrb	r1, [r7, #3]
 800467e:	2300      	movs	r3, #0
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	47a0      	blx	r4
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bd90      	pop	{r4, r7, pc}

0800468c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	72fb      	strb	r3, [r7, #11]
 800469a:	4613      	mov	r3, r2
 800469c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a11      	ldr	r2, [pc, #68]	; (8004704 <u8x8_SetupDefaults+0x58>)
 80046be:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a10      	ldr	r2, [pc, #64]	; (8004704 <u8x8_SetupDefaults+0x58>)
 80046c4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a0e      	ldr	r2, [pc, #56]	; (8004704 <u8x8_SetupDefaults+0x58>)
 80046ca:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <u8x8_SetupDefaults+0x58>)
 80046d0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	22ff      	movs	r2, #255	; 0xff
 80046ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	22ff      	movs	r2, #255	; 0xff
 80046f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	0800468d 	.word	0x0800468d

08004708 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ffc8 	bl	80046ac <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ff58 	bl	80045ea <u8x8_SetupMemory>
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4d0d      	ldr	r5, [pc, #52]	; (800477c <__libc_init_array+0x38>)
 8004748:	4c0d      	ldr	r4, [pc, #52]	; (8004780 <__libc_init_array+0x3c>)
 800474a:	1b64      	subs	r4, r4, r5
 800474c:	10a4      	asrs	r4, r4, #2
 800474e:	2600      	movs	r6, #0
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	4d0b      	ldr	r5, [pc, #44]	; (8004784 <__libc_init_array+0x40>)
 8004756:	4c0c      	ldr	r4, [pc, #48]	; (8004788 <__libc_init_array+0x44>)
 8004758:	f000 f820 	bl	800479c <_init>
 800475c:	1b64      	subs	r4, r4, r5
 800475e:	10a4      	asrs	r4, r4, #2
 8004760:	2600      	movs	r6, #0
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	f855 3b04 	ldr.w	r3, [r5], #4
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	f855 3b04 	ldr.w	r3, [r5], #4
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	08004b78 	.word	0x08004b78
 8004780:	08004b78 	.word	0x08004b78
 8004784:	08004b78 	.word	0x08004b78
 8004788:	08004b7c 	.word	0x08004b7c

0800478c <memset>:
 800478c:	4402      	add	r2, r0
 800478e:	4603      	mov	r3, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	f803 1b01 	strb.w	r1, [r3], #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <_init>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr

080047a8 <_fini>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr
