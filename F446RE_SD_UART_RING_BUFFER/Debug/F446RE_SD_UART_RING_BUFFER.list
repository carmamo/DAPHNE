
F446RE_SD_UART_RING_BUFFER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009344  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa4  08009aa4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa4  08009aa4  00019aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aac  08009aac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003350  20000070  08009b24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033c0  08009b24  000233c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132c4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef5  00000000  00000000  00033364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00036260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024402  00000000  00000000  00037f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e57  00000000  00000000  0005c33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfdd7  00000000  00000000  00071191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040bc  00000000  00000000  00140fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094fc 	.word	0x080094fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080094fc 	.word	0x080094fc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff fe19 	bl	8000224 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <Send_Uart+0x28>)
 80005fe:	f004 fad7 	bl	8004bb0 <HAL_UART_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000225c 	.word	0x2000225c

08000610 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <Mount_SD+0x38>)
 800061e:	f007 fc59 	bl	8007ed4 <f_mount>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <Mount_SD+0x3c>)
 8000628:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\r\n\n");
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <Mount_SD+0x3c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d003      	beq.n	800063a <Mount_SD+0x2a>
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <Mount_SD+0x40>)
 8000634:	f7ff ffd6 	bl	80005e4 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\r\n");
}
 8000638:	e002      	b.n	8000640 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\r\n");
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <Mount_SD+0x44>)
 800063c:	f7ff ffd2 	bl	80005e4 <Send_Uart>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000008c 	.word	0x2000008c
 800064c:	20002108 	.word	0x20002108
 8000650:	08009514 	.word	0x08009514
 8000654:	08009538 	.word	0x08009538

08000658 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	2000      	movs	r0, #0
 8000666:	f007 fc35 	bl	8007ed4 <f_mount>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <Unmount_SD+0x38>)
 8000670:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\r\n\n\n");
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <Unmount_SD+0x38>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <Unmount_SD+0x2a>
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <Unmount_SD+0x3c>)
 800067c:	f7ff ffb2 	bl	80005e4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n\n\n");
}
 8000680:	e002      	b.n	8000688 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n\n\n");
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <Unmount_SD+0x40>)
 8000684:	f7ff ffae 	bl	80005e4 <Send_Uart>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20002108 	.word	0x20002108
 8000694:	0800955c 	.word	0x0800955c
 8000698:	08009584 	.word	0x08009584

0800069c <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08e      	sub	sp, #56	; 0x38
 80006a0:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 80006a2:	2014      	movs	r0, #20
 80006a4:	f008 faa4 	bl	8008bf0 <malloc>
 80006a8:	4603      	mov	r3, r0
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80006ac:	4a28      	ldr	r2, [pc, #160]	; (8000750 <Format_SD+0xb4>)
 80006ae:	4929      	ldr	r1, [pc, #164]	; (8000754 <Format_SD+0xb8>)
 80006b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80006b2:	f008 fba5 	bl	8008e00 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 f858 	bl	8008770 <f_opendir>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <Format_SD+0xbc>)
 80006c6:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <Format_SD+0xbc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d136      	bne.n	800073e <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4922      	ldr	r1, [pc, #136]	; (800075c <Format_SD+0xc0>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f008 f8e4 	bl	80088a2 <f_readdir>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <Format_SD+0xbc>)
 80006e0:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <Format_SD+0xbc>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d125      	bne.n	8000736 <Format_SD+0x9a>
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <Format_SD+0xc0>)
 80006ec:	7a5b      	ldrb	r3, [r3, #9]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d021      	beq.n	8000736 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <Format_SD+0xc0>)
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d011      	beq.n	8000722 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006fe:	4918      	ldr	r1, [pc, #96]	; (8000760 <Format_SD+0xc4>)
 8000700:	4818      	ldr	r0, [pc, #96]	; (8000764 <Format_SD+0xc8>)
 8000702:	f7ff fd85 	bl	8000210 <strcmp>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d012      	beq.n	8000732 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 800070c:	4814      	ldr	r0, [pc, #80]	; (8000760 <Format_SD+0xc4>)
 800070e:	f008 f93e 	bl	800898e <f_unlink>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <Format_SD+0xbc>)
 8000718:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <Format_SD+0xbc>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b07      	cmp	r3, #7
 8000720:	e7d6      	b.n	80006d0 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000722:	480f      	ldr	r0, [pc, #60]	; (8000760 <Format_SD+0xc4>)
 8000724:	f008 f933 	bl	800898e <f_unlink>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <Format_SD+0xbc>)
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	e7ce      	b.n	80006d0 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000732:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000734:	e7cc      	b.n	80006d0 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f008 f88c 	bl	8008856 <f_closedir>
    }
    free(path);
 800073e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000740:	f008 fa5e 	bl	8008c00 <free>
    return fresult;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <Format_SD+0xbc>)
 8000746:	781b      	ldrb	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3738      	adds	r7, #56	; 0x38
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	080095d8 	.word	0x080095d8
 8000754:	080095a8 	.word	0x080095a8
 8000758:	20002108 	.word	0x20002108
 800075c:	200020f0 	.word	0x200020f0
 8000760:	200020f9 	.word	0x200020f9
 8000764:	080095ac 	.word	0x080095ac

08000768 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000770:	4943      	ldr	r1, [pc, #268]	; (8000880 <Create_File+0x118>)
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f008 f8d2 	bl	800891c <f_stat>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <Create_File+0x11c>)
 800077e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <Create_File+0x11c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d112      	bne.n	80007ae <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f008 fa31 	bl	8008bf0 <malloc>
 800078e:	4603      	mov	r3, r0
 8000790:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n\n",name);
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	493c      	ldr	r1, [pc, #240]	; (8000888 <Create_File+0x120>)
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f008 fb32 	bl	8008e00 <siprintf>
		Send_Uart(buf);
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f7ff ff21 	bl	80005e4 <Send_Uart>
		free(buf);
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f008 fa2c 	bl	8008c00 <free>
	    return fresult;
 80007a8:	4b36      	ldr	r3, [pc, #216]	; (8000884 <Create_File+0x11c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	e063      	b.n	8000876 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80007ae:	220b      	movs	r2, #11
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	4836      	ldr	r0, [pc, #216]	; (800088c <Create_File+0x124>)
 80007b4:	f007 fbd4 	bl	8007f60 <f_open>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <Create_File+0x11c>)
 80007be:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80007c0:	4b30      	ldr	r3, [pc, #192]	; (8000884 <Create_File+0x11c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d015      	beq.n	80007f4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	f008 fa11 	bl	8008bf0 <malloc>
 80007ce:	4603      	mov	r3, r0
 80007d0:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\r\n\n", fresult, name);
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <Create_File+0x11c>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	492d      	ldr	r1, [pc, #180]	; (8000890 <Create_File+0x128>)
 80007dc:	6938      	ldr	r0, [r7, #16]
 80007de:	f008 fb0f 	bl	8008e00 <siprintf>
			Send_Uart(buf);
 80007e2:	6938      	ldr	r0, [r7, #16]
 80007e4:	f7ff fefe 	bl	80005e4 <Send_Uart>
			free(buf);
 80007e8:	6938      	ldr	r0, [r7, #16]
 80007ea:	f008 fa09 	bl	8008c00 <free>
		    return fresult;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <Create_File+0x11c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	e040      	b.n	8000876 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80007f4:	2064      	movs	r0, #100	; 0x64
 80007f6:	f008 f9fb 	bl	8008bf0 <malloc>
 80007fa:	4603      	mov	r3, r0
 80007fc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\r\n Now use Write_File to write data\r\n",name);
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4924      	ldr	r1, [pc, #144]	; (8000894 <Create_File+0x12c>)
 8000802:	69f8      	ldr	r0, [r7, #28]
 8000804:	f008 fafc 	bl	8008e00 <siprintf>
			Send_Uart(buf);
 8000808:	69f8      	ldr	r0, [r7, #28]
 800080a:	f7ff feeb 	bl	80005e4 <Send_Uart>
			free(buf);
 800080e:	69f8      	ldr	r0, [r7, #28]
 8000810:	f008 f9f6 	bl	8008c00 <free>
		}

		fresult = f_close(&fil);
 8000814:	481d      	ldr	r0, [pc, #116]	; (800088c <Create_File+0x124>)
 8000816:	f007 ff81 	bl	800871c <f_close>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <Create_File+0x11c>)
 8000820:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <Create_File+0x11c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d013      	beq.n	8000852 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800082a:	2064      	movs	r0, #100	; 0x64
 800082c:	f008 f9e0 	bl	8008bf0 <malloc>
 8000830:	4603      	mov	r3, r0
 8000832:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\r\n\n", fresult, name);
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <Create_File+0x11c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4916      	ldr	r1, [pc, #88]	; (8000898 <Create_File+0x130>)
 800083e:	6978      	ldr	r0, [r7, #20]
 8000840:	f008 fade 	bl	8008e00 <siprintf>
			Send_Uart(buf);
 8000844:	6978      	ldr	r0, [r7, #20]
 8000846:	f7ff fecd 	bl	80005e4 <Send_Uart>
			free(buf);
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f008 f9d8 	bl	8008c00 <free>
 8000850:	e00f      	b.n	8000872 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000852:	2064      	movs	r0, #100	; 0x64
 8000854:	f008 f9cc 	bl	8008bf0 <malloc>
 8000858:	4603      	mov	r3, r0
 800085a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\r\n", name);
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	490f      	ldr	r1, [pc, #60]	; (800089c <Create_File+0x134>)
 8000860:	69b8      	ldr	r0, [r7, #24]
 8000862:	f008 facd 	bl	8008e00 <siprintf>
			Send_Uart(buf);
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f7ff febc 	bl	80005e4 <Send_Uart>
			free(buf);
 800086c:	69b8      	ldr	r0, [r7, #24]
 800086e:	f008 f9c7 	bl	8008c00 <free>
		}
	}
    return fresult;
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <Create_File+0x11c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200020f0 	.word	0x200020f0
 8000884:	20002108 	.word	0x20002108
 8000888:	0800975c 	.word	0x0800975c
 800088c:	200010c0 	.word	0x200010c0
 8000890:	08009794 	.word	0x08009794
 8000894:	080097c0 	.word	0x080097c0
 8000898:	08009800 	.word	0x08009800
 800089c:	0800973c 	.word	0x0800973c

080008a0 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80008aa:	4956      	ldr	r1, [pc, #344]	; (8000a04 <Update_File+0x164>)
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f008 f835 	bl	800891c <f_stat>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <Update_File+0x168>)
 80008b8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80008ba:	4b53      	ldr	r3, [pc, #332]	; (8000a08 <Update_File+0x168>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d012      	beq.n	80008e8 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f008 f994 	bl	8008bf0 <malloc>
 80008c8:	4603      	mov	r3, r0
 80008ca:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\r\n\n", name);
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	494f      	ldr	r1, [pc, #316]	; (8000a0c <Update_File+0x16c>)
 80008d0:	68b8      	ldr	r0, [r7, #8]
 80008d2:	f008 fa95 	bl	8008e00 <siprintf>
		Send_Uart (buf);
 80008d6:	68b8      	ldr	r0, [r7, #8]
 80008d8:	f7ff fe84 	bl	80005e4 <Send_Uart>
		free(buf);
 80008dc:	68b8      	ldr	r0, [r7, #8]
 80008de:	f008 f98f 	bl	8008c00 <free>
	    return fresult;
 80008e2:	4b49      	ldr	r3, [pc, #292]	; (8000a08 <Update_File+0x168>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	e088      	b.n	80009fa <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80008e8:	2232      	movs	r2, #50	; 0x32
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	4848      	ldr	r0, [pc, #288]	; (8000a10 <Update_File+0x170>)
 80008ee:	f007 fb37 	bl	8007f60 <f_open>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <Update_File+0x168>)
 80008f8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008fa:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <Update_File+0x168>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d015      	beq.n	800092e <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000902:	2064      	movs	r0, #100	; 0x64
 8000904:	f008 f974 	bl	8008bf0 <malloc>
 8000908:	4603      	mov	r3, r0
 800090a:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\r\n\n", fresult, name);
 800090c:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <Update_File+0x168>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	493f      	ldr	r1, [pc, #252]	; (8000a14 <Update_File+0x174>)
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f008 fa72 	bl	8008e00 <siprintf>
	    	Send_Uart(buf);
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f7ff fe61 	bl	80005e4 <Send_Uart>
	        free(buf);
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f008 f96c 	bl	8008c00 <free>
	        return fresult;
 8000928:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <Update_File+0x168>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	e065      	b.n	80009fa <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800092e:	6838      	ldr	r0, [r7, #0]
 8000930:	f7ff fc78 	bl	8000224 <strlen>
 8000934:	4602      	mov	r2, r0
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <Update_File+0x178>)
 8000938:	6839      	ldr	r1, [r7, #0]
 800093a:	4835      	ldr	r0, [pc, #212]	; (8000a10 <Update_File+0x170>)
 800093c:	f007 fcdc 	bl	80082f8 <f_write>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <Update_File+0x168>)
 8000946:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <Update_File+0x168>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d013      	beq.n	8000978 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000950:	2064      	movs	r0, #100	; 0x64
 8000952:	f008 f94d 	bl	8008bf0 <malloc>
 8000956:	4603      	mov	r3, r0
 8000958:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\r\n\n", fresult, name);
 800095a:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <Update_File+0x168>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	492e      	ldr	r1, [pc, #184]	; (8000a1c <Update_File+0x17c>)
 8000964:	69b8      	ldr	r0, [r7, #24]
 8000966:	f008 fa4b 	bl	8008e00 <siprintf>
	    	Send_Uart(buf);
 800096a:	69b8      	ldr	r0, [r7, #24]
 800096c:	f7ff fe3a 	bl	80005e4 <Send_Uart>
	    	free(buf);
 8000970:	69b8      	ldr	r0, [r7, #24]
 8000972:	f008 f945 	bl	8008c00 <free>
 8000976:	e00f      	b.n	8000998 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f008 f939 	bl	8008bf0 <malloc>
 800097e:	4603      	mov	r3, r0
 8000980:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\r\n", name);
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4926      	ldr	r1, [pc, #152]	; (8000a20 <Update_File+0x180>)
 8000986:	69f8      	ldr	r0, [r7, #28]
 8000988:	f008 fa3a 	bl	8008e00 <siprintf>
	    	Send_Uart(buf);
 800098c:	69f8      	ldr	r0, [r7, #28]
 800098e:	f7ff fe29 	bl	80005e4 <Send_Uart>
	    	free(buf);
 8000992:	69f8      	ldr	r0, [r7, #28]
 8000994:	f008 f934 	bl	8008c00 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000998:	481d      	ldr	r0, [pc, #116]	; (8000a10 <Update_File+0x170>)
 800099a:	f007 febf 	bl	800871c <f_close>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <Update_File+0x168>)
 80009a4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <Update_File+0x168>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d013      	beq.n	80009d6 <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80009ae:	2064      	movs	r0, #100	; 0x64
 80009b0:	f008 f91e 	bl	8008bf0 <malloc>
 80009b4:	4603      	mov	r3, r0
 80009b6:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\r\n\n", fresult, name);
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <Update_File+0x168>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4918      	ldr	r1, [pc, #96]	; (8000a24 <Update_File+0x184>)
 80009c2:	6938      	ldr	r0, [r7, #16]
 80009c4:	f008 fa1c 	bl	8008e00 <siprintf>
	    	Send_Uart(buf);
 80009c8:	6938      	ldr	r0, [r7, #16]
 80009ca:	f7ff fe0b 	bl	80005e4 <Send_Uart>
	    	free(buf);
 80009ce:	6938      	ldr	r0, [r7, #16]
 80009d0:	f008 f916 	bl	8008c00 <free>
 80009d4:	e00f      	b.n	80009f6 <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f008 f90a 	bl	8008bf0 <malloc>
 80009dc:	4603      	mov	r3, r0
 80009de:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\r\n", name);
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	4911      	ldr	r1, [pc, #68]	; (8000a28 <Update_File+0x188>)
 80009e4:	6978      	ldr	r0, [r7, #20]
 80009e6:	f008 fa0b 	bl	8008e00 <siprintf>
	    	Send_Uart(buf);
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff fdfa 	bl	80005e4 <Send_Uart>
	    	free(buf);
 80009f0:	6978      	ldr	r0, [r7, #20]
 80009f2:	f008 f905 	bl	8008c00 <free>
	     }
	}
    return fresult;
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <Update_File+0x168>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200020f0 	.word	0x200020f0
 8000a08:	20002108 	.word	0x20002108
 8000a0c:	080095dc 	.word	0x080095dc
 8000a10:	200010c0 	.word	0x200010c0
 8000a14:	08009600 	.word	0x08009600
 8000a18:	2000210c 	.word	0x2000210c
 8000a1c:	08009828 	.word	0x08009828
 8000a20:	08009850 	.word	0x08009850
 8000a24:	08009714 	.word	0x08009714
 8000a28:	0800973c 	.word	0x0800973c

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8000a32:	b082      	sub	sp, #8
 8000a34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f000 fcc1 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f87f 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f000 f971 	bl	8000d24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a42:	f000 f91d 	bl	8000c80 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 8000a46:	f000 f8f9 	bl	8000c3c <MX_SDIO_SD_Init>
  MX_DMA_Init();
 8000a4a:	f000 f943 	bl	8000cd4 <MX_DMA_Init>
  MX_FATFS_Init();
 8000a4e:	f005 f997 	bl	8005d80 <MX_FATFS_Init>
  MX_CRC_Init();
 8000a52:	f000 f8df 	bl	8000c14 <MX_CRC_Init>
	  //	sprintf(filename, "%sr_%05d.wav", SDPath, count++);
	  //	while(res != FR_EXIST) res = f_open(&fil, filename, FA_CREATE_ALWAYS|FA_WRITE);
	  //	while( Create_File("FILE2.TXT") != FR_OK);
	  //	Unmount_SD("/");

  Mount_SD("/");
 8000a56:	482f      	ldr	r0, [pc, #188]	; (8000b14 <main+0xe8>)
 8000a58:	f7ff fdda 	bl	8000610 <Mount_SD>
//	  res = f_mkfs("", 0, 0, work, sizeof(work));
//  }
//  while( res != FR_OK);
  do
  {
  res = Format_SD();
 8000a5c:	f7ff fe1e 	bl	800069c <Format_SD>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <main+0xec>)
 8000a66:	701a      	strb	r2, [r3, #0]
  }
  while (res != FR_OK);
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <main+0xec>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f5      	bne.n	8000a5c <main+0x30>
  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	492a      	ldr	r1, [pc, #168]	; (8000b1c <main+0xf0>)
 8000a74:	482a      	ldr	r0, [pc, #168]	; (8000b20 <main+0xf4>)
 8000a76:	f007 fa2d 	bl	8007ed4 <f_mount>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <main+0xec>)
 8000a80:	701a      	strb	r2, [r3, #0]
  }
  while( res != FR_OK);
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <main+0xec>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f2      	bne.n	8000a70 <main+0x44>

  Create_File("FILE1.TXT");
 8000a8a:	4826      	ldr	r0, [pc, #152]	; (8000b24 <main+0xf8>)
 8000a8c:	f7ff fe6c 	bl	8000768 <Create_File>
//  Create_File("FILE2.TXT");
  Unmount_SD("/");
 8000a90:	4820      	ldr	r0, [pc, #128]	; (8000b14 <main+0xe8>)
 8000a92:	f7ff fde1 	bl	8000658 <Unmount_SD>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Mount_SD("/");
 8000a96:	481f      	ldr	r0, [pc, #124]	; (8000b14 <main+0xe8>)
 8000a98:	f7ff fdba 	bl	8000610 <Mount_SD>
		sprintf(buffer, "Hello ---> %d\n", indx);
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <main+0xfc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4922      	ldr	r1, [pc, #136]	; (8000b2c <main+0x100>)
 8000aa4:	4822      	ldr	r0, [pc, #136]	; (8000b30 <main+0x104>)
 8000aa6:	f008 f9ab 	bl	8008e00 <siprintf>
		Update_File("FILE1.TXT", buffer);
 8000aaa:	4921      	ldr	r1, [pc, #132]	; (8000b30 <main+0x104>)
 8000aac:	481d      	ldr	r0, [pc, #116]	; (8000b24 <main+0xf8>)
 8000aae:	f7ff fef7 	bl	80008a0 <Update_File>
		sprintf(buffer, "world ---> %d\n", indx);
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <main+0xfc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	491e      	ldr	r1, [pc, #120]	; (8000b34 <main+0x108>)
 8000aba:	481d      	ldr	r0, [pc, #116]	; (8000b30 <main+0x104>)
 8000abc:	f008 f9a0 	bl	8008e00 <siprintf>
//		sprintf(buffer, &fwrite_wav_header(&fil, 48000, 16, 2));
		wave_header = fwrite_wav_header(&fil, 48000, 16, 2);
 8000ac0:	4c1d      	ldr	r4, [pc, #116]	; (8000b38 <main+0x10c>)
 8000ac2:	4638      	mov	r0, r7
 8000ac4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ac8:	3910      	subs	r1, #16
 8000aca:	2302      	movs	r3, #2
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2310      	movs	r3, #16
 8000ad0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ad4:	f000 f98c 	bl	8000df0 <fwrite_wav_header>
 8000ad8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000adc:	4625      	mov	r5, r4
 8000ade:	f1a3 0460 	sub.w	r4, r3, #96	; 0x60
 8000ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000aee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		Update_File("FILE1.TXT", (char*)&wave_header);
 8000af2:	4911      	ldr	r1, [pc, #68]	; (8000b38 <main+0x10c>)
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <main+0xf8>)
 8000af6:	f7ff fed3 	bl	80008a0 <Update_File>
//		if(Update_File("FILE2.TXT", buffer) != FR_OK)  HAL_SD_InitCard(&hsd);
		Unmount_SD("/");
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <main+0xe8>)
 8000afc:	f7ff fdac 	bl	8000658 <Unmount_SD>

		indx++;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <main+0xfc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <main+0xfc>)
 8000b08:	6013      	str	r3, [r2, #0]

		HAL_Delay(2000);
 8000b0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b0e:	f000 fcc7 	bl	80014a0 <HAL_Delay>
		Mount_SD("/");
 8000b12:	e7c0      	b.n	8000a96 <main+0x6a>
 8000b14:	08009948 	.word	0x08009948
 8000b18:	20002308 	.word	0x20002308
 8000b1c:	20002344 	.word	0x20002344
 8000b20:	20002348 	.word	0x20002348
 8000b24:	0800994c 	.word	0x0800994c
 8000b28:	20002304 	.word	0x20002304
 8000b2c:	08009958 	.word	0x08009958
 8000b30:	200022a0 	.word	0x200022a0
 8000b34:	08009968 	.word	0x08009968
 8000b38:	2000230c 	.word	0x2000230c

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	; 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2234      	movs	r2, #52	; 0x34
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 f860 	bl	8008c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000bb4:	2332      	movs	r3, #50	; 0x32
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 f8e7 	bl	8002d9c <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bd4:	f000 f992 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fa5d 	bl	80020b4 <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c00:	f000 f97c 	bl	8000efc <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	3750      	adds	r7, #80	; 0x50
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_CRC_Init+0x20>)
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <MX_CRC_Init+0x24>)
 8000c1c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_CRC_Init+0x20>)
 8000c20:	f000 fd73 	bl	800170a <HAL_CRC_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c2a:	f000 f967 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20002110 	.word	0x20002110
 8000c38:	40023000 	.word	0x40023000

08000c3c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <MX_SDIO_SD_Init+0x3c>)
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <MX_SDIO_SD_Init+0x40>)
 8000c44:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_SDIO_SD_Init+0x3c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_SDIO_SD_Init+0x3c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_SDIO_SD_Init+0x3c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_SDIO_SD_Init+0x3c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_SDIO_SD_Init+0x3c>)
 8000c60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c64:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <MX_SDIO_SD_Init+0x3c>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20002118 	.word	0x20002118
 8000c7c:	40012c00 	.word	0x40012c00

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_USART2_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb8:	f003 ff2d 	bl	8004b16 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f91b 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000225c 	.word	0x2000225c
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_DMA_Init+0x4c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <MX_DMA_Init+0x4c>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_DMA_Init+0x4c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	203b      	movs	r0, #59	; 0x3b
 8000cfc:	f000 fccf 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d00:	203b      	movs	r0, #59	; 0x3b
 8000d02:	f000 fce8 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2045      	movs	r0, #69	; 0x45
 8000d0c:	f000 fcc7 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000d10:	2045      	movs	r0, #69	; 0x45
 8000d12:	f000 fce0 	bl	80016d6 <HAL_NVIC_EnableIRQ>

}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_GPIO_Init+0xc4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000ddc:	f000 ffbe 	bl	8001d5c <HAL_GPIO_Init>

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020400 	.word	0x40020400

08000df0 <fwrite_wav_header>:

/* USER CODE BEGIN 4 */
WAVE_HEADER fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000df0:	b4b0      	push	{r4, r5, r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	460b      	mov	r3, r1
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	4613      	mov	r3, r2
 8000e04:	717b      	strb	r3, [r7, #5]
	UINT bw;

	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000e06:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e08:	2252      	movs	r2, #82	; 0x52
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e0e:	2249      	movs	r2, #73	; 0x49
 8000e10:	705a      	strb	r2, [r3, #1]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000e12:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e14:	2246      	movs	r2, #70	; 0x46
 8000e16:	709a      	strb	r2, [r3, #2]
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e1a:	2246      	movs	r2, #70	; 0x46
 8000e1c:	70da      	strb	r2, [r3, #3]
	wave_header.size = (uint32_t)0;
 8000e1e:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000e24:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e26:	2257      	movs	r2, #87	; 0x57
 8000e28:	721a      	strb	r2, [r3, #8]
 8000e2a:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e2c:	2241      	movs	r2, #65	; 0x41
 8000e2e:	725a      	strb	r2, [r3, #9]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e32:	2256      	movs	r2, #86	; 0x56
 8000e34:	729a      	strb	r2, [r3, #10]
 8000e36:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e38:	2245      	movs	r2, #69	; 0x45
 8000e3a:	72da      	strb	r2, [r3, #11]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e3e:	2266      	movs	r2, #102	; 0x66
 8000e40:	731a      	strb	r2, [r3, #12]
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e44:	226d      	movs	r2, #109	; 0x6d
 8000e46:	735a      	strb	r2, [r3, #13]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e4a:	2274      	movs	r2, #116	; 0x74
 8000e4c:	739a      	strb	r2, [r3, #14]
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e50:	2220      	movs	r2, #32
 8000e52:	73da      	strb	r2, [r3, #15]
	wave_header.fmt_size = 16;
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e56:	2210      	movs	r2, #16
 8000e58:	611a      	str	r2, [r3, #16]
	wave_header.format = 1; // PCM
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	829a      	strh	r2, [r3, #20]
	wave_header.channels = channels; // channels
 8000e60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e68:	82da      	strh	r2, [r3, #22]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e6e:	6193      	str	r3, [r2, #24]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	797a      	ldrb	r2, [r7, #5]
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da00      	bge.n	8000e86 <fwrite_wav_header+0x96>
 8000e84:	3307      	adds	r3, #7
 8000e86:	10db      	asrs	r3, r3, #3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000e8c:	61da      	str	r2, [r3, #28]
	wave_header.bc =  bitsPerSample*channels/8;
 8000e8e:	797b      	ldrb	r3, [r7, #5]
 8000e90:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da00      	bge.n	8000e9e <fwrite_wav_header+0xae>
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	10db      	asrs	r3, r3, #3
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000ea4:	841a      	strh	r2, [r3, #32]
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000ea6:	797b      	ldrb	r3, [r7, #5]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000eac:	845a      	strh	r2, [r3, #34]	; 0x22
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000eb0:	2264      	movs	r2, #100	; 0x64
 8000eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000eb8:	2261      	movs	r2, #97	; 0x61
 8000eba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000ec0:	2274      	movs	r2, #116	; 0x74
 8000ec2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000ec8:	2261      	movs	r2, #97	; 0x61
 8000eca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	wave_header.data_size = 0;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28

	return wave_header;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <fwrite_wav_header+0x108>)
 8000ed8:	461c      	mov	r4, r3
 8000eda:	4615      	mov	r5, r2
 8000edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bcb0      	pop	{r4, r5, r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000230c 	.word	0x2000230c

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f46:	2007      	movs	r0, #7
 8000f48:	f000 fb9e 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_CRC_MspInit+0x3c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10d      	bne.n	8000f86 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023000 	.word	0x40023000
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0a2      	sub	sp, #136	; 0x88
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	225c      	movs	r2, #92	; 0x5c
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 fe27 	bl	8008c10 <memset>
  if(hsd->Instance==SDIO)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a74      	ldr	r2, [pc, #464]	; (8001198 <HAL_SD_MspInit+0x1fc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	f040 80e0 	bne.w	800118e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000fce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f981 	bl	80022e8 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000fec:	f7ff ff86 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	4b69      	ldr	r3, [pc, #420]	; (800119c <HAL_SD_MspInit+0x200>)
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	4a68      	ldr	r2, [pc, #416]	; (800119c <HAL_SD_MspInit+0x200>)
 8000ffa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ffe:	6453      	str	r3, [r2, #68]	; 0x44
 8001000:	4b66      	ldr	r3, [pc, #408]	; (800119c <HAL_SD_MspInit+0x200>)
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	4b62      	ldr	r3, [pc, #392]	; (800119c <HAL_SD_MspInit+0x200>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a61      	ldr	r2, [pc, #388]	; (800119c <HAL_SD_MspInit+0x200>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b5f      	ldr	r3, [pc, #380]	; (800119c <HAL_SD_MspInit+0x200>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b5b      	ldr	r3, [pc, #364]	; (800119c <HAL_SD_MspInit+0x200>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a5a      	ldr	r2, [pc, #360]	; (800119c <HAL_SD_MspInit+0x200>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <HAL_SD_MspInit+0x200>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001044:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001048:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001058:	230c      	movs	r3, #12
 800105a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001062:	4619      	mov	r1, r3
 8001064:	484e      	ldr	r0, [pc, #312]	; (80011a0 <HAL_SD_MspInit+0x204>)
 8001066:	f000 fe79 	bl	8001d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800106a:	2304      	movs	r3, #4
 800106c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800107c:	230c      	movs	r3, #12
 800107e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001082:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001086:	4619      	mov	r1, r3
 8001088:	4846      	ldr	r0, [pc, #280]	; (80011a4 <HAL_SD_MspInit+0x208>)
 800108a:	f000 fe67 	bl	8001d5c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 8001090:	4a46      	ldr	r2, [pc, #280]	; (80011ac <HAL_SD_MspInit+0x210>)
 8001092:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001094:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 8001096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800109a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109c:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a8:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ae:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010be:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010c2:	2220      	movs	r2, #32
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80010c6:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010cc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010ce:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80010ea:	482f      	ldr	r0, [pc, #188]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010ec:	f000 fb2a 	bl	8001744 <HAL_DMA_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_SD_MspInit+0x15e>
    {
      Error_Handler();
 80010f6:	f7ff ff01 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001100:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <HAL_SD_MspInit+0x20c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001108:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <HAL_SD_MspInit+0x218>)
 800110a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <HAL_SD_MspInit+0x214>)
 800110e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001112:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001116:	2240      	movs	r2, #64	; 0x40
 8001118:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_SD_MspInit+0x214>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001126:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_SD_MspInit+0x214>)
 800112a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001136:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_SD_MspInit+0x214>)
 800113a:	2220      	movs	r2, #32
 800113c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001144:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001148:	2204      	movs	r2, #4
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_SD_MspInit+0x214>)
 800114e:	2203      	movs	r2, #3
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001154:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_SD_MspInit+0x214>)
 800115c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001162:	4813      	ldr	r0, [pc, #76]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001164:	f000 faee 	bl	8001744 <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800116e:	f7ff fec5 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_SD_MspInit+0x214>)
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <HAL_SD_MspInit+0x214>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2031      	movs	r0, #49	; 0x31
 8001184:	f000 fa8b 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001188:	2031      	movs	r0, #49	; 0x31
 800118a:	f000 faa4 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3788      	adds	r7, #136	; 0x88
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40012c00 	.word	0x40012c00
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	2000219c 	.word	0x2000219c
 80011ac:	40026458 	.word	0x40026458
 80011b0:	200021fc 	.word	0x200021fc
 80011b4:	400264a0 	.word	0x400264a0

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_UART_MspInit+0x84>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d12b      	bne.n	8001232 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x88>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_UART_MspInit+0x88>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x88>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_UART_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_UART_MspInit+0x88>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_UART_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001212:	230c      	movs	r3, #12
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001222:	2307      	movs	r3, #7
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_UART_MspInit+0x8c>)
 800122e:	f000 fd95 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40004400 	.word	0x40004400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f8e4 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <SDIO_IRQHandler+0x10>)
 80012a2:	f002 fc2d 	bl	8003b00 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20002118 	.word	0x20002118

080012b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA2_Stream3_IRQHandler+0x10>)
 80012b6:	f000 fb15 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000219c 	.word	0x2000219c

080012c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <DMA2_Stream6_IRQHandler+0x10>)
 80012ca:	f000 fb0b 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200021fc 	.word	0x200021fc

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f007 fc48 	bl	8008b9c <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20020000 	.word	0x20020000
 8001338:	00000400 	.word	0x00000400
 800133c:	20002338 	.word	0x20002338
 8001340:	200033c0 	.word	0x200033c0

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136e:	490e      	ldr	r1, [pc, #56]	; (80013a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001384:	4c0b      	ldr	r4, [pc, #44]	; (80013b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001392:	f7ff ffd7 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f007 fc07 	bl	8008ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139a:	f7ff fb47 	bl	8000a2c <main>
  bx  lr    
 800139e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013ac:	08009ab4 	.word	0x08009ab4
  ldr r2, =_sbss
 80013b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013b4:	200033c0 	.word	0x200033c0

080013b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_Init+0x40>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_Init+0x40>)
 80013d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_Init+0x40>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f94f 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff fd8a 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023c00 	.word	0x40023c00

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f967 	bl	80016f2 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800143c:	f000 f92f 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000008 	.word	0x20000008
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	2000233c 	.word	0x2000233c

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2000233c 	.word	0x2000233c

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	; (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e00e      	b.n	800173a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	795b      	ldrb	r3, [r3, #5]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fc13 	bl	8000f58 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff fe9a 	bl	8001488 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e099      	b.n	8001894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001780:	e00f      	b.n	80017a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001782:	f7ff fe81 	bl	8001488 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b05      	cmp	r3, #5
 800178e:	d908      	bls.n	80017a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e078      	b.n	8001894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e8      	bne.n	8001782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_DMA_Init+0x158>)
 80017bc:	4013      	ands	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d107      	bne.n	800180c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4313      	orrs	r3, r2
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f023 0307 	bic.w	r3, r3, #7
 8001822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4313      	orrs	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	2b04      	cmp	r3, #4
 8001834:	d117      	bne.n	8001866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fa0b 	bl	8001c64 <DMA_CheckFifoParam>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2240      	movs	r2, #64	; 0x40
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001862:	2301      	movs	r3, #1
 8001864:	e016      	b.n	8001894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f9c2 	bl	8001bf8 <DMA_CalcBaseAndBitshift>
 8001874:	4603      	mov	r3, r0
 8001876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	223f      	movs	r2, #63	; 0x3f
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	f010803f 	.word	0xf010803f

080018a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d004      	beq.n	80018be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00c      	b.n	80018d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2205      	movs	r2, #5
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018f0:	4b8e      	ldr	r3, [pc, #568]	; (8001b2c <HAL_DMA_IRQHandler+0x248>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a8e      	ldr	r2, [pc, #568]	; (8001b30 <HAL_DMA_IRQHandler+0x24c>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2208      	movs	r2, #8
 8001910:	409a      	lsls	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01a      	beq.n	8001950 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0204 	bic.w	r2, r2, #4
 8001936:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2208      	movs	r2, #8
 800193e:	409a      	lsls	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2201      	movs	r2, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2201      	movs	r2, #1
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2204      	movs	r2, #4
 800198c:	409a      	lsls	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d012      	beq.n	80019bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2204      	movs	r2, #4
 80019aa:	409a      	lsls	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f043 0204 	orr.w	r2, r3, #4
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2210      	movs	r2, #16
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d043      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d03c      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2210      	movs	r2, #16
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d018      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d024      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
 8001a12:	e01f      	b.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01b      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
 8001a24:	e016      	b.n	8001a54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d107      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0208 	bic.w	r2, r2, #8
 8001a42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2220      	movs	r2, #32
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 808f 	beq.w	8001b84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8087 	beq.w	8001b84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d136      	bne.n	8001afc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0216 	bic.w	r2, r2, #22
 8001a9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_DMA_IRQHandler+0x1da>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0208 	bic.w	r2, r2, #8
 8001acc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	223f      	movs	r2, #63	; 0x3f
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d07e      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
        }
        return;
 8001afa:	e079      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01d      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10d      	bne.n	8001b34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d031      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
 8001b28:	e02c      	b.n	8001b84 <HAL_DMA_IRQHandler+0x2a0>
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d023      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	4798      	blx	r3
 8001b44:	e01e      	b.n	8001b84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10f      	bne.n	8001b74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0210 	bic.w	r2, r2, #16
 8001b62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d032      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d022      	beq.n	8001bde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2205      	movs	r2, #5
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d307      	bcc.n	8001bcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f2      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x2cc>
 8001bca:	e000      	b.n	8001bce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
 8001bee:	e000      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001bf0:	bf00      	nop
    }
  }
}
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3b10      	subs	r3, #16
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <DMA_CalcBaseAndBitshift+0x64>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <DMA_CalcBaseAndBitshift+0x68>)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d909      	bls.n	8001c3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	1d1a      	adds	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58
 8001c38:	e007      	b.n	8001c4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c42:	f023 0303 	bic.w	r3, r3, #3
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	aaaaaaab 	.word	0xaaaaaaab
 8001c60:	080099d4 	.word	0x080099d4

08001c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11f      	bne.n	8001cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d856      	bhi.n	8001d32 <DMA_CheckFifoParam+0xce>
 8001c84:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <DMA_CheckFifoParam+0x28>)
 8001c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8a:	bf00      	nop
 8001c8c:	08001c9d 	.word	0x08001c9d
 8001c90:	08001caf 	.word	0x08001caf
 8001c94:	08001c9d 	.word	0x08001c9d
 8001c98:	08001d33 	.word	0x08001d33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d046      	beq.n	8001d36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cac:	e043      	b.n	8001d36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb6:	d140      	bne.n	8001d3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cbc:	e03d      	b.n	8001d3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc6:	d121      	bne.n	8001d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d837      	bhi.n	8001d3e <DMA_CheckFifoParam+0xda>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <DMA_CheckFifoParam+0x70>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001ce5 	.word	0x08001ce5
 8001cd8:	08001ceb 	.word	0x08001ceb
 8001cdc:	08001ce5 	.word	0x08001ce5
 8001ce0:	08001cfd 	.word	0x08001cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce8:	e030      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d025      	beq.n	8001d42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cfa:	e022      	b.n	8001d42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d04:	d11f      	bne.n	8001d46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d0a:	e01c      	b.n	8001d46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d903      	bls.n	8001d1a <DMA_CheckFifoParam+0xb6>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d003      	beq.n	8001d20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d18:	e018      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d1e:	e015      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00e      	beq.n	8001d4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d30:	e00b      	b.n	8001d4a <DMA_CheckFifoParam+0xe6>
      break;
 8001d32:	bf00      	nop
 8001d34:	e00a      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d36:	bf00      	nop
 8001d38:	e008      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d3a:	bf00      	nop
 8001d3c:	e006      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d3e:	bf00      	nop
 8001d40:	e004      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
 8001d44:	e002      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d46:	bf00      	nop
 8001d48:	e000      	b.n	8001d4c <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e165      	b.n	8002044 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8154 	bne.w	800203e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d005      	beq.n	8001dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d130      	bne.n	8001e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d017      	beq.n	8001e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80ae 	beq.w	800203e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_GPIO_Init+0x300>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a5c      	ldr	r2, [pc, #368]	; (800205c <HAL_GPIO_Init+0x300>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	; (800205c <HAL_GPIO_Init+0x300>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efe:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4f      	ldr	r2, [pc, #316]	; (8002064 <HAL_GPIO_Init+0x308>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d025      	beq.n	8001f76 <HAL_GPIO_Init+0x21a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4e      	ldr	r2, [pc, #312]	; (8002068 <HAL_GPIO_Init+0x30c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <HAL_GPIO_Init+0x216>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4d      	ldr	r2, [pc, #308]	; (800206c <HAL_GPIO_Init+0x310>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4c      	ldr	r2, [pc, #304]	; (8002070 <HAL_GPIO_Init+0x314>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x20e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <HAL_GPIO_Init+0x318>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x20a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_GPIO_Init+0x31c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x206>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a49      	ldr	r2, [pc, #292]	; (800207c <HAL_GPIO_Init+0x320>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x202>
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	e00c      	b.n	8001f78 <HAL_GPIO_Init+0x21c>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e00a      	b.n	8001f78 <HAL_GPIO_Init+0x21c>
 8001f62:	2305      	movs	r3, #5
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x21c>
 8001f66:	2304      	movs	r3, #4
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x21c>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x21c>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x21c>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x21c>
 8001f76:	2300      	movs	r3, #0
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f002 0203 	and.w	r2, r2, #3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f88:	4935      	ldr	r1, [pc, #212]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_GPIO_Init+0x324>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a31      	ldr	r2, [pc, #196]	; (8002080 <HAL_GPIO_Init+0x324>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_GPIO_Init+0x324>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a26      	ldr	r2, [pc, #152]	; (8002080 <HAL_GPIO_Init+0x324>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_GPIO_Init+0x324>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200e:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_GPIO_Init+0x324>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_GPIO_Init+0x324>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002038:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_GPIO_Init+0x324>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	f67f ae96 	bls.w	8001d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40013800 	.word	0x40013800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40021400 	.word	0x40021400
 800207c:	40021800 	.word	0x40021800
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0cc      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d90c      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b65      	ldr	r3, [pc, #404]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800212a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d044      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d119      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	2b03      	cmp	r3, #3
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e067      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4934      	ldr	r1, [pc, #208]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a4:	f7ff f970 	bl	8001488 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7ff f96c 	bl	8001488 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d20c      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800223a:	f000 fb7f 	bl	800293c <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f8d0 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00
 8002270:	40023800 	.word	0x40023800
 8002274:	080099bc 	.word	0x080099bc
 8002278:	20000000 	.word	0x20000000
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_RCC_GetHCLKFreq+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800229c:	f7ff fff0 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0a9b      	lsrs	r3, r3, #10
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	080099cc 	.word	0x080099cc

080022c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022c4:	f7ff ffdc 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0b5b      	lsrs	r3, r3, #13
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	080099cc 	.word	0x080099cc

080022e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	; 0x30
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002320:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002326:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	496c      	ldr	r1, [pc, #432]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800233e:	2301      	movs	r3, #1
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800234e:	4b64      	ldr	r3, [pc, #400]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002354:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	4960      	ldr	r1, [pc, #384]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800236c:	2301      	movs	r3, #1
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d017      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800237c:	4b58      	ldr	r3, [pc, #352]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800237e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4955      	ldr	r1, [pc, #340]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800239a:	d101      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800239c:	2301      	movs	r3, #1
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80023a8:	2301      	movs	r3, #1
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d017      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c6:	4946      	ldr	r1, [pc, #280]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d6:	d101      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80023d8:	2301      	movs	r3, #1
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80023e4:	2301      	movs	r3, #1
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 808a 	beq.w	800250a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a33      	ldr	r2, [pc, #204]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800241e:	f7ff f833 	bl	8001488 <HAL_GetTick>
 8002422:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7ff f82f 	bl	8001488 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e278      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d02f      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245c:	6a3a      	ldr	r2, [r7, #32]
 800245e:	429a      	cmp	r2, r3
 8002460:	d028      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d114      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fffd 	bl	8001488 <HAL_GetTick>
 800248e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe fff9 	bl	8001488 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e240      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c0:	d114      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x204>
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d6:	4902      	ldr	r1, [pc, #8]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]
 80024dc:	e00c      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000
 80024e8:	42470e40 	.word	0x42470e40
 80024ec:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a49      	ldr	r2, [pc, #292]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024f6:	6093      	str	r3, [r2, #8]
 80024f8:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002504:	4944      	ldr	r1, [pc, #272]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002506:	4313      	orrs	r3, r2
 8002508:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800251c:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800251e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	492e      	ldr	r1, [pc, #184]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d011      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	4926      	ldr	r1, [pc, #152]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800258e:	d101      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002590:	2301      	movs	r3, #1
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	491a      	ldr	r1, [pc, #104]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d011      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d0:	4911      	ldr	r1, [pc, #68]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e0:	d101      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80025e2:	2301      	movs	r3, #1
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d005      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025f4:	f040 80ff 	bne.w	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025fe:	f7fe ff43 	bl	8001488 <HAL_GetTick>
 8002602:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002604:	e00e      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002606:	f7fe ff3f 	bl	8001488 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d907      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e188      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002618:	40023800 	.word	0x40023800
 800261c:	424711e0 	.word	0x424711e0
 8002620:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002624:	4b7e      	ldr	r3, [pc, #504]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ea      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800264c:	2b00      	cmp	r3, #0
 800264e:	d028      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d124      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002658:	4b71      	ldr	r3, [pc, #452]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	3301      	adds	r3, #1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800266a:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800266c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002670:	0e1b      	lsrs	r3, r3, #24
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	019b      	lsls	r3, r3, #6
 8002682:	431a      	orrs	r2, r3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	3b01      	subs	r3, #1
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	431a      	orrs	r2, r3
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	4961      	ldr	r1, [pc, #388]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d035      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026cc:	d130      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026ce:	4b54      	ldr	r3, [pc, #336]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	3301      	adds	r3, #1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026e0:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e6:	0f1b      	lsrs	r3, r3, #28
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	019b      	lsls	r3, r3, #6
 80026f8:	431a      	orrs	r2, r3
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	431a      	orrs	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	071b      	lsls	r3, r3, #28
 8002710:	4943      	ldr	r1, [pc, #268]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002718:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800271a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800271e:	f023 021f 	bic.w	r2, r3, #31
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	3b01      	subs	r3, #1
 8002728:	493d      	ldr	r1, [pc, #244]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d029      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002744:	d124      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002746:	4b36      	ldr	r3, [pc, #216]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	3301      	adds	r3, #1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800275a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275e:	0f1b      	lsrs	r3, r3, #28
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	019b      	lsls	r3, r3, #6
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	3b01      	subs	r3, #1
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	431a      	orrs	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	071b      	lsls	r3, r3, #28
 8002788:	4925      	ldr	r1, [pc, #148]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002798:	2b00      	cmp	r3, #0
 800279a:	d016      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	071b      	lsls	r3, r3, #28
 80027c2:	4917      	ldr	r1, [pc, #92]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fe5a 	bl	8001488 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027d8:	f7fe fe56 	bl	8001488 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e09f      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	f040 8095 	bne.w	8002928 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002804:	f7fe fe40 	bl	8001488 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800280a:	e00f      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800280c:	f7fe fe3c 	bl	8001488 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d908      	bls.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e085      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	42470068 	.word	0x42470068
 8002828:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800282c:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002838:	d0e8      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02b      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	2b00      	cmp	r3, #0
 8002860:	d127      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002862:	4b34      	ldr	r3, [pc, #208]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	431a      	orrs	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	3b01      	subs	r3, #1
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	061b      	lsls	r3, r3, #24
 8002890:	4928      	ldr	r1, [pc, #160]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800289a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	3b01      	subs	r3, #1
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	4922      	ldr	r1, [pc, #136]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d01d      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x612>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c6:	d118      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	0e1b      	lsrs	r3, r3, #24
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	019b      	lsls	r3, r3, #6
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	4910      	ldr	r1, [pc, #64]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028fa:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002900:	f7fe fdc2 	bl	8001488 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002908:	f7fe fdbe 	bl	8001488 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e007      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002926:	d1ef      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3730      	adds	r7, #48	; 0x30
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	42470070 	.word	0x42470070

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002940:	b0ae      	sub	sp, #184	; 0xb8
 8002942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002962:	4bcb      	ldr	r3, [pc, #812]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b0c      	cmp	r3, #12
 800296c:	f200 8206 	bhi.w	8002d7c <HAL_RCC_GetSysClockFreq+0x440>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	080029ad 	.word	0x080029ad
 800297c:	08002d7d 	.word	0x08002d7d
 8002980:	08002d7d 	.word	0x08002d7d
 8002984:	08002d7d 	.word	0x08002d7d
 8002988:	080029b5 	.word	0x080029b5
 800298c:	08002d7d 	.word	0x08002d7d
 8002990:	08002d7d 	.word	0x08002d7d
 8002994:	08002d7d 	.word	0x08002d7d
 8002998:	080029bd 	.word	0x080029bd
 800299c:	08002d7d 	.word	0x08002d7d
 80029a0:	08002d7d 	.word	0x08002d7d
 80029a4:	08002d7d 	.word	0x08002d7d
 80029a8:	08002bad 	.word	0x08002bad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4bb9      	ldr	r3, [pc, #740]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x358>)
 80029ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80029b2:	e1e7      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b4:	4bb8      	ldr	r3, [pc, #736]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x35c>)
 80029b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ba:	e1e3      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029bc:	4bb4      	ldr	r3, [pc, #720]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c8:	4bb1      	ldr	r3, [pc, #708]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d071      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d4:	4bae      	ldr	r3, [pc, #696]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	2200      	movs	r2, #0
 80029dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80029e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029fa:	4622      	mov	r2, r4
 80029fc:	462b      	mov	r3, r5
 80029fe:	f04f 0000 	mov.w	r0, #0
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	0159      	lsls	r1, r3, #5
 8002a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a0c:	0150      	lsls	r0, r2, #5
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4621      	mov	r1, r4
 8002a14:	1a51      	subs	r1, r2, r1
 8002a16:	6439      	str	r1, [r7, #64]	; 0x40
 8002a18:	4629      	mov	r1, r5
 8002a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	018b      	lsls	r3, r1, #6
 8002a30:	4641      	mov	r1, r8
 8002a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a36:	4641      	mov	r1, r8
 8002a38:	018a      	lsls	r2, r1, #6
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	1a51      	subs	r1, r2, r1
 8002a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a40:	4649      	mov	r1, r9
 8002a42:	eb63 0301 	sbc.w	r3, r3, r1
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002a54:	4649      	mov	r1, r9
 8002a56:	00cb      	lsls	r3, r1, #3
 8002a58:	4641      	mov	r1, r8
 8002a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5e:	4641      	mov	r1, r8
 8002a60:	00ca      	lsls	r2, r1, #3
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	4622      	mov	r2, r4
 8002a6a:	189b      	adds	r3, r3, r2
 8002a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6e:	462b      	mov	r3, r5
 8002a70:	460a      	mov	r2, r1
 8002a72:	eb42 0303 	adc.w	r3, r2, r3
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a84:	4629      	mov	r1, r5
 8002a86:	024b      	lsls	r3, r1, #9
 8002a88:	4621      	mov	r1, r4
 8002a8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a8e:	4621      	mov	r1, r4
 8002a90:	024a      	lsls	r2, r1, #9
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002aa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002aa8:	f7fd fc1a 	bl	80002e0 <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ab6:	e067      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ac4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ad6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	0159      	lsls	r1, r3, #5
 8002ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aec:	0150      	lsls	r0, r2, #5
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4621      	mov	r1, r4
 8002af4:	1a51      	subs	r1, r2, r1
 8002af6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002af8:	4629      	mov	r1, r5
 8002afa:	eb63 0301 	sbc.w	r3, r3, r1
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	018b      	lsls	r3, r1, #6
 8002b10:	4641      	mov	r1, r8
 8002b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b16:	4641      	mov	r1, r8
 8002b18:	018a      	lsls	r2, r1, #6
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b20:	4649      	mov	r1, r9
 8002b22:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b3a:	4692      	mov	sl, r2
 8002b3c:	469b      	mov	fp, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	eb1a 0303 	adds.w	r3, sl, r3
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	462b      	mov	r3, r5
 8002b48:	eb4b 0303 	adc.w	r3, fp, r3
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	028b      	lsls	r3, r1, #10
 8002b5e:	4621      	mov	r1, r4
 8002b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b64:	4621      	mov	r1, r4
 8002b66:	028a      	lsls	r2, r1, #10
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b70:	2200      	movs	r2, #0
 8002b72:	673b      	str	r3, [r7, #112]	; 0x70
 8002b74:	677a      	str	r2, [r7, #116]	; 0x74
 8002b76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b7a:	f7fd fbb1 	bl	80002e0 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4613      	mov	r3, r2
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b88:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	3301      	adds	r3, #1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002baa:	e0eb      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bac:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d06b      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	2200      	movs	r2, #0
 8002bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8002bd8:	2300      	movs	r3, #0
 8002bda:	667b      	str	r3, [r7, #100]	; 0x64
 8002bdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002be0:	4622      	mov	r2, r4
 8002be2:	462b      	mov	r3, r5
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	0159      	lsls	r1, r3, #5
 8002bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf2:	0150      	lsls	r0, r2, #5
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	1a51      	subs	r1, r2, r1
 8002bfc:	61b9      	str	r1, [r7, #24]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	eb63 0301 	sbc.w	r3, r3, r1
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c12:	4659      	mov	r1, fp
 8002c14:	018b      	lsls	r3, r1, #6
 8002c16:	4651      	mov	r1, sl
 8002c18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1c:	4651      	mov	r1, sl
 8002c1e:	018a      	lsls	r2, r1, #6
 8002c20:	4651      	mov	r1, sl
 8002c22:	ebb2 0801 	subs.w	r8, r2, r1
 8002c26:	4659      	mov	r1, fp
 8002c28:	eb63 0901 	sbc.w	r9, r3, r1
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c40:	4690      	mov	r8, r2
 8002c42:	4699      	mov	r9, r3
 8002c44:	4623      	mov	r3, r4
 8002c46:	eb18 0303 	adds.w	r3, r8, r3
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	eb49 0303 	adc.w	r3, r9, r3
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c60:	4629      	mov	r1, r5
 8002c62:	024b      	lsls	r3, r1, #9
 8002c64:	4621      	mov	r1, r4
 8002c66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	024a      	lsls	r2, r1, #9
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c76:	2200      	movs	r2, #0
 8002c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c80:	f7fd fb2e 	bl	80002e0 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c8e:	e065      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x420>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9c:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cac:	653b      	str	r3, [r7, #80]	; 0x50
 8002cae:	2300      	movs	r3, #0
 8002cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8002cb2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002cb6:	4642      	mov	r2, r8
 8002cb8:	464b      	mov	r3, r9
 8002cba:	f04f 0000 	mov.w	r0, #0
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	0159      	lsls	r1, r3, #5
 8002cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc8:	0150      	lsls	r0, r2, #5
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4641      	mov	r1, r8
 8002cd0:	1a51      	subs	r1, r2, r1
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	4649      	mov	r1, r9
 8002cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ce8:	4659      	mov	r1, fp
 8002cea:	018b      	lsls	r3, r1, #6
 8002cec:	4651      	mov	r1, sl
 8002cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	018a      	lsls	r2, r1, #6
 8002cf6:	4651      	mov	r1, sl
 8002cf8:	1a54      	subs	r4, r2, r1
 8002cfa:	4659      	mov	r1, fp
 8002cfc:	eb63 0501 	sbc.w	r5, r3, r1
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	00eb      	lsls	r3, r5, #3
 8002d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d0e:	00e2      	lsls	r2, r4, #3
 8002d10:	4614      	mov	r4, r2
 8002d12:	461d      	mov	r5, r3
 8002d14:	4643      	mov	r3, r8
 8002d16:	18e3      	adds	r3, r4, r3
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	eb45 0303 	adc.w	r3, r5, r3
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d2e:	4629      	mov	r1, r5
 8002d30:	028b      	lsls	r3, r1, #10
 8002d32:	4621      	mov	r1, r4
 8002d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d38:	4621      	mov	r1, r4
 8002d3a:	028a      	lsls	r2, r1, #10
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d44:	2200      	movs	r2, #0
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d4e:	f7fd fac7 	bl	80002e0 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4613      	mov	r3, r2
 8002d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0f1b      	lsrs	r3, r3, #28
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d7a:	e003      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	37b8      	adds	r7, #184	; 0xb8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	00f42400 	.word	0x00f42400

08002d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e28d      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8083 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dbc:	4b94      	ldr	r3, [pc, #592]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d019      	beq.n	8002dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dc8:	4b91      	ldr	r3, [pc, #580]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dd4:	4b8e      	ldr	r3, [pc, #568]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de0:	d00c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b8b      	ldr	r3, [pc, #556]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d112      	bne.n	8002e14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dee:	4b88      	ldr	r3, [pc, #544]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b84      	ldr	r3, [pc, #528]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x124>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e25a      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x90>
 8002e1e:	4b7c      	ldr	r3, [pc, #496]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7b      	ldr	r2, [pc, #492]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xcc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0xb4>
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a75      	ldr	r2, [pc, #468]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b73      	ldr	r3, [pc, #460]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a72      	ldr	r2, [pc, #456]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xcc>
 8002e50:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6e      	ldr	r2, [pc, #440]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6b      	ldr	r2, [pc, #428]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fb0a 	bl	8001488 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe fb06 	bl	8001488 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e21f      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	4b61      	ldr	r3, [pc, #388]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xdc>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe faf6 	bl	8001488 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe faf2 	bl	8001488 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e20b      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	4b57      	ldr	r3, [pc, #348]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x104>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d06f      	beq.n	8002fae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ece:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eda:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d105      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d11c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efe:	4b44      	ldr	r3, [pc, #272]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	4b41      	ldr	r3, [pc, #260]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_RCC_OscConfig+0x186>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e1d3      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4937      	ldr	r1, [pc, #220]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	e03a      	b.n	8002fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f40:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_OscConfig+0x278>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe fa9f 	bl	8001488 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fe fa9b 	bl	8001488 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1b4      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4925      	ldr	r1, [pc, #148]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_OscConfig+0x278>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fa7e 	bl	8001488 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f90:	f7fe fa7a 	bl	8001488 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e193      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d036      	beq.n	8003028 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_RCC_OscConfig+0x27c>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fa5e 	bl	8001488 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fa5a 	bl	8001488 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e173      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x234>
 8002fee:	e01b      	b.n	8003028 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_RCC_OscConfig+0x27c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fa47 	bl	8001488 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	e00e      	b.n	800301c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fa43 	bl	8001488 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d907      	bls.n	800301c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e15c      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
 8003010:	40023800 	.word	0x40023800
 8003014:	42470000 	.word	0x42470000
 8003018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	4b8a      	ldr	r3, [pc, #552]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ea      	bne.n	8002ffe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8097 	beq.w	8003164 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b83      	ldr	r3, [pc, #524]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a7e      	ldr	r2, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b7c      	ldr	r3, [pc, #496]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b79      	ldr	r3, [pc, #484]	; (800324c <HAL_RCC_OscConfig+0x4b0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x4b0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x4b0>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe fa03 	bl	8001488 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe f9ff 	bl	8001488 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e118      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x4b0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x31e>
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x358>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x340>
 80030c2:	4b61      	ldr	r3, [pc, #388]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4a60      	ldr	r2, [pc, #384]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6713      	str	r3, [r2, #112]	; 0x70
 80030ce:	4b5e      	ldr	r3, [pc, #376]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4a5d      	ldr	r2, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6713      	str	r3, [r2, #112]	; 0x70
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0x358>
 80030dc:	4b5a      	ldr	r3, [pc, #360]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a59      	ldr	r2, [pc, #356]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	4b57      	ldr	r3, [pc, #348]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4a56      	ldr	r2, [pc, #344]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	f023 0304 	bic.w	r3, r3, #4
 80030f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe f9c4 	bl	8001488 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe f9c0 	bl	8001488 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0d7      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ee      	beq.n	8003104 <HAL_RCC_OscConfig+0x368>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe f9ae 	bl	8001488 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe f9aa 	bl	8001488 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0c1      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003146:	4b40      	ldr	r3, [pc, #256]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ee      	bne.n	8003130 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003158:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80ad 	beq.w	80032c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b08      	cmp	r3, #8
 8003178:	d060      	beq.n	800323c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d145      	bne.n	800320e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b33      	ldr	r3, [pc, #204]	; (8003250 <HAL_RCC_OscConfig+0x4b4>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe f97e 	bl	8001488 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe f97a 	bl	8001488 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e093      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	491b      	ldr	r1, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCC_OscConfig+0x4b4>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe f94f 	bl	8001488 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe f94b 	bl	8001488 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e064      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x452>
 800320c:	e05c      	b.n	80032c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_RCC_OscConfig+0x4b4>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe f938 	bl	8001488 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe f934 	bl	8001488 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e04d      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x480>
 800323a:	e045      	b.n	80032c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e040      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
 8003248:	40023800 	.word	0x40023800
 800324c:	40007000 	.word	0x40007000
 8003250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003254:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_RCC_OscConfig+0x538>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d030      	beq.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d129      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d122      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003284:	4013      	ands	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800328a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328c:	4293      	cmp	r3, r2
 800328e:	d119      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d10f      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800

080032d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e022      	b.n	8003330 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fd fe4d 	bl	8000f9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f814 	bl	8003338 <HAL_SD_InitCard>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e00a      	b.n	8003330 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003338:	b5b0      	push	{r4, r5, r7, lr}
 800333a:	b08e      	sub	sp, #56	; 0x38
 800333c:	af04      	add	r7, sp, #16
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003354:	2376      	movs	r3, #118	; 0x76
 8003356:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681d      	ldr	r5, [r3, #0]
 800335c:	466c      	mov	r4, sp
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003366:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800336a:	f107 0308 	add.w	r3, r7, #8
 800336e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003370:	4628      	mov	r0, r5
 8003372:	f001 ff91 	bl	8005298 <SDIO_Init>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800337c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e04f      	b.n	8003428 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003388:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_SD_InitCard+0xf8>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f001 ffc9 	bl	800532a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_SD_InitCard+0xf8>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800339e:	2002      	movs	r0, #2
 80033a0:	f7fe f87e 	bl	80014a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f001 f8f1 	bl	800458c <SD_PowerON>
 80033aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e02e      	b.n	8003428 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f001 f810 	bl	80043f0 <SD_InitCard>
 80033d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e01b      	b.n	8003428 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 f828 	bl	800544e <SDMMC_CmdBlockLength>
 80033fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00f      	beq.n	8003426 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_SD_InitCard+0xfc>)
 800340c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bdb0      	pop	{r4, r5, r7, pc}
 8003430:	422580a0 	.word	0x422580a0
 8003434:	004005ff 	.word	0x004005ff

08003438 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b092      	sub	sp, #72	; 0x48
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003446:	f7fe f81f 	bl	8001488 <HAL_GetTick>
 800344a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1bd      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	f040 81b0 	bne.w	80037d8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800347e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	441a      	add	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	429a      	cmp	r2, r3
 800348a:	d907      	bls.n	800349c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e1a4      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2203      	movs	r2, #3
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d002      	beq.n	80034ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	025b      	lsls	r3, r3, #9
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	025b      	lsls	r3, r3, #9
 80034c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80034c6:	2390      	movs	r3, #144	; 0x90
 80034c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80034ca:	2302      	movs	r3, #2
 80034cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80034d2:	2301      	movs	r3, #1
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f107 0214 	add.w	r2, r7, #20
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 ff88 	bl	80053f6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d90a      	bls.n	8003502 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2202      	movs	r2, #2
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 ffec 	bl	80054d6 <SDMMC_CmdReadMultiBlock>
 80034fe:	6478      	str	r0, [r7, #68]	; 0x44
 8003500:	e009      	b.n	8003516 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800350e:	4618      	mov	r0, r3
 8003510:	f001 ffbf 	bl	8005492 <SDMMC_CmdReadSingleBlock>
 8003514:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7a      	ldr	r2, [pc, #488]	; (800370c <HAL_SD_ReadBlocks+0x2d4>)
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352a:	431a      	orrs	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e151      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003546:	e061      	b.n	800360c <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d03c      	beq.n	80035d0 <HAL_SD_ReadBlocks+0x198>
 8003556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d039      	beq.n	80035d0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800355c:	2300      	movs	r3, #0
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
 8003560:	e033      	b.n	80035ca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f001 fec1 	bl	80052ee <SDIO_ReadFIFO>
 800356c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	b2da      	uxtb	r2, r3
 8003572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003574:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	3301      	adds	r3, #1
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	3b01      	subs	r3, #1
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	b2da      	uxtb	r2, r3
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	3301      	adds	r3, #1
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003594:	3b01      	subs	r3, #1
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	0c1b      	lsrs	r3, r3, #16
 800359c:	b2da      	uxtb	r2, r3
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a4:	3301      	adds	r3, #1
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035aa:	3b01      	subs	r3, #1
 80035ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	0e1b      	lsrs	r3, r3, #24
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	3301      	adds	r3, #1
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	3b01      	subs	r3, #1
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80035c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c6:	3301      	adds	r3, #1
 80035c8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035cc:	2b07      	cmp	r3, #7
 80035ce:	d9c8      	bls.n	8003562 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035d0:	f7fd ff5a 	bl	8001488 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035dc:	429a      	cmp	r2, r3
 80035de:	d902      	bls.n	80035e6 <HAL_SD_ReadBlocks+0x1ae>
 80035e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d112      	bne.n	800360c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_SD_ReadBlocks+0x2d4>)
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e0ec      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003612:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003616:	2b00      	cmp	r3, #0
 8003618:	d096      	beq.n	8003548 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d022      	beq.n	800366e <HAL_SD_ReadBlocks+0x236>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d91f      	bls.n	800366e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	2b03      	cmp	r3, #3
 8003634:	d01b      	beq.n	800366e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f001 ffb2 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003640:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003644:	2b00      	cmp	r3, #0
 8003646:	d012      	beq.n	800366e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2f      	ldr	r2, [pc, #188]	; (800370c <HAL_SD_ReadBlocks+0x2d4>)
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0bb      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d012      	beq.n	80036a2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <HAL_SD_ReadBlocks+0x2d4>)
 8003682:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	f043 0208 	orr.w	r2, r3, #8
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0a1      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d012      	beq.n	80036d6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a15      	ldr	r2, [pc, #84]	; (800370c <HAL_SD_ReadBlocks+0x2d4>)
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	f043 0202 	orr.w	r2, r3, #2
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e087      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d064      	beq.n	80037ae <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a08      	ldr	r2, [pc, #32]	; (800370c <HAL_SD_ReadBlocks+0x2d4>)
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e06d      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
 800370a:	bf00      	nop
 800370c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f001 fdea 	bl	80052ee <SDIO_ReadFIFO>
 800371a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	b2da      	uxtb	r2, r3
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	3301      	adds	r3, #1
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	3b01      	subs	r3, #1
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b2da      	uxtb	r2, r3
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373c:	3301      	adds	r3, #1
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003742:	3b01      	subs	r3, #1
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	b2da      	uxtb	r2, r3
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003752:	3301      	adds	r3, #1
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003758:	3b01      	subs	r3, #1
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	0e1b      	lsrs	r3, r3, #24
 8003760:	b2da      	uxtb	r2, r3
 8003762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003764:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	3301      	adds	r3, #1
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800376c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376e:	3b01      	subs	r3, #1
 8003770:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003772:	f7fd fe89 	bl	8001488 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <HAL_SD_ReadBlocks+0x350>
 8003782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003784:	2b00      	cmp	r3, #0
 8003786:	d112      	bne.n	80037ae <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <HAL_SD_ReadBlocks+0x3b8>)
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e01b      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_SD_ReadBlocks+0x38a>
 80037bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1a6      	bne.n	8003710 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e006      	b.n	80037e6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3748      	adds	r7, #72	; 0x48
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	004005ff 	.word	0x004005ff

080037f4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b092      	sub	sp, #72	; 0x48
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003802:	f7fd fe41 	bl	8001488 <HAL_GetTick>
 8003806:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d107      	bne.n	8003826 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e165      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	f040 8158 	bne.w	8003ae4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800383a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	441a      	add	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	429a      	cmp	r2, r3
 8003846:	d907      	bls.n	8003858 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e14c      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2203      	movs	r2, #3
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2200      	movs	r2, #0
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	2b01      	cmp	r3, #1
 800386e:	d002      	beq.n	8003876 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	025b      	lsls	r3, r3, #9
 8003874:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800387a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	025b      	lsls	r3, r3, #9
 8003880:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003882:	2390      	movs	r3, #144	; 0x90
 8003884:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800388a:	2300      	movs	r3, #0
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800388e:	2301      	movs	r3, #1
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f107 0218 	add.w	r2, r7, #24
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f001 fdaa 	bl	80053f6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d90a      	bls.n	80038be <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 fe52 	bl	800555e <SDMMC_CmdWriteMultiBlock>
 80038ba:	6478      	str	r0, [r7, #68]	; 0x44
 80038bc:	e009      	b.n	80038d2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2210      	movs	r2, #16
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fe25 	bl	800551a <SDMMC_CmdWriteSingleBlock>
 80038d0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80038d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d012      	beq.n	80038fe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a87      	ldr	r2, [pc, #540]	; (8003afc <HAL_SD_WriteBlocks+0x308>)
 80038de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0f9      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003902:	e065      	b.n	80039d0 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d040      	beq.n	8003994 <HAL_SD_WriteBlocks+0x1a0>
 8003912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d03d      	beq.n	8003994 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003918:	2300      	movs	r3, #0
 800391a:	643b      	str	r3, [r7, #64]	; 0x40
 800391c:	e037      	b.n	800398e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003926:	3301      	adds	r3, #1
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392c:	3b01      	subs	r3, #1
 800392e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	021a      	lsls	r2, r3, #8
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	3301      	adds	r3, #1
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003944:	3b01      	subs	r3, #1
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	041a      	lsls	r2, r3, #16
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003956:	3301      	adds	r3, #1
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800395a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395c:	3b01      	subs	r3, #1
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	061a      	lsls	r2, r3, #24
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	3301      	adds	r3, #1
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003974:	3b01      	subs	r3, #1
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f107 0214 	add.w	r2, r7, #20
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fcc0 	bl	8005308 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398a:	3301      	adds	r3, #1
 800398c:	643b      	str	r3, [r7, #64]	; 0x40
 800398e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003990:	2b07      	cmp	r3, #7
 8003992:	d9c4      	bls.n	800391e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003994:	f7fd fd78 	bl	8001488 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d902      	bls.n	80039aa <HAL_SD_WriteBlocks+0x1b6>
 80039a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d112      	bne.n	80039d0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a53      	ldr	r2, [pc, #332]	; (8003afc <HAL_SD_WriteBlocks+0x308>)
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e090      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d092      	beq.n	8003904 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d022      	beq.n	8003a32 <HAL_SD_WriteBlocks+0x23e>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d91f      	bls.n	8003a32 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d01b      	beq.n	8003a32 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 fdd0 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003a04:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d012      	beq.n	8003a32 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3a      	ldr	r2, [pc, #232]	; (8003afc <HAL_SD_WriteBlocks+0x308>)
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e05f      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d012      	beq.n	8003a66 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2d      	ldr	r2, [pc, #180]	; (8003afc <HAL_SD_WriteBlocks+0x308>)
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	f043 0208 	orr.w	r2, r3, #8
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e045      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d012      	beq.n	8003a9a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <HAL_SD_WriteBlocks+0x308>)
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	f043 0202 	orr.w	r2, r3, #2
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e02b      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_SD_WriteBlocks+0x308>)
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	f043 0210 	orr.w	r2, r3, #16
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e011      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ad6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e006      	b.n	8003af2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3748      	adds	r7, #72	; 0x48
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	004005ff 	.word	0x004005ff

08003b00 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_SD_IRQHandler+0x2e>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 ff4f 	bl	80049ca <SD_Read_IT>
 8003b2c:	e155      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 808f 	beq.w	8003c5c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003b56:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003b5a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d039      	beq.n	8003bea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <HAL_SD_IRQHandler+0x8a>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d011      	beq.n	8003bae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 fd08 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003b94:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f91f 	bl	8003dec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d104      	bne.n	8003bda <HAL_SD_IRQHandler+0xda>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f002 f97e 	bl	8005edc <HAL_SD_RxCpltCallback>
 8003be0:	e0fb      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f002 f970 	bl	8005ec8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003be8:	e0f7      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80f2 	beq.w	8003dda <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d011      	beq.n	8003c24 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 fccd 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003c0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8e4 	bl	8003dec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 80d5 	bne.w	8003dda <HAL_SD_IRQHandler+0x2da>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 80cf 	bne.w	8003dda <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0208 	bic.w	r2, r2, #8
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f002 f937 	bl	8005ec8 <HAL_SD_TxCpltCallback>
}
 8003c5a:	e0be      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_SD_IRQHandler+0x17c>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fef9 	bl	8004a6c <SD_Write_IT>
 8003c7a:	e0ae      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80a7 	beq.w	8003dda <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	f043 0202 	orr.w	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	f043 0208 	orr.w	r2, r3, #8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	f043 0220 	orr.w	r2, r3, #32
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	f043 0210 	orr.w	r2, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 fc46 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f855 	bl	8003dec <HAL_SD_ErrorCallback>
}
 8003d42:	e04a      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d045      	beq.n	8003dda <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <HAL_SD_IRQHandler+0x262>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <HAL_SD_IRQHandler+0x2e4>)
 8003d68:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fd96 	bl	80018a0 <HAL_DMA_Abort_IT>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d02f      	beq.n	8003dda <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fac8 	bl	8004314 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003d84:	e029      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <HAL_SD_IRQHandler+0x29a>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d011      	beq.n	8003dbe <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_SD_IRQHandler+0x2e8>)
 8003da0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd fd7a 	bl	80018a0 <HAL_DMA_Abort_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d013      	beq.n	8003dda <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fae3 	bl	8004382 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003dbc:	e00d      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f002 f86e 	bl	8005eb4 <HAL_SD_AbortCallback>
}
 8003dd8:	e7ff      	b.n	8003dda <HAL_SD_IRQHandler+0x2da>
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	08004315 	.word	0x08004315
 8003de8:	08004383 	.word	0x08004383

08003dec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e0e:	0f9b      	lsrs	r3, r3, #30
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e1a:	0e9b      	lsrs	r3, r3, #26
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2c:	0e1b      	lsrs	r3, r3, #24
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e60:	0d1b      	lsrs	r3, r3, #20
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7e:	0bdb      	lsrs	r3, r3, #15
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e90:	0b9b      	lsrs	r3, r3, #14
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea2:	0b5b      	lsrs	r3, r3, #13
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb4:	0b1b      	lsrs	r3, r3, #12
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d163      	bne.n	8003f98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed4:	009a      	lsls	r2, r3, #2
 8003ed6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003eda:	4013      	ands	r3, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ee0:	0f92      	lsrs	r2, r2, #30
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eec:	0edb      	lsrs	r3, r3, #27
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efe:	0e1b      	lsrs	r3, r3, #24
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f10:	0d5b      	lsrs	r3, r3, #21
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f22:	0c9b      	lsrs	r3, r3, #18
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f34:	0bdb      	lsrs	r3, r3, #15
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	7e1b      	ldrb	r3, [r3, #24]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	3302      	adds	r3, #2
 8003f58:	2201      	movs	r2, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f62:	fb03 f202 	mul.w	r2, r3, r2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	7a1b      	ldrb	r3, [r3, #8]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	2201      	movs	r2, #1
 8003f76:	409a      	lsls	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003f84:	0a52      	lsrs	r2, r2, #9
 8003f86:	fb03 f202 	mul.w	r2, r3, r2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f94:	661a      	str	r2, [r3, #96]	; 0x60
 8003f96:	e031      	b.n	8003ffc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d11d      	bne.n	8003fdc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	0c1b      	lsrs	r3, r3, #16
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	029a      	lsls	r2, r3, #10
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60
 8003fda:	e00f      	b.n	8003ffc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	; (8004144 <HAL_SD_GetCardCSD+0x344>)
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e09d      	b.n	8004138 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004000:	0b9b      	lsrs	r3, r3, #14
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	b2da      	uxtb	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004012:	09db      	lsrs	r3, r3, #7
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800401a:	b2da      	uxtb	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800402a:	b2da      	uxtb	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	0fdb      	lsrs	r3, r3, #31
 8004036:	b2da      	uxtb	r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	0f5b      	lsrs	r3, r3, #29
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	b2da      	uxtb	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	0e9b      	lsrs	r3, r3, #26
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	b2da      	uxtb	r2, r3
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	0d9b      	lsrs	r3, r3, #22
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	b2da      	uxtb	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	0d5b      	lsrs	r3, r3, #21
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	0bdb      	lsrs	r3, r3, #15
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	0b9b      	lsrs	r3, r3, #14
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	0b5b      	lsrs	r3, r3, #13
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	0b1b      	lsrs	r3, r3, #12
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	b2da      	uxtb	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004126:	b2da      	uxtb	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	004005ff 	.word	0x004005ff

08004148 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80041a0:	b5b0      	push	{r4, r5, r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af04      	add	r7, sp, #16
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2203      	movs	r2, #3
 80041b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d02e      	beq.n	800421e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c6:	d106      	bne.n	80041d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
 80041d4:	e029      	b.n	800422a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041dc:	d10a      	bne.n	80041f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa8a 	bl	80046f8 <SD_WideBus_Enable>
 80041e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
 80041f2:	e01a      	b.n	800422a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fac7 	bl	800478e <SD_WideBus_Disable>
 8004200:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
 800420e:	e00c      	b.n	800422a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	639a      	str	r2, [r3, #56]	; 0x38
 800421c:	e005      	b.n	800422a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004248:	e01f      	b.n	800428a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681d      	ldr	r5, [r3, #0]
 8004270:	466c      	mov	r4, sp
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800427a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800427e:	f107 0308 	add.w	r3, r7, #8
 8004282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004284:	4628      	mov	r0, r5
 8004286:	f001 f807 	bl	8005298 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004292:	4618      	mov	r0, r3
 8004294:	f001 f8db 	bl	800544e <SDMMC_CmdBlockLength>
 8004298:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80042c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3728      	adds	r7, #40	; 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bdb0      	pop	{r4, r5, r7, pc}
 80042ce:	bf00      	nop
 80042d0:	004005ff 	.word	0x004005ff

080042d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80042e0:	f107 030c 	add.w	r3, r7, #12
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9de 	bl	80046a8 <SD_SendStatus>
 80042ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	0a5b      	lsrs	r3, r3, #9
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800430a:	693b      	ldr	r3, [r7, #16]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f240 523a 	movw	r2, #1338	; 0x53a
 800432a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7ff ffd1 	bl	80042d4 <HAL_SD_GetCardState>
 8004332:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b06      	cmp	r3, #6
 8004346:	d002      	beq.n	800434e <SD_DMATxAbort+0x3a>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b05      	cmp	r3, #5
 800434c:	d10a      	bne.n	8004364 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f001 f926 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f001 fda1 	bl	8005eb4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004372:	e002      	b.n	800437a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff fd39 	bl	8003dec <HAL_SD_ErrorCallback>
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f240 523a 	movw	r2, #1338	; 0x53a
 8004398:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff ff9a 	bl	80042d4 <HAL_SD_GetCardState>
 80043a0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d002      	beq.n	80043bc <SD_DMARxAbort+0x3a>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d10a      	bne.n	80043d2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 f8ef 	bl	80055a4 <SDMMC_CmdStopTransfer>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f001 fd6a 	bl	8005eb4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80043e0:	e002      	b.n	80043e8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fd02 	bl	8003dec <HAL_SD_ErrorCallback>
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80043f0:	b5b0      	push	{r4, r5, r7, lr}
 80043f2:	b094      	sub	sp, #80	; 0x50
 80043f4:	af04      	add	r7, sp, #16
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80043f8:	2301      	movs	r3, #1
 80043fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 ffa0 	bl	8005346 <SDIO_GetPowerState>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800440c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004410:	e0b8      	b.n	8004584 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	2b03      	cmp	r3, #3
 8004418:	d02f      	beq.n	800447a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f001 f9ca 	bl	80057b8 <SDMMC_CmdSendCID>
 8004424:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <SD_InitCard+0x40>
    {
      return errorstate;
 800442c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442e:	e0a9      	b.n	8004584 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f000 ffca 	bl	80053d0 <SDIO_GetResponse>
 800443c:	4602      	mov	r2, r0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2104      	movs	r1, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f000 ffc1 	bl	80053d0 <SDIO_GetResponse>
 800444e:	4602      	mov	r2, r0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2108      	movs	r1, #8
 800445a:	4618      	mov	r0, r3
 800445c:	f000 ffb8 	bl	80053d0 <SDIO_GetResponse>
 8004460:	4602      	mov	r2, r0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	210c      	movs	r1, #12
 800446c:	4618      	mov	r0, r3
 800446e:	f000 ffaf 	bl	80053d0 <SDIO_GetResponse>
 8004472:	4602      	mov	r2, r0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	2b03      	cmp	r3, #3
 8004480:	d00d      	beq.n	800449e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f107 020e 	add.w	r2, r7, #14
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f001 f9d0 	bl	8005832 <SDMMC_CmdSetRelAdd>
 8004492:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <SD_InitCard+0xae>
    {
      return errorstate;
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449c:	e072      	b.n	8004584 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d036      	beq.n	8004514 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80044a6:	89fb      	ldrh	r3, [r7, #14]
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f001 f99a 	bl	80057f4 <SDMMC_CmdSendCSD>
 80044c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80044c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ca:	e05b      	b.n	8004584 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 ff7c 	bl	80053d0 <SDIO_GetResponse>
 80044d8:	4602      	mov	r2, r0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2104      	movs	r1, #4
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 ff73 	bl	80053d0 <SDIO_GetResponse>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2108      	movs	r1, #8
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 ff6a 	bl	80053d0 <SDIO_GetResponse>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	210c      	movs	r1, #12
 8004508:	4618      	mov	r0, r3
 800450a:	f000 ff61 	bl	80053d0 <SDIO_GetResponse>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2104      	movs	r1, #4
 800451a:	4618      	mov	r0, r3
 800451c:	f000 ff58 	bl	80053d0 <SDIO_GetResponse>
 8004520:	4603      	mov	r3, r0
 8004522:	0d1a      	lsrs	r2, r3, #20
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004528:	f107 0310 	add.w	r3, r7, #16
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fc66 	bl	8003e00 <HAL_SD_GetCardCSD>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800453a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800453e:	e021      	b.n	8004584 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	2200      	movs	r2, #0
 800454c:	461c      	mov	r4, r3
 800454e:	4615      	mov	r5, r2
 8004550:	4622      	mov	r2, r4
 8004552:	462b      	mov	r3, r5
 8004554:	4608      	mov	r0, r1
 8004556:	f001 f847 	bl	80055e8 <SDMMC_CmdSelDesel>
 800455a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800455c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <SD_InitCard+0x176>
  {
    return errorstate;
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	e00e      	b.n	8004584 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681d      	ldr	r5, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	466c      	mov	r4, sp
 800456e:	f103 0210 	add.w	r2, r3, #16
 8004572:	ca07      	ldmia	r2, {r0, r1, r2}
 8004574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004578:	3304      	adds	r3, #4
 800457a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800457c:	4628      	mov	r0, r5
 800457e:	f000 fe8b 	bl	8005298 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3740      	adds	r7, #64	; 0x40
 8004588:	46bd      	mov	sp, r7
 800458a:	bdb0      	pop	{r4, r5, r7, pc}

0800458c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f001 f842 	bl	800562e <SDMMC_CmdGoIdleState>
 80045aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	e072      	b.n	800469c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 f855 	bl	800566a <SDMMC_CmdOperCond>
 80045c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00d      	beq.n	80045e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 f82b 	bl	800562e <SDMMC_CmdGoIdleState>
 80045d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	e05b      	b.n	800469c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d137      	bne.n	8004662 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 f855 	bl	80056a8 <SDMMC_CmdAppCommand>
 80045fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d02d      	beq.n	8004662 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004606:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800460a:	e047      	b.n	800469c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f001 f848 	bl	80056a8 <SDMMC_CmdAppCommand>
 8004618:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <SD_PowerON+0x98>
    {
      return errorstate;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	e03b      	b.n	800469c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	491e      	ldr	r1, [pc, #120]	; (80046a4 <SD_PowerON+0x118>)
 800462a:	4618      	mov	r0, r3
 800462c:	f001 f85e 	bl	80056ec <SDMMC_CmdAppOperCommand>
 8004630:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800463c:	e02e      	b.n	800469c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fec3 	bl	80053d0 <SDIO_GetResponse>
 800464a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	0fdb      	lsrs	r3, r3, #31
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <SD_PowerON+0xcc>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <SD_PowerON+0xce>
 8004658:	2300      	movs	r3, #0
 800465a:	613b      	str	r3, [r7, #16]

    count++;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	3301      	adds	r3, #1
 8004660:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004668:	4293      	cmp	r3, r2
 800466a:	d802      	bhi.n	8004672 <SD_PowerON+0xe6>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0cc      	beq.n	800460c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004678:	4293      	cmp	r3, r2
 800467a:	d902      	bls.n	8004682 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800467c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004680:	e00c      	b.n	800469c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
 8004692:	e002      	b.n	800469a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	c1100000 	.word	0xc1100000

080046a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80046b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046bc:	e018      	b.n	80046f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f001 f8d2 	bl	8005874 <SDMMC_CmdSendStatus>
 80046d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	e009      	b.n	80046f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fe74 	bl	80053d0 <SDIO_GetResponse>
 80046e8:	4602      	mov	r2, r0
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fe5e 	bl	80053d0 <SDIO_GetResponse>
 8004714:	4603      	mov	r3, r0
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471e:	d102      	bne.n	8004726 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004724:	e02f      	b.n	8004786 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004726:	f107 030c 	add.w	r3, r7, #12
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f879 	bl	8004824 <SD_FindSCR>
 8004732:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e023      	b.n	8004786 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 ffa7 	bl	80056a8 <SDMMC_CmdAppCommand>
 800475a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	e00f      	b.n	8004786 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 ffe0 	bl	8005732 <SDMMC_CmdBusWidth>
 8004772:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	e003      	b.n	8004786 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800477e:	2300      	movs	r3, #0
 8004780:	e001      	b.n	8004786 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004782:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fe13 	bl	80053d0 <SDIO_GetResponse>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b4:	d102      	bne.n	80047bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80047b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047ba:	e02f      	b.n	800481c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80047bc:	f107 030c 	add.w	r3, r7, #12
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f82e 	bl	8004824 <SD_FindSCR>
 80047c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	e023      	b.n	800481c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01c      	beq.n	8004818 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f000 ff5c 	bl	80056a8 <SDMMC_CmdAppCommand>
 80047f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	e00f      	b.n	800481c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2100      	movs	r1, #0
 8004802:	4618      	mov	r0, r3
 8004804:	f000 ff95 	bl	8005732 <SDMMC_CmdBusWidth>
 8004808:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	e003      	b.n	800481c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004814:	2300      	movs	r3, #0
 8004816:	e001      	b.n	800481c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004818:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b08f      	sub	sp, #60	; 0x3c
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800482e:	f7fc fe2b 	bl	8001488 <HAL_GetTick>
 8004832:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2108      	movs	r1, #8
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fdff 	bl	800544e <SDMMC_CmdBlockLength>
 8004850:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	e0b2      	b.n	80049c2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 ff1d 	bl	80056a8 <SDMMC_CmdAppCommand>
 800486e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	e0a3      	b.n	80049c2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800487a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800487e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004880:	2308      	movs	r3, #8
 8004882:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004884:	2330      	movs	r3, #48	; 0x30
 8004886:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004888:	2302      	movs	r3, #2
 800488a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800488c:	2300      	movs	r3, #0
 800488e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004890:	2301      	movs	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f107 0210 	add.w	r2, r7, #16
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fda9 	bl	80053f6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 ff64 	bl	8005776 <SDMMC_CmdSendSCR>
 80048ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02a      	beq.n	800490c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	e083      	b.n	80049c2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00f      	beq.n	80048e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	f107 0208 	add.w	r2, r7, #8
 80048d4:	18d4      	adds	r4, r2, r3
 80048d6:	4608      	mov	r0, r1
 80048d8:	f000 fd09 	bl	80052ee <SDIO_ReadFIFO>
 80048dc:	4603      	mov	r3, r0
 80048de:	6023      	str	r3, [r4, #0]
      index++;
 80048e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e2:	3301      	adds	r3, #1
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
 80048e6:	e006      	b.n	80048f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d012      	beq.n	800491c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80048f6:	f7fc fdc7 	bl	8001488 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004904:	d102      	bne.n	800490c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004906:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800490a:	e05a      	b.n	80049c2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0cf      	beq.n	80048ba <SD_FindSCR+0x96>
 800491a:	e000      	b.n	800491e <SD_FindSCR+0xfa>
      break;
 800491c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2208      	movs	r2, #8
 8004932:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004934:	2308      	movs	r3, #8
 8004936:	e044      	b.n	80049c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2202      	movs	r2, #2
 800494c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800494e:	2302      	movs	r3, #2
 8004950:	e037      	b.n	80049c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2220      	movs	r2, #32
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004968:	2320      	movs	r3, #32
 800496a:	e02a      	b.n	80049c2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f240 523a 	movw	r2, #1338	; 0x53a
 8004974:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	061a      	lsls	r2, r3, #24
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004982:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800498c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	0e1b      	lsrs	r3, r3, #24
 8004992:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	601a      	str	r2, [r3, #0]
    scr++;
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	3304      	adds	r3, #4
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	061a      	lsls	r2, r3, #24
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	0a1b      	lsrs	r3, r3, #8
 80049b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	0e1b      	lsrs	r3, r3, #24
 80049ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	373c      	adds	r7, #60	; 0x3c
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd90      	pop	{r4, r7, pc}

080049ca <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d03f      	beq.n	8004a64 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e033      	b.n	8004a52 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fc7d 	bl	80052ee <SDIO_ReadFIFO>
 80049f4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	0e1b      	lsrs	r3, r3, #24
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b07      	cmp	r3, #7
 8004a56:	d9c8      	bls.n	80049ea <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004a64:	bf00      	nop
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d043      	beq.n	8004b0e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e037      	b.n	8004afc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3301      	adds	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	041a      	lsls	r2, r3, #16
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	061a      	lsls	r2, r3, #24
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f107 0208 	add.w	r2, r7, #8
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fc09 	bl	8005308 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3301      	adds	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b07      	cmp	r3, #7
 8004b00:	d9c4      	bls.n	8004a8c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e03f      	b.n	8004ba8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fc fb3b 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2224      	movs	r2, #36	; 0x24
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f928 	bl	8004db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d17c      	bne.n	8004cca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_UART_Transmit+0x2c>
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e075      	b.n	8004ccc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Transmit+0x3e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e06e      	b.n	8004ccc <HAL_UART_Transmit+0x11c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2221      	movs	r2, #33	; 0x21
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c04:	f7fc fc40 	bl	8001488 <HAL_GetTick>
 8004c08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1e:	d108      	bne.n	8004c32 <HAL_UART_Transmit+0x82>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	e003      	b.n	8004c3a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c42:	e02a      	b.n	8004c9a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2180      	movs	r1, #128	; 0x80
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f840 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e036      	b.n	8004ccc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	3302      	adds	r3, #2
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e007      	b.n	8004c8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	781a      	ldrb	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1cf      	bne.n	8004c44 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f810 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e006      	b.n	8004ccc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b090      	sub	sp, #64	; 0x40
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce4:	e050      	b.n	8004d88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cec:	d04c      	beq.n	8004d88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf4:	f7fc fbc8 	bl	8001488 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d241      	bcs.n	8004d88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d24:	637a      	str	r2, [r7, #52]	; 0x34
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e5      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3314      	adds	r3, #20
 8004d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	613b      	str	r3, [r7, #16]
   return(result);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d58:	623a      	str	r2, [r7, #32]
 8004d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	69f9      	ldr	r1, [r7, #28]
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e00f      	b.n	8004da8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4013      	ands	r3, r2
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d09f      	beq.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3740      	adds	r7, #64	; 0x40
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db4:	b0c0      	sub	sp, #256	; 0x100
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	68d9      	ldr	r1, [r3, #12]
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	ea40 0301 	orr.w	r3, r0, r1
 8004dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e08:	f021 010c 	bic.w	r1, r1, #12
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e16:	430b      	orrs	r3, r1
 8004e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2a:	6999      	ldr	r1, [r3, #24]
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	ea40 0301 	orr.w	r3, r0, r1
 8004e36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b8f      	ldr	r3, [pc, #572]	; (800507c <UART_SetConfig+0x2cc>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d005      	beq.n	8004e50 <UART_SetConfig+0xa0>
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b8d      	ldr	r3, [pc, #564]	; (8005080 <UART_SetConfig+0x2d0>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d104      	bne.n	8004e5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e50:	f7fd fa36 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 8004e54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e58:	e003      	b.n	8004e62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e5a:	f7fd fa1d 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8004e5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6c:	f040 810c 	bne.w	8005088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e82:	4622      	mov	r2, r4
 8004e84:	462b      	mov	r3, r5
 8004e86:	1891      	adds	r1, r2, r2
 8004e88:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e8a:	415b      	adcs	r3, r3
 8004e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e92:	4621      	mov	r1, r4
 8004e94:	eb12 0801 	adds.w	r8, r2, r1
 8004e98:	4629      	mov	r1, r5
 8004e9a:	eb43 0901 	adc.w	r9, r3, r1
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eb2:	4690      	mov	r8, r2
 8004eb4:	4699      	mov	r9, r3
 8004eb6:	4623      	mov	r3, r4
 8004eb8:	eb18 0303 	adds.w	r3, r8, r3
 8004ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ec0:	462b      	mov	r3, r5
 8004ec2:	eb49 0303 	adc.w	r3, r9, r3
 8004ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ed6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ede:	460b      	mov	r3, r1
 8004ee0:	18db      	adds	r3, r3, r3
 8004ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	eb42 0303 	adc.w	r3, r2, r3
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
 8004eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ef4:	f7fb f9f4 	bl	80002e0 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4b61      	ldr	r3, [pc, #388]	; (8005084 <UART_SetConfig+0x2d4>)
 8004efe:	fba3 2302 	umull	r2, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	011c      	lsls	r4, r3, #4
 8004f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f18:	4642      	mov	r2, r8
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	1891      	adds	r1, r2, r2
 8004f1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f20:	415b      	adcs	r3, r3
 8004f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f28:	4641      	mov	r1, r8
 8004f2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb43 0b01 	adc.w	fp, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f48:	4692      	mov	sl, r2
 8004f4a:	469b      	mov	fp, r3
 8004f4c:	4643      	mov	r3, r8
 8004f4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f56:	464b      	mov	r3, r9
 8004f58:	eb4b 0303 	adc.w	r3, fp, r3
 8004f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f74:	460b      	mov	r3, r1
 8004f76:	18db      	adds	r3, r3, r3
 8004f78:	643b      	str	r3, [r7, #64]	; 0x40
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	eb42 0303 	adc.w	r3, r2, r3
 8004f80:	647b      	str	r3, [r7, #68]	; 0x44
 8004f82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f8a:	f7fb f9a9 	bl	80002e0 <__aeabi_uldivmod>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <UART_SetConfig+0x2d4>)
 8004f96:	fba3 2301 	umull	r2, r3, r3, r1
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2264      	movs	r2, #100	; 0x64
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	1acb      	subs	r3, r1, r3
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004faa:	4b36      	ldr	r3, [pc, #216]	; (8005084 <UART_SetConfig+0x2d4>)
 8004fac:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fb8:	441c      	add	r4, r3
 8004fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	1891      	adds	r1, r2, r2
 8004fd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fdc:	4641      	mov	r1, r8
 8004fde:	1851      	adds	r1, r2, r1
 8004fe0:	6339      	str	r1, [r7, #48]	; 0x30
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	414b      	adcs	r3, r1
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	00cb      	lsls	r3, r1, #3
 8004ff8:	4651      	mov	r1, sl
 8004ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffe:	4651      	mov	r1, sl
 8005000:	00ca      	lsls	r2, r1, #3
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	4603      	mov	r3, r0
 8005008:	4642      	mov	r2, r8
 800500a:	189b      	adds	r3, r3, r2
 800500c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005010:	464b      	mov	r3, r9
 8005012:	460a      	mov	r2, r1
 8005014:	eb42 0303 	adc.w	r3, r2, r3
 8005018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005028:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800502c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005030:	460b      	mov	r3, r1
 8005032:	18db      	adds	r3, r3, r3
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
 8005036:	4613      	mov	r3, r2
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800503e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005046:	f7fb f94b 	bl	80002e0 <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <UART_SetConfig+0x2d4>)
 8005050:	fba3 1302 	umull	r1, r3, r3, r2
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	2164      	movs	r1, #100	; 0x64
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	3332      	adds	r3, #50	; 0x32
 8005062:	4a08      	ldr	r2, [pc, #32]	; (8005084 <UART_SetConfig+0x2d4>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	f003 0207 	and.w	r2, r3, #7
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4422      	add	r2, r4
 8005076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005078:	e105      	b.n	8005286 <UART_SetConfig+0x4d6>
 800507a:	bf00      	nop
 800507c:	40011000 	.word	0x40011000
 8005080:	40011400 	.word	0x40011400
 8005084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508c:	2200      	movs	r2, #0
 800508e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005092:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800509a:	4642      	mov	r2, r8
 800509c:	464b      	mov	r3, r9
 800509e:	1891      	adds	r1, r2, r2
 80050a0:	6239      	str	r1, [r7, #32]
 80050a2:	415b      	adcs	r3, r3
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050aa:	4641      	mov	r1, r8
 80050ac:	1854      	adds	r4, r2, r1
 80050ae:	4649      	mov	r1, r9
 80050b0:	eb43 0501 	adc.w	r5, r3, r1
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	00eb      	lsls	r3, r5, #3
 80050be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050c2:	00e2      	lsls	r2, r4, #3
 80050c4:	4614      	mov	r4, r2
 80050c6:	461d      	mov	r5, r3
 80050c8:	4643      	mov	r3, r8
 80050ca:	18e3      	adds	r3, r4, r3
 80050cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050d0:	464b      	mov	r3, r9
 80050d2:	eb45 0303 	adc.w	r3, r5, r3
 80050d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050f6:	4629      	mov	r1, r5
 80050f8:	008b      	lsls	r3, r1, #2
 80050fa:	4621      	mov	r1, r4
 80050fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005100:	4621      	mov	r1, r4
 8005102:	008a      	lsls	r2, r1, #2
 8005104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005108:	f7fb f8ea 	bl	80002e0 <__aeabi_uldivmod>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4b60      	ldr	r3, [pc, #384]	; (8005294 <UART_SetConfig+0x4e4>)
 8005112:	fba3 2302 	umull	r2, r3, r3, r2
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	011c      	lsls	r4, r3, #4
 800511a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800511e:	2200      	movs	r2, #0
 8005120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005124:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800512c:	4642      	mov	r2, r8
 800512e:	464b      	mov	r3, r9
 8005130:	1891      	adds	r1, r2, r2
 8005132:	61b9      	str	r1, [r7, #24]
 8005134:	415b      	adcs	r3, r3
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800513c:	4641      	mov	r1, r8
 800513e:	1851      	adds	r1, r2, r1
 8005140:	6139      	str	r1, [r7, #16]
 8005142:	4649      	mov	r1, r9
 8005144:	414b      	adcs	r3, r1
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005154:	4659      	mov	r1, fp
 8005156:	00cb      	lsls	r3, r1, #3
 8005158:	4651      	mov	r1, sl
 800515a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800515e:	4651      	mov	r1, sl
 8005160:	00ca      	lsls	r2, r1, #3
 8005162:	4610      	mov	r0, r2
 8005164:	4619      	mov	r1, r3
 8005166:	4603      	mov	r3, r0
 8005168:	4642      	mov	r2, r8
 800516a:	189b      	adds	r3, r3, r2
 800516c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005170:	464b      	mov	r3, r9
 8005172:	460a      	mov	r2, r1
 8005174:	eb42 0303 	adc.w	r3, r2, r3
 8005178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	67bb      	str	r3, [r7, #120]	; 0x78
 8005186:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005194:	4649      	mov	r1, r9
 8005196:	008b      	lsls	r3, r1, #2
 8005198:	4641      	mov	r1, r8
 800519a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519e:	4641      	mov	r1, r8
 80051a0:	008a      	lsls	r2, r1, #2
 80051a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051a6:	f7fb f89b 	bl	80002e0 <__aeabi_uldivmod>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4b39      	ldr	r3, [pc, #228]	; (8005294 <UART_SetConfig+0x4e4>)
 80051b0:	fba3 1302 	umull	r1, r3, r3, r2
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	2164      	movs	r1, #100	; 0x64
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	3332      	adds	r3, #50	; 0x32
 80051c2:	4a34      	ldr	r2, [pc, #208]	; (8005294 <UART_SetConfig+0x4e4>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ce:	441c      	add	r4, r3
 80051d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d4:	2200      	movs	r2, #0
 80051d6:	673b      	str	r3, [r7, #112]	; 0x70
 80051d8:	677a      	str	r2, [r7, #116]	; 0x74
 80051da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051de:	4642      	mov	r2, r8
 80051e0:	464b      	mov	r3, r9
 80051e2:	1891      	adds	r1, r2, r2
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	415b      	adcs	r3, r3
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ee:	4641      	mov	r1, r8
 80051f0:	1851      	adds	r1, r2, r1
 80051f2:	6039      	str	r1, [r7, #0]
 80051f4:	4649      	mov	r1, r9
 80051f6:	414b      	adcs	r3, r1
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005206:	4659      	mov	r1, fp
 8005208:	00cb      	lsls	r3, r1, #3
 800520a:	4651      	mov	r1, sl
 800520c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005210:	4651      	mov	r1, sl
 8005212:	00ca      	lsls	r2, r1, #3
 8005214:	4610      	mov	r0, r2
 8005216:	4619      	mov	r1, r3
 8005218:	4603      	mov	r3, r0
 800521a:	4642      	mov	r2, r8
 800521c:	189b      	adds	r3, r3, r2
 800521e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005220:	464b      	mov	r3, r9
 8005222:	460a      	mov	r2, r1
 8005224:	eb42 0303 	adc.w	r3, r2, r3
 8005228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	663b      	str	r3, [r7, #96]	; 0x60
 8005234:	667a      	str	r2, [r7, #100]	; 0x64
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005242:	4649      	mov	r1, r9
 8005244:	008b      	lsls	r3, r1, #2
 8005246:	4641      	mov	r1, r8
 8005248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800524c:	4641      	mov	r1, r8
 800524e:	008a      	lsls	r2, r1, #2
 8005250:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005254:	f7fb f844 	bl	80002e0 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <UART_SetConfig+0x4e4>)
 800525e:	fba3 1302 	umull	r1, r3, r3, r2
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	2164      	movs	r1, #100	; 0x64
 8005266:	fb01 f303 	mul.w	r3, r1, r3
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	3332      	adds	r3, #50	; 0x32
 8005270:	4a08      	ldr	r2, [pc, #32]	; (8005294 <UART_SetConfig+0x4e4>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	f003 020f 	and.w	r2, r3, #15
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4422      	add	r2, r4
 8005284:	609a      	str	r2, [r3, #8]
}
 8005286:	bf00      	nop
 8005288:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800528c:	46bd      	mov	sp, r7
 800528e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005292:	bf00      	nop
 8005294:	51eb851f 	.word	0x51eb851f

08005298 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005298:	b084      	sub	sp, #16
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	f107 001c 	add.w	r0, r7, #28
 80052a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80052b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80052ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80052be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80052c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80052d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	b004      	add	sp, #16
 80052ec:	4770      	bx	lr

080052ee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2203      	movs	r2, #3
 8005336:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0303 	and.w	r3, r3, #3
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005380:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005386:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800538c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800539c:	f023 030f 	bic.w	r3, r3, #15
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	b2db      	uxtb	r3, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3314      	adds	r3, #20
 80053de:	461a      	mov	r2, r3
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4413      	add	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
}  
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800541c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005422:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005428:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005440:	2300      	movs	r3, #0

}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b088      	sub	sp, #32
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800545c:	2310      	movs	r3, #16
 800545e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005460:	2340      	movs	r3, #64	; 0x40
 8005462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800546c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800546e:	f107 0308 	add.w	r3, r7, #8
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff74 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	2110      	movs	r1, #16
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fa19 	bl	80058b8 <SDMMC_GetCmdResp1>
 8005486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005488:	69fb      	ldr	r3, [r7, #28]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b088      	sub	sp, #32
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054a0:	2311      	movs	r3, #17
 80054a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054a4:	2340      	movs	r3, #64	; 0x40
 80054a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054b2:	f107 0308 	add.w	r3, r7, #8
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff ff52 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054be:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c2:	2111      	movs	r1, #17
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f9f7 	bl	80058b8 <SDMMC_GetCmdResp1>
 80054ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054cc:	69fb      	ldr	r3, [r7, #28]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b088      	sub	sp, #32
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80054e4:	2312      	movs	r3, #18
 80054e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054e8:	2340      	movs	r3, #64	; 0x40
 80054ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054f6:	f107 0308 	add.w	r3, r7, #8
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff30 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005502:	f241 3288 	movw	r2, #5000	; 0x1388
 8005506:	2112      	movs	r1, #18
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f9d5 	bl	80058b8 <SDMMC_GetCmdResp1>
 800550e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005510:	69fb      	ldr	r3, [r7, #28]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b088      	sub	sp, #32
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005528:	2318      	movs	r3, #24
 800552a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800552c:	2340      	movs	r3, #64	; 0x40
 800552e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005538:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ff0e 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005546:	f241 3288 	movw	r2, #5000	; 0x1388
 800554a:	2118      	movs	r1, #24
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f9b3 	bl	80058b8 <SDMMC_GetCmdResp1>
 8005552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005554:	69fb      	ldr	r3, [r7, #28]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b088      	sub	sp, #32
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800556c:	2319      	movs	r3, #25
 800556e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005570:	2340      	movs	r3, #64	; 0x40
 8005572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800557e:	f107 0308 	add.w	r3, r7, #8
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff feec 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800558a:	f241 3288 	movw	r2, #5000	; 0x1388
 800558e:	2119      	movs	r1, #25
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f991 	bl	80058b8 <SDMMC_GetCmdResp1>
 8005596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005598:	69fb      	ldr	r3, [r7, #28]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3720      	adds	r7, #32
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055b0:	230c      	movs	r3, #12
 80055b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055b4:	2340      	movs	r3, #64	; 0x40
 80055b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055c2:	f107 0308 	add.w	r3, r7, #8
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff feca 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <SDMMC_CmdStopTransfer+0x40>)
 80055d0:	210c      	movs	r1, #12
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f970 	bl	80058b8 <SDMMC_GetCmdResp1>
 80055d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055da:	69fb      	ldr	r3, [r7, #28]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	05f5e100 	.word	0x05f5e100

080055e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80055f8:	2307      	movs	r3, #7
 80055fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005600:	2300      	movs	r3, #0
 8005602:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005608:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800560a:	f107 0310 	add.w	r3, r7, #16
 800560e:	4619      	mov	r1, r3
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff fea6 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005616:	f241 3288 	movw	r2, #5000	; 0x1388
 800561a:	2107      	movs	r1, #7
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f94b 	bl	80058b8 <SDMMC_GetCmdResp1>
 8005622:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005626:	4618      	mov	r0, r3
 8005628:	3728      	adds	r7, #40	; 0x28
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b088      	sub	sp, #32
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800564a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800564c:	f107 0308 	add.w	r3, r7, #8
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fe85 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb65 	bl	8005d28 <SDMMC_GetCmdError>
 800565e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005660:	69fb      	ldr	r3, [r7, #28]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b088      	sub	sp, #32
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005672:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005678:	2308      	movs	r3, #8
 800567a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800567c:	2340      	movs	r3, #64	; 0x40
 800567e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fe66 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 faf8 	bl	8005c8c <SDMMC_GetCmdResp7>
 800569c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800569e:	69fb      	ldr	r3, [r7, #28]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056b6:	2337      	movs	r3, #55	; 0x37
 80056b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056ba:	2340      	movs	r3, #64	; 0x40
 80056bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fe47 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80056d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d8:	2137      	movs	r1, #55	; 0x37
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8ec 	bl	80058b8 <SDMMC_GetCmdResp1>
 80056e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e2:	69fb      	ldr	r3, [r7, #28]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005702:	2329      	movs	r3, #41	; 0x29
 8005704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005706:	2340      	movs	r3, #64	; 0x40
 8005708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800570e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005712:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005714:	f107 0308 	add.w	r3, r7, #8
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fe21 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f9ff 	bl	8005b24 <SDMMC_GetCmdResp3>
 8005726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005728:	69fb      	ldr	r3, [r7, #28]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b088      	sub	sp, #32
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005740:	2306      	movs	r3, #6
 8005742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800574c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005750:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fe02 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800575e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005762:	2106      	movs	r1, #6
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f8a7 	bl	80058b8 <SDMMC_GetCmdResp1>
 800576a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800576c:	69fb      	ldr	r3, [r7, #28]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b088      	sub	sp, #32
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005782:	2333      	movs	r3, #51	; 0x33
 8005784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005786:	2340      	movs	r3, #64	; 0x40
 8005788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800578e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005792:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005794:	f107 0308 	add.w	r3, r7, #8
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fde1 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	2133      	movs	r1, #51	; 0x33
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f886 	bl	80058b8 <SDMMC_GetCmdResp1>
 80057ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ae:	69fb      	ldr	r3, [r7, #28]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057c4:	2302      	movs	r3, #2
 80057c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057c8:	23c0      	movs	r3, #192	; 0xc0
 80057ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fdc0 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f956 	bl	8005a94 <SDMMC_GetCmdResp2>
 80057e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ea:	69fb      	ldr	r3, [r7, #28]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005802:	2309      	movs	r3, #9
 8005804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005806:	23c0      	movs	r3, #192	; 0xc0
 8005808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800580e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005812:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005814:	f107 0308 	add.w	r3, r7, #8
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fda1 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f937 	bl	8005a94 <SDMMC_GetCmdResp2>
 8005826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005828:	69fb      	ldr	r3, [r7, #28]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b088      	sub	sp, #32
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005840:	2303      	movs	r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005850:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fd82 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	2103      	movs	r1, #3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f99c 	bl	8005ba0 <SDMMC_GetCmdResp6>
 8005868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800586a:	69fb      	ldr	r3, [r7, #28]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005882:	230d      	movs	r3, #13
 8005884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800588e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005892:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005894:	f107 0308 	add.w	r3, r7, #8
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fd61 	bl	8005362 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	210d      	movs	r1, #13
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f806 	bl	80058b8 <SDMMC_GetCmdResp1>
 80058ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ae:	69fb      	ldr	r3, [r7, #28]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	460b      	mov	r3, r1
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80058c6:	4b70      	ldr	r3, [pc, #448]	; (8005a88 <SDMMC_GetCmdResp1+0x1d0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a70      	ldr	r2, [pc, #448]	; (8005a8c <SDMMC_GetCmdResp1+0x1d4>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	0a5a      	lsrs	r2, r3, #9
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	61fa      	str	r2, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058e8:	e0c9      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0ef      	beq.n	80058da <SDMMC_GetCmdResp1+0x22>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1ea      	bne.n	80058da <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2204      	movs	r2, #4
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005916:	2304      	movs	r3, #4
 8005918:	e0b1      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800592c:	2301      	movs	r3, #1
 800592e:	e0a6      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	22c5      	movs	r2, #197	; 0xc5
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff fd3d 	bl	80053b6 <SDIO_GetCommandResponse>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	4293      	cmp	r3, r2
 8005944:	d001      	beq.n	800594a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005946:	2301      	movs	r3, #1
 8005948:	e099      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800594a:	2100      	movs	r1, #0
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f7ff fd3f 	bl	80053d0 <SDIO_GetResponse>
 8005952:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4b4e      	ldr	r3, [pc, #312]	; (8005a90 <SDMMC_GetCmdResp1+0x1d8>)
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800595e:	2300      	movs	r3, #0
 8005960:	e08d      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	da02      	bge.n	800596e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800596c:	e087      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	e080      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	e079      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005998:	e071      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80059a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059a8:	e069      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80059b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059b8:	e061      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80059c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059c8:	e059      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80059d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059d8:	e051      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80059e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059e8:	e049      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80059f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059f8:	e041      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a08:	e039      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a18:	e031      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a28:	e029      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005a38:	e021      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005a44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a48:	e019      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005a54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a58:	e011      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005a64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a68:	e009      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005a74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a78:	e001      	b.n	8005a7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000000 	.word	0x20000000
 8005a8c:	10624dd3 	.word	0x10624dd3
 8005a90:	fdffe008 	.word	0xfdffe008

08005a94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a9c:	4b1f      	ldr	r3, [pc, #124]	; (8005b1c <SDMMC_GetCmdResp2+0x88>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <SDMMC_GetCmdResp2+0x8c>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	0a5b      	lsrs	r3, r3, #9
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1e5a      	subs	r2, r3, #1
 8005ab6:	60fa      	str	r2, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005abc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ac0:	e026      	b.n	8005b10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0ef      	beq.n	8005ab2 <SDMMC_GetCmdResp2+0x1e>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ea      	bne.n	8005ab2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2204      	movs	r2, #4
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005aee:	2304      	movs	r3, #4
 8005af0:	e00e      	b.n	8005b10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e003      	b.n	8005b10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	22c5      	movs	r2, #197	; 0xc5
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	20000000 	.word	0x20000000
 8005b20:	10624dd3 	.word	0x10624dd3

08005b24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <SDMMC_GetCmdResp3+0x74>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <SDMMC_GetCmdResp3+0x78>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	0a5b      	lsrs	r3, r3, #9
 8005b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3c:	fb02 f303 	mul.w	r3, r2, r3
 8005b40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1e5a      	subs	r2, r3, #1
 8005b46:	60fa      	str	r2, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b50:	e01b      	b.n	8005b8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0ef      	beq.n	8005b42 <SDMMC_GetCmdResp3+0x1e>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ea      	bne.n	8005b42 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b7e:	2304      	movs	r3, #4
 8005b80:	e003      	b.n	8005b8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	22c5      	movs	r2, #197	; 0xc5
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	10624dd3 	.word	0x10624dd3

08005ba0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bae:	4b35      	ldr	r3, [pc, #212]	; (8005c84 <SDMMC_GetCmdResp6+0xe4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a35      	ldr	r2, [pc, #212]	; (8005c88 <SDMMC_GetCmdResp6+0xe8>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	0a5b      	lsrs	r3, r3, #9
 8005bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	61fa      	str	r2, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bd2:	e052      	b.n	8005c7a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ef      	beq.n	8005bc4 <SDMMC_GetCmdResp6+0x24>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ea      	bne.n	8005bc4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c00:	2304      	movs	r3, #4
 8005c02:	e03a      	b.n	8005c7a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e02f      	b.n	8005c7a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7ff fbcb 	bl	80053b6 <SDIO_GetCommandResponse>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	7afb      	ldrb	r3, [r7, #11]
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d001      	beq.n	8005c2e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e025      	b.n	8005c7a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22c5      	movs	r2, #197	; 0xc5
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c34:	2100      	movs	r1, #0
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff fbca 	bl	80053d0 <SDIO_GetResponse>
 8005c3c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e011      	b.n	8005c7a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c64:	e009      	b.n	8005c7a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c74:	e001      	b.n	8005c7a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000000 	.word	0x20000000
 8005c88:	10624dd3 	.word	0x10624dd3

08005c8c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <SDMMC_GetCmdResp7+0x94>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a22      	ldr	r2, [pc, #136]	; (8005d24 <SDMMC_GetCmdResp7+0x98>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0a5b      	lsrs	r3, r3, #9
 8005ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1e5a      	subs	r2, r3, #1
 8005cae:	60fa      	str	r2, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cb8:	e02c      	b.n	8005d14 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ef      	beq.n	8005caa <SDMMC_GetCmdResp7+0x1e>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ea      	bne.n	8005caa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ce6:	2304      	movs	r3, #4
 8005ce8:	e014      	b.n	8005d14 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e009      	b.n	8005d14 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2240      	movs	r2, #64	; 0x40
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d12:	2300      	movs	r3, #0
  
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20000000 	.word	0x20000000
 8005d24:	10624dd3 	.word	0x10624dd3

08005d28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d30:	4b11      	ldr	r3, [pc, #68]	; (8005d78 <SDMMC_GetCmdError+0x50>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a11      	ldr	r2, [pc, #68]	; (8005d7c <SDMMC_GetCmdError+0x54>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	0a5b      	lsrs	r3, r3, #9
 8005d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1e5a      	subs	r2, r3, #1
 8005d4a:	60fa      	str	r2, [r7, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d54:	e009      	b.n	8005d6a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f1      	beq.n	8005d46 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	22c5      	movs	r2, #197	; 0xc5
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000000 	.word	0x20000000
 8005d7c:	10624dd3 	.word	0x10624dd3

08005d80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d84:	4904      	ldr	r1, [pc, #16]	; (8005d98 <MX_FATFS_Init+0x18>)
 8005d86:	4805      	ldr	r0, [pc, #20]	; (8005d9c <MX_FATFS_Init+0x1c>)
 8005d88:	f002 fef8 	bl	8008b7c <FATFS_LinkDriver>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <MX_FATFS_Init+0x20>)
 8005d92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d94:	bf00      	nop
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20002344 	.word	0x20002344
 8005d9c:	080099dc 	.word	0x080099dc
 8005da0:	20002340 	.word	0x20002340

08005da4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005da8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005dbe:	f000 f8ac 	bl	8005f1a <BSP_SD_IsDetected>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d001      	beq.n	8005dcc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e012      	b.n	8005df2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005dcc:	480b      	ldr	r0, [pc, #44]	; (8005dfc <BSP_SD_Init+0x48>)
 8005dce:	f7fd fa83 	bl	80032d8 <HAL_SD_Init>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d109      	bne.n	8005df0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005de0:	4806      	ldr	r0, [pc, #24]	; (8005dfc <BSP_SD_Init+0x48>)
 8005de2:	f7fe f9dd 	bl	80041a0 <HAL_SD_ConfigWideBusOperation>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005df0:	79fb      	ldrb	r3, [r7, #7]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20002118 	.word	0x20002118

08005e00 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	4806      	ldr	r0, [pc, #24]	; (8005e38 <BSP_SD_ReadBlocks+0x38>)
 8005e1e:	f7fd fb0b 	bl	8003438 <HAL_SD_ReadBlocks>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20002118 	.word	0x20002118

08005e3c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	4806      	ldr	r0, [pc, #24]	; (8005e74 <BSP_SD_WriteBlocks+0x38>)
 8005e5a:	f7fd fccb 	bl	80037f4 <HAL_SD_WriteBlocks>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20002118 	.word	0x20002118

08005e78 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e7c:	4805      	ldr	r0, [pc, #20]	; (8005e94 <BSP_SD_GetCardState+0x1c>)
 8005e7e:	f7fe fa29 	bl	80042d4 <HAL_SD_GetCardState>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20002118 	.word	0x20002118

08005e98 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4803      	ldr	r0, [pc, #12]	; (8005eb0 <BSP_SD_GetCardInfo+0x18>)
 8005ea4:	f7fe f950 	bl	8004148 <HAL_SD_GetCardInfo>
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20002118 	.word	0x20002118

08005eb4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005ebc:	f000 f818 	bl	8005ef0 <BSP_SD_AbortCallback>
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005ed0:	f000 f815 	bl	8005efe <BSP_SD_WriteCpltCallback>
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005ee4:	f000 f812 	bl	8005f0c <BSP_SD_ReadCpltCallback>
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0

}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0

}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0

}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005f20:	2301      	movs	r3, #1
 8005f22:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005f24:	f000 f80c 	bl	8005f40 <BSP_PlatformIsDetected>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	b2db      	uxtb	r3, r3
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005f46:	2301      	movs	r3, #1
 8005f48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f4e:	4806      	ldr	r0, [pc, #24]	; (8005f68 <BSP_PlatformIsDetected+0x28>)
 8005f50:	f7fc f898 	bl	8002084 <HAL_GPIO_ReadPin>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40020400 	.word	0x40020400

08005f6c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <SD_CheckStatus+0x38>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005f7c:	f7ff ff7c 	bl	8005e78 <BSP_SD_GetCardState>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d107      	bne.n	8005f96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f86:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <SD_CheckStatus+0x38>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <SD_CheckStatus+0x38>)
 8005f94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f96:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <SD_CheckStatus+0x38>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	b2db      	uxtb	r3, r3
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000009 	.word	0x20000009

08005fa8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <SD_initialize+0x38>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005fb8:	f7ff fefc 	bl	8005db4 <BSP_SD_Init>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d107      	bne.n	8005fd2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ffd1 	bl	8005f6c <SD_CheckStatus>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <SD_initialize+0x38>)
 8005fd0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005fd2:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <SD_initialize+0x38>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b2db      	uxtb	r3, r3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000009 	.word	0x20000009

08005fe4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff ffbb 	bl	8005f6c <SD_CheckStatus>
 8005ff6:	4603      	mov	r3, r0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	68b8      	ldr	r0, [r7, #8]
 800601e:	f7ff feef 	bl	8005e00 <BSP_SD_ReadBlocks>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006028:	bf00      	nop
 800602a:	f7ff ff25 	bl	8005e78 <BSP_SD_GetCardState>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1fa      	bne.n	800602a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006038:	7dfb      	ldrb	r3, [r7, #23]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	4603      	mov	r3, r0
 8006050:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	68b8      	ldr	r0, [r7, #8]
 8006060:	f7ff feec 	bl	8005e3c <BSP_SD_WriteBlocks>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d107      	bne.n	800607a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800606a:	bf00      	nop
 800606c:	f7ff ff04 	bl	8005e78 <BSP_SD_GetCardState>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1fa      	bne.n	800606c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800607a:	7dfb      	ldrb	r3, [r7, #23]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	603a      	str	r2, [r7, #0]
 800608e:	71fb      	strb	r3, [r7, #7]
 8006090:	460b      	mov	r3, r1
 8006092:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800609a:	4b25      	ldr	r3, [pc, #148]	; (8006130 <SD_ioctl+0xac>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <SD_ioctl+0x28>
 80060a8:	2303      	movs	r3, #3
 80060aa:	e03c      	b.n	8006126 <SD_ioctl+0xa2>

  switch (cmd)
 80060ac:	79bb      	ldrb	r3, [r7, #6]
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d834      	bhi.n	800611c <SD_ioctl+0x98>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <SD_ioctl+0x34>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060d1 	.word	0x080060d1
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	08006103 	.word	0x08006103
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80060ce:	e028      	b.n	8006122 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80060d0:	f107 030c 	add.w	r3, r7, #12
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fedf 	bl	8005e98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80060da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80060e6:	e01c      	b.n	8006122 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff fed3 	bl	8005e98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006100:	e00f      	b.n	8006122 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006102:	f107 030c 	add.w	r3, r7, #12
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fec6 	bl	8005e98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	0a5a      	lsrs	r2, r3, #9
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800611a:	e002      	b.n	8006122 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800611c:	2304      	movs	r3, #4
 800611e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006126:	4618      	mov	r0, r3
 8006128:	3730      	adds	r7, #48	; 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000009 	.word	0x20000009

08006134 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	4a08      	ldr	r2, [pc, #32]	; (8006164 <disk_status+0x30>)
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	79fa      	ldrb	r2, [r7, #7]
 800614c:	4905      	ldr	r1, [pc, #20]	; (8006164 <disk_status+0x30>)
 800614e:	440a      	add	r2, r1
 8006150:	7a12      	ldrb	r2, [r2, #8]
 8006152:	4610      	mov	r0, r2
 8006154:	4798      	blx	r3
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]
  return stat;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	200033a4 	.word	0x200033a4

08006168 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	4a0d      	ldr	r2, [pc, #52]	; (80061b0 <disk_initialize+0x48>)
 800617a:	5cd3      	ldrb	r3, [r2, r3]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d111      	bne.n	80061a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	4a0b      	ldr	r2, [pc, #44]	; (80061b0 <disk_initialize+0x48>)
 8006184:	2101      	movs	r1, #1
 8006186:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <disk_initialize+0x48>)
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	79fa      	ldrb	r2, [r7, #7]
 8006196:	4906      	ldr	r1, [pc, #24]	; (80061b0 <disk_initialize+0x48>)
 8006198:	440a      	add	r2, r1
 800619a:	7a12      	ldrb	r2, [r2, #8]
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200033a4 	.word	0x200033a4

080061b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	4a0a      	ldr	r2, [pc, #40]	; (80061f0 <disk_read+0x3c>)
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	689c      	ldr	r4, [r3, #8]
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	4a07      	ldr	r2, [pc, #28]	; (80061f0 <disk_read+0x3c>)
 80061d4:	4413      	add	r3, r2
 80061d6:	7a18      	ldrb	r0, [r3, #8]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	47a0      	blx	r4
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd90      	pop	{r4, r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200033a4 	.word	0x200033a4

080061f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	4603      	mov	r3, r0
 8006202:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <disk_write+0x3c>)
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68dc      	ldr	r4, [r3, #12]
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	4a07      	ldr	r2, [pc, #28]	; (8006230 <disk_write+0x3c>)
 8006214:	4413      	add	r3, r2
 8006216:	7a18      	ldrb	r0, [r3, #8]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	47a0      	blx	r4
 8006220:	4603      	mov	r3, r0
 8006222:	75fb      	strb	r3, [r7, #23]
  return res;
 8006224:	7dfb      	ldrb	r3, [r7, #23]
}
 8006226:	4618      	mov	r0, r3
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	bd90      	pop	{r4, r7, pc}
 800622e:	bf00      	nop
 8006230:	200033a4 	.word	0x200033a4

08006234 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	603a      	str	r2, [r7, #0]
 800623e:	71fb      	strb	r3, [r7, #7]
 8006240:	460b      	mov	r3, r1
 8006242:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	4a09      	ldr	r2, [pc, #36]	; (800626c <disk_ioctl+0x38>)
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	79fa      	ldrb	r2, [r7, #7]
 8006252:	4906      	ldr	r1, [pc, #24]	; (800626c <disk_ioctl+0x38>)
 8006254:	440a      	add	r2, r1
 8006256:	7a10      	ldrb	r0, [r2, #8]
 8006258:	79b9      	ldrb	r1, [r7, #6]
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4798      	blx	r3
 800625e:	4603      	mov	r3, r0
 8006260:	73fb      	strb	r3, [r7, #15]
  return res;
 8006262:	7bfb      	ldrb	r3, [r7, #15]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	200033a4 	.word	0x200033a4

08006270 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3301      	adds	r3, #1
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006280:	89fb      	ldrh	r3, [r7, #14]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	b21a      	sxth	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	b21b      	sxth	r3, r3
 800628c:	4313      	orrs	r3, r2
 800628e:	b21b      	sxth	r3, r3
 8006290:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006292:	89fb      	ldrh	r3, [r7, #14]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3303      	adds	r3, #3
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	3202      	adds	r2, #2
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	3201      	adds	r2, #1
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80062d8:	68fb      	ldr	r3, [r7, #12]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	887a      	ldrh	r2, [r7, #2]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	887a      	ldrh	r2, [r7, #2]
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	0a1b      	lsrs	r3, r3, #8
 8006348:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00d      	beq.n	80063aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	1c53      	adds	r3, r2, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	6179      	str	r1, [r7, #20]
 800639a:	7812      	ldrb	r2, [r2, #0]
 800639c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f1      	bne.n	800638e <mem_cpy+0x1a>
	}
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	617a      	str	r2, [r7, #20]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f3      	bne.n	80063c6 <mem_set+0x10>
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80063ec:	b480      	push	{r7}
 80063ee:	b089      	sub	sp, #36	; 0x24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	61fa      	str	r2, [r7, #28]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4619      	mov	r1, r3
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	61ba      	str	r2, [r7, #24]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	1acb      	subs	r3, r1, r3
 8006418:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3b01      	subs	r3, #1
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <mem_cmp+0x40>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0eb      	beq.n	8006404 <mem_cmp+0x18>

	return r;
 800642c:	697b      	ldr	r3, [r7, #20]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3724      	adds	r7, #36	; 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006444:	e002      	b.n	800644c <chk_chr+0x12>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3301      	adds	r3, #1
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <chk_chr+0x26>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	4293      	cmp	r3, r2
 800645e:	d1f2      	bne.n	8006446 <chk_chr+0xc>
	return *str;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	781b      	ldrb	r3, [r3, #0]
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e029      	b.n	80064d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006484:	4a27      	ldr	r2, [pc, #156]	; (8006524 <chk_lock+0xb4>)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	4413      	add	r3, r2
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01d      	beq.n	80064ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006492:	4a24      	ldr	r2, [pc, #144]	; (8006524 <chk_lock+0xb4>)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	4413      	add	r3, r2
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d116      	bne.n	80064d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80064a4:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <chk_lock+0xb4>)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	4413      	add	r3, r2
 80064ac:	3304      	adds	r3, #4
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d10c      	bne.n	80064d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064b8:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <chk_lock+0xb4>)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	4413      	add	r3, r2
 80064c0:	3308      	adds	r3, #8
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d102      	bne.n	80064d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064cc:	e007      	b.n	80064de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3301      	adds	r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d9d2      	bls.n	8006484 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d109      	bne.n	80064f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <chk_lock+0x80>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d101      	bne.n	80064f4 <chk_lock+0x84>
 80064f0:	2300      	movs	r3, #0
 80064f2:	e010      	b.n	8006516 <chk_lock+0xa6>
 80064f4:	2312      	movs	r3, #18
 80064f6:	e00e      	b.n	8006516 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d108      	bne.n	8006510 <chk_lock+0xa0>
 80064fe:	4a09      	ldr	r2, [pc, #36]	; (8006524 <chk_lock+0xb4>)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	4413      	add	r3, r2
 8006506:	330c      	adds	r3, #12
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800650e:	d101      	bne.n	8006514 <chk_lock+0xa4>
 8006510:	2310      	movs	r3, #16
 8006512:	e000      	b.n	8006516 <chk_lock+0xa6>
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20003384 	.word	0x20003384

08006528 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	e002      	b.n	800653a <enq_lock+0x12>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3301      	adds	r3, #1
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d806      	bhi.n	800654e <enq_lock+0x26>
 8006540:	4a09      	ldr	r2, [pc, #36]	; (8006568 <enq_lock+0x40>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	4413      	add	r3, r2
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f2      	bne.n	8006534 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b02      	cmp	r3, #2
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
}
 800655a:	4618      	mov	r0, r3
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20003384 	.word	0x20003384

0800656c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e01f      	b.n	80065bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800657c:	4a41      	ldr	r2, [pc, #260]	; (8006684 <inc_lock+0x118>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	4413      	add	r3, r2
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d113      	bne.n	80065b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800658e:	4a3d      	ldr	r2, [pc, #244]	; (8006684 <inc_lock+0x118>)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	4413      	add	r3, r2
 8006596:	3304      	adds	r3, #4
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800659e:	429a      	cmp	r2, r3
 80065a0:	d109      	bne.n	80065b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80065a2:	4a38      	ldr	r2, [pc, #224]	; (8006684 <inc_lock+0x118>)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	4413      	add	r3, r2
 80065aa:	3308      	adds	r3, #8
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d006      	beq.n	80065c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3301      	adds	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d9dc      	bls.n	800657c <inc_lock+0x10>
 80065c2:	e000      	b.n	80065c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80065c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d132      	bne.n	8006632 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e002      	b.n	80065d8 <inc_lock+0x6c>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d806      	bhi.n	80065ec <inc_lock+0x80>
 80065de:	4a29      	ldr	r2, [pc, #164]	; (8006684 <inc_lock+0x118>)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	4413      	add	r3, r2
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f2      	bne.n	80065d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d101      	bne.n	80065f6 <inc_lock+0x8a>
 80065f2:	2300      	movs	r3, #0
 80065f4:	e040      	b.n	8006678 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4922      	ldr	r1, [pc, #136]	; (8006684 <inc_lock+0x118>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	440b      	add	r3, r1
 8006602:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	491e      	ldr	r1, [pc, #120]	; (8006684 <inc_lock+0x118>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	440b      	add	r3, r1
 8006610:	3304      	adds	r3, #4
 8006612:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	491a      	ldr	r1, [pc, #104]	; (8006684 <inc_lock+0x118>)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	440b      	add	r3, r1
 8006620:	3308      	adds	r3, #8
 8006622:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006624:	4a17      	ldr	r2, [pc, #92]	; (8006684 <inc_lock+0x118>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	4413      	add	r3, r2
 800662c:	330c      	adds	r3, #12
 800662e:	2200      	movs	r2, #0
 8006630:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <inc_lock+0xe0>
 8006638:	4a12      	ldr	r2, [pc, #72]	; (8006684 <inc_lock+0x118>)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	4413      	add	r3, r2
 8006640:	330c      	adds	r3, #12
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <inc_lock+0xe0>
 8006648:	2300      	movs	r3, #0
 800664a:	e015      	b.n	8006678 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d108      	bne.n	8006664 <inc_lock+0xf8>
 8006652:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <inc_lock+0x118>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	4413      	add	r3, r2
 800665a:	330c      	adds	r3, #12
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	e001      	b.n	8006668 <inc_lock+0xfc>
 8006664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006668:	4906      	ldr	r1, [pc, #24]	; (8006684 <inc_lock+0x118>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	440b      	add	r3, r1
 8006670:	330c      	adds	r3, #12
 8006672:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	20003384 	.word	0x20003384

08006688 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3b01      	subs	r3, #1
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d825      	bhi.n	80066e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800669c:	4a17      	ldr	r2, [pc, #92]	; (80066fc <dec_lock+0x74>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	4413      	add	r3, r2
 80066a4:	330c      	adds	r3, #12
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80066aa:	89fb      	ldrh	r3, [r7, #14]
 80066ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b0:	d101      	bne.n	80066b6 <dec_lock+0x2e>
 80066b2:	2300      	movs	r3, #0
 80066b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80066b6:	89fb      	ldrh	r3, [r7, #14]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <dec_lock+0x3a>
 80066bc:	89fb      	ldrh	r3, [r7, #14]
 80066be:	3b01      	subs	r3, #1
 80066c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80066c2:	4a0e      	ldr	r2, [pc, #56]	; (80066fc <dec_lock+0x74>)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4413      	add	r3, r2
 80066ca:	330c      	adds	r3, #12
 80066cc:	89fa      	ldrh	r2, [r7, #14]
 80066ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80066d0:	89fb      	ldrh	r3, [r7, #14]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <dec_lock+0x5a>
 80066d6:	4a09      	ldr	r2, [pc, #36]	; (80066fc <dec_lock+0x74>)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	4413      	add	r3, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	737b      	strb	r3, [r7, #13]
 80066e6:	e001      	b.n	80066ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80066e8:	2302      	movs	r3, #2
 80066ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80066ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20003384 	.word	0x20003384

08006700 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e010      	b.n	8006730 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800670e:	4a0d      	ldr	r2, [pc, #52]	; (8006744 <clear_lock+0x44>)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	4413      	add	r3, r2
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	429a      	cmp	r2, r3
 800671c:	d105      	bne.n	800672a <clear_lock+0x2a>
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <clear_lock+0x44>)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	4413      	add	r3, r2
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d9eb      	bls.n	800670e <clear_lock+0xe>
	}
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20003384 	.word	0x20003384

08006748 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	78db      	ldrb	r3, [r3, #3]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d034      	beq.n	80067c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	7858      	ldrb	r0, [r3, #1]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800676c:	2301      	movs	r3, #1
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	f7ff fd40 	bl	80061f4 <disk_write>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <sync_window+0x38>
			res = FR_DISK_ERR;
 800677a:	2301      	movs	r3, #1
 800677c:	73fb      	strb	r3, [r7, #15]
 800677e:	e022      	b.n	80067c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	1ad2      	subs	r2, r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	429a      	cmp	r2, r3
 8006794:	d217      	bcs.n	80067c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	789b      	ldrb	r3, [r3, #2]
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	e010      	b.n	80067c0 <sync_window+0x78>
					wsect += fs->fsize;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7858      	ldrb	r0, [r3, #1]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80067b2:	2301      	movs	r3, #1
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	f7ff fd1d 	bl	80061f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	3b01      	subs	r3, #1
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d8eb      	bhi.n	800679e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d01b      	beq.n	8006820 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ffad 	bl	8006748 <sync_window>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d113      	bne.n	8006820 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7858      	ldrb	r0, [r3, #1]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006802:	2301      	movs	r3, #1
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	f7ff fcd5 	bl	80061b4 <disk_read>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006814:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006816:	2301      	movs	r3, #1
 8006818:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ff87 	bl	8006748 <sync_window>
 800683a:	4603      	mov	r3, r0
 800683c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d159      	bne.n	80068f8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d149      	bne.n	80068e0 <sync_fs+0xb4>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	791b      	ldrb	r3, [r3, #4]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d145      	bne.n	80068e0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	899b      	ldrh	r3, [r3, #12]
 800685e:	461a      	mov	r2, r3
 8006860:	2100      	movs	r1, #0
 8006862:	f7ff fda8 	bl	80063b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3334      	adds	r3, #52	; 0x34
 800686a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800686e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fd37 	bl	80062e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3334      	adds	r3, #52	; 0x34
 800687c:	4921      	ldr	r1, [pc, #132]	; (8006904 <sync_fs+0xd8>)
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fd4c 	bl	800631c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3334      	adds	r3, #52	; 0x34
 8006888:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800688c:	491e      	ldr	r1, [pc, #120]	; (8006908 <sync_fs+0xdc>)
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fd44 	bl	800631c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3334      	adds	r3, #52	; 0x34
 8006898:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f7ff fd3a 	bl	800631c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3334      	adds	r3, #52	; 0x34
 80068ac:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7ff fd30 	bl	800631c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	7858      	ldrb	r0, [r3, #1]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d4:	2301      	movs	r3, #1
 80068d6:	f7ff fc8d 	bl	80061f4 <disk_write>
			fs->fsi_flag = 0;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	785b      	ldrb	r3, [r3, #1]
 80068e4:	2200      	movs	r2, #0
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff fca3 	bl	8006234 <disk_ioctl>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <sync_fs+0xcc>
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	41615252 	.word	0x41615252
 8006908:	61417272 	.word	0x61417272

0800690c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	3b02      	subs	r3, #2
 800691a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	3b02      	subs	r3, #2
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d301      	bcc.n	800692c <clust2sect+0x20>
 8006928:	2300      	movs	r3, #0
 800692a:	e008      	b.n	800693e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	895b      	ldrh	r3, [r3, #10]
 8006930:	461a      	mov	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	fb03 f202 	mul.w	r2, r3, r2
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	4413      	add	r3, r2
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b086      	sub	sp, #24
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d904      	bls.n	800696a <get_fat+0x20>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <get_fat+0x26>
		val = 1;	/* Internal error */
 800696a:	2301      	movs	r3, #1
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	e0bb      	b.n	8006ae8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006974:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b03      	cmp	r3, #3
 800697c:	f000 8083 	beq.w	8006a86 <get_fat+0x13c>
 8006980:	2b03      	cmp	r3, #3
 8006982:	f300 80a7 	bgt.w	8006ad4 <get_fat+0x18a>
 8006986:	2b01      	cmp	r3, #1
 8006988:	d002      	beq.n	8006990 <get_fat+0x46>
 800698a:	2b02      	cmp	r3, #2
 800698c:	d056      	beq.n	8006a3c <get_fat+0xf2>
 800698e:	e0a1      	b.n	8006ad4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	085b      	lsrs	r3, r3, #1
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	899b      	ldrh	r3, [r3, #12]
 80069a6:	4619      	mov	r1, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ae:	4413      	add	r3, r2
 80069b0:	4619      	mov	r1, r3
 80069b2:	6938      	ldr	r0, [r7, #16]
 80069b4:	f7ff ff0c 	bl	80067d0 <move_window>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f040 808d 	bne.w	8006ada <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	60fa      	str	r2, [r7, #12]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	8992      	ldrh	r2, [r2, #12]
 80069ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80069ce:	fb01 f202 	mul.w	r2, r1, r2
 80069d2:	1a9b      	subs	r3, r3, r2
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4413      	add	r3, r2
 80069d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	899b      	ldrh	r3, [r3, #12]
 80069e6:	4619      	mov	r1, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ee:	4413      	add	r3, r2
 80069f0:	4619      	mov	r1, r3
 80069f2:	6938      	ldr	r0, [r7, #16]
 80069f4:	f7ff feec 	bl	80067d0 <move_window>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d16f      	bne.n	8006ade <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	899b      	ldrh	r3, [r3, #12]
 8006a02:	461a      	mov	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a0a:	fb01 f202 	mul.w	r2, r1, r2
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4413      	add	r3, r2
 8006a14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <get_fat+0xe8>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	091b      	lsrs	r3, r3, #4
 8006a30:	e002      	b.n	8006a38 <get_fat+0xee>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a38:	617b      	str	r3, [r7, #20]
			break;
 8006a3a:	e055      	b.n	8006ae8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	899b      	ldrh	r3, [r3, #12]
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4619      	mov	r1, r3
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a50:	4413      	add	r3, r2
 8006a52:	4619      	mov	r1, r3
 8006a54:	6938      	ldr	r0, [r7, #16]
 8006a56:	f7ff febb 	bl	80067d0 <move_window>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d140      	bne.n	8006ae2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	8992      	ldrh	r2, [r2, #12]
 8006a6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a72:	fb00 f202 	mul.w	r2, r0, r2
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	440b      	add	r3, r1
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fbf8 	bl	8006270 <ld_word>
 8006a80:	4603      	mov	r3, r0
 8006a82:	617b      	str	r3, [r7, #20]
			break;
 8006a84:	e030      	b.n	8006ae8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	899b      	ldrh	r3, [r3, #12]
 8006a8e:	089b      	lsrs	r3, r3, #2
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	4619      	mov	r1, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6938      	ldr	r0, [r7, #16]
 8006aa0:	f7ff fe96 	bl	80067d0 <move_window>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d11d      	bne.n	8006ae6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	8992      	ldrh	r2, [r2, #12]
 8006ab8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006abc:	fb00 f202 	mul.w	r2, r0, r2
 8006ac0:	1a9b      	subs	r3, r3, r2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fbeb 	bl	80062a0 <ld_dword>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ad0:	617b      	str	r3, [r7, #20]
			break;
 8006ad2:	e009      	b.n	8006ae8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e006      	b.n	8006ae8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ada:	bf00      	nop
 8006adc:	e004      	b.n	8006ae8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ade:	bf00      	nop
 8006ae0:	e002      	b.n	8006ae8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ae2:	bf00      	nop
 8006ae4:	e000      	b.n	8006ae8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ae6:	bf00      	nop
		}
	}

	return val;
 8006ae8:	697b      	ldr	r3, [r7, #20]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006af2:	b590      	push	{r4, r7, lr}
 8006af4:	b089      	sub	sp, #36	; 0x24
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006afe:	2302      	movs	r3, #2
 8006b00:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	f240 8102 	bls.w	8006d0e <put_fat+0x21c>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	f080 80fc 	bcs.w	8006d0e <put_fat+0x21c>
		switch (fs->fs_type) {
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	f000 80b6 	beq.w	8006c8c <put_fat+0x19a>
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	f300 80fd 	bgt.w	8006d20 <put_fat+0x22e>
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d003      	beq.n	8006b32 <put_fat+0x40>
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	f000 8083 	beq.w	8006c36 <put_fat+0x144>
 8006b30:	e0f6      	b.n	8006d20 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	085b      	lsrs	r3, r3, #1
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	899b      	ldrh	r3, [r3, #12]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b50:	4413      	add	r3, r2
 8006b52:	4619      	mov	r1, r3
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff fe3b 	bl	80067d0 <move_window>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b5e:	7ffb      	ldrb	r3, [r7, #31]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f040 80d6 	bne.w	8006d12 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	61ba      	str	r2, [r7, #24]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	8992      	ldrh	r2, [r2, #12]
 8006b76:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b7a:	fb00 f202 	mul.w	r2, r0, r2
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	440b      	add	r3, r1
 8006b82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00d      	beq.n	8006baa <put_fat+0xb8>
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	b25a      	sxtb	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	b25b      	sxtb	r3, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	b25b      	sxtb	r3, r3
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	e001      	b.n	8006bae <put_fat+0xbc>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	899b      	ldrh	r3, [r3, #12]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bc8:	4413      	add	r3, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fdff 	bl	80067d0 <move_window>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bd6:	7ffb      	ldrb	r3, [r7, #31]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f040 809c 	bne.w	8006d16 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	899b      	ldrh	r3, [r3, #12]
 8006be8:	461a      	mov	r2, r3
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bf0:	fb00 f202 	mul.w	r2, r0, r2
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <put_fat+0x11a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	091b      	lsrs	r3, r3, #4
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	e00e      	b.n	8006c2a <put_fat+0x138>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	f023 030f 	bic.w	r3, r3, #15
 8006c16:	b25a      	sxtb	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	0a1b      	lsrs	r3, r3, #8
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	4313      	orrs	r3, r2
 8006c26:	b25b      	sxtb	r3, r3
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	70da      	strb	r2, [r3, #3]
			break;
 8006c34:	e074      	b.n	8006d20 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	899b      	ldrh	r3, [r3, #12]
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	4619      	mov	r1, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c4a:	4413      	add	r3, r2
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f7ff fdbe 	bl	80067d0 <move_window>
 8006c54:	4603      	mov	r3, r0
 8006c56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c58:	7ffb      	ldrb	r3, [r7, #31]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d15d      	bne.n	8006d1a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	8992      	ldrh	r2, [r2, #12]
 8006c6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c70:	fb00 f202 	mul.w	r2, r0, r2
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	440b      	add	r3, r1
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fb31 	bl	80062e6 <st_word>
			fs->wflag = 1;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	70da      	strb	r2, [r3, #3]
			break;
 8006c8a:	e049      	b.n	8006d20 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	899b      	ldrh	r3, [r3, #12]
 8006c94:	089b      	lsrs	r3, r3, #2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff fd93 	bl	80067d0 <move_window>
 8006caa:	4603      	mov	r3, r0
 8006cac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cae:	7ffb      	ldrb	r3, [r7, #31]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d134      	bne.n	8006d1e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	8992      	ldrh	r2, [r2, #12]
 8006cc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ccc:	fb00 f202 	mul.w	r2, r0, r2
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff fae3 	bl	80062a0 <ld_dword>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ce0:	4323      	orrs	r3, r4
 8006ce2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	8992      	ldrh	r2, [r2, #12]
 8006cf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cf6:	fb00 f202 	mul.w	r2, r0, r2
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	440b      	add	r3, r1
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fb0b 	bl	800631c <st_dword>
			fs->wflag = 1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	70da      	strb	r2, [r3, #3]
			break;
 8006d0c:	e008      	b.n	8006d20 <put_fat+0x22e>
		}
	}
 8006d0e:	bf00      	nop
 8006d10:	e006      	b.n	8006d20 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006d12:	bf00      	nop
 8006d14:	e004      	b.n	8006d20 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006d1e:	bf00      	nop
	return res;
 8006d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3724      	adds	r7, #36	; 0x24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd90      	pop	{r4, r7, pc}

08006d2a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d904      	bls.n	8006d50 <remove_chain+0x26>
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d301      	bcc.n	8006d54 <remove_chain+0x2a>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e04b      	b.n	8006dec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00c      	beq.n	8006d74 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	69b8      	ldr	r0, [r7, #24]
 8006d62:	f7ff fec6 	bl	8006af2 <put_fat>
 8006d66:	4603      	mov	r3, r0
 8006d68:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006d6a:	7ffb      	ldrb	r3, [r7, #31]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <remove_chain+0x4a>
 8006d70:	7ffb      	ldrb	r3, [r7, #31]
 8006d72:	e03b      	b.n	8006dec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff fde7 	bl	800694a <get_fat>
 8006d7c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d031      	beq.n	8006de8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <remove_chain+0x64>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e02e      	b.n	8006dec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d94:	d101      	bne.n	8006d9a <remove_chain+0x70>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e028      	b.n	8006dec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	69b8      	ldr	r0, [r7, #24]
 8006da0:	f7ff fea7 	bl	8006af2 <put_fat>
 8006da4:	4603      	mov	r3, r0
 8006da6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006da8:	7ffb      	ldrb	r3, [r7, #31]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <remove_chain+0x88>
 8006dae:	7ffb      	ldrb	r3, [r7, #31]
 8006db0:	e01c      	b.n	8006dec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	3b02      	subs	r3, #2
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d20b      	bcs.n	8006dd8 <remove_chain+0xae>
			fs->free_clst++;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	f043 0301 	orr.w	r3, r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d3c6      	bcc.n	8006d74 <remove_chain+0x4a>
 8006de6:	e000      	b.n	8006dea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006de8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3720      	adds	r7, #32
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10d      	bne.n	8006e26 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <create_chain+0x2c>
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d31b      	bcc.n	8006e58 <create_chain+0x64>
 8006e20:	2301      	movs	r3, #1
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	e018      	b.n	8006e58 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff fd8e 	bl	800694a <get_fat>
 8006e2e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d801      	bhi.n	8006e3a <create_chain+0x46>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e070      	b.n	8006f1c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e40:	d101      	bne.n	8006e46 <create_chain+0x52>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	e06a      	b.n	8006f1c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d201      	bcs.n	8006e54 <create_chain+0x60>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	e063      	b.n	8006f1c <create_chain+0x128>
		scl = clst;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	69fa      	ldr	r2, [r7, #28]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d307      	bcc.n	8006e7c <create_chain+0x88>
				ncl = 2;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d901      	bls.n	8006e7c <create_chain+0x88>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e04f      	b.n	8006f1c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006e7c:	69f9      	ldr	r1, [r7, #28]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fd63 	bl	800694a <get_fat>
 8006e84:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d003      	beq.n	8006e9a <create_chain+0xa6>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e98:	d101      	bne.n	8006e9e <create_chain+0xaa>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	e03e      	b.n	8006f1c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d1da      	bne.n	8006e5c <create_chain+0x68>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e038      	b.n	8006f1c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006eaa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eb0:	69f9      	ldr	r1, [r7, #28]
 8006eb2:	6938      	ldr	r0, [r7, #16]
 8006eb4:	f7ff fe1d 	bl	8006af2 <put_fat>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <create_chain+0xe2>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d006      	beq.n	8006ed6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6938      	ldr	r0, [r7, #16]
 8006ece:	f7ff fe10 	bl	8006af2 <put_fat>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d116      	bne.n	8006f0a <create_chain+0x116>
		fs->last_clst = ncl;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	3b02      	subs	r3, #2
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d804      	bhi.n	8006efa <create_chain+0x106>
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	1e5a      	subs	r2, r3, #1
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	791b      	ldrb	r3, [r3, #4]
 8006efe:	f043 0301 	orr.w	r3, r3, #1
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	711a      	strb	r2, [r3, #4]
 8006f08:	e007      	b.n	8006f1a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d102      	bne.n	8006f16 <create_chain+0x122>
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f14:	e000      	b.n	8006f18 <create_chain+0x124>
 8006f16:	2301      	movs	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006f1a:	69fb      	ldr	r3, [r7, #28]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	3304      	adds	r3, #4
 8006f3a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	899b      	ldrh	r3, [r3, #12]
 8006f40:	461a      	mov	r2, r3
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	8952      	ldrh	r2, [r2, #10]
 8006f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1d1a      	adds	r2, r3, #4
 8006f56:	613a      	str	r2, [r7, #16]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <clmt_clust+0x42>
 8006f62:	2300      	movs	r3, #0
 8006f64:	e010      	b.n	8006f88 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d307      	bcc.n	8006f7e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f7c:	e7e9      	b.n	8006f52 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006f7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	4413      	add	r3, r2
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	371c      	adds	r7, #28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006faa:	d204      	bcs.n	8006fb6 <dir_sdi+0x22>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <dir_sdi+0x26>
		return FR_INT_ERR;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e071      	b.n	800709e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <dir_sdi+0x46>
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d902      	bls.n	8006fda <dir_sdi+0x46>
		clst = fs->dirbase;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10c      	bne.n	8006ffa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	8912      	ldrh	r2, [r2, #8]
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d301      	bcc.n	8006ff0 <dir_sdi+0x5c>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e056      	b.n	800709e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	61da      	str	r2, [r3, #28]
 8006ff8:	e02d      	b.n	8007056 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	895b      	ldrh	r3, [r3, #10]
 8006ffe:	461a      	mov	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	899b      	ldrh	r3, [r3, #12]
 8007004:	fb02 f303 	mul.w	r3, r2, r3
 8007008:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800700a:	e019      	b.n	8007040 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6979      	ldr	r1, [r7, #20]
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff fc9a 	bl	800694a <get_fat>
 8007016:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800701e:	d101      	bne.n	8007024 <dir_sdi+0x90>
 8007020:	2301      	movs	r3, #1
 8007022:	e03c      	b.n	800709e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d904      	bls.n	8007034 <dir_sdi+0xa0>
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	429a      	cmp	r2, r3
 8007032:	d301      	bcc.n	8007038 <dir_sdi+0xa4>
 8007034:	2302      	movs	r3, #2
 8007036:	e032      	b.n	800709e <dir_sdi+0x10a>
			ofs -= csz;
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	429a      	cmp	r2, r3
 8007046:	d2e1      	bcs.n	800700c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007048:	6979      	ldr	r1, [r7, #20]
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f7ff fc5e 	bl	800690c <clust2sect>
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <dir_sdi+0xd4>
 8007064:	2302      	movs	r3, #2
 8007066:	e01a      	b.n	800709e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	899b      	ldrh	r3, [r3, #12]
 8007070:	4619      	mov	r1, r3
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	fbb3 f3f1 	udiv	r3, r3, r1
 8007078:	441a      	add	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	899b      	ldrh	r3, [r3, #12]
 8007088:	461a      	mov	r2, r3
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007090:	fb00 f202 	mul.w	r2, r0, r2
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	18ca      	adds	r2, r1, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	3320      	adds	r3, #32
 80070bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <dir_next+0x28>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070cc:	d301      	bcc.n	80070d2 <dir_next+0x2c>
 80070ce:	2304      	movs	r3, #4
 80070d0:	e0bb      	b.n	800724a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	899b      	ldrh	r3, [r3, #12]
 80070d6:	461a      	mov	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	fbb3 f1f2 	udiv	r1, r3, r2
 80070de:	fb01 f202 	mul.w	r2, r1, r2
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 809d 	bne.w	8007224 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	8912      	ldrh	r2, [r2, #8]
 8007104:	4293      	cmp	r3, r2
 8007106:	f0c0 808d 	bcc.w	8007224 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	61da      	str	r2, [r3, #28]
 8007110:	2304      	movs	r3, #4
 8007112:	e09a      	b.n	800724a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	899b      	ldrh	r3, [r3, #12]
 8007118:	461a      	mov	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	8952      	ldrh	r2, [r2, #10]
 8007124:	3a01      	subs	r2, #1
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d17b      	bne.n	8007224 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f7ff fc08 	bl	800694a <get_fat>
 800713a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d801      	bhi.n	8007146 <dir_next+0xa0>
 8007142:	2302      	movs	r3, #2
 8007144:	e081      	b.n	800724a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800714c:	d101      	bne.n	8007152 <dir_next+0xac>
 800714e:	2301      	movs	r3, #1
 8007150:	e07b      	b.n	800724a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	429a      	cmp	r2, r3
 800715a:	d359      	bcc.n	8007210 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d104      	bne.n	800716c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	61da      	str	r2, [r3, #28]
 8007168:	2304      	movs	r3, #4
 800716a:	e06e      	b.n	800724a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7ff fe3d 	bl	8006df4 <create_chain>
 800717a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <dir_next+0xe0>
 8007182:	2307      	movs	r3, #7
 8007184:	e061      	b.n	800724a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <dir_next+0xea>
 800718c:	2302      	movs	r3, #2
 800718e:	e05c      	b.n	800724a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007196:	d101      	bne.n	800719c <dir_next+0xf6>
 8007198:	2301      	movs	r3, #1
 800719a:	e056      	b.n	800724a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff fad3 	bl	8006748 <sync_window>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <dir_next+0x106>
 80071a8:	2301      	movs	r3, #1
 80071aa:	e04e      	b.n	800724a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	899b      	ldrh	r3, [r3, #12]
 80071b6:	461a      	mov	r2, r3
 80071b8:	2100      	movs	r1, #0
 80071ba:	f7ff f8fc 	bl	80063b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	6979      	ldr	r1, [r7, #20]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fba1 	bl	800690c <clust2sect>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
 80071d0:	e012      	b.n	80071f8 <dir_next+0x152>
						fs->wflag = 1;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fab5 	bl	8006748 <sync_window>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <dir_next+0x142>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e030      	b.n	800724a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	3301      	adds	r3, #1
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	895b      	ldrh	r3, [r3, #10]
 80071fc:	461a      	mov	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	4293      	cmp	r3, r2
 8007202:	d3e6      	bcc.n	80071d2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007216:	6979      	ldr	r1, [r7, #20]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff fb77 	bl	800690c <clust2sect>
 800721e:	4602      	mov	r2, r0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	899b      	ldrh	r3, [r3, #12]
 8007234:	461a      	mov	r2, r3
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	fbb3 f0f2 	udiv	r0, r3, r2
 800723c:	fb00 f202 	mul.w	r2, r0, r2
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	18ca      	adds	r2, r1, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007262:	2100      	movs	r1, #0
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff fe95 	bl	8006f94 <dir_sdi>
 800726a:	4603      	mov	r3, r0
 800726c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d12b      	bne.n	80072cc <dir_alloc+0x7a>
		n = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	4619      	mov	r1, r3
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff faa6 	bl	80067d0 <move_window>
 8007284:	4603      	mov	r3, r0
 8007286:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d11d      	bne.n	80072ca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2be5      	cmp	r3, #229	; 0xe5
 8007296:	d004      	beq.n	80072a2 <dir_alloc+0x50>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d107      	bne.n	80072b2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3301      	adds	r3, #1
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d102      	bne.n	80072b6 <dir_alloc+0x64>
 80072b0:	e00c      	b.n	80072cc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80072b6:	2101      	movs	r1, #1
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff fef4 	bl	80070a6 <dir_next>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0d7      	beq.n	8007278 <dir_alloc+0x26>
 80072c8:	e000      	b.n	80072cc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80072ca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d101      	bne.n	80072d6 <dir_alloc+0x84>
 80072d2:	2307      	movs	r3, #7
 80072d4:	75fb      	strb	r3, [r7, #23]
	return res;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	331a      	adds	r3, #26
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe ffbe 	bl	8006270 <ld_word>
 80072f4:	4603      	mov	r3, r0
 80072f6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d109      	bne.n	8007314 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	3314      	adds	r3, #20
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe ffb3 	bl	8006270 <ld_word>
 800730a:	4603      	mov	r3, r0
 800730c:	041b      	lsls	r3, r3, #16
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007314:	68fb      	ldr	r3, [r7, #12]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	331a      	adds	r3, #26
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	b292      	uxth	r2, r2
 8007332:	4611      	mov	r1, r2
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe ffd6 	bl	80062e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d109      	bne.n	8007356 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f103 0214 	add.w	r2, r3, #20
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	b29b      	uxth	r3, r3
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe ffc8 	bl	80062e6 <st_word>
	}
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b086      	sub	sp, #24
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007368:	2304      	movs	r3, #4
 800736a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007372:	e03c      	b.n	80073ee <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	4619      	mov	r1, r3
 800737a:	6938      	ldr	r0, [r7, #16]
 800737c:	f7ff fa28 	bl	80067d0 <move_window>
 8007380:	4603      	mov	r3, r0
 8007382:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d136      	bne.n	80073f8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007398:	2304      	movs	r3, #4
 800739a:	75fb      	strb	r3, [r7, #23]
 800739c:	e031      	b.n	8007402 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	330b      	adds	r3, #11
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073aa:	73bb      	strb	r3, [r7, #14]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	7bba      	ldrb	r2, [r7, #14]
 80073b0:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	2be5      	cmp	r3, #229	; 0xe5
 80073b6:	d011      	beq.n	80073dc <dir_read+0x7e>
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	2b2e      	cmp	r3, #46	; 0x2e
 80073bc:	d00e      	beq.n	80073dc <dir_read+0x7e>
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d00b      	beq.n	80073dc <dir_read+0x7e>
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	f023 0320 	bic.w	r3, r3, #32
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	bf0c      	ite	eq
 80073ce:	2301      	moveq	r3, #1
 80073d0:	2300      	movne	r3, #0
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00f      	beq.n	80073fc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80073dc:	2100      	movs	r1, #0
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fe61 	bl	80070a6 <dir_next>
 80073e4:	4603      	mov	r3, r0
 80073e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d108      	bne.n	8007400 <dir_read+0xa2>
	while (dp->sect) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1be      	bne.n	8007374 <dir_read+0x16>
 80073f6:	e004      	b.n	8007402 <dir_read+0xa4>
		if (res != FR_OK) break;
 80073f8:	bf00      	nop
 80073fa:	e002      	b.n	8007402 <dir_read+0xa4>
				break;
 80073fc:	bf00      	nop
 80073fe:	e000      	b.n	8007402 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007400:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <dir_read+0xb0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	61da      	str	r2, [r3, #28]
	return res;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007426:	2100      	movs	r1, #0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fdb3 	bl	8006f94 <dir_sdi>
 800742e:	4603      	mov	r3, r0
 8007430:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <dir_find+0x24>
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	e03e      	b.n	80074ba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	4619      	mov	r1, r3
 8007442:	6938      	ldr	r0, [r7, #16]
 8007444:	f7ff f9c4 	bl	80067d0 <move_window>
 8007448:	4603      	mov	r3, r0
 800744a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d12f      	bne.n	80074b2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <dir_find+0x4e>
 8007460:	2304      	movs	r3, #4
 8007462:	75fb      	strb	r3, [r7, #23]
 8007464:	e028      	b.n	80074b8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	330b      	adds	r3, #11
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007472:	b2da      	uxtb	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	330b      	adds	r3, #11
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <dir_find+0x86>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a18      	ldr	r0, [r3, #32]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3324      	adds	r3, #36	; 0x24
 8007490:	220b      	movs	r2, #11
 8007492:	4619      	mov	r1, r3
 8007494:	f7fe ffaa 	bl	80063ec <mem_cmp>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800749e:	2100      	movs	r1, #0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff fe00 	bl	80070a6 <dir_next>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0c5      	beq.n	800743c <dir_find+0x24>
 80074b0:	e002      	b.n	80074b8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80074b6:	bf00      	nop

	return res;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80074d0:	2101      	movs	r1, #1
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff febd 	bl	8007252 <dir_alloc>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d11c      	bne.n	800751c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	4619      	mov	r1, r3
 80074e8:	68b8      	ldr	r0, [r7, #8]
 80074ea:	f7ff f971 	bl	80067d0 <move_window>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d111      	bne.n	800751c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	2220      	movs	r2, #32
 80074fe:	2100      	movs	r1, #0
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe ff58 	bl	80063b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a18      	ldr	r0, [r3, #32]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3324      	adds	r3, #36	; 0x24
 800750e:	220b      	movs	r2, #11
 8007510:	4619      	mov	r1, r3
 8007512:	f7fe ff2f 	bl	8006374 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2201      	movs	r2, #1
 800751a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4619      	mov	r1, r3
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff f948 	bl	80067d0 <move_window>
 8007540:	4603      	mov	r3, r0
 8007542:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	22e5      	movs	r2, #229	; 0xe5
 8007550:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8007558:	7afb      	ldrb	r3, [r7, #11]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2200      	movs	r2, #0
 8007570:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d04e      	beq.n	8007618 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007582:	e021      	b.n	80075c8 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1a      	ldr	r2, [r3, #32]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	1c59      	adds	r1, r3, #1
 800758c:	6179      	str	r1, [r7, #20]
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b20      	cmp	r3, #32
 8007598:	d100      	bne.n	800759c <get_fileinfo+0x3a>
 800759a:	e015      	b.n	80075c8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d101      	bne.n	80075a6 <get_fileinfo+0x44>
 80075a2:	23e5      	movs	r3, #229	; 0xe5
 80075a4:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	d106      	bne.n	80075ba <get_fileinfo+0x58>
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	613a      	str	r2, [r7, #16]
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	4413      	add	r3, r2
 80075b6:	222e      	movs	r2, #46	; 0x2e
 80075b8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	613a      	str	r2, [r7, #16]
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	4413      	add	r3, r2
 80075c4:	7bfa      	ldrb	r2, [r7, #15]
 80075c6:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2b0a      	cmp	r3, #10
 80075cc:	d9da      	bls.n	8007584 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	4413      	add	r3, r2
 80075d4:	3309      	adds	r3, #9
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	7ada      	ldrb	r2, [r3, #11]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	331c      	adds	r3, #28
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fe58 	bl	80062a0 <ld_dword>
 80075f0:	4602      	mov	r2, r0
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	3316      	adds	r3, #22
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fe4f 	bl	80062a0 <ld_dword>
 8007602:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	b29a      	uxth	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	80da      	strh	r2, [r3, #6]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	0c1b      	lsrs	r3, r3, #16
 8007610:	b29a      	uxth	r2, r3
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	809a      	strh	r2, [r3, #4]
 8007616:	e000      	b.n	800761a <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007618:	bf00      	nop
}
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007636:	220b      	movs	r2, #11
 8007638:	2120      	movs	r1, #32
 800763a:	68b8      	ldr	r0, [r7, #8]
 800763c:	f7fe febb 	bl	80063b6 <mem_set>
	si = i = 0; ni = 8;
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	2308      	movs	r3, #8
 800764a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	61fa      	str	r2, [r7, #28]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800765a:	7efb      	ldrb	r3, [r7, #27]
 800765c:	2b20      	cmp	r3, #32
 800765e:	d94e      	bls.n	80076fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007660:	7efb      	ldrb	r3, [r7, #27]
 8007662:	2b2f      	cmp	r3, #47	; 0x2f
 8007664:	d006      	beq.n	8007674 <create_name+0x54>
 8007666:	7efb      	ldrb	r3, [r7, #27]
 8007668:	2b5c      	cmp	r3, #92	; 0x5c
 800766a:	d110      	bne.n	800768e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800766c:	e002      	b.n	8007674 <create_name+0x54>
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3301      	adds	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b2f      	cmp	r3, #47	; 0x2f
 800767e:	d0f6      	beq.n	800766e <create_name+0x4e>
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b5c      	cmp	r3, #92	; 0x5c
 800768a:	d0f0      	beq.n	800766e <create_name+0x4e>
			break;
 800768c:	e038      	b.n	8007700 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800768e:	7efb      	ldrb	r3, [r7, #27]
 8007690:	2b2e      	cmp	r3, #46	; 0x2e
 8007692:	d003      	beq.n	800769c <create_name+0x7c>
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	429a      	cmp	r2, r3
 800769a:	d30c      	bcc.n	80076b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b0b      	cmp	r3, #11
 80076a0:	d002      	beq.n	80076a8 <create_name+0x88>
 80076a2:	7efb      	ldrb	r3, [r7, #27]
 80076a4:	2b2e      	cmp	r3, #46	; 0x2e
 80076a6:	d001      	beq.n	80076ac <create_name+0x8c>
 80076a8:	2306      	movs	r3, #6
 80076aa:	e044      	b.n	8007736 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80076ac:	2308      	movs	r3, #8
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	230b      	movs	r3, #11
 80076b2:	617b      	str	r3, [r7, #20]
			continue;
 80076b4:	e022      	b.n	80076fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80076b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	da04      	bge.n	80076c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80076be:	7efb      	ldrb	r3, [r7, #27]
 80076c0:	3b80      	subs	r3, #128	; 0x80
 80076c2:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <create_name+0x120>)
 80076c4:	5cd3      	ldrb	r3, [r2, r3]
 80076c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80076c8:	7efb      	ldrb	r3, [r7, #27]
 80076ca:	4619      	mov	r1, r3
 80076cc:	481d      	ldr	r0, [pc, #116]	; (8007744 <create_name+0x124>)
 80076ce:	f7fe feb4 	bl	800643a <chk_chr>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <create_name+0xbc>
 80076d8:	2306      	movs	r3, #6
 80076da:	e02c      	b.n	8007736 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80076dc:	7efb      	ldrb	r3, [r7, #27]
 80076de:	2b60      	cmp	r3, #96	; 0x60
 80076e0:	d905      	bls.n	80076ee <create_name+0xce>
 80076e2:	7efb      	ldrb	r3, [r7, #27]
 80076e4:	2b7a      	cmp	r3, #122	; 0x7a
 80076e6:	d802      	bhi.n	80076ee <create_name+0xce>
 80076e8:	7efb      	ldrb	r3, [r7, #27]
 80076ea:	3b20      	subs	r3, #32
 80076ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	613a      	str	r2, [r7, #16]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	4413      	add	r3, r2
 80076f8:	7efa      	ldrb	r2, [r7, #27]
 80076fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80076fc:	e7a6      	b.n	800764c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	441a      	add	r2, r3
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <create_name+0xf4>
 8007710:	2306      	movs	r3, #6
 8007712:	e010      	b.n	8007736 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2be5      	cmp	r3, #229	; 0xe5
 800771a:	d102      	bne.n	8007722 <create_name+0x102>
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2205      	movs	r2, #5
 8007720:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007722:	7efb      	ldrb	r3, [r7, #27]
 8007724:	2b20      	cmp	r3, #32
 8007726:	d801      	bhi.n	800772c <create_name+0x10c>
 8007728:	2204      	movs	r2, #4
 800772a:	e000      	b.n	800772e <create_name+0x10e>
 800772c:	2200      	movs	r2, #0
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	330b      	adds	r3, #11
 8007732:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007734:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007736:	4618      	mov	r0, r3
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	080099f0 	.word	0x080099f0
 8007744:	08009978 	.word	0x08009978

08007748 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800775c:	e002      	b.n	8007764 <follow_path+0x1c>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b2f      	cmp	r3, #47	; 0x2f
 800776a:	d0f8      	beq.n	800775e <follow_path+0x16>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b5c      	cmp	r3, #92	; 0x5c
 8007772:	d0f4      	beq.n	800775e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2200      	movs	r2, #0
 8007778:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b1f      	cmp	r3, #31
 8007780:	d80a      	bhi.n	8007798 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2280      	movs	r2, #128	; 0x80
 8007786:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800778a:	2100      	movs	r1, #0
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff fc01 	bl	8006f94 <dir_sdi>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]
 8007796:	e048      	b.n	800782a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007798:	463b      	mov	r3, r7
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff3f 	bl	8007620 <create_name>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d139      	bne.n	8007820 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff fe33 	bl	8007418 <dir_find>
 80077b2:	4603      	mov	r3, r0
 80077b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d12c      	bne.n	8007824 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80077ca:	7afb      	ldrb	r3, [r7, #11]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d127      	bne.n	8007824 <follow_path+0xdc>
 80077d4:	2305      	movs	r3, #5
 80077d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80077d8:	e024      	b.n	8007824 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d121      	bne.n	8007828 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	799b      	ldrb	r3, [r3, #6]
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80077f0:	2305      	movs	r3, #5
 80077f2:	75fb      	strb	r3, [r7, #23]
 80077f4:	e019      	b.n	800782a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	8992      	ldrh	r2, [r2, #12]
 8007804:	fbb3 f0f2 	udiv	r0, r3, r2
 8007808:	fb00 f202 	mul.w	r2, r0, r2
 800780c:	1a9b      	subs	r3, r3, r2
 800780e:	440b      	add	r3, r1
 8007810:	4619      	mov	r1, r3
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff fd64 	bl	80072e0 <ld_clust>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800781e:	e7bb      	b.n	8007798 <follow_path+0x50>
			if (res != FR_OK) break;
 8007820:	bf00      	nop
 8007822:	e002      	b.n	800782a <follow_path+0xe2>
				break;
 8007824:	bf00      	nop
 8007826:	e000      	b.n	800782a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007828:	bf00      	nop
			}
		}
	}

	return res;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800783c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007840:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d031      	beq.n	80078ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e002      	b.n	8007858 <get_ldnumber+0x24>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	3301      	adds	r3, #1
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b20      	cmp	r3, #32
 800785e:	d903      	bls.n	8007868 <get_ldnumber+0x34>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b3a      	cmp	r3, #58	; 0x3a
 8007866:	d1f4      	bne.n	8007852 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b3a      	cmp	r3, #58	; 0x3a
 800786e:	d11c      	bne.n	80078aa <get_ldnumber+0x76>
			tp = *path;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	60fa      	str	r2, [r7, #12]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	3b30      	subs	r3, #48	; 0x30
 8007880:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b09      	cmp	r3, #9
 8007886:	d80e      	bhi.n	80078a6 <get_ldnumber+0x72>
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	429a      	cmp	r2, r3
 800788e:	d10a      	bne.n	80078a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d107      	bne.n	80078a6 <get_ldnumber+0x72>
					vol = (int)i;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	3301      	adds	r3, #1
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	e002      	b.n	80078b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80078aa:	2300      	movs	r3, #0
 80078ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80078ae:	693b      	ldr	r3, [r7, #16]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	371c      	adds	r7, #28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	70da      	strb	r2, [r3, #3]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fe ff7a 	bl	80067d0 <move_window>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <check_fs+0x2a>
 80078e2:	2304      	movs	r3, #4
 80078e4:	e038      	b.n	8007958 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3334      	adds	r3, #52	; 0x34
 80078ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fcbe 	bl	8006270 <ld_word>
 80078f4:	4603      	mov	r3, r0
 80078f6:	461a      	mov	r2, r3
 80078f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d001      	beq.n	8007904 <check_fs+0x48>
 8007900:	2303      	movs	r3, #3
 8007902:	e029      	b.n	8007958 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800790a:	2be9      	cmp	r3, #233	; 0xe9
 800790c:	d009      	beq.n	8007922 <check_fs+0x66>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007914:	2beb      	cmp	r3, #235	; 0xeb
 8007916:	d11e      	bne.n	8007956 <check_fs+0x9a>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800791e:	2b90      	cmp	r3, #144	; 0x90
 8007920:	d119      	bne.n	8007956 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3334      	adds	r3, #52	; 0x34
 8007926:	3336      	adds	r3, #54	; 0x36
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fcb9 	bl	80062a0 <ld_dword>
 800792e:	4603      	mov	r3, r0
 8007930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007934:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <check_fs+0xa4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d101      	bne.n	800793e <check_fs+0x82>
 800793a:	2300      	movs	r3, #0
 800793c:	e00c      	b.n	8007958 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3334      	adds	r3, #52	; 0x34
 8007942:	3352      	adds	r3, #82	; 0x52
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe fcab 	bl	80062a0 <ld_dword>
 800794a:	4603      	mov	r3, r0
 800794c:	4a05      	ldr	r2, [pc, #20]	; (8007964 <check_fs+0xa8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d101      	bne.n	8007956 <check_fs+0x9a>
 8007952:	2300      	movs	r3, #0
 8007954:	e000      	b.n	8007958 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007956:	2302      	movs	r3, #2
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	00544146 	.word	0x00544146
 8007964:	33544146 	.word	0x33544146

08007968 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b096      	sub	sp, #88	; 0x58
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff ff59 	bl	8007834 <get_ldnumber>
 8007982:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007986:	2b00      	cmp	r3, #0
 8007988:	da01      	bge.n	800798e <find_volume+0x26>
 800798a:	230b      	movs	r3, #11
 800798c:	e262      	b.n	8007e54 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800798e:	4a9f      	ldr	r2, [pc, #636]	; (8007c0c <find_volume+0x2a4>)
 8007990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007996:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <find_volume+0x3a>
 800799e:	230c      	movs	r3, #12
 80079a0:	e258      	b.n	8007e54 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80079b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01a      	beq.n	80079ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fbb9 	bl	8006134 <disk_status>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80079c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10c      	bne.n	80079ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d007      	beq.n	80079ea <find_volume+0x82>
 80079da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80079e6:	230a      	movs	r3, #10
 80079e8:	e234      	b.n	8007e54 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80079ea:	2300      	movs	r3, #0
 80079ec:	e232      	b.n	8007e54 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80079f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fbb1 	bl	8006168 <disk_initialize>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e21b      	b.n	8007e54 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <find_volume+0xca>
 8007a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a26:	f003 0304 	and.w	r3, r3, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007a2e:	230a      	movs	r3, #10
 8007a30:	e210      	b.n	8007e54 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	7858      	ldrb	r0, [r3, #1]
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	330c      	adds	r3, #12
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	2102      	movs	r1, #2
 8007a3e:	f7fe fbf9 	bl	8006234 <disk_ioctl>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <find_volume+0xe4>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e203      	b.n	8007e54 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	899b      	ldrh	r3, [r3, #12]
 8007a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a54:	d80d      	bhi.n	8007a72 <find_volume+0x10a>
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	899b      	ldrh	r3, [r3, #12]
 8007a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a5e:	d308      	bcc.n	8007a72 <find_volume+0x10a>
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	899b      	ldrh	r3, [r3, #12]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a68:	899b      	ldrh	r3, [r3, #12]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <find_volume+0x10e>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e1ee      	b.n	8007e54 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a7e:	f7ff ff1d 	bl	80078bc <check_fs>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d149      	bne.n	8007b24 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a90:	2300      	movs	r3, #0
 8007a92:	643b      	str	r3, [r7, #64]	; 0x40
 8007a94:	e01e      	b.n	8007ad4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007aa4:	4413      	add	r3, r2
 8007aa6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	3304      	adds	r3, #4
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d006      	beq.n	8007ac0 <find_volume+0x158>
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fbf2 	bl	80062a0 <ld_dword>
 8007abc:	4602      	mov	r2, r0
 8007abe:	e000      	b.n	8007ac2 <find_volume+0x15a>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	3358      	adds	r3, #88	; 0x58
 8007ac8:	443b      	add	r3, r7
 8007aca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d9dd      	bls.n	8007a96 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ada:	2300      	movs	r3, #0
 8007adc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <find_volume+0x182>
 8007ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	3358      	adds	r3, #88	; 0x58
 8007af0:	443b      	add	r3, r7
 8007af2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007af6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <find_volume+0x1a2>
 8007afe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b02:	f7ff fedb 	bl	80078bc <check_fs>
 8007b06:	4603      	mov	r3, r0
 8007b08:	e000      	b.n	8007b0c <find_volume+0x1a4>
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007b10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d905      	bls.n	8007b24 <find_volume+0x1bc>
 8007b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d9e2      	bls.n	8007aea <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d101      	bne.n	8007b30 <find_volume+0x1c8>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e191      	b.n	8007e54 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d901      	bls.n	8007b3c <find_volume+0x1d4>
 8007b38:	230d      	movs	r3, #13
 8007b3a:	e18b      	b.n	8007e54 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	3334      	adds	r3, #52	; 0x34
 8007b40:	330b      	adds	r3, #11
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fb94 	bl	8006270 <ld_word>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	899b      	ldrh	r3, [r3, #12]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d001      	beq.n	8007b58 <find_volume+0x1f0>
 8007b54:	230d      	movs	r3, #13
 8007b56:	e17d      	b.n	8007e54 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	3334      	adds	r3, #52	; 0x34
 8007b5c:	3316      	adds	r3, #22
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fb86 	bl	8006270 <ld_word>
 8007b64:	4603      	mov	r3, r0
 8007b66:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <find_volume+0x214>
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	3334      	adds	r3, #52	; 0x34
 8007b72:	3324      	adds	r3, #36	; 0x24
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe fb93 	bl	80062a0 <ld_dword>
 8007b7a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b80:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	789b      	ldrb	r3, [r3, #2]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d005      	beq.n	8007ba0 <find_volume+0x238>
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	789b      	ldrb	r3, [r3, #2]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d001      	beq.n	8007ba0 <find_volume+0x238>
 8007b9c:	230d      	movs	r3, #13
 8007b9e:	e159      	b.n	8007e54 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	789b      	ldrb	r3, [r3, #2]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba8:	fb02 f303 	mul.w	r3, r2, r3
 8007bac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbc:	895b      	ldrh	r3, [r3, #10]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d008      	beq.n	8007bd4 <find_volume+0x26c>
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	895b      	ldrh	r3, [r3, #10]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	895b      	ldrh	r3, [r3, #10]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	4013      	ands	r3, r2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <find_volume+0x270>
 8007bd4:	230d      	movs	r3, #13
 8007bd6:	e13d      	b.n	8007e54 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	3334      	adds	r3, #52	; 0x34
 8007bdc:	3311      	adds	r3, #17
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe fb46 	bl	8006270 <ld_word>
 8007be4:	4603      	mov	r3, r0
 8007be6:	461a      	mov	r2, r3
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	891b      	ldrh	r3, [r3, #8]
 8007bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bf2:	8992      	ldrh	r2, [r2, #12]
 8007bf4:	0952      	lsrs	r2, r2, #5
 8007bf6:	b292      	uxth	r2, r2
 8007bf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bfc:	fb01 f202 	mul.w	r2, r1, r2
 8007c00:	1a9b      	subs	r3, r3, r2
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <find_volume+0x2a8>
 8007c08:	230d      	movs	r3, #13
 8007c0a:	e123      	b.n	8007e54 <find_volume+0x4ec>
 8007c0c:	2000337c 	.word	0x2000337c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	3334      	adds	r3, #52	; 0x34
 8007c14:	3313      	adds	r3, #19
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe fb2a 	bl	8006270 <ld_word>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d106      	bne.n	8007c34 <find_volume+0x2cc>
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	3334      	adds	r3, #52	; 0x34
 8007c2a:	3320      	adds	r3, #32
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe fb37 	bl	80062a0 <ld_dword>
 8007c32:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	3334      	adds	r3, #52	; 0x34
 8007c38:	330e      	adds	r3, #14
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fb18 	bl	8006270 <ld_word>
 8007c40:	4603      	mov	r3, r0
 8007c42:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <find_volume+0x2e6>
 8007c4a:	230d      	movs	r3, #13
 8007c4c:	e102      	b.n	8007e54 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007c4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c52:	4413      	add	r3, r2
 8007c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c56:	8911      	ldrh	r1, [r2, #8]
 8007c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c5a:	8992      	ldrh	r2, [r2, #12]
 8007c5c:	0952      	lsrs	r2, r2, #5
 8007c5e:	b292      	uxth	r2, r2
 8007c60:	fbb1 f2f2 	udiv	r2, r1, r2
 8007c64:	b292      	uxth	r2, r2
 8007c66:	4413      	add	r3, r2
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d201      	bcs.n	8007c76 <find_volume+0x30e>
 8007c72:	230d      	movs	r3, #13
 8007c74:	e0ee      	b.n	8007e54 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7e:	8952      	ldrh	r2, [r2, #10]
 8007c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <find_volume+0x328>
 8007c8c:	230d      	movs	r3, #13
 8007c8e:	e0e1      	b.n	8007e54 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007c90:	2303      	movs	r3, #3
 8007c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d802      	bhi.n	8007ca6 <find_volume+0x33e>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d802      	bhi.n	8007cb6 <find_volume+0x34e>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	1c9a      	adds	r2, r3, #2
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cc2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007cc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc8:	441a      	add	r2, r3
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007cce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	441a      	add	r2, r3
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d11e      	bne.n	8007d1e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	3334      	adds	r3, #52	; 0x34
 8007ce4:	332a      	adds	r3, #42	; 0x2a
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fac2 	bl	8006270 <ld_word>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <find_volume+0x38e>
 8007cf2:	230d      	movs	r3, #13
 8007cf4:	e0ae      	b.n	8007e54 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	891b      	ldrh	r3, [r3, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <find_volume+0x39a>
 8007cfe:	230d      	movs	r3, #13
 8007d00:	e0a8      	b.n	8007e54 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	3334      	adds	r3, #52	; 0x34
 8007d06:	332c      	adds	r3, #44	; 0x2c
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe fac9 	bl	80062a0 <ld_dword>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d1c:	e01f      	b.n	8007d5e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	891b      	ldrh	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <find_volume+0x3c2>
 8007d26:	230d      	movs	r3, #13
 8007d28:	e094      	b.n	8007e54 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d30:	441a      	add	r2, r3
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d103      	bne.n	8007d46 <find_volume+0x3de>
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	e00a      	b.n	8007d5c <find_volume+0x3f4>
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	699a      	ldr	r2, [r3, #24]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	4413      	add	r3, r2
 8007d50:	085a      	lsrs	r2, r3, #1
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007d5c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	69da      	ldr	r2, [r3, #28]
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	899b      	ldrh	r3, [r3, #12]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6a:	440b      	add	r3, r1
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d70:	8989      	ldrh	r1, [r1, #12]
 8007d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d201      	bcs.n	8007d7e <find_volume+0x416>
 8007d7a:	230d      	movs	r3, #13
 8007d7c:	e06a      	b.n	8007e54 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d84:	615a      	str	r2, [r3, #20]
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	2280      	movs	r2, #128	; 0x80
 8007d92:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d149      	bne.n	8007e30 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	3334      	adds	r3, #52	; 0x34
 8007da0:	3330      	adds	r3, #48	; 0x30
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fa64 	bl	8006270 <ld_word>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d140      	bne.n	8007e30 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db0:	3301      	adds	r3, #1
 8007db2:	4619      	mov	r1, r3
 8007db4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007db6:	f7fe fd0b 	bl	80067d0 <move_window>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d137      	bne.n	8007e30 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	3334      	adds	r3, #52	; 0x34
 8007dca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fa4e 	bl	8006270 <ld_word>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d127      	bne.n	8007e30 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	3334      	adds	r3, #52	; 0x34
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fa5b 	bl	80062a0 <ld_dword>
 8007dea:	4603      	mov	r3, r0
 8007dec:	4a1b      	ldr	r2, [pc, #108]	; (8007e5c <find_volume+0x4f4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d11e      	bne.n	8007e30 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	3334      	adds	r3, #52	; 0x34
 8007df6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fa50 	bl	80062a0 <ld_dword>
 8007e00:	4603      	mov	r3, r0
 8007e02:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <find_volume+0x4f8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d113      	bne.n	8007e30 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	3334      	adds	r3, #52	; 0x34
 8007e0c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fa45 	bl	80062a0 <ld_dword>
 8007e16:	4602      	mov	r2, r0
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	3334      	adds	r3, #52	; 0x34
 8007e20:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fa3b 	bl	80062a0 <ld_dword>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007e36:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <find_volume+0x4fc>)
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <find_volume+0x4fc>)
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <find_volume+0x4fc>)
 8007e46:	881a      	ldrh	r2, [r3, #0]
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e4e:	f7fe fc57 	bl	8006700 <clear_lock>
#endif
	return FR_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3758      	adds	r7, #88	; 0x58
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	41615252 	.word	0x41615252
 8007e60:	61417272 	.word	0x61417272
 8007e64:	20003380 	.word	0x20003380

08007e68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007e72:	2309      	movs	r3, #9
 8007e74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01c      	beq.n	8007eb6 <validate+0x4e>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d018      	beq.n	8007eb6 <validate+0x4e>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d013      	beq.n	8007eb6 <validate+0x4e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	889a      	ldrh	r2, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	88db      	ldrh	r3, [r3, #6]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d10c      	bne.n	8007eb6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	785b      	ldrb	r3, [r3, #1]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe f946 	bl	8006134 <disk_status>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <validate+0x4e>
			res = FR_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <validate+0x5a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	e000      	b.n	8007ec4 <validate+0x5c>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	6013      	str	r3, [r2, #0]
	return res;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ee6:	f107 0310 	add.w	r3, r7, #16
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff fca2 	bl	8007834 <get_ldnumber>
 8007ef0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	da01      	bge.n	8007efc <f_mount+0x28>
 8007ef8:	230b      	movs	r3, #11
 8007efa:	e02b      	b.n	8007f54 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007efc:	4a17      	ldr	r2, [pc, #92]	; (8007f5c <f_mount+0x88>)
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007f0c:	69b8      	ldr	r0, [r7, #24]
 8007f0e:	f7fe fbf7 	bl	8006700 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	490d      	ldr	r1, [pc, #52]	; (8007f5c <f_mount+0x88>)
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <f_mount+0x66>
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d001      	beq.n	8007f3e <f_mount+0x6a>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e00a      	b.n	8007f54 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007f3e:	f107 010c 	add.w	r1, r7, #12
 8007f42:	f107 0308 	add.w	r3, r7, #8
 8007f46:	2200      	movs	r2, #0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fd0d 	bl	8007968 <find_volume>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	2000337c 	.word	0x2000337c

08007f60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b098      	sub	sp, #96	; 0x60
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <f_open+0x18>
 8007f74:	2309      	movs	r3, #9
 8007f76:	e1bb      	b.n	80082f0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	f107 0110 	add.w	r1, r7, #16
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff fcec 	bl	8007968 <find_volume>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007f96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 819f 	bne.w	80082de <f_open+0x37e>
		dj.obj.fs = fs;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	f107 0314 	add.w	r3, r7, #20
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fbcb 	bl	8007748 <follow_path>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d11a      	bne.n	8007ff6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007fc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007fc4:	b25b      	sxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da03      	bge.n	8007fd2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007fca:	2306      	movs	r3, #6
 8007fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007fd0:	e011      	b.n	8007ff6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bf14      	ite	ne
 8007fdc:	2301      	movne	r3, #1
 8007fde:	2300      	moveq	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f107 0314 	add.w	r3, r7, #20
 8007fe8:	4611      	mov	r1, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fa40 	bl	8006470 <chk_lock>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	f003 031c 	and.w	r3, r3, #28
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d07f      	beq.n	8008100 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008004:	2b00      	cmp	r3, #0
 8008006:	d017      	beq.n	8008038 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800800c:	2b04      	cmp	r3, #4
 800800e:	d10e      	bne.n	800802e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008010:	f7fe fa8a 	bl	8006528 <enq_lock>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d006      	beq.n	8008028 <f_open+0xc8>
 800801a:	f107 0314 	add.w	r3, r7, #20
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fa4f 	bl	80074c2 <dir_register>
 8008024:	4603      	mov	r3, r0
 8008026:	e000      	b.n	800802a <f_open+0xca>
 8008028:	2312      	movs	r3, #18
 800802a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	f043 0308 	orr.w	r3, r3, #8
 8008034:	71fb      	strb	r3, [r7, #7]
 8008036:	e010      	b.n	800805a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008038:	7ebb      	ldrb	r3, [r7, #26]
 800803a:	f003 0311 	and.w	r3, r3, #17
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <f_open+0xea>
					res = FR_DENIED;
 8008042:	2307      	movs	r3, #7
 8008044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008048:	e007      	b.n	800805a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <f_open+0xfa>
 8008054:	2308      	movs	r3, #8
 8008056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800805a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800805e:	2b00      	cmp	r3, #0
 8008060:	d168      	bne.n	8008134 <f_open+0x1d4>
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d063      	beq.n	8008134 <f_open+0x1d4>
				dw = GET_FATTIME();
 800806c:	f7fd fe9a 	bl	8005da4 <get_fattime>
 8008070:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	330e      	adds	r3, #14
 8008076:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe f94f 	bl	800631c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800807e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008080:	3316      	adds	r3, #22
 8008082:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe f949 	bl	800631c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800808a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808c:	330b      	adds	r3, #11
 800808e:	2220      	movs	r2, #32
 8008090:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008096:	4611      	mov	r1, r2
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff f921 	bl	80072e0 <ld_clust>
 800809e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080a4:	2200      	movs	r2, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff f939 	bl	800731e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80080ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ae:	331c      	adds	r3, #28
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe f932 	bl	800631c <st_dword>
					fs->wflag = 1;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	2201      	movs	r2, #1
 80080bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80080be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d037      	beq.n	8008134 <f_open+0x1d4>
						dw = fs->winsect;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80080ca:	f107 0314 	add.w	r3, r7, #20
 80080ce:	2200      	movs	r2, #0
 80080d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fe29 	bl	8006d2a <remove_chain>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80080de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d126      	bne.n	8008134 <f_open+0x1d4>
							res = move_window(fs, dw);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fb70 	bl	80067d0 <move_window>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080fa:	3a01      	subs	r2, #1
 80080fc:	611a      	str	r2, [r3, #16]
 80080fe:	e019      	b.n	8008134 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008104:	2b00      	cmp	r3, #0
 8008106:	d115      	bne.n	8008134 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008108:	7ebb      	ldrb	r3, [r7, #26]
 800810a:	f003 0310 	and.w	r3, r3, #16
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008112:	2304      	movs	r3, #4
 8008114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008118:	e00c      	b.n	8008134 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <f_open+0x1d4>
 8008124:	7ebb      	ldrb	r3, [r7, #26]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <f_open+0x1d4>
						res = FR_DENIED;
 800812e:	2307      	movs	r3, #7
 8008130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008138:	2b00      	cmp	r3, #0
 800813a:	d128      	bne.n	800818e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	f003 0308 	and.w	r3, r3, #8
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800814c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	bf14      	ite	ne
 8008166:	2301      	movne	r3, #1
 8008168:	2300      	moveq	r3, #0
 800816a:	b2db      	uxtb	r3, r3
 800816c:	461a      	mov	r2, r3
 800816e:	f107 0314 	add.w	r3, r7, #20
 8008172:	4611      	mov	r1, r2
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe f9f9 	bl	800656c <inc_lock>
 800817a:	4602      	mov	r2, r0
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <f_open+0x22e>
 8008188:	2302      	movs	r3, #2
 800818a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800818e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 80a3 	bne.w	80082de <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff f89e 	bl	80072e0 <ld_clust>
 80081a4:	4602      	mov	r2, r0
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	331c      	adds	r3, #28
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe f876 	bl	80062a0 <ld_dword>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	88da      	ldrh	r2, [r3, #6]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	79fa      	ldrb	r2, [r7, #7]
 80081d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3330      	adds	r3, #48	; 0x30
 80081ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe f8e0 	bl	80063b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d06e      	beq.n	80082de <f_open+0x37e>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d06a      	beq.n	80082de <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	895b      	ldrh	r3, [r3, #10]
 8008214:	461a      	mov	r2, r3
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	899b      	ldrh	r3, [r3, #12]
 800821a:	fb02 f303 	mul.w	r3, r2, r3
 800821e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	657b      	str	r3, [r7, #84]	; 0x54
 800822c:	e016      	b.n	800825c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fb89 	bl	800694a <get_fat>
 8008238:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800823a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800823c:	2b01      	cmp	r3, #1
 800823e:	d802      	bhi.n	8008246 <f_open+0x2e6>
 8008240:	2302      	movs	r3, #2
 8008242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800824c:	d102      	bne.n	8008254 <f_open+0x2f4>
 800824e:	2301      	movs	r3, #1
 8008250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	657b      	str	r3, [r7, #84]	; 0x54
 800825c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <f_open+0x30c>
 8008264:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008268:	429a      	cmp	r2, r3
 800826a:	d8e0      	bhi.n	800822e <f_open+0x2ce>
				}
				fp->clust = clst;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008270:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008276:	2b00      	cmp	r3, #0
 8008278:	d131      	bne.n	80082de <f_open+0x37e>
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	899b      	ldrh	r3, [r3, #12]
 800827e:	461a      	mov	r2, r3
 8008280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008282:	fbb3 f1f2 	udiv	r1, r3, r2
 8008286:	fb01 f202 	mul.w	r2, r1, r2
 800828a:	1a9b      	subs	r3, r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d026      	beq.n	80082de <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fb39 	bl	800690c <clust2sect>
 800829a:	6478      	str	r0, [r7, #68]	; 0x44
 800829c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <f_open+0x34a>
						res = FR_INT_ERR;
 80082a2:	2302      	movs	r3, #2
 80082a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082a8:	e019      	b.n	80082de <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	899b      	ldrh	r3, [r3, #12]
 80082ae:	461a      	mov	r2, r3
 80082b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80082b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082b8:	441a      	add	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	7858      	ldrb	r0, [r3, #1]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a1a      	ldr	r2, [r3, #32]
 80082cc:	2301      	movs	r3, #1
 80082ce:	f7fd ff71 	bl	80061b4 <disk_read>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <f_open+0x37e>
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80082de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <f_open+0x38c>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80082ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3760      	adds	r7, #96	; 0x60
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08c      	sub	sp, #48	; 0x30
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f107 0210 	add.w	r2, r7, #16
 8008316:	4611      	mov	r1, r2
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff fda5 	bl	8007e68 <validate>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008328:	2b00      	cmp	r3, #0
 800832a:	d107      	bne.n	800833c <f_write+0x44>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	7d5b      	ldrb	r3, [r3, #21]
 8008330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <f_write+0x4a>
 800833c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008340:	e16a      	b.n	8008618 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	7d1b      	ldrb	r3, [r3, #20]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <f_write+0x5a>
 800834e:	2307      	movs	r3, #7
 8008350:	e162      	b.n	8008618 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	441a      	add	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	429a      	cmp	r2, r3
 8008360:	f080 814c 	bcs.w	80085fc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	43db      	mvns	r3, r3
 800836a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800836c:	e146      	b.n	80085fc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	8992      	ldrh	r2, [r2, #12]
 8008376:	fbb3 f1f2 	udiv	r1, r3, r2
 800837a:	fb01 f202 	mul.w	r2, r1, r2
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	2b00      	cmp	r3, #0
 8008382:	f040 80f1 	bne.w	8008568 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	8992      	ldrh	r2, [r2, #12]
 800838e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	8952      	ldrh	r2, [r2, #10]
 8008396:	3a01      	subs	r2, #1
 8008398:	4013      	ands	r3, r2
 800839a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d143      	bne.n	800842a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10c      	bne.n	80083c4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d11a      	bne.n	80083ec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fd1a 	bl	8006df4 <create_chain>
 80083c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80083c2:	e013      	b.n	80083ec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	4619      	mov	r1, r3
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7fe fda6 	bl	8006f24 <clmt_clust>
 80083d8:	62b8      	str	r0, [r7, #40]	; 0x28
 80083da:	e007      	b.n	80083ec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	4619      	mov	r1, r3
 80083e4:	4610      	mov	r0, r2
 80083e6:	f7fe fd05 	bl	8006df4 <create_chain>
 80083ea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8109 	beq.w	8008606 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d104      	bne.n	8008404 <f_write+0x10c>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2202      	movs	r2, #2
 80083fe:	755a      	strb	r2, [r3, #21]
 8008400:	2302      	movs	r3, #2
 8008402:	e109      	b.n	8008618 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800840a:	d104      	bne.n	8008416 <f_write+0x11e>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	755a      	strb	r2, [r3, #21]
 8008412:	2301      	movs	r3, #1
 8008414:	e100      	b.n	8008618 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800841a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <f_write+0x132>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008428:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	7d1b      	ldrb	r3, [r3, #20]
 800842e:	b25b      	sxtb	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	da18      	bge.n	8008466 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	7858      	ldrb	r0, [r3, #1]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6a1a      	ldr	r2, [r3, #32]
 8008442:	2301      	movs	r3, #1
 8008444:	f7fd fed6 	bl	80061f4 <disk_write>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d004      	beq.n	8008458 <f_write+0x160>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	755a      	strb	r2, [r3, #21]
 8008454:	2301      	movs	r3, #1
 8008456:	e0df      	b.n	8008618 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	7d1b      	ldrb	r3, [r3, #20]
 800845c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008460:	b2da      	uxtb	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fe fa4c 	bl	800690c <clust2sect>
 8008474:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <f_write+0x18e>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	755a      	strb	r2, [r3, #21]
 8008482:	2302      	movs	r3, #2
 8008484:	e0c8      	b.n	8008618 <f_write+0x320>
			sect += csect;
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	4413      	add	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	899b      	ldrh	r3, [r3, #12]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	fbb3 f3f2 	udiv	r3, r3, r2
 800849a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d043      	beq.n	800852a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	4413      	add	r3, r2
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	8952      	ldrh	r2, [r2, #10]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d905      	bls.n	80084bc <f_write+0x1c4>
					cc = fs->csize - csect;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	895b      	ldrh	r3, [r3, #10]
 80084b4:	461a      	mov	r2, r3
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	7858      	ldrb	r0, [r3, #1]
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	69f9      	ldr	r1, [r7, #28]
 80084c6:	f7fd fe95 	bl	80061f4 <disk_write>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <f_write+0x1e2>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	755a      	strb	r2, [r3, #21]
 80084d6:	2301      	movs	r3, #1
 80084d8:	e09e      	b.n	8008618 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1a      	ldr	r2, [r3, #32]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d918      	bls.n	800851a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a1a      	ldr	r2, [r3, #32]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	8992      	ldrh	r2, [r2, #12]
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	18d1      	adds	r1, r2, r3
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	899b      	ldrh	r3, [r3, #12]
 8008506:	461a      	mov	r2, r3
 8008508:	f7fd ff34 	bl	8006374 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	7d1b      	ldrb	r3, [r3, #20]
 8008510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008514:	b2da      	uxtb	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	899b      	ldrh	r3, [r3, #12]
 800851e:	461a      	mov	r2, r3
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	fb02 f303 	mul.w	r3, r2, r3
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008528:	e04b      	b.n	80085c2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	429a      	cmp	r2, r3
 8008532:	d016      	beq.n	8008562 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	699a      	ldr	r2, [r3, #24]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800853c:	429a      	cmp	r2, r3
 800853e:	d210      	bcs.n	8008562 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	7858      	ldrb	r0, [r3, #1]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800854a:	2301      	movs	r3, #1
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	f7fd fe31 	bl	80061b4 <disk_read>
 8008552:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	755a      	strb	r2, [r3, #21]
 800855e:	2301      	movs	r3, #1
 8008560:	e05a      	b.n	8008618 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	899b      	ldrh	r3, [r3, #12]
 800856c:	4618      	mov	r0, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	8992      	ldrh	r2, [r2, #12]
 8008576:	fbb3 f1f2 	udiv	r1, r3, r2
 800857a:	fb01 f202 	mul.w	r2, r1, r2
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	1ac3      	subs	r3, r0, r3
 8008582:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	429a      	cmp	r2, r3
 800858a:	d901      	bls.n	8008590 <f_write+0x298>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	8992      	ldrh	r2, [r2, #12]
 800859e:	fbb3 f0f2 	udiv	r0, r3, r2
 80085a2:	fb00 f202 	mul.w	r2, r0, r2
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	440b      	add	r3, r1
 80085aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ac:	69f9      	ldr	r1, [r7, #28]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fd fee0 	bl	8006374 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	7d1b      	ldrb	r3, [r3, #20]
 80085b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	4413      	add	r3, r2
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	619a      	str	r2, [r3, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	429a      	cmp	r2, r3
 80085e0:	bf38      	it	cc
 80085e2:	461a      	movcc	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	60da      	str	r2, [r3, #12]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	441a      	add	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f47f aeb5 	bne.w	800836e <f_write+0x76>
 8008604:	e000      	b.n	8008608 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008606:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	7d1b      	ldrb	r3, [r3, #20]
 800860c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008610:	b2da      	uxtb	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3730      	adds	r7, #48	; 0x30
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f107 0208 	add.w	r2, r7, #8
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fc19 	bl	8007e68 <validate>
 8008636:	4603      	mov	r3, r0
 8008638:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d168      	bne.n	8008712 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7d1b      	ldrb	r3, [r3, #20]
 8008644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	d062      	beq.n	8008712 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7d1b      	ldrb	r3, [r3, #20]
 8008650:	b25b      	sxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	da15      	bge.n	8008682 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	7858      	ldrb	r0, [r3, #1]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1a      	ldr	r2, [r3, #32]
 8008664:	2301      	movs	r3, #1
 8008666:	f7fd fdc5 	bl	80061f4 <disk_write>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <f_sync+0x54>
 8008670:	2301      	movs	r3, #1
 8008672:	e04f      	b.n	8008714 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7d1b      	ldrb	r3, [r3, #20]
 8008678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867c:	b2da      	uxtb	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008682:	f7fd fb8f 	bl	8005da4 <get_fattime>
 8008686:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f7fe f89d 	bl	80067d0 <move_window>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d138      	bne.n	8008712 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	330b      	adds	r3, #11
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	330b      	adds	r3, #11
 80086b0:	f042 0220 	orr.w	r2, r2, #32
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	461a      	mov	r2, r3
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	f7fe fe2b 	bl	800731e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f103 021c 	add.w	r2, r3, #28
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	4619      	mov	r1, r3
 80086d4:	4610      	mov	r0, r2
 80086d6:	f7fd fe21 	bl	800631c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3316      	adds	r3, #22
 80086de:	6939      	ldr	r1, [r7, #16]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fd fe1b 	bl	800631c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3312      	adds	r3, #18
 80086ea:	2100      	movs	r1, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fd fdfa 	bl	80062e6 <st_word>
					fs->wflag = 1;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2201      	movs	r2, #1
 80086f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe f896 	bl	800682c <sync_fs>
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	7d1b      	ldrb	r3, [r3, #20]
 8008708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870c:	b2da      	uxtb	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008712:	7dfb      	ldrb	r3, [r7, #23]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff ff7b 	bl	8008620 <f_sync>
 800872a:	4603      	mov	r3, r0
 800872c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d118      	bne.n	8008766 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f107 0208 	add.w	r2, r7, #8
 800873a:	4611      	mov	r1, r2
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff fb93 	bl	8007e68 <validate>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10c      	bne.n	8008766 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	4618      	mov	r0, r3
 8008752:	f7fd ff99 	bl	8006688 <dec_lock>
 8008756:	4603      	mov	r3, r0
 8008758:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d102      	bne.n	8008766 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <f_opendir+0x14>
 8008780:	2309      	movs	r3, #9
 8008782:	e064      	b.n	800884e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008788:	f107 010c 	add.w	r1, r7, #12
 800878c:	463b      	mov	r3, r7
 800878e:	2200      	movs	r2, #0
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff f8e9 	bl	8007968 <find_volume>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d14f      	bne.n	8008840 <f_opendir+0xd0>
		obj->fs = fs;
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fe ffcc 	bl	8007748 <follow_path>
 80087b0:	4603      	mov	r3, r0
 80087b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d13d      	bne.n	8008836 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087c0:	b25b      	sxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	db12      	blt.n	80087ec <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	799b      	ldrb	r3, [r3, #6]
 80087ca:	f003 0310 	and.w	r3, r3, #16
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f7fe fd80 	bl	80072e0 <ld_clust>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	609a      	str	r2, [r3, #8]
 80087e6:	e001      	b.n	80087ec <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80087e8:	2305      	movs	r3, #5
 80087ea:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d121      	bne.n	8008836 <f_opendir+0xc6>
				obj->id = fs->id;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	88da      	ldrh	r2, [r3, #6]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80087fa:	2100      	movs	r1, #0
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7fe fbc9 	bl	8006f94 <dir_sdi>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d114      	bne.n	8008836 <f_opendir+0xc6>
					if (obj->sclust) {
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00d      	beq.n	8008830 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008814:	2100      	movs	r1, #0
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7fd fea8 	bl	800656c <inc_lock>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <f_opendir+0xc6>
 800882a:	2312      	movs	r3, #18
 800882c:	75fb      	strb	r3, [r7, #23]
 800882e:	e002      	b.n	8008836 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2200      	movs	r2, #0
 8008834:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	2b04      	cmp	r3, #4
 800883a:	d101      	bne.n	8008840 <f_opendir+0xd0>
 800883c:	2305      	movs	r3, #5
 800883e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <f_opendir+0xdc>
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800884c:	7dfb      	ldrb	r3, [r7, #23]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f107 0208 	add.w	r2, r7, #8
 8008864:	4611      	mov	r1, r2
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fafe 	bl	8007e68 <validate>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d110      	bne.n	8008898 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	4618      	mov	r0, r3
 8008884:	f7fd ff00 	bl	8006688 <dec_lock>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f107 0208 	add.w	r2, r7, #8
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fad7 	bl	8007e68 <validate>
 80088ba:	4603      	mov	r3, r0
 80088bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d126      	bne.n	8008912 <f_readdir+0x70>
		if (!fno) {
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80088ca:	2100      	movs	r1, #0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7fe fb61 	bl	8006f94 <dir_sdi>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
 80088d6:	e01c      	b.n	8008912 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80088d8:	2100      	movs	r1, #0
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7fe fd3f 	bl	800735e <dir_read>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d101      	bne.n	80088ee <f_readdir+0x4c>
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10e      	bne.n	8008912 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7fe fe33 	bl	8007562 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80088fc:	2100      	movs	r1, #0
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fe fbd1 	bl	80070a6 <dir_next>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	2b04      	cmp	r3, #4
 800890c:	d101      	bne.n	8008912 <f_readdir+0x70>
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b090      	sub	sp, #64	; 0x40
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008926:	f107 010c 	add.w	r1, r7, #12
 800892a:	1d3b      	adds	r3, r7, #4
 800892c:	2200      	movs	r2, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff f81a 	bl	8007968 <find_volume>
 8008934:	4603      	mov	r3, r0
 8008936:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800893a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800893e:	2b00      	cmp	r3, #0
 8008940:	d11f      	bne.n	8008982 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	f107 030c 	add.w	r3, r7, #12
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fefc 	bl	8007748 <follow_path>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008956:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800895a:	2b00      	cmp	r3, #0
 800895c:	d111      	bne.n	8008982 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800895e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008962:	b25b      	sxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	da03      	bge.n	8008970 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008968:	2306      	movs	r3, #6
 800896a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800896e:	e008      	b.n	8008982 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <f_stat+0x66>
 8008976:	f107 030c 	add.w	r3, r7, #12
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fdf0 	bl	8007562 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008982:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008986:	4618      	mov	r0, r3
 8008988:	3740      	adds	r7, #64	; 0x40
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b09e      	sub	sp, #120	; 0x78
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800899a:	f107 010c 	add.w	r1, r7, #12
 800899e:	1d3b      	adds	r3, r7, #4
 80089a0:	2202      	movs	r2, #2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe ffe0 	bl	8007968 <find_volume>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80089b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f040 808e 	bne.w	8008ad8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089c2:	4611      	mov	r1, r2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe febf 	bl	8007748 <follow_path>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80089d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d108      	bne.n	80089ea <f_unlink+0x5c>
 80089d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089dc:	2102      	movs	r1, #2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fd fd46 	bl	8006470 <chk_lock>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80089ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d172      	bne.n	8008ad8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80089f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80089f6:	b25b      	sxtb	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	da03      	bge.n	8008a04 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80089fc:	2306      	movs	r3, #6
 80089fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008a02:	e008      	b.n	8008a16 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008a04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008a10:	2307      	movs	r3, #7
 8008a12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8008a16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d134      	bne.n	8008a88 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a22:	4611      	mov	r1, r2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe fc5b 	bl	80072e0 <ld_clust>
 8008a2a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008a2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008a30:	f003 0310 	and.w	r3, r3, #16
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d027      	beq.n	8008a88 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8008a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a3e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008a40:	f107 0310 	add.w	r3, r7, #16
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe faa4 	bl	8006f94 <dir_sdi>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8008a52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d116      	bne.n	8008a88 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008a5a:	f107 0310 	add.w	r3, r7, #16
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fe fc7c 	bl	800735e <dir_read>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008a6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d102      	bne.n	8008a7a <f_unlink+0xec>
 8008a74:	2307      	movs	r3, #7
 8008a76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008a7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d102      	bne.n	8008a88 <f_unlink+0xfa>
 8008a82:	2300      	movs	r3, #0
 8008a84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8008a88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d123      	bne.n	8008ad8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008a90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fd46 	bl	8007526 <dir_remove>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008aa0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10c      	bne.n	8008ac2 <f_unlink+0x134>
 8008aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe f937 	bl	8006d2a <remove_chain>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008ac2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d106      	bne.n	8008ad8 <f_unlink+0x14a>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fd fead 	bl	800682c <sync_fs>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008ad8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3778      	adds	r7, #120	; 0x78
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4613      	mov	r3, r2
 8008af0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008af2:	2301      	movs	r3, #1
 8008af4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008afa:	4b1f      	ldr	r3, [pc, #124]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008afc:	7a5b      	ldrb	r3, [r3, #9]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d131      	bne.n	8008b68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b04:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b06:	7a5b      	ldrb	r3, [r3, #9]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b0e:	2100      	movs	r1, #0
 8008b10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b12:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b14:	7a5b      	ldrb	r3, [r3, #9]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	4a17      	ldr	r2, [pc, #92]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b22:	4b15      	ldr	r3, [pc, #84]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b24:	7a5b      	ldrb	r3, [r3, #9]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b2c:	4413      	add	r3, r2
 8008b2e:	79fa      	ldrb	r2, [r7, #7]
 8008b30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b32:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b34:	7a5b      	ldrb	r3, [r3, #9]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	b2d1      	uxtb	r1, r2
 8008b3c:	4a0e      	ldr	r2, [pc, #56]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b3e:	7251      	strb	r1, [r2, #9]
 8008b40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b42:	7dbb      	ldrb	r3, [r7, #22]
 8008b44:	3330      	adds	r3, #48	; 0x30
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	223a      	movs	r2, #58	; 0x3a
 8008b52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	3302      	adds	r3, #2
 8008b58:	222f      	movs	r2, #47	; 0x2f
 8008b5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	3303      	adds	r3, #3
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	200033a4 	.word	0x200033a4

08008b7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b86:	2200      	movs	r2, #0
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff ffaa 	bl	8008ae4 <FATFS_LinkDriverEx>
 8008b90:	4603      	mov	r3, r0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <__errno>:
 8008b9c:	4b01      	ldr	r3, [pc, #4]	; (8008ba4 <__errno+0x8>)
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	2000000c 	.word	0x2000000c

08008ba8 <__libc_init_array>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	4d0d      	ldr	r5, [pc, #52]	; (8008be0 <__libc_init_array+0x38>)
 8008bac:	4c0d      	ldr	r4, [pc, #52]	; (8008be4 <__libc_init_array+0x3c>)
 8008bae:	1b64      	subs	r4, r4, r5
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	2600      	movs	r6, #0
 8008bb4:	42a6      	cmp	r6, r4
 8008bb6:	d109      	bne.n	8008bcc <__libc_init_array+0x24>
 8008bb8:	4d0b      	ldr	r5, [pc, #44]	; (8008be8 <__libc_init_array+0x40>)
 8008bba:	4c0c      	ldr	r4, [pc, #48]	; (8008bec <__libc_init_array+0x44>)
 8008bbc:	f000 fc9e 	bl	80094fc <_init>
 8008bc0:	1b64      	subs	r4, r4, r5
 8008bc2:	10a4      	asrs	r4, r4, #2
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	42a6      	cmp	r6, r4
 8008bc8:	d105      	bne.n	8008bd6 <__libc_init_array+0x2e>
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd0:	4798      	blx	r3
 8008bd2:	3601      	adds	r6, #1
 8008bd4:	e7ee      	b.n	8008bb4 <__libc_init_array+0xc>
 8008bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bda:	4798      	blx	r3
 8008bdc:	3601      	adds	r6, #1
 8008bde:	e7f2      	b.n	8008bc6 <__libc_init_array+0x1e>
 8008be0:	08009aac 	.word	0x08009aac
 8008be4:	08009aac 	.word	0x08009aac
 8008be8:	08009aac 	.word	0x08009aac
 8008bec:	08009ab0 	.word	0x08009ab0

08008bf0 <malloc>:
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <malloc+0xc>)
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	f000 b87f 	b.w	8008cf8 <_malloc_r>
 8008bfa:	bf00      	nop
 8008bfc:	2000000c 	.word	0x2000000c

08008c00 <free>:
 8008c00:	4b02      	ldr	r3, [pc, #8]	; (8008c0c <free+0xc>)
 8008c02:	4601      	mov	r1, r0
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	f000 b80b 	b.w	8008c20 <_free_r>
 8008c0a:	bf00      	nop
 8008c0c:	2000000c 	.word	0x2000000c

08008c10 <memset>:
 8008c10:	4402      	add	r2, r0
 8008c12:	4603      	mov	r3, r0
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d100      	bne.n	8008c1a <memset+0xa>
 8008c18:	4770      	bx	lr
 8008c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c1e:	e7f9      	b.n	8008c14 <memset+0x4>

08008c20 <_free_r>:
 8008c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c22:	2900      	cmp	r1, #0
 8008c24:	d044      	beq.n	8008cb0 <_free_r+0x90>
 8008c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c2a:	9001      	str	r0, [sp, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c32:	bfb8      	it	lt
 8008c34:	18e4      	addlt	r4, r4, r3
 8008c36:	f000 f903 	bl	8008e40 <__malloc_lock>
 8008c3a:	4a1e      	ldr	r2, [pc, #120]	; (8008cb4 <_free_r+0x94>)
 8008c3c:	9801      	ldr	r0, [sp, #4]
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	b933      	cbnz	r3, 8008c50 <_free_r+0x30>
 8008c42:	6063      	str	r3, [r4, #4]
 8008c44:	6014      	str	r4, [r2, #0]
 8008c46:	b003      	add	sp, #12
 8008c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c4c:	f000 b8fe 	b.w	8008e4c <__malloc_unlock>
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d908      	bls.n	8008c66 <_free_r+0x46>
 8008c54:	6825      	ldr	r5, [r4, #0]
 8008c56:	1961      	adds	r1, r4, r5
 8008c58:	428b      	cmp	r3, r1
 8008c5a:	bf01      	itttt	eq
 8008c5c:	6819      	ldreq	r1, [r3, #0]
 8008c5e:	685b      	ldreq	r3, [r3, #4]
 8008c60:	1949      	addeq	r1, r1, r5
 8008c62:	6021      	streq	r1, [r4, #0]
 8008c64:	e7ed      	b.n	8008c42 <_free_r+0x22>
 8008c66:	461a      	mov	r2, r3
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	b10b      	cbz	r3, 8008c70 <_free_r+0x50>
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d9fa      	bls.n	8008c66 <_free_r+0x46>
 8008c70:	6811      	ldr	r1, [r2, #0]
 8008c72:	1855      	adds	r5, r2, r1
 8008c74:	42a5      	cmp	r5, r4
 8008c76:	d10b      	bne.n	8008c90 <_free_r+0x70>
 8008c78:	6824      	ldr	r4, [r4, #0]
 8008c7a:	4421      	add	r1, r4
 8008c7c:	1854      	adds	r4, r2, r1
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	6011      	str	r1, [r2, #0]
 8008c82:	d1e0      	bne.n	8008c46 <_free_r+0x26>
 8008c84:	681c      	ldr	r4, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	6053      	str	r3, [r2, #4]
 8008c8a:	4421      	add	r1, r4
 8008c8c:	6011      	str	r1, [r2, #0]
 8008c8e:	e7da      	b.n	8008c46 <_free_r+0x26>
 8008c90:	d902      	bls.n	8008c98 <_free_r+0x78>
 8008c92:	230c      	movs	r3, #12
 8008c94:	6003      	str	r3, [r0, #0]
 8008c96:	e7d6      	b.n	8008c46 <_free_r+0x26>
 8008c98:	6825      	ldr	r5, [r4, #0]
 8008c9a:	1961      	adds	r1, r4, r5
 8008c9c:	428b      	cmp	r3, r1
 8008c9e:	bf04      	itt	eq
 8008ca0:	6819      	ldreq	r1, [r3, #0]
 8008ca2:	685b      	ldreq	r3, [r3, #4]
 8008ca4:	6063      	str	r3, [r4, #4]
 8008ca6:	bf04      	itt	eq
 8008ca8:	1949      	addeq	r1, r1, r5
 8008caa:	6021      	streq	r1, [r4, #0]
 8008cac:	6054      	str	r4, [r2, #4]
 8008cae:	e7ca      	b.n	8008c46 <_free_r+0x26>
 8008cb0:	b003      	add	sp, #12
 8008cb2:	bd30      	pop	{r4, r5, pc}
 8008cb4:	200033b0 	.word	0x200033b0

08008cb8 <sbrk_aligned>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4e0e      	ldr	r6, [pc, #56]	; (8008cf4 <sbrk_aligned+0x3c>)
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	6831      	ldr	r1, [r6, #0]
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	b911      	cbnz	r1, 8008cca <sbrk_aligned+0x12>
 8008cc4:	f000 f88c 	bl	8008de0 <_sbrk_r>
 8008cc8:	6030      	str	r0, [r6, #0]
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f000 f887 	bl	8008de0 <_sbrk_r>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	d00a      	beq.n	8008cec <sbrk_aligned+0x34>
 8008cd6:	1cc4      	adds	r4, r0, #3
 8008cd8:	f024 0403 	bic.w	r4, r4, #3
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d007      	beq.n	8008cf0 <sbrk_aligned+0x38>
 8008ce0:	1a21      	subs	r1, r4, r0
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 f87c 	bl	8008de0 <_sbrk_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d101      	bne.n	8008cf0 <sbrk_aligned+0x38>
 8008cec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	200033b4 	.word	0x200033b4

08008cf8 <_malloc_r>:
 8008cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfc:	1ccd      	adds	r5, r1, #3
 8008cfe:	f025 0503 	bic.w	r5, r5, #3
 8008d02:	3508      	adds	r5, #8
 8008d04:	2d0c      	cmp	r5, #12
 8008d06:	bf38      	it	cc
 8008d08:	250c      	movcc	r5, #12
 8008d0a:	2d00      	cmp	r5, #0
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	db01      	blt.n	8008d14 <_malloc_r+0x1c>
 8008d10:	42a9      	cmp	r1, r5
 8008d12:	d905      	bls.n	8008d20 <_malloc_r+0x28>
 8008d14:	230c      	movs	r3, #12
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	2600      	movs	r6, #0
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d20:	4e2e      	ldr	r6, [pc, #184]	; (8008ddc <_malloc_r+0xe4>)
 8008d22:	f000 f88d 	bl	8008e40 <__malloc_lock>
 8008d26:	6833      	ldr	r3, [r6, #0]
 8008d28:	461c      	mov	r4, r3
 8008d2a:	bb34      	cbnz	r4, 8008d7a <_malloc_r+0x82>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f7ff ffc2 	bl	8008cb8 <sbrk_aligned>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	4604      	mov	r4, r0
 8008d38:	d14d      	bne.n	8008dd6 <_malloc_r+0xde>
 8008d3a:	6834      	ldr	r4, [r6, #0]
 8008d3c:	4626      	mov	r6, r4
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	d140      	bne.n	8008dc4 <_malloc_r+0xcc>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	4631      	mov	r1, r6
 8008d46:	4638      	mov	r0, r7
 8008d48:	eb04 0803 	add.w	r8, r4, r3
 8008d4c:	f000 f848 	bl	8008de0 <_sbrk_r>
 8008d50:	4580      	cmp	r8, r0
 8008d52:	d13a      	bne.n	8008dca <_malloc_r+0xd2>
 8008d54:	6821      	ldr	r1, [r4, #0]
 8008d56:	3503      	adds	r5, #3
 8008d58:	1a6d      	subs	r5, r5, r1
 8008d5a:	f025 0503 	bic.w	r5, r5, #3
 8008d5e:	3508      	adds	r5, #8
 8008d60:	2d0c      	cmp	r5, #12
 8008d62:	bf38      	it	cc
 8008d64:	250c      	movcc	r5, #12
 8008d66:	4629      	mov	r1, r5
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff ffa5 	bl	8008cb8 <sbrk_aligned>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d02b      	beq.n	8008dca <_malloc_r+0xd2>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	442b      	add	r3, r5
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	e00e      	b.n	8008d98 <_malloc_r+0xa0>
 8008d7a:	6822      	ldr	r2, [r4, #0]
 8008d7c:	1b52      	subs	r2, r2, r5
 8008d7e:	d41e      	bmi.n	8008dbe <_malloc_r+0xc6>
 8008d80:	2a0b      	cmp	r2, #11
 8008d82:	d916      	bls.n	8008db2 <_malloc_r+0xba>
 8008d84:	1961      	adds	r1, r4, r5
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	6025      	str	r5, [r4, #0]
 8008d8a:	bf18      	it	ne
 8008d8c:	6059      	strne	r1, [r3, #4]
 8008d8e:	6863      	ldr	r3, [r4, #4]
 8008d90:	bf08      	it	eq
 8008d92:	6031      	streq	r1, [r6, #0]
 8008d94:	5162      	str	r2, [r4, r5]
 8008d96:	604b      	str	r3, [r1, #4]
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f104 060b 	add.w	r6, r4, #11
 8008d9e:	f000 f855 	bl	8008e4c <__malloc_unlock>
 8008da2:	f026 0607 	bic.w	r6, r6, #7
 8008da6:	1d23      	adds	r3, r4, #4
 8008da8:	1af2      	subs	r2, r6, r3
 8008daa:	d0b6      	beq.n	8008d1a <_malloc_r+0x22>
 8008dac:	1b9b      	subs	r3, r3, r6
 8008dae:	50a3      	str	r3, [r4, r2]
 8008db0:	e7b3      	b.n	8008d1a <_malloc_r+0x22>
 8008db2:	6862      	ldr	r2, [r4, #4]
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	bf0c      	ite	eq
 8008db8:	6032      	streq	r2, [r6, #0]
 8008dba:	605a      	strne	r2, [r3, #4]
 8008dbc:	e7ec      	b.n	8008d98 <_malloc_r+0xa0>
 8008dbe:	4623      	mov	r3, r4
 8008dc0:	6864      	ldr	r4, [r4, #4]
 8008dc2:	e7b2      	b.n	8008d2a <_malloc_r+0x32>
 8008dc4:	4634      	mov	r4, r6
 8008dc6:	6876      	ldr	r6, [r6, #4]
 8008dc8:	e7b9      	b.n	8008d3e <_malloc_r+0x46>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	603b      	str	r3, [r7, #0]
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f000 f83c 	bl	8008e4c <__malloc_unlock>
 8008dd4:	e7a1      	b.n	8008d1a <_malloc_r+0x22>
 8008dd6:	6025      	str	r5, [r4, #0]
 8008dd8:	e7de      	b.n	8008d98 <_malloc_r+0xa0>
 8008dda:	bf00      	nop
 8008ddc:	200033b0 	.word	0x200033b0

08008de0 <_sbrk_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d06      	ldr	r5, [pc, #24]	; (8008dfc <_sbrk_r+0x1c>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	f7f8 fa74 	bl	80012d8 <_sbrk>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_sbrk_r+0x1a>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_sbrk_r+0x1a>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	200033b8 	.word	0x200033b8

08008e00 <siprintf>:
 8008e00:	b40e      	push	{r1, r2, r3}
 8008e02:	b500      	push	{lr}
 8008e04:	b09c      	sub	sp, #112	; 0x70
 8008e06:	ab1d      	add	r3, sp, #116	; 0x74
 8008e08:	9002      	str	r0, [sp, #8]
 8008e0a:	9006      	str	r0, [sp, #24]
 8008e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e10:	4809      	ldr	r0, [pc, #36]	; (8008e38 <siprintf+0x38>)
 8008e12:	9107      	str	r1, [sp, #28]
 8008e14:	9104      	str	r1, [sp, #16]
 8008e16:	4909      	ldr	r1, [pc, #36]	; (8008e3c <siprintf+0x3c>)
 8008e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e1c:	9105      	str	r1, [sp, #20]
 8008e1e:	6800      	ldr	r0, [r0, #0]
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	a902      	add	r1, sp, #8
 8008e24:	f000 f874 	bl	8008f10 <_svfiprintf_r>
 8008e28:	9b02      	ldr	r3, [sp, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	b01c      	add	sp, #112	; 0x70
 8008e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e34:	b003      	add	sp, #12
 8008e36:	4770      	bx	lr
 8008e38:	2000000c 	.word	0x2000000c
 8008e3c:	ffff0208 	.word	0xffff0208

08008e40 <__malloc_lock>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__malloc_lock+0x8>)
 8008e42:	f000 baf9 	b.w	8009438 <__retarget_lock_acquire_recursive>
 8008e46:	bf00      	nop
 8008e48:	200033bc 	.word	0x200033bc

08008e4c <__malloc_unlock>:
 8008e4c:	4801      	ldr	r0, [pc, #4]	; (8008e54 <__malloc_unlock+0x8>)
 8008e4e:	f000 baf4 	b.w	800943a <__retarget_lock_release_recursive>
 8008e52:	bf00      	nop
 8008e54:	200033bc 	.word	0x200033bc

08008e58 <__ssputs_r>:
 8008e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	688e      	ldr	r6, [r1, #8]
 8008e5e:	429e      	cmp	r6, r3
 8008e60:	4682      	mov	sl, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	4690      	mov	r8, r2
 8008e66:	461f      	mov	r7, r3
 8008e68:	d838      	bhi.n	8008edc <__ssputs_r+0x84>
 8008e6a:	898a      	ldrh	r2, [r1, #12]
 8008e6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e70:	d032      	beq.n	8008ed8 <__ssputs_r+0x80>
 8008e72:	6825      	ldr	r5, [r4, #0]
 8008e74:	6909      	ldr	r1, [r1, #16]
 8008e76:	eba5 0901 	sub.w	r9, r5, r1
 8008e7a:	6965      	ldr	r5, [r4, #20]
 8008e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e84:	3301      	adds	r3, #1
 8008e86:	444b      	add	r3, r9
 8008e88:	106d      	asrs	r5, r5, #1
 8008e8a:	429d      	cmp	r5, r3
 8008e8c:	bf38      	it	cc
 8008e8e:	461d      	movcc	r5, r3
 8008e90:	0553      	lsls	r3, r2, #21
 8008e92:	d531      	bpl.n	8008ef8 <__ssputs_r+0xa0>
 8008e94:	4629      	mov	r1, r5
 8008e96:	f7ff ff2f 	bl	8008cf8 <_malloc_r>
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	b950      	cbnz	r0, 8008eb4 <__ssputs_r+0x5c>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	f8ca 3000 	str.w	r3, [sl]
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb4:	6921      	ldr	r1, [r4, #16]
 8008eb6:	464a      	mov	r2, r9
 8008eb8:	f000 fac0 	bl	800943c <memcpy>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	6126      	str	r6, [r4, #16]
 8008eca:	6165      	str	r5, [r4, #20]
 8008ecc:	444e      	add	r6, r9
 8008ece:	eba5 0509 	sub.w	r5, r5, r9
 8008ed2:	6026      	str	r6, [r4, #0]
 8008ed4:	60a5      	str	r5, [r4, #8]
 8008ed6:	463e      	mov	r6, r7
 8008ed8:	42be      	cmp	r6, r7
 8008eda:	d900      	bls.n	8008ede <__ssputs_r+0x86>
 8008edc:	463e      	mov	r6, r7
 8008ede:	6820      	ldr	r0, [r4, #0]
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	4641      	mov	r1, r8
 8008ee4:	f000 fab8 	bl	8009458 <memmove>
 8008ee8:	68a3      	ldr	r3, [r4, #8]
 8008eea:	1b9b      	subs	r3, r3, r6
 8008eec:	60a3      	str	r3, [r4, #8]
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	4433      	add	r3, r6
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e7db      	b.n	8008eb0 <__ssputs_r+0x58>
 8008ef8:	462a      	mov	r2, r5
 8008efa:	f000 fac7 	bl	800948c <_realloc_r>
 8008efe:	4606      	mov	r6, r0
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d1e1      	bne.n	8008ec8 <__ssputs_r+0x70>
 8008f04:	6921      	ldr	r1, [r4, #16]
 8008f06:	4650      	mov	r0, sl
 8008f08:	f7ff fe8a 	bl	8008c20 <_free_r>
 8008f0c:	e7c7      	b.n	8008e9e <__ssputs_r+0x46>
	...

08008f10 <_svfiprintf_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	4698      	mov	r8, r3
 8008f16:	898b      	ldrh	r3, [r1, #12]
 8008f18:	061b      	lsls	r3, r3, #24
 8008f1a:	b09d      	sub	sp, #116	; 0x74
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	460d      	mov	r5, r1
 8008f20:	4614      	mov	r4, r2
 8008f22:	d50e      	bpl.n	8008f42 <_svfiprintf_r+0x32>
 8008f24:	690b      	ldr	r3, [r1, #16]
 8008f26:	b963      	cbnz	r3, 8008f42 <_svfiprintf_r+0x32>
 8008f28:	2140      	movs	r1, #64	; 0x40
 8008f2a:	f7ff fee5 	bl	8008cf8 <_malloc_r>
 8008f2e:	6028      	str	r0, [r5, #0]
 8008f30:	6128      	str	r0, [r5, #16]
 8008f32:	b920      	cbnz	r0, 8008f3e <_svfiprintf_r+0x2e>
 8008f34:	230c      	movs	r3, #12
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f3c:	e0d1      	b.n	80090e2 <_svfiprintf_r+0x1d2>
 8008f3e:	2340      	movs	r3, #64	; 0x40
 8008f40:	616b      	str	r3, [r5, #20]
 8008f42:	2300      	movs	r3, #0
 8008f44:	9309      	str	r3, [sp, #36]	; 0x24
 8008f46:	2320      	movs	r3, #32
 8008f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f50:	2330      	movs	r3, #48	; 0x30
 8008f52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090fc <_svfiprintf_r+0x1ec>
 8008f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f5a:	f04f 0901 	mov.w	r9, #1
 8008f5e:	4623      	mov	r3, r4
 8008f60:	469a      	mov	sl, r3
 8008f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f66:	b10a      	cbz	r2, 8008f6c <_svfiprintf_r+0x5c>
 8008f68:	2a25      	cmp	r2, #37	; 0x25
 8008f6a:	d1f9      	bne.n	8008f60 <_svfiprintf_r+0x50>
 8008f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f70:	d00b      	beq.n	8008f8a <_svfiprintf_r+0x7a>
 8008f72:	465b      	mov	r3, fp
 8008f74:	4622      	mov	r2, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7ff ff6d 	bl	8008e58 <__ssputs_r>
 8008f7e:	3001      	adds	r0, #1
 8008f80:	f000 80aa 	beq.w	80090d8 <_svfiprintf_r+0x1c8>
 8008f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f86:	445a      	add	r2, fp
 8008f88:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 80a2 	beq.w	80090d8 <_svfiprintf_r+0x1c8>
 8008f94:	2300      	movs	r3, #0
 8008f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f9e:	f10a 0a01 	add.w	sl, sl, #1
 8008fa2:	9304      	str	r3, [sp, #16]
 8008fa4:	9307      	str	r3, [sp, #28]
 8008fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008faa:	931a      	str	r3, [sp, #104]	; 0x68
 8008fac:	4654      	mov	r4, sl
 8008fae:	2205      	movs	r2, #5
 8008fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb4:	4851      	ldr	r0, [pc, #324]	; (80090fc <_svfiprintf_r+0x1ec>)
 8008fb6:	f7f7 f943 	bl	8000240 <memchr>
 8008fba:	9a04      	ldr	r2, [sp, #16]
 8008fbc:	b9d8      	cbnz	r0, 8008ff6 <_svfiprintf_r+0xe6>
 8008fbe:	06d0      	lsls	r0, r2, #27
 8008fc0:	bf44      	itt	mi
 8008fc2:	2320      	movmi	r3, #32
 8008fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc8:	0711      	lsls	r1, r2, #28
 8008fca:	bf44      	itt	mi
 8008fcc:	232b      	movmi	r3, #43	; 0x2b
 8008fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd8:	d015      	beq.n	8009006 <_svfiprintf_r+0xf6>
 8008fda:	9a07      	ldr	r2, [sp, #28]
 8008fdc:	4654      	mov	r4, sl
 8008fde:	2000      	movs	r0, #0
 8008fe0:	f04f 0c0a 	mov.w	ip, #10
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fea:	3b30      	subs	r3, #48	; 0x30
 8008fec:	2b09      	cmp	r3, #9
 8008fee:	d94e      	bls.n	800908e <_svfiprintf_r+0x17e>
 8008ff0:	b1b0      	cbz	r0, 8009020 <_svfiprintf_r+0x110>
 8008ff2:	9207      	str	r2, [sp, #28]
 8008ff4:	e014      	b.n	8009020 <_svfiprintf_r+0x110>
 8008ff6:	eba0 0308 	sub.w	r3, r0, r8
 8008ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8008ffe:	4313      	orrs	r3, r2
 8009000:	9304      	str	r3, [sp, #16]
 8009002:	46a2      	mov	sl, r4
 8009004:	e7d2      	b.n	8008fac <_svfiprintf_r+0x9c>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	1d19      	adds	r1, r3, #4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	9103      	str	r1, [sp, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	bfbb      	ittet	lt
 8009012:	425b      	neglt	r3, r3
 8009014:	f042 0202 	orrlt.w	r2, r2, #2
 8009018:	9307      	strge	r3, [sp, #28]
 800901a:	9307      	strlt	r3, [sp, #28]
 800901c:	bfb8      	it	lt
 800901e:	9204      	strlt	r2, [sp, #16]
 8009020:	7823      	ldrb	r3, [r4, #0]
 8009022:	2b2e      	cmp	r3, #46	; 0x2e
 8009024:	d10c      	bne.n	8009040 <_svfiprintf_r+0x130>
 8009026:	7863      	ldrb	r3, [r4, #1]
 8009028:	2b2a      	cmp	r3, #42	; 0x2a
 800902a:	d135      	bne.n	8009098 <_svfiprintf_r+0x188>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	9203      	str	r2, [sp, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	bfb8      	it	lt
 8009038:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800903c:	3402      	adds	r4, #2
 800903e:	9305      	str	r3, [sp, #20]
 8009040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800910c <_svfiprintf_r+0x1fc>
 8009044:	7821      	ldrb	r1, [r4, #0]
 8009046:	2203      	movs	r2, #3
 8009048:	4650      	mov	r0, sl
 800904a:	f7f7 f8f9 	bl	8000240 <memchr>
 800904e:	b140      	cbz	r0, 8009062 <_svfiprintf_r+0x152>
 8009050:	2340      	movs	r3, #64	; 0x40
 8009052:	eba0 000a 	sub.w	r0, r0, sl
 8009056:	fa03 f000 	lsl.w	r0, r3, r0
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	4303      	orrs	r3, r0
 800905e:	3401      	adds	r4, #1
 8009060:	9304      	str	r3, [sp, #16]
 8009062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009066:	4826      	ldr	r0, [pc, #152]	; (8009100 <_svfiprintf_r+0x1f0>)
 8009068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800906c:	2206      	movs	r2, #6
 800906e:	f7f7 f8e7 	bl	8000240 <memchr>
 8009072:	2800      	cmp	r0, #0
 8009074:	d038      	beq.n	80090e8 <_svfiprintf_r+0x1d8>
 8009076:	4b23      	ldr	r3, [pc, #140]	; (8009104 <_svfiprintf_r+0x1f4>)
 8009078:	bb1b      	cbnz	r3, 80090c2 <_svfiprintf_r+0x1b2>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	3307      	adds	r3, #7
 800907e:	f023 0307 	bic.w	r3, r3, #7
 8009082:	3308      	adds	r3, #8
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	4433      	add	r3, r6
 800908a:	9309      	str	r3, [sp, #36]	; 0x24
 800908c:	e767      	b.n	8008f5e <_svfiprintf_r+0x4e>
 800908e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009092:	460c      	mov	r4, r1
 8009094:	2001      	movs	r0, #1
 8009096:	e7a5      	b.n	8008fe4 <_svfiprintf_r+0xd4>
 8009098:	2300      	movs	r3, #0
 800909a:	3401      	adds	r4, #1
 800909c:	9305      	str	r3, [sp, #20]
 800909e:	4619      	mov	r1, r3
 80090a0:	f04f 0c0a 	mov.w	ip, #10
 80090a4:	4620      	mov	r0, r4
 80090a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090aa:	3a30      	subs	r2, #48	; 0x30
 80090ac:	2a09      	cmp	r2, #9
 80090ae:	d903      	bls.n	80090b8 <_svfiprintf_r+0x1a8>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0c5      	beq.n	8009040 <_svfiprintf_r+0x130>
 80090b4:	9105      	str	r1, [sp, #20]
 80090b6:	e7c3      	b.n	8009040 <_svfiprintf_r+0x130>
 80090b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090bc:	4604      	mov	r4, r0
 80090be:	2301      	movs	r3, #1
 80090c0:	e7f0      	b.n	80090a4 <_svfiprintf_r+0x194>
 80090c2:	ab03      	add	r3, sp, #12
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	462a      	mov	r2, r5
 80090c8:	4b0f      	ldr	r3, [pc, #60]	; (8009108 <_svfiprintf_r+0x1f8>)
 80090ca:	a904      	add	r1, sp, #16
 80090cc:	4638      	mov	r0, r7
 80090ce:	f3af 8000 	nop.w
 80090d2:	1c42      	adds	r2, r0, #1
 80090d4:	4606      	mov	r6, r0
 80090d6:	d1d6      	bne.n	8009086 <_svfiprintf_r+0x176>
 80090d8:	89ab      	ldrh	r3, [r5, #12]
 80090da:	065b      	lsls	r3, r3, #25
 80090dc:	f53f af2c 	bmi.w	8008f38 <_svfiprintf_r+0x28>
 80090e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090e2:	b01d      	add	sp, #116	; 0x74
 80090e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e8:	ab03      	add	r3, sp, #12
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	462a      	mov	r2, r5
 80090ee:	4b06      	ldr	r3, [pc, #24]	; (8009108 <_svfiprintf_r+0x1f8>)
 80090f0:	a904      	add	r1, sp, #16
 80090f2:	4638      	mov	r0, r7
 80090f4:	f000 f87a 	bl	80091ec <_printf_i>
 80090f8:	e7eb      	b.n	80090d2 <_svfiprintf_r+0x1c2>
 80090fa:	bf00      	nop
 80090fc:	08009a70 	.word	0x08009a70
 8009100:	08009a7a 	.word	0x08009a7a
 8009104:	00000000 	.word	0x00000000
 8009108:	08008e59 	.word	0x08008e59
 800910c:	08009a76 	.word	0x08009a76

08009110 <_printf_common>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	4616      	mov	r6, r2
 8009116:	4699      	mov	r9, r3
 8009118:	688a      	ldr	r2, [r1, #8]
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009120:	4293      	cmp	r3, r2
 8009122:	bfb8      	it	lt
 8009124:	4613      	movlt	r3, r2
 8009126:	6033      	str	r3, [r6, #0]
 8009128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800912c:	4607      	mov	r7, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b10a      	cbz	r2, 8009136 <_printf_common+0x26>
 8009132:	3301      	adds	r3, #1
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	0699      	lsls	r1, r3, #26
 800913a:	bf42      	ittt	mi
 800913c:	6833      	ldrmi	r3, [r6, #0]
 800913e:	3302      	addmi	r3, #2
 8009140:	6033      	strmi	r3, [r6, #0]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	f015 0506 	ands.w	r5, r5, #6
 8009148:	d106      	bne.n	8009158 <_printf_common+0x48>
 800914a:	f104 0a19 	add.w	sl, r4, #25
 800914e:	68e3      	ldr	r3, [r4, #12]
 8009150:	6832      	ldr	r2, [r6, #0]
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	42ab      	cmp	r3, r5
 8009156:	dc26      	bgt.n	80091a6 <_printf_common+0x96>
 8009158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800915c:	1e13      	subs	r3, r2, #0
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	bf18      	it	ne
 8009162:	2301      	movne	r3, #1
 8009164:	0692      	lsls	r2, r2, #26
 8009166:	d42b      	bmi.n	80091c0 <_printf_common+0xb0>
 8009168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800916c:	4649      	mov	r1, r9
 800916e:	4638      	mov	r0, r7
 8009170:	47c0      	blx	r8
 8009172:	3001      	adds	r0, #1
 8009174:	d01e      	beq.n	80091b4 <_printf_common+0xa4>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	68e5      	ldr	r5, [r4, #12]
 800917a:	6832      	ldr	r2, [r6, #0]
 800917c:	f003 0306 	and.w	r3, r3, #6
 8009180:	2b04      	cmp	r3, #4
 8009182:	bf08      	it	eq
 8009184:	1aad      	subeq	r5, r5, r2
 8009186:	68a3      	ldr	r3, [r4, #8]
 8009188:	6922      	ldr	r2, [r4, #16]
 800918a:	bf0c      	ite	eq
 800918c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009190:	2500      	movne	r5, #0
 8009192:	4293      	cmp	r3, r2
 8009194:	bfc4      	itt	gt
 8009196:	1a9b      	subgt	r3, r3, r2
 8009198:	18ed      	addgt	r5, r5, r3
 800919a:	2600      	movs	r6, #0
 800919c:	341a      	adds	r4, #26
 800919e:	42b5      	cmp	r5, r6
 80091a0:	d11a      	bne.n	80091d8 <_printf_common+0xc8>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e008      	b.n	80091b8 <_printf_common+0xa8>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4649      	mov	r1, r9
 80091ac:	4638      	mov	r0, r7
 80091ae:	47c0      	blx	r8
 80091b0:	3001      	adds	r0, #1
 80091b2:	d103      	bne.n	80091bc <_printf_common+0xac>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091bc:	3501      	adds	r5, #1
 80091be:	e7c6      	b.n	800914e <_printf_common+0x3e>
 80091c0:	18e1      	adds	r1, r4, r3
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	2030      	movs	r0, #48	; 0x30
 80091c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ca:	4422      	add	r2, r4
 80091cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091d4:	3302      	adds	r3, #2
 80091d6:	e7c7      	b.n	8009168 <_printf_common+0x58>
 80091d8:	2301      	movs	r3, #1
 80091da:	4622      	mov	r2, r4
 80091dc:	4649      	mov	r1, r9
 80091de:	4638      	mov	r0, r7
 80091e0:	47c0      	blx	r8
 80091e2:	3001      	adds	r0, #1
 80091e4:	d0e6      	beq.n	80091b4 <_printf_common+0xa4>
 80091e6:	3601      	adds	r6, #1
 80091e8:	e7d9      	b.n	800919e <_printf_common+0x8e>
	...

080091ec <_printf_i>:
 80091ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	7e0f      	ldrb	r7, [r1, #24]
 80091f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091f4:	2f78      	cmp	r7, #120	; 0x78
 80091f6:	4691      	mov	r9, r2
 80091f8:	4680      	mov	r8, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	469a      	mov	sl, r3
 80091fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009202:	d807      	bhi.n	8009214 <_printf_i+0x28>
 8009204:	2f62      	cmp	r7, #98	; 0x62
 8009206:	d80a      	bhi.n	800921e <_printf_i+0x32>
 8009208:	2f00      	cmp	r7, #0
 800920a:	f000 80d8 	beq.w	80093be <_printf_i+0x1d2>
 800920e:	2f58      	cmp	r7, #88	; 0x58
 8009210:	f000 80a3 	beq.w	800935a <_printf_i+0x16e>
 8009214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800921c:	e03a      	b.n	8009294 <_printf_i+0xa8>
 800921e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009222:	2b15      	cmp	r3, #21
 8009224:	d8f6      	bhi.n	8009214 <_printf_i+0x28>
 8009226:	a101      	add	r1, pc, #4	; (adr r1, 800922c <_printf_i+0x40>)
 8009228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800922c:	08009285 	.word	0x08009285
 8009230:	08009299 	.word	0x08009299
 8009234:	08009215 	.word	0x08009215
 8009238:	08009215 	.word	0x08009215
 800923c:	08009215 	.word	0x08009215
 8009240:	08009215 	.word	0x08009215
 8009244:	08009299 	.word	0x08009299
 8009248:	08009215 	.word	0x08009215
 800924c:	08009215 	.word	0x08009215
 8009250:	08009215 	.word	0x08009215
 8009254:	08009215 	.word	0x08009215
 8009258:	080093a5 	.word	0x080093a5
 800925c:	080092c9 	.word	0x080092c9
 8009260:	08009387 	.word	0x08009387
 8009264:	08009215 	.word	0x08009215
 8009268:	08009215 	.word	0x08009215
 800926c:	080093c7 	.word	0x080093c7
 8009270:	08009215 	.word	0x08009215
 8009274:	080092c9 	.word	0x080092c9
 8009278:	08009215 	.word	0x08009215
 800927c:	08009215 	.word	0x08009215
 8009280:	0800938f 	.word	0x0800938f
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	1d1a      	adds	r2, r3, #4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	602a      	str	r2, [r5, #0]
 800928c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009294:	2301      	movs	r3, #1
 8009296:	e0a3      	b.n	80093e0 <_printf_i+0x1f4>
 8009298:	6820      	ldr	r0, [r4, #0]
 800929a:	6829      	ldr	r1, [r5, #0]
 800929c:	0606      	lsls	r6, r0, #24
 800929e:	f101 0304 	add.w	r3, r1, #4
 80092a2:	d50a      	bpl.n	80092ba <_printf_i+0xce>
 80092a4:	680e      	ldr	r6, [r1, #0]
 80092a6:	602b      	str	r3, [r5, #0]
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	da03      	bge.n	80092b4 <_printf_i+0xc8>
 80092ac:	232d      	movs	r3, #45	; 0x2d
 80092ae:	4276      	negs	r6, r6
 80092b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b4:	485e      	ldr	r0, [pc, #376]	; (8009430 <_printf_i+0x244>)
 80092b6:	230a      	movs	r3, #10
 80092b8:	e019      	b.n	80092ee <_printf_i+0x102>
 80092ba:	680e      	ldr	r6, [r1, #0]
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092c2:	bf18      	it	ne
 80092c4:	b236      	sxthne	r6, r6
 80092c6:	e7ef      	b.n	80092a8 <_printf_i+0xbc>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	6820      	ldr	r0, [r4, #0]
 80092cc:	1d19      	adds	r1, r3, #4
 80092ce:	6029      	str	r1, [r5, #0]
 80092d0:	0601      	lsls	r1, r0, #24
 80092d2:	d501      	bpl.n	80092d8 <_printf_i+0xec>
 80092d4:	681e      	ldr	r6, [r3, #0]
 80092d6:	e002      	b.n	80092de <_printf_i+0xf2>
 80092d8:	0646      	lsls	r6, r0, #25
 80092da:	d5fb      	bpl.n	80092d4 <_printf_i+0xe8>
 80092dc:	881e      	ldrh	r6, [r3, #0]
 80092de:	4854      	ldr	r0, [pc, #336]	; (8009430 <_printf_i+0x244>)
 80092e0:	2f6f      	cmp	r7, #111	; 0x6f
 80092e2:	bf0c      	ite	eq
 80092e4:	2308      	moveq	r3, #8
 80092e6:	230a      	movne	r3, #10
 80092e8:	2100      	movs	r1, #0
 80092ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ee:	6865      	ldr	r5, [r4, #4]
 80092f0:	60a5      	str	r5, [r4, #8]
 80092f2:	2d00      	cmp	r5, #0
 80092f4:	bfa2      	ittt	ge
 80092f6:	6821      	ldrge	r1, [r4, #0]
 80092f8:	f021 0104 	bicge.w	r1, r1, #4
 80092fc:	6021      	strge	r1, [r4, #0]
 80092fe:	b90e      	cbnz	r6, 8009304 <_printf_i+0x118>
 8009300:	2d00      	cmp	r5, #0
 8009302:	d04d      	beq.n	80093a0 <_printf_i+0x1b4>
 8009304:	4615      	mov	r5, r2
 8009306:	fbb6 f1f3 	udiv	r1, r6, r3
 800930a:	fb03 6711 	mls	r7, r3, r1, r6
 800930e:	5dc7      	ldrb	r7, [r0, r7]
 8009310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009314:	4637      	mov	r7, r6
 8009316:	42bb      	cmp	r3, r7
 8009318:	460e      	mov	r6, r1
 800931a:	d9f4      	bls.n	8009306 <_printf_i+0x11a>
 800931c:	2b08      	cmp	r3, #8
 800931e:	d10b      	bne.n	8009338 <_printf_i+0x14c>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	07de      	lsls	r6, r3, #31
 8009324:	d508      	bpl.n	8009338 <_printf_i+0x14c>
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	6861      	ldr	r1, [r4, #4]
 800932a:	4299      	cmp	r1, r3
 800932c:	bfde      	ittt	le
 800932e:	2330      	movle	r3, #48	; 0x30
 8009330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009334:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009338:	1b52      	subs	r2, r2, r5
 800933a:	6122      	str	r2, [r4, #16]
 800933c:	f8cd a000 	str.w	sl, [sp]
 8009340:	464b      	mov	r3, r9
 8009342:	aa03      	add	r2, sp, #12
 8009344:	4621      	mov	r1, r4
 8009346:	4640      	mov	r0, r8
 8009348:	f7ff fee2 	bl	8009110 <_printf_common>
 800934c:	3001      	adds	r0, #1
 800934e:	d14c      	bne.n	80093ea <_printf_i+0x1fe>
 8009350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009354:	b004      	add	sp, #16
 8009356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935a:	4835      	ldr	r0, [pc, #212]	; (8009430 <_printf_i+0x244>)
 800935c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009360:	6829      	ldr	r1, [r5, #0]
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	f851 6b04 	ldr.w	r6, [r1], #4
 8009368:	6029      	str	r1, [r5, #0]
 800936a:	061d      	lsls	r5, r3, #24
 800936c:	d514      	bpl.n	8009398 <_printf_i+0x1ac>
 800936e:	07df      	lsls	r7, r3, #31
 8009370:	bf44      	itt	mi
 8009372:	f043 0320 	orrmi.w	r3, r3, #32
 8009376:	6023      	strmi	r3, [r4, #0]
 8009378:	b91e      	cbnz	r6, 8009382 <_printf_i+0x196>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f023 0320 	bic.w	r3, r3, #32
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	2310      	movs	r3, #16
 8009384:	e7b0      	b.n	80092e8 <_printf_i+0xfc>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	f043 0320 	orr.w	r3, r3, #32
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	2378      	movs	r3, #120	; 0x78
 8009390:	4828      	ldr	r0, [pc, #160]	; (8009434 <_printf_i+0x248>)
 8009392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009396:	e7e3      	b.n	8009360 <_printf_i+0x174>
 8009398:	0659      	lsls	r1, r3, #25
 800939a:	bf48      	it	mi
 800939c:	b2b6      	uxthmi	r6, r6
 800939e:	e7e6      	b.n	800936e <_printf_i+0x182>
 80093a0:	4615      	mov	r5, r2
 80093a2:	e7bb      	b.n	800931c <_printf_i+0x130>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	6826      	ldr	r6, [r4, #0]
 80093a8:	6961      	ldr	r1, [r4, #20]
 80093aa:	1d18      	adds	r0, r3, #4
 80093ac:	6028      	str	r0, [r5, #0]
 80093ae:	0635      	lsls	r5, r6, #24
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	d501      	bpl.n	80093b8 <_printf_i+0x1cc>
 80093b4:	6019      	str	r1, [r3, #0]
 80093b6:	e002      	b.n	80093be <_printf_i+0x1d2>
 80093b8:	0670      	lsls	r0, r6, #25
 80093ba:	d5fb      	bpl.n	80093b4 <_printf_i+0x1c8>
 80093bc:	8019      	strh	r1, [r3, #0]
 80093be:	2300      	movs	r3, #0
 80093c0:	6123      	str	r3, [r4, #16]
 80093c2:	4615      	mov	r5, r2
 80093c4:	e7ba      	b.n	800933c <_printf_i+0x150>
 80093c6:	682b      	ldr	r3, [r5, #0]
 80093c8:	1d1a      	adds	r2, r3, #4
 80093ca:	602a      	str	r2, [r5, #0]
 80093cc:	681d      	ldr	r5, [r3, #0]
 80093ce:	6862      	ldr	r2, [r4, #4]
 80093d0:	2100      	movs	r1, #0
 80093d2:	4628      	mov	r0, r5
 80093d4:	f7f6 ff34 	bl	8000240 <memchr>
 80093d8:	b108      	cbz	r0, 80093de <_printf_i+0x1f2>
 80093da:	1b40      	subs	r0, r0, r5
 80093dc:	6060      	str	r0, [r4, #4]
 80093de:	6863      	ldr	r3, [r4, #4]
 80093e0:	6123      	str	r3, [r4, #16]
 80093e2:	2300      	movs	r3, #0
 80093e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e8:	e7a8      	b.n	800933c <_printf_i+0x150>
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4649      	mov	r1, r9
 80093f0:	4640      	mov	r0, r8
 80093f2:	47d0      	blx	sl
 80093f4:	3001      	adds	r0, #1
 80093f6:	d0ab      	beq.n	8009350 <_printf_i+0x164>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	079b      	lsls	r3, r3, #30
 80093fc:	d413      	bmi.n	8009426 <_printf_i+0x23a>
 80093fe:	68e0      	ldr	r0, [r4, #12]
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	4298      	cmp	r0, r3
 8009404:	bfb8      	it	lt
 8009406:	4618      	movlt	r0, r3
 8009408:	e7a4      	b.n	8009354 <_printf_i+0x168>
 800940a:	2301      	movs	r3, #1
 800940c:	4632      	mov	r2, r6
 800940e:	4649      	mov	r1, r9
 8009410:	4640      	mov	r0, r8
 8009412:	47d0      	blx	sl
 8009414:	3001      	adds	r0, #1
 8009416:	d09b      	beq.n	8009350 <_printf_i+0x164>
 8009418:	3501      	adds	r5, #1
 800941a:	68e3      	ldr	r3, [r4, #12]
 800941c:	9903      	ldr	r1, [sp, #12]
 800941e:	1a5b      	subs	r3, r3, r1
 8009420:	42ab      	cmp	r3, r5
 8009422:	dcf2      	bgt.n	800940a <_printf_i+0x21e>
 8009424:	e7eb      	b.n	80093fe <_printf_i+0x212>
 8009426:	2500      	movs	r5, #0
 8009428:	f104 0619 	add.w	r6, r4, #25
 800942c:	e7f5      	b.n	800941a <_printf_i+0x22e>
 800942e:	bf00      	nop
 8009430:	08009a81 	.word	0x08009a81
 8009434:	08009a92 	.word	0x08009a92

08009438 <__retarget_lock_acquire_recursive>:
 8009438:	4770      	bx	lr

0800943a <__retarget_lock_release_recursive>:
 800943a:	4770      	bx	lr

0800943c <memcpy>:
 800943c:	440a      	add	r2, r1
 800943e:	4291      	cmp	r1, r2
 8009440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009444:	d100      	bne.n	8009448 <memcpy+0xc>
 8009446:	4770      	bx	lr
 8009448:	b510      	push	{r4, lr}
 800944a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800944e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009452:	4291      	cmp	r1, r2
 8009454:	d1f9      	bne.n	800944a <memcpy+0xe>
 8009456:	bd10      	pop	{r4, pc}

08009458 <memmove>:
 8009458:	4288      	cmp	r0, r1
 800945a:	b510      	push	{r4, lr}
 800945c:	eb01 0402 	add.w	r4, r1, r2
 8009460:	d902      	bls.n	8009468 <memmove+0x10>
 8009462:	4284      	cmp	r4, r0
 8009464:	4623      	mov	r3, r4
 8009466:	d807      	bhi.n	8009478 <memmove+0x20>
 8009468:	1e43      	subs	r3, r0, #1
 800946a:	42a1      	cmp	r1, r4
 800946c:	d008      	beq.n	8009480 <memmove+0x28>
 800946e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009476:	e7f8      	b.n	800946a <memmove+0x12>
 8009478:	4402      	add	r2, r0
 800947a:	4601      	mov	r1, r0
 800947c:	428a      	cmp	r2, r1
 800947e:	d100      	bne.n	8009482 <memmove+0x2a>
 8009480:	bd10      	pop	{r4, pc}
 8009482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800948a:	e7f7      	b.n	800947c <memmove+0x24>

0800948c <_realloc_r>:
 800948c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	4680      	mov	r8, r0
 8009492:	4614      	mov	r4, r2
 8009494:	460e      	mov	r6, r1
 8009496:	b921      	cbnz	r1, 80094a2 <_realloc_r+0x16>
 8009498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800949c:	4611      	mov	r1, r2
 800949e:	f7ff bc2b 	b.w	8008cf8 <_malloc_r>
 80094a2:	b92a      	cbnz	r2, 80094b0 <_realloc_r+0x24>
 80094a4:	f7ff fbbc 	bl	8008c20 <_free_r>
 80094a8:	4625      	mov	r5, r4
 80094aa:	4628      	mov	r0, r5
 80094ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b0:	f000 f81b 	bl	80094ea <_malloc_usable_size_r>
 80094b4:	4284      	cmp	r4, r0
 80094b6:	4607      	mov	r7, r0
 80094b8:	d802      	bhi.n	80094c0 <_realloc_r+0x34>
 80094ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094be:	d812      	bhi.n	80094e6 <_realloc_r+0x5a>
 80094c0:	4621      	mov	r1, r4
 80094c2:	4640      	mov	r0, r8
 80094c4:	f7ff fc18 	bl	8008cf8 <_malloc_r>
 80094c8:	4605      	mov	r5, r0
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d0ed      	beq.n	80094aa <_realloc_r+0x1e>
 80094ce:	42bc      	cmp	r4, r7
 80094d0:	4622      	mov	r2, r4
 80094d2:	4631      	mov	r1, r6
 80094d4:	bf28      	it	cs
 80094d6:	463a      	movcs	r2, r7
 80094d8:	f7ff ffb0 	bl	800943c <memcpy>
 80094dc:	4631      	mov	r1, r6
 80094de:	4640      	mov	r0, r8
 80094e0:	f7ff fb9e 	bl	8008c20 <_free_r>
 80094e4:	e7e1      	b.n	80094aa <_realloc_r+0x1e>
 80094e6:	4635      	mov	r5, r6
 80094e8:	e7df      	b.n	80094aa <_realloc_r+0x1e>

080094ea <_malloc_usable_size_r>:
 80094ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ee:	1f18      	subs	r0, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bfbc      	itt	lt
 80094f4:	580b      	ldrlt	r3, [r1, r0]
 80094f6:	18c0      	addlt	r0, r0, r3
 80094f8:	4770      	bx	lr
	...

080094fc <_init>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr

08009508 <_fini>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	bf00      	nop
 800950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950e:	bc08      	pop	{r3}
 8009510:	469e      	mov	lr, r3
 8009512:	4770      	bx	lr
