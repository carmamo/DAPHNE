
F446RE_SD_UART_RING_BUFFER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009328  08009328  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009330  08009330  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  20000070  080093a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  080093a8  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013171  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9f  00000000  00000000  00033211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000360b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00036fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024402  00000000  00000000  00037d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c77  00000000  00000000  0005c17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfd51  00000000  00000000  00070df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140b42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004068  00000000  00000000  00140b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d70 	.word	0x08008d70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008d70 	.word	0x08008d70

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe1f 	bl	8000210 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <Send_Uart+0x28>)
 80005de:	f004 fa03 	bl	80049e8 <HAL_UART_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000658 	.word	0x20000658

080005f0 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <Mount_SD+0x38>)
 80005fe:	f007 fa51 	bl	8007aa4 <f_mount>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <Mount_SD+0x3c>)
 8000608:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\r\n\n");
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <Mount_SD+0x3c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d003      	beq.n	800061a <Mount_SD+0x2a>
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <Mount_SD+0x40>)
 8000614:	f7ff ffd6 	bl	80005c4 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\r\n");
}
 8000618:	e002      	b.n	8000620 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\r\n");
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <Mount_SD+0x44>)
 800061c:	f7ff ffd2 	bl	80005c4 <Send_Uart>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008c 	.word	0x2000008c
 800062c:	20000504 	.word	0x20000504
 8000630:	08008d88 	.word	0x08008d88
 8000634:	08008dac 	.word	0x08008dac

08000638 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	2000      	movs	r0, #0
 8000646:	f007 fa2d 	bl	8007aa4 <f_mount>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <Unmount_SD+0x38>)
 8000650:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\r\n\n\n");
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <Unmount_SD+0x38>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d103      	bne.n	8000662 <Unmount_SD+0x2a>
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <Unmount_SD+0x3c>)
 800065c:	f7ff ffb2 	bl	80005c4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n\n\n");
}
 8000660:	e002      	b.n	8000668 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n\n\n");
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <Unmount_SD+0x40>)
 8000664:	f7ff ffae 	bl	80005c4 <Send_Uart>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000504 	.word	0x20000504
 8000674:	08008dd0 	.word	0x08008dd0
 8000678:	08008df8 	.word	0x08008df8

0800067c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000684:	4943      	ldr	r1, [pc, #268]	; (8000794 <Create_File+0x118>)
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f007 fe2d 	bl	80082e6 <f_stat>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b41      	ldr	r3, [pc, #260]	; (8000798 <Create_File+0x11c>)
 8000692:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000694:	4b40      	ldr	r3, [pc, #256]	; (8000798 <Create_File+0x11c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d112      	bne.n	80006c2 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f007 fee1 	bl	8008464 <malloc>
 80006a2:	4603      	mov	r3, r0
 80006a4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n\n",name);
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	493c      	ldr	r1, [pc, #240]	; (800079c <Create_File+0x120>)
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f007 ffe2 	bl	8008674 <siprintf>
		Send_Uart(buf);
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f7ff ff87 	bl	80005c4 <Send_Uart>
		free(buf);
 80006b6:	68f8      	ldr	r0, [r7, #12]
 80006b8:	f007 fedc 	bl	8008474 <free>
	    return fresult;
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <Create_File+0x11c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	e063      	b.n	800078a <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80006c2:	220b      	movs	r2, #11
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	4836      	ldr	r0, [pc, #216]	; (80007a0 <Create_File+0x124>)
 80006c8:	f007 fa32 	bl	8007b30 <f_open>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <Create_File+0x11c>)
 80006d2:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <Create_File+0x11c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d015      	beq.n	8000708 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f007 fec1 	bl	8008464 <malloc>
 80006e2:	4603      	mov	r3, r0
 80006e4:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\r\n\n", fresult, name);
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <Create_File+0x11c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	492d      	ldr	r1, [pc, #180]	; (80007a4 <Create_File+0x128>)
 80006f0:	6938      	ldr	r0, [r7, #16]
 80006f2:	f007 ffbf 	bl	8008674 <siprintf>
			Send_Uart(buf);
 80006f6:	6938      	ldr	r0, [r7, #16]
 80006f8:	f7ff ff64 	bl	80005c4 <Send_Uart>
			free(buf);
 80006fc:	6938      	ldr	r0, [r7, #16]
 80006fe:	f007 feb9 	bl	8008474 <free>
		    return fresult;
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <Create_File+0x11c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	e040      	b.n	800078a <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f007 feab 	bl	8008464 <malloc>
 800070e:	4603      	mov	r3, r0
 8000710:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\r\n Now use Write_File to write data\r\n",name);
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4924      	ldr	r1, [pc, #144]	; (80007a8 <Create_File+0x12c>)
 8000716:	69f8      	ldr	r0, [r7, #28]
 8000718:	f007 ffac 	bl	8008674 <siprintf>
			Send_Uart(buf);
 800071c:	69f8      	ldr	r0, [r7, #28]
 800071e:	f7ff ff51 	bl	80005c4 <Send_Uart>
			free(buf);
 8000722:	69f8      	ldr	r0, [r7, #28]
 8000724:	f007 fea6 	bl	8008474 <free>
		}

		fresult = f_close(&fil);
 8000728:	481d      	ldr	r0, [pc, #116]	; (80007a0 <Create_File+0x124>)
 800072a:	f007 fdb2 	bl	8008292 <f_close>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <Create_File+0x11c>)
 8000734:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <Create_File+0x11c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d013      	beq.n	8000766 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f007 fe90 	bl	8008464 <malloc>
 8000744:	4603      	mov	r3, r0
 8000746:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\r\n\n", fresult, name);
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <Create_File+0x11c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4916      	ldr	r1, [pc, #88]	; (80007ac <Create_File+0x130>)
 8000752:	6978      	ldr	r0, [r7, #20]
 8000754:	f007 ff8e 	bl	8008674 <siprintf>
			Send_Uart(buf);
 8000758:	6978      	ldr	r0, [r7, #20]
 800075a:	f7ff ff33 	bl	80005c4 <Send_Uart>
			free(buf);
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f007 fe88 	bl	8008474 <free>
 8000764:	e00f      	b.n	8000786 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f007 fe7c 	bl	8008464 <malloc>
 800076c:	4603      	mov	r3, r0
 800076e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\r\n", name);
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	490f      	ldr	r1, [pc, #60]	; (80007b0 <Create_File+0x134>)
 8000774:	69b8      	ldr	r0, [r7, #24]
 8000776:	f007 ff7d 	bl	8008674 <siprintf>
			Send_Uart(buf);
 800077a:	69b8      	ldr	r0, [r7, #24]
 800077c:	f7ff ff22 	bl	80005c4 <Send_Uart>
			free(buf);
 8000780:	69b8      	ldr	r0, [r7, #24]
 8000782:	f007 fe77 	bl	8008474 <free>
		}
	}
    return fresult;
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <Create_File+0x11c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200004ec 	.word	0x200004ec
 8000798:	20000504 	.word	0x20000504
 800079c:	08008fd0 	.word	0x08008fd0
 80007a0:	200002bc 	.word	0x200002bc
 80007a4:	08009008 	.word	0x08009008
 80007a8:	08009034 	.word	0x08009034
 80007ac:	08009074 	.word	0x08009074
 80007b0:	08008fb0 	.word	0x08008fb0

080007b4 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80007be:	4956      	ldr	r1, [pc, #344]	; (8000918 <Update_File+0x164>)
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f007 fd90 	bl	80082e6 <f_stat>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b54      	ldr	r3, [pc, #336]	; (800091c <Update_File+0x168>)
 80007cc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80007ce:	4b53      	ldr	r3, [pc, #332]	; (800091c <Update_File+0x168>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d012      	beq.n	80007fc <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f007 fe44 	bl	8008464 <malloc>
 80007dc:	4603      	mov	r3, r0
 80007de:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\r\n\n", name);
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	494f      	ldr	r1, [pc, #316]	; (8000920 <Update_File+0x16c>)
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f007 ff45 	bl	8008674 <siprintf>
		Send_Uart (buf);
 80007ea:	68b8      	ldr	r0, [r7, #8]
 80007ec:	f7ff feea 	bl	80005c4 <Send_Uart>
		free(buf);
 80007f0:	68b8      	ldr	r0, [r7, #8]
 80007f2:	f007 fe3f 	bl	8008474 <free>
	    return fresult;
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <Update_File+0x168>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	e088      	b.n	800090e <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80007fc:	2232      	movs	r2, #50	; 0x32
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4848      	ldr	r0, [pc, #288]	; (8000924 <Update_File+0x170>)
 8000802:	f007 f995 	bl	8007b30 <f_open>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	4b44      	ldr	r3, [pc, #272]	; (800091c <Update_File+0x168>)
 800080c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800080e:	4b43      	ldr	r3, [pc, #268]	; (800091c <Update_File+0x168>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d015      	beq.n	8000842 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000816:	2064      	movs	r0, #100	; 0x64
 8000818:	f007 fe24 	bl	8008464 <malloc>
 800081c:	4603      	mov	r3, r0
 800081e:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\r\n\n", fresult, name);
 8000820:	4b3e      	ldr	r3, [pc, #248]	; (800091c <Update_File+0x168>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	493f      	ldr	r1, [pc, #252]	; (8000928 <Update_File+0x174>)
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f007 ff22 	bl	8008674 <siprintf>
	    	Send_Uart(buf);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f7ff fec7 	bl	80005c4 <Send_Uart>
	        free(buf);
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f007 fe1c 	bl	8008474 <free>
	        return fresult;
 800083c:	4b37      	ldr	r3, [pc, #220]	; (800091c <Update_File+0x168>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	e065      	b.n	800090e <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8000842:	6838      	ldr	r0, [r7, #0]
 8000844:	f7ff fce4 	bl	8000210 <strlen>
 8000848:	4602      	mov	r2, r0
 800084a:	4b38      	ldr	r3, [pc, #224]	; (800092c <Update_File+0x178>)
 800084c:	6839      	ldr	r1, [r7, #0]
 800084e:	4835      	ldr	r0, [pc, #212]	; (8000924 <Update_File+0x170>)
 8000850:	f007 fb2c 	bl	8007eac <f_write>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b30      	ldr	r3, [pc, #192]	; (800091c <Update_File+0x168>)
 800085a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <Update_File+0x168>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d013      	beq.n	800088c <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f007 fdfd 	bl	8008464 <malloc>
 800086a:	4603      	mov	r3, r0
 800086c:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\r\n\n", fresult, name);
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <Update_File+0x168>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	492e      	ldr	r1, [pc, #184]	; (8000930 <Update_File+0x17c>)
 8000878:	69b8      	ldr	r0, [r7, #24]
 800087a:	f007 fefb 	bl	8008674 <siprintf>
	    	Send_Uart(buf);
 800087e:	69b8      	ldr	r0, [r7, #24]
 8000880:	f7ff fea0 	bl	80005c4 <Send_Uart>
	    	free(buf);
 8000884:	69b8      	ldr	r0, [r7, #24]
 8000886:	f007 fdf5 	bl	8008474 <free>
 800088a:	e00f      	b.n	80008ac <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800088c:	2064      	movs	r0, #100	; 0x64
 800088e:	f007 fde9 	bl	8008464 <malloc>
 8000892:	4603      	mov	r3, r0
 8000894:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\r\n", name);
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4926      	ldr	r1, [pc, #152]	; (8000934 <Update_File+0x180>)
 800089a:	69f8      	ldr	r0, [r7, #28]
 800089c:	f007 feea 	bl	8008674 <siprintf>
	    	Send_Uart(buf);
 80008a0:	69f8      	ldr	r0, [r7, #28]
 80008a2:	f7ff fe8f 	bl	80005c4 <Send_Uart>
	    	free(buf);
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f007 fde4 	bl	8008474 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80008ac:	481d      	ldr	r0, [pc, #116]	; (8000924 <Update_File+0x170>)
 80008ae:	f007 fcf0 	bl	8008292 <f_close>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <Update_File+0x168>)
 80008b8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <Update_File+0x168>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d013      	beq.n	80008ea <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f007 fdce 	bl	8008464 <malloc>
 80008c8:	4603      	mov	r3, r0
 80008ca:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\r\n\n", fresult, name);
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <Update_File+0x168>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4918      	ldr	r1, [pc, #96]	; (8000938 <Update_File+0x184>)
 80008d6:	6938      	ldr	r0, [r7, #16]
 80008d8:	f007 fecc 	bl	8008674 <siprintf>
	    	Send_Uart(buf);
 80008dc:	6938      	ldr	r0, [r7, #16]
 80008de:	f7ff fe71 	bl	80005c4 <Send_Uart>
	    	free(buf);
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f007 fdc6 	bl	8008474 <free>
 80008e8:	e00f      	b.n	800090a <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008ea:	2064      	movs	r0, #100	; 0x64
 80008ec:	f007 fdba 	bl	8008464 <malloc>
 80008f0:	4603      	mov	r3, r0
 80008f2:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\r\n", name);
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	4911      	ldr	r1, [pc, #68]	; (800093c <Update_File+0x188>)
 80008f8:	6978      	ldr	r0, [r7, #20]
 80008fa:	f007 febb 	bl	8008674 <siprintf>
	    	Send_Uart(buf);
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff fe60 	bl	80005c4 <Send_Uart>
	    	free(buf);
 8000904:	6978      	ldr	r0, [r7, #20]
 8000906:	f007 fdb5 	bl	8008474 <free>
	     }
	}
    return fresult;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <Update_File+0x168>)
 800090c:	781b      	ldrb	r3, [r3, #0]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200004ec 	.word	0x200004ec
 800091c:	20000504 	.word	0x20000504
 8000920:	08008e50 	.word	0x08008e50
 8000924:	200002bc 	.word	0x200002bc
 8000928:	08008e74 	.word	0x08008e74
 800092c:	20000508 	.word	0x20000508
 8000930:	0800909c 	.word	0x0800909c
 8000934:	080090c4 	.word	0x080090c4
 8000938:	08008f88 	.word	0x08008f88
 800093c:	08008fb0 	.word	0x08008fb0

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000946:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000948:	f000 fc54 	bl	80011f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800094c:	f000 f888 	bl	8000a60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000950:	f000 f978 	bl	8000c44 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000954:	f000 f924 	bl	8000ba0 <MX_USART2_UART_Init>
	MX_SDIO_SD_Init();
 8000958:	f000 f902 	bl	8000b60 <MX_SDIO_SD_Init>
	MX_DMA_Init();
 800095c:	f000 f94a 	bl	8000bf4 <MX_DMA_Init>
	MX_FATFS_Init();
 8000960:	f005 f92a 	bl	8005bb8 <MX_FATFS_Init>
	MX_CRC_Init();
 8000964:	f000 f8e8 	bl	8000b38 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */

//	while( status != HAL_OK) status = HAL_SD_InitCard(&hsd);
	res = FR_EXIST;
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <main+0xec>)
 800096a:	2208      	movs	r2, #8
 800096c:	701a      	strb	r2, [r3, #0]
	while( res != FR_OK) res = f_mount(&SDFatFS, SDPath, 0);
 800096e:	e008      	b.n	8000982 <main+0x42>
 8000970:	2200      	movs	r2, #0
 8000972:	492f      	ldr	r1, [pc, #188]	; (8000a30 <main+0xf0>)
 8000974:	482f      	ldr	r0, [pc, #188]	; (8000a34 <main+0xf4>)
 8000976:	f007 f895 	bl	8007aa4 <f_mount>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <main+0xec>)
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <main+0xec>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1f2      	bne.n	8000970 <main+0x30>
//	while(res != FR_OK)  res = Format_SD();
	sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <main+0xf8>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	b291      	uxth	r1, r2
 8000992:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <main+0xf8>)
 8000994:	8011      	strh	r1, [r2, #0]
 8000996:	4a26      	ldr	r2, [pc, #152]	; (8000a30 <main+0xf0>)
 8000998:	4928      	ldr	r1, [pc, #160]	; (8000a3c <main+0xfc>)
 800099a:	4829      	ldr	r0, [pc, #164]	; (8000a40 <main+0x100>)
 800099c:	f007 fe6a 	bl	8008674 <siprintf>
	while(res != FR_EXIST) res = f_open(&fil, filename, FA_CREATE_ALWAYS|FA_WRITE);
 80009a0:	e009      	b.n	80009b6 <main+0x76>
 80009a2:	463b      	mov	r3, r7
 80009a4:	220a      	movs	r2, #10
 80009a6:	4926      	ldr	r1, [pc, #152]	; (8000a40 <main+0x100>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f007 f8c1 	bl	8007b30 <f_open>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <main+0xec>)
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <main+0xec>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b08      	cmp	r3, #8
 80009bc:	d1f1      	bne.n	80009a2 <main+0x62>
	while( Create_File("FILE2.TXT") != FR_OK);
 80009be:	bf00      	nop
 80009c0:	4820      	ldr	r0, [pc, #128]	; (8000a44 <main+0x104>)
 80009c2:	f7ff fe5b 	bl	800067c <Create_File>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f9      	bne.n	80009c0 <main+0x80>
	Unmount_SD("/");
 80009cc:	481e      	ldr	r0, [pc, #120]	; (8000a48 <main+0x108>)
 80009ce:	f7ff fe33 	bl	8000638 <Unmount_SD>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Mount_SD("/");
 80009d2:	481d      	ldr	r0, [pc, #116]	; (8000a48 <main+0x108>)
 80009d4:	f7ff fe0c 	bl	80005f0 <Mount_SD>
		sprintf(buffer, "Hello ---> %d\n", indx);
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <main+0x10c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	491c      	ldr	r1, [pc, #112]	; (8000a50 <main+0x110>)
 80009e0:	481c      	ldr	r0, [pc, #112]	; (8000a54 <main+0x114>)
 80009e2:	f007 fe47 	bl	8008674 <siprintf>
		Update_File(filename, buffer);
 80009e6:	491b      	ldr	r1, [pc, #108]	; (8000a54 <main+0x114>)
 80009e8:	4815      	ldr	r0, [pc, #84]	; (8000a40 <main+0x100>)
 80009ea:	f7ff fee3 	bl	80007b4 <Update_File>
		sprintf(buffer, "world ---> %d\n", indx);
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <main+0x10c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4918      	ldr	r1, [pc, #96]	; (8000a58 <main+0x118>)
 80009f6:	4817      	ldr	r0, [pc, #92]	; (8000a54 <main+0x114>)
 80009f8:	f007 fe3c 	bl	8008674 <siprintf>
		if(Update_File("FILE2.TXT", buffer) != FR_OK)  HAL_SD_InitCard(&hsd);
 80009fc:	4915      	ldr	r1, [pc, #84]	; (8000a54 <main+0x114>)
 80009fe:	4811      	ldr	r0, [pc, #68]	; (8000a44 <main+0x104>)
 8000a00:	f7ff fed8 	bl	80007b4 <Update_File>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <main+0xd0>
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <main+0x11c>)
 8000a0c:	f002 fbb0 	bl	8003170 <HAL_SD_InitCard>
		Unmount_SD("/");
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <main+0x108>)
 8000a12:	f7ff fe11 	bl	8000638 <Unmount_SD>

		indx++;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <main+0x10c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <main+0x10c>)
 8000a1e:	6013      	str	r3, [r2, #0]

		HAL_Delay(2000);
 8000a20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a24:	f000 fc58 	bl	80012d8 <HAL_Delay>
		Mount_SD("/");
 8000a28:	e7d3      	b.n	80009d2 <main+0x92>
 8000a2a:	bf00      	nop
 8000a2c:	20000808 	.word	0x20000808
 8000a30:	20000818 	.word	0x20000818
 8000a34:	2000081c 	.word	0x2000081c
 8000a38:	20000704 	.word	0x20000704
 8000a3c:	080091bc 	.word	0x080091bc
 8000a40:	20000708 	.word	0x20000708
 8000a44:	080091cc 	.word	0x080091cc
 8000a48:	080091d8 	.word	0x080091d8
 8000a4c:	20000700 	.word	0x20000700
 8000a50:	080091dc 	.word	0x080091dc
 8000a54:	2000069c 	.word	0x2000069c
 8000a58:	080091ec 	.word	0x080091ec
 8000a5c:	20000514 	.word	0x20000514

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2234      	movs	r2, #52	; 0x34
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f007 fd08 	bl	8008484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <SystemClock_Config+0xd0>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a28      	ldr	r2, [pc, #160]	; (8000b30 <SystemClock_Config+0xd0>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <SystemClock_Config+0xd0>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <SystemClock_Config+0xd4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <SystemClock_Config+0xd4>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ad8:	2332      	movs	r3, #50	; 0x32
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 f871 	bl	8002bd4 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000af8:	f000 f90a 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2302      	movs	r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 f9e7 	bl	8001eec <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b24:	f000 f8f4 	bl	8000d10 <Error_Handler>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3750      	adds	r7, #80	; 0x50
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_CRC_Init+0x20>)
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <MX_CRC_Init+0x24>)
 8000b40:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_CRC_Init+0x20>)
 8000b44:	f000 fcfd 	bl	8001542 <HAL_CRC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b4e:	f000 f8df 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000050c 	.word	0x2000050c
 8000b5c:	40023000 	.word	0x40023000

08000b60 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_SDIO_SD_Init+0x38>)
 8000b66:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <MX_SDIO_SD_Init+0x3c>)
 8000b68:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_SDIO_SD_Init+0x38>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_SDIO_SD_Init+0x38>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_SDIO_SD_Init+0x38>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_SDIO_SD_Init+0x38>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <MX_SDIO_SD_Init+0x38>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <MX_SDIO_SD_Init+0x38>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	20000514 	.word	0x20000514
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_USART2_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f003 feb9 	bl	800494e <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f895 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000658 	.word	0x20000658
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_DMA_Init+0x4c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <MX_DMA_Init+0x4c>)
 8000c04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_DMA_Init+0x4c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	203b      	movs	r0, #59	; 0x3b
 8000c1c:	f000 fc5b 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c20:	203b      	movs	r0, #59	; 0x3b
 8000c22:	f000 fc74 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2045      	movs	r0, #69	; 0x45
 8000c2c:	f000 fc53 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c30:	2045      	movs	r0, #69	; 0x45
 8000c32:	f000 fc6c 	bl	800150e <HAL_NVIC_EnableIRQ>

}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_GPIO_Init+0xc4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_GPIO_Init+0xc8>)
 8000cfc:	f000 ff4a 	bl	8001b94 <HAL_GPIO_Init>

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fbb0 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_CRC_MspInit+0x3c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10d      	bne.n	8000d9a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40023000 	.word	0x40023000
 8000dac:	40023800 	.word	0x40023800

08000db0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0a2      	sub	sp, #136	; 0x88
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	225c      	movs	r2, #92	; 0x5c
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f007 fb57 	bl	8008484 <memset>
  if(hsd->Instance==SDIO)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a7d      	ldr	r2, [pc, #500]	; (8000fd0 <HAL_SD_MspInit+0x220>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	f040 80f3 	bne.w	8000fc8 <HAL_SD_MspInit+0x218>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000de8:	2300      	movs	r3, #0
 8000dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000dec:	2300      	movs	r3, #0
 8000dee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 f993 	bl	8002120 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000e00:	f7ff ff86 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	4a71      	ldr	r2, [pc, #452]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e12:	6453      	str	r3, [r2, #68]	; 0x44
 8000e14:	4b6f      	ldr	r3, [pc, #444]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a6a      	ldr	r2, [pc, #424]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b68      	ldr	r3, [pc, #416]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a63      	ldr	r2, [pc, #396]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <HAL_SD_MspInit+0x224>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e58:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e76:	4619      	mov	r1, r3
 8000e78:	4857      	ldr	r0, [pc, #348]	; (8000fd8 <HAL_SD_MspInit+0x228>)
 8000e7a:	f000 fe8b 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e92:	230c      	movs	r3, #12
 8000e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	484e      	ldr	r0, [pc, #312]	; (8000fd8 <HAL_SD_MspInit+0x228>)
 8000ea0:	f000 fe78 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4846      	ldr	r0, [pc, #280]	; (8000fdc <HAL_SD_MspInit+0x22c>)
 8000ec4:	f000 fe66 	bl	8001b94 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000ec8:	4b45      	ldr	r3, [pc, #276]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000eca:	4a46      	ldr	r2, [pc, #280]	; (8000fe4 <HAL_SD_MspInit+0x234>)
 8000ecc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000ece:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000ed0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed6:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000edc:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000eec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000ef4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000efc:	2220      	movs	r2, #32
 8000efe:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f06:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000f10:	2203      	movs	r2, #3
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000f14:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000f16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000f1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000f24:	482e      	ldr	r0, [pc, #184]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000f26:	f000 fb29 	bl	800157c <HAL_DMA_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_SD_MspInit+0x184>
    {
      Error_Handler();
 8000f30:	f7ff feee 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
 8000f3a:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <HAL_SD_MspInit+0x230>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f42:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <HAL_SD_MspInit+0x23c>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f4c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f5a:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f60:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f68:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f70:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f74:	2220      	movs	r2, #32
 8000f76:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f88:	2203      	movs	r2, #3
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000f9c:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000f9e:	f000 faed 	bl	800157c <HAL_DMA_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_SD_MspInit+0x1fc>
    {
      Error_Handler();
 8000fa8:	f7ff feb2 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000fb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_SD_MspInit+0x238>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2031      	movs	r0, #49	; 0x31
 8000fbe:	f000 fa8a 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000fc2:	2031      	movs	r0, #49	; 0x31
 8000fc4:	f000 faa3 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3788      	adds	r7, #136	; 0x88
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	20000598 	.word	0x20000598
 8000fe4:	40026458 	.word	0x40026458
 8000fe8:	200005f8 	.word	0x200005f8
 8000fec:	400264a0 	.word	0x400264a0

08000ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_UART_MspInit+0x84>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d12b      	bne.n	800106a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_UART_MspInit+0x88>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_UART_MspInit+0x88>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_UART_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_UART_MspInit+0x88>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_UART_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104a:	230c      	movs	r3, #12
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105a:	2307      	movs	r3, #7
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0x8c>)
 8001066:	f000 fd95 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <NMI_Handler+0x4>

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f8e4 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <SDIO_IRQHandler+0x10>)
 80010da:	f002 fc2d 	bl	8003938 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000514 	.word	0x20000514

080010e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <DMA2_Stream3_IRQHandler+0x10>)
 80010ee:	f000 fb15 	bl	800171c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000598 	.word	0x20000598

080010fc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <DMA2_Stream6_IRQHandler+0x10>)
 8001102:	f000 fb0b 	bl	800171c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200005f8 	.word	0x200005f8

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f007 f966 	bl	8008410 <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20020000 	.word	0x20020000
 8001170:	00000400 	.word	0x00000400
 8001174:	2000080c 	.word	0x2000080c
 8001178:	20000a90 	.word	0x20000a90

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011bc:	4c0b      	ldr	r4, [pc, #44]	; (80011ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ca:	f7ff ffd7 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f007 f925 	bl	800841c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fbb5 	bl	8000940 <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011e4:	08009338 	.word	0x08009338
  ldr r2, =_sbss
 80011e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011ec:	20000a90 	.word	0x20000a90

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f94f 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fd78 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f967 	bl	800152a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001274:	f000 f92f 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000810 	.word	0x20000810

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000810 	.word	0x20000810

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e00e      	b.n	8001572 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	795b      	ldrb	r3, [r3, #5]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fc01 	bl	8000d6c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff fe9a 	bl	80012c0 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e099      	b.n	80016cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b8:	e00f      	b.n	80015da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ba:	f7ff fe81 	bl	80012c0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d908      	bls.n	80015da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e078      	b.n	80016cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e8      	bne.n	80015ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_DMA_Init+0x158>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4313      	orrs	r3, r2
 800162a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	2b04      	cmp	r3, #4
 8001632:	d107      	bne.n	8001644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4313      	orrs	r3, r2
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f023 0307 	bic.w	r3, r3, #7
 800165a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b04      	cmp	r3, #4
 800166c:	d117      	bne.n	800169e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00e      	beq.n	800169e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fa0b 	bl	8001a9c <DMA_CheckFifoParam>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800169a:	2301      	movs	r3, #1
 800169c:	e016      	b.n	80016cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f9c2 	bl	8001a30 <DMA_CalcBaseAndBitshift>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	223f      	movs	r2, #63	; 0x3f
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	f010803f 	.word	0xf010803f

080016d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d004      	beq.n	80016f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00c      	b.n	8001710 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2205      	movs	r2, #5
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001728:	4b8e      	ldr	r3, [pc, #568]	; (8001964 <HAL_DMA_IRQHandler+0x248>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a8e      	ldr	r2, [pc, #568]	; (8001968 <HAL_DMA_IRQHandler+0x24c>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0a9b      	lsrs	r3, r3, #10
 8001734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2208      	movs	r2, #8
 8001748:	409a      	lsls	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d01a      	beq.n	8001788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0204 	bic.w	r2, r2, #4
 800176e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	2208      	movs	r2, #8
 8001776:	409a      	lsls	r2, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	2201      	movs	r2, #1
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d012      	beq.n	80017be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	2201      	movs	r2, #1
 80017ac:	409a      	lsls	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	f043 0202 	orr.w	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2204      	movs	r2, #4
 80017c4:	409a      	lsls	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d012      	beq.n	80017f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00b      	beq.n	80017f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	2204      	movs	r2, #4
 80017e2:	409a      	lsls	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f043 0204 	orr.w	r2, r3, #4
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2210      	movs	r2, #16
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d043      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d03c      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	2210      	movs	r2, #16
 8001818:	409a      	lsls	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d018      	beq.n	800185e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d024      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
 800184a:	e01f      	b.n	800188c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01b      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	4798      	blx	r3
 800185c:	e016      	b.n	800188c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0208 	bic.w	r2, r2, #8
 800187a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	2220      	movs	r2, #32
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 808f 	beq.w	80019bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8087 	beq.w	80019bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	2220      	movs	r2, #32
 80018b4:	409a      	lsls	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d136      	bne.n	8001934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0216 	bic.w	r2, r2, #22
 80018d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <HAL_DMA_IRQHandler+0x1da>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0208 	bic.w	r2, r2, #8
 8001904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	223f      	movs	r2, #63	; 0x3f
 800190c:	409a      	lsls	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001926:	2b00      	cmp	r3, #0
 8001928:	d07e      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
        }
        return;
 8001932:	e079      	b.n	8001a28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01d      	beq.n	800197e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10d      	bne.n	800196c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	2b00      	cmp	r3, #0
 8001956:	d031      	beq.n	80019bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
 8001960:	e02c      	b.n	80019bc <HAL_DMA_IRQHandler+0x2a0>
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000
 8001968:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	2b00      	cmp	r3, #0
 8001972:	d023      	beq.n	80019bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
 800197c:	e01e      	b.n	80019bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10f      	bne.n	80019ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0210 	bic.w	r2, r2, #16
 800199a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d032      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d022      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2205      	movs	r2, #5
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d307      	bcc.n	8001a04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f2      	bne.n	80019e8 <HAL_DMA_IRQHandler+0x2cc>
 8001a02:	e000      	b.n	8001a06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
 8001a26:	e000      	b.n	8001a2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a28:	bf00      	nop
    }
  }
}
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	3b10      	subs	r3, #16
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <DMA_CalcBaseAndBitshift+0x64>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <DMA_CalcBaseAndBitshift+0x68>)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d909      	bls.n	8001a72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a66:	f023 0303 	bic.w	r3, r3, #3
 8001a6a:	1d1a      	adds	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a70:	e007      	b.n	8001a82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	aaaaaaab 	.word	0xaaaaaaab
 8001a98:	08009258 	.word	0x08009258

08001a9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d11f      	bne.n	8001af6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d856      	bhi.n	8001b6a <DMA_CheckFifoParam+0xce>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <DMA_CheckFifoParam+0x28>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001ae7 	.word	0x08001ae7
 8001acc:	08001ad5 	.word	0x08001ad5
 8001ad0:	08001b6b 	.word	0x08001b6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d046      	beq.n	8001b6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae4:	e043      	b.n	8001b6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aee:	d140      	bne.n	8001b72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af4:	e03d      	b.n	8001b72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afe:	d121      	bne.n	8001b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d837      	bhi.n	8001b76 <DMA_CheckFifoParam+0xda>
 8001b06:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <DMA_CheckFifoParam+0x70>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b1d 	.word	0x08001b1d
 8001b10:	08001b23 	.word	0x08001b23
 8001b14:	08001b1d 	.word	0x08001b1d
 8001b18:	08001b35 	.word	0x08001b35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b20:	e030      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d025      	beq.n	8001b7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b32:	e022      	b.n	8001b7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b3c:	d11f      	bne.n	8001b7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b42:	e01c      	b.n	8001b7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d903      	bls.n	8001b52 <DMA_CheckFifoParam+0xb6>
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d003      	beq.n	8001b58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b50:	e018      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
      break;
 8001b56:	e015      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00e      	beq.n	8001b82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
      break;
 8001b68:	e00b      	b.n	8001b82 <DMA_CheckFifoParam+0xe6>
      break;
 8001b6a:	bf00      	nop
 8001b6c:	e00a      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e008      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b72:	bf00      	nop
 8001b74:	e006      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b76:	bf00      	nop
 8001b78:	e004      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e002      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b7e:	bf00      	nop
 8001b80:	e000      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
    }
  } 
  
  return status; 
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e165      	b.n	8001e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8154 	bne.w	8001e76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d005      	beq.n	8001be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80ae 	beq.w	8001e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_GPIO_Init+0x300>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a5c      	ldr	r2, [pc, #368]	; (8001e94 <HAL_GPIO_Init+0x300>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_GPIO_Init+0x300>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4f      	ldr	r2, [pc, #316]	; (8001e9c <HAL_GPIO_Init+0x308>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d025      	beq.n	8001dae <HAL_GPIO_Init+0x21a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4e      	ldr	r2, [pc, #312]	; (8001ea0 <HAL_GPIO_Init+0x30c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <HAL_GPIO_Init+0x216>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x212>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_GPIO_Init+0x314>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x20e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4b      	ldr	r2, [pc, #300]	; (8001eac <HAL_GPIO_Init+0x318>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x20a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <HAL_GPIO_Init+0x31c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <HAL_GPIO_Init+0x320>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x202>
 8001d92:	2306      	movs	r3, #6
 8001d94:	e00c      	b.n	8001db0 <HAL_GPIO_Init+0x21c>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00a      	b.n	8001db0 <HAL_GPIO_Init+0x21c>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e008      	b.n	8001db0 <HAL_GPIO_Init+0x21c>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x21c>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e004      	b.n	8001db0 <HAL_GPIO_Init+0x21c>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_Init+0x21c>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x21c>
 8001dae:	2300      	movs	r3, #0
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	f002 0203 	and.w	r2, r2, #3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4093      	lsls	r3, r2
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc0:	4935      	ldr	r1, [pc, #212]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dce:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df2:	4a31      	ldr	r2, [pc, #196]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e1c:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e22:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e70:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b0f      	cmp	r3, #15
 8001e80:	f67f ae96 	bls.w	8001bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020c00 	.word	0x40020c00
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40021400 	.word	0x40021400
 8001eb4:	40021800 	.word	0x40021800
 8001eb8:	40013c00 	.word	0x40013c00

08001ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e001      	b.n	8001ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0cc      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d90c      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d044      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d119      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e067      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4934      	ldr	r1, [pc, #208]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f970 	bl	80012c0 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7ff f96c 	bl	80012c0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e04f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20c      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002072:	f000 fb7f 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f8d0 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08009240 	.word	0x08009240
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_RCC_GetHCLKFreq+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020d4:	f7ff fff0 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0a9b      	lsrs	r3, r3, #10
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08009250 	.word	0x08009250

080020f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020fc:	f7ff ffdc 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0b5b      	lsrs	r3, r3, #13
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4903      	ldr	r1, [pc, #12]	; (800211c <HAL_RCC_GetPCLK2Freq+0x24>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	08009250 	.word	0x08009250

08002120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002158:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800215e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	496c      	ldr	r1, [pc, #432]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002176:	2301      	movs	r3, #1
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d010      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002186:	4b64      	ldr	r3, [pc, #400]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800218c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	4960      	ldr	r1, [pc, #384]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d017      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021b4:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4955      	ldr	r1, [pc, #340]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021d2:	d101      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80021d4:	2301      	movs	r3, #1
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80021e0:	2301      	movs	r3, #1
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d017      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021f0:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	4946      	ldr	r1, [pc, #280]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800220e:	d101      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002210:	2301      	movs	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800221c:	2301      	movs	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 808a 	beq.w	8002342 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a38      	ldr	r2, [pc, #224]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a33      	ldr	r2, [pc, #204]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002254:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002256:	f7ff f833 	bl	80012c0 <HAL_GetTick>
 800225a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7ff f82f 	bl	80012c0 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e278      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002284:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02f      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002294:	6a3a      	ldr	r2, [r7, #32]
 8002296:	429a      	cmp	r2, r3
 8002298:	d028      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d114      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fffd 	bl	80012c0 <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fff9 	bl	80012c0 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e240      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ee      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022f8:	d114      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800230a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230e:	4902      	ldr	r1, [pc, #8]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]
 8002314:	e00c      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40007000 	.word	0x40007000
 8002320:	42470e40 	.word	0x42470e40
 8002324:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a49      	ldr	r2, [pc, #292]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800232a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	4944      	ldr	r1, [pc, #272]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800233e:	4313      	orrs	r3, r2
 8002340:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002354:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002356:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4937      	ldr	r1, [pc, #220]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002394:	492e      	ldr	r1, [pc, #184]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d011      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	4926      	ldr	r1, [pc, #152]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c6:	d101      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80023c8:	2301      	movs	r3, #1
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	491a      	ldr	r1, [pc, #104]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d011      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002400:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002408:	4911      	ldr	r1, [pc, #68]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002418:	d101      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800241a:	2301      	movs	r3, #1
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d005      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242c:	f040 80ff 	bne.w	800262e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002436:	f7fe ff43 	bl	80012c0 <HAL_GetTick>
 800243a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800243c:	e00e      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800243e:	f7fe ff3f 	bl	80012c0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d907      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e188      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002450:	40023800 	.word	0x40023800
 8002454:	424711e0 	.word	0x424711e0
 8002458:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800245c:	4b7e      	ldr	r3, [pc, #504]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ea      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002484:	2b00      	cmp	r3, #0
 8002486:	d028      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d124      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002490:	4b71      	ldr	r3, [pc, #452]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	3301      	adds	r3, #1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024a2:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a8:	0e1b      	lsrs	r3, r3, #24
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	019b      	lsls	r3, r3, #6
 80024ba:	431a      	orrs	r2, r3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	3b01      	subs	r3, #1
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	071b      	lsls	r3, r3, #28
 80024d2:	4961      	ldr	r1, [pc, #388]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d035      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d130      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002506:	4b54      	ldr	r3, [pc, #336]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002518:	4b4f      	ldr	r3, [pc, #316]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251e:	0f1b      	lsrs	r3, r3, #28
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	019b      	lsls	r3, r3, #6
 8002530:	431a      	orrs	r2, r3
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3b01      	subs	r3, #1
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	431a      	orrs	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	071b      	lsls	r3, r3, #28
 8002548:	4943      	ldr	r1, [pc, #268]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002550:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002556:	f023 021f 	bic.w	r2, r3, #31
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	493d      	ldr	r1, [pc, #244]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d029      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800257c:	d124      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002590:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002596:	0f1b      	lsrs	r3, r3, #28
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	019b      	lsls	r3, r3, #6
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	431a      	orrs	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	071b      	lsls	r3, r3, #28
 80025c0:	4925      	ldr	r1, [pc, #148]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	4917      	ldr	r1, [pc, #92]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002608:	f7fe fe5a 	bl	80012c0 <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002610:	f7fe fe56 	bl	80012c0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e09f      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 8095 	bne.w	8002760 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800263c:	f7fe fe40 	bl	80012c0 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002642:	e00f      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002644:	f7fe fe3c 	bl	80012c0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d908      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e085      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	42470068 	.word	0x42470068
 8002660:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002664:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800266c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002670:	d0e8      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800268e:	2b00      	cmp	r3, #0
 8002690:	d02b      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002696:	2b00      	cmp	r3, #0
 8002698:	d127      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	019b      	lsls	r3, r3, #6
 80026b6:	431a      	orrs	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	3b01      	subs	r3, #1
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	061b      	lsls	r3, r3, #24
 80026c8:	4928      	ldr	r1, [pc, #160]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	3b01      	subs	r3, #1
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	4922      	ldr	r1, [pc, #136]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01d      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026fe:	d118      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	0e1b      	lsrs	r3, r3, #24
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	019b      	lsls	r3, r3, #6
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	4910      	ldr	r1, [pc, #64]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002738:	f7fe fdc2 	bl	80012c0 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002740:	f7fe fdbe 	bl	80012c0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e007      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800275a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800275e:	d1ef      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3730      	adds	r7, #48	; 0x30
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	42470070 	.word	0x42470070

08002774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002778:	b0ae      	sub	sp, #184	; 0xb8
 800277a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279a:	4bcb      	ldr	r3, [pc, #812]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	f200 8206 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x440>
 80027a8:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	08002bb5 	.word	0x08002bb5
 80027b8:	08002bb5 	.word	0x08002bb5
 80027bc:	08002bb5 	.word	0x08002bb5
 80027c0:	080027ed 	.word	0x080027ed
 80027c4:	08002bb5 	.word	0x08002bb5
 80027c8:	08002bb5 	.word	0x08002bb5
 80027cc:	08002bb5 	.word	0x08002bb5
 80027d0:	080027f5 	.word	0x080027f5
 80027d4:	08002bb5 	.word	0x08002bb5
 80027d8:	08002bb5 	.word	0x08002bb5
 80027dc:	08002bb5 	.word	0x08002bb5
 80027e0:	080029e5 	.word	0x080029e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4bb9      	ldr	r3, [pc, #740]	; (8002acc <HAL_RCC_GetSysClockFreq+0x358>)
 80027e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80027ea:	e1e7      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ec:	4bb8      	ldr	r3, [pc, #736]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027f2:	e1e3      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f4:	4bb4      	ldr	r3, [pc, #720]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002800:	4bb1      	ldr	r3, [pc, #708]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d071      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280c:	4bae      	ldr	r3, [pc, #696]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002818:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800281c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800282e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002832:	4622      	mov	r2, r4
 8002834:	462b      	mov	r3, r5
 8002836:	f04f 0000 	mov.w	r0, #0
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	0159      	lsls	r1, r3, #5
 8002840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002844:	0150      	lsls	r0, r2, #5
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4621      	mov	r1, r4
 800284c:	1a51      	subs	r1, r2, r1
 800284e:	6439      	str	r1, [r7, #64]	; 0x40
 8002850:	4629      	mov	r1, r5
 8002852:	eb63 0301 	sbc.w	r3, r3, r1
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002864:	4649      	mov	r1, r9
 8002866:	018b      	lsls	r3, r1, #6
 8002868:	4641      	mov	r1, r8
 800286a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286e:	4641      	mov	r1, r8
 8002870:	018a      	lsls	r2, r1, #6
 8002872:	4641      	mov	r1, r8
 8002874:	1a51      	subs	r1, r2, r1
 8002876:	63b9      	str	r1, [r7, #56]	; 0x38
 8002878:	4649      	mov	r1, r9
 800287a:	eb63 0301 	sbc.w	r3, r3, r1
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800288c:	4649      	mov	r1, r9
 800288e:	00cb      	lsls	r3, r1, #3
 8002890:	4641      	mov	r1, r8
 8002892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002896:	4641      	mov	r1, r8
 8002898:	00ca      	lsls	r2, r1, #3
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	4622      	mov	r2, r4
 80028a2:	189b      	adds	r3, r3, r2
 80028a4:	633b      	str	r3, [r7, #48]	; 0x30
 80028a6:	462b      	mov	r3, r5
 80028a8:	460a      	mov	r2, r1
 80028aa:	eb42 0303 	adc.w	r3, r2, r3
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028bc:	4629      	mov	r1, r5
 80028be:	024b      	lsls	r3, r1, #9
 80028c0:	4621      	mov	r1, r4
 80028c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028c6:	4621      	mov	r1, r4
 80028c8:	024a      	lsls	r2, r1, #9
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028e0:	f7fd fcee 	bl	80002c0 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028ee:	e067      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f0:	4b75      	ldr	r3, [pc, #468]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002908:	67bb      	str	r3, [r7, #120]	; 0x78
 800290a:	2300      	movs	r3, #0
 800290c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800290e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002912:	4622      	mov	r2, r4
 8002914:	462b      	mov	r3, r5
 8002916:	f04f 0000 	mov.w	r0, #0
 800291a:	f04f 0100 	mov.w	r1, #0
 800291e:	0159      	lsls	r1, r3, #5
 8002920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002924:	0150      	lsls	r0, r2, #5
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4621      	mov	r1, r4
 800292c:	1a51      	subs	r1, r2, r1
 800292e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002930:	4629      	mov	r1, r5
 8002932:	eb63 0301 	sbc.w	r3, r3, r1
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002944:	4649      	mov	r1, r9
 8002946:	018b      	lsls	r3, r1, #6
 8002948:	4641      	mov	r1, r8
 800294a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800294e:	4641      	mov	r1, r8
 8002950:	018a      	lsls	r2, r1, #6
 8002952:	4641      	mov	r1, r8
 8002954:	ebb2 0a01 	subs.w	sl, r2, r1
 8002958:	4649      	mov	r1, r9
 800295a:	eb63 0b01 	sbc.w	fp, r3, r1
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800296a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800296e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002972:	4692      	mov	sl, r2
 8002974:	469b      	mov	fp, r3
 8002976:	4623      	mov	r3, r4
 8002978:	eb1a 0303 	adds.w	r3, sl, r3
 800297c:	623b      	str	r3, [r7, #32]
 800297e:	462b      	mov	r3, r5
 8002980:	eb4b 0303 	adc.w	r3, fp, r3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002992:	4629      	mov	r1, r5
 8002994:	028b      	lsls	r3, r1, #10
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800299c:	4621      	mov	r1, r4
 800299e:	028a      	lsls	r2, r1, #10
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029a8:	2200      	movs	r2, #0
 80029aa:	673b      	str	r3, [r7, #112]	; 0x70
 80029ac:	677a      	str	r2, [r7, #116]	; 0x74
 80029ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029b2:	f7fd fc85 	bl	80002c0 <__aeabi_uldivmod>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4613      	mov	r3, r2
 80029bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c0:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	3301      	adds	r3, #1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029e2:	e0eb      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e4:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d06b      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fc:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	2200      	movs	r2, #0
 8002a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a10:	2300      	movs	r3, #0
 8002a12:	667b      	str	r3, [r7, #100]	; 0x64
 8002a14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a18:	4622      	mov	r2, r4
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	f04f 0000 	mov.w	r0, #0
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	0159      	lsls	r1, r3, #5
 8002a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2a:	0150      	lsls	r0, r2, #5
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4621      	mov	r1, r4
 8002a32:	1a51      	subs	r1, r2, r1
 8002a34:	61b9      	str	r1, [r7, #24]
 8002a36:	4629      	mov	r1, r5
 8002a38:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a4a:	4659      	mov	r1, fp
 8002a4c:	018b      	lsls	r3, r1, #6
 8002a4e:	4651      	mov	r1, sl
 8002a50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a54:	4651      	mov	r1, sl
 8002a56:	018a      	lsls	r2, r1, #6
 8002a58:	4651      	mov	r1, sl
 8002a5a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a5e:	4659      	mov	r1, fp
 8002a60:	eb63 0901 	sbc.w	r9, r3, r1
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a78:	4690      	mov	r8, r2
 8002a7a:	4699      	mov	r9, r3
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	eb18 0303 	adds.w	r3, r8, r3
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	462b      	mov	r3, r5
 8002a86:	eb49 0303 	adc.w	r3, r9, r3
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a98:	4629      	mov	r1, r5
 8002a9a:	024b      	lsls	r3, r1, #9
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	024a      	lsls	r2, r1, #9
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aae:	2200      	movs	r2, #0
 8002ab0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ab2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ab4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ab8:	f7fd fc02 	bl	80002c0 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ac6:	e065      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x420>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad4:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x458>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	2200      	movs	r2, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	4611      	mov	r1, r2
 8002ae0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	657b      	str	r3, [r7, #84]	; 0x54
 8002aea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002aee:	4642      	mov	r2, r8
 8002af0:	464b      	mov	r3, r9
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	0159      	lsls	r1, r3, #5
 8002afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b00:	0150      	lsls	r0, r2, #5
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4641      	mov	r1, r8
 8002b08:	1a51      	subs	r1, r2, r1
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b20:	4659      	mov	r1, fp
 8002b22:	018b      	lsls	r3, r1, #6
 8002b24:	4651      	mov	r1, sl
 8002b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	018a      	lsls	r2, r1, #6
 8002b2e:	4651      	mov	r1, sl
 8002b30:	1a54      	subs	r4, r2, r1
 8002b32:	4659      	mov	r1, fp
 8002b34:	eb63 0501 	sbc.w	r5, r3, r1
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	00eb      	lsls	r3, r5, #3
 8002b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b46:	00e2      	lsls	r2, r4, #3
 8002b48:	4614      	mov	r4, r2
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	18e3      	adds	r3, r4, r3
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	464b      	mov	r3, r9
 8002b54:	eb45 0303 	adc.w	r3, r5, r3
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b66:	4629      	mov	r1, r5
 8002b68:	028b      	lsls	r3, r1, #10
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b70:	4621      	mov	r1, r4
 8002b72:	028a      	lsls	r2, r1, #10
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b80:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b86:	f7fd fb9b 	bl	80002c0 <__aeabi_uldivmod>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4613      	mov	r3, r2
 8002b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x458>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0f1b      	lsrs	r3, r3, #28
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bb2:	e003      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	37b8      	adds	r7, #184	; 0xb8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	00f42400 	.word	0x00f42400

08002bd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e28d      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8083 	beq.w	8002cfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bf4:	4b94      	ldr	r3, [pc, #592]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d019      	beq.n	8002c34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c00:	4b91      	ldr	r3, [pc, #580]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c0c:	4b8e      	ldr	r3, [pc, #568]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c18:	d00c      	beq.n	8002c34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1a:	4b8b      	ldr	r3, [pc, #556]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d112      	bne.n	8002c4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c26:	4b88      	ldr	r3, [pc, #544]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c32:	d10b      	bne.n	8002c4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d05b      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x124>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d157      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e25a      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_OscConfig+0x90>
 8002c56:	4b7c      	ldr	r3, [pc, #496]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7b      	ldr	r2, [pc, #492]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e01d      	b.n	8002ca0 <HAL_RCC_OscConfig+0xcc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0xb4>
 8002c6e:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a75      	ldr	r2, [pc, #468]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a72      	ldr	r2, [pc, #456]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0xcc>
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6e      	ldr	r2, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6b      	ldr	r2, [pc, #428]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fb0a 	bl	80012c0 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fb06 	bl	80012c0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e21f      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xdc>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe faf6 	bl	80012c0 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe faf2 	bl	80012c0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e20b      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x104>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d06f      	beq.n	8002de6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d06:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d017      	beq.n	8002d42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d12:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b44      	ldr	r3, [pc, #272]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x186>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1d3      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4937      	ldr	r1, [pc, #220]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e03a      	b.n	8002de6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b34      	ldr	r3, [pc, #208]	; (8002e4c <HAL_RCC_OscConfig+0x278>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fa9f 	bl	80012c0 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe fa9b 	bl	80012c0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1b4      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4925      	ldr	r1, [pc, #148]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <HAL_RCC_OscConfig+0x278>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fa7e 	bl	80012c0 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fa7a 	bl	80012c0 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e193      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d036      	beq.n	8002e60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fa5e 	bl	80012c0 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe fa5a 	bl	80012c0 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e173      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x234>
 8002e26:	e01b      	b.n	8002e60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fa47 	bl	80012c0 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	e00e      	b.n	8002e54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fe fa43 	bl	80012c0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d907      	bls.n	8002e54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e15c      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	42470000 	.word	0x42470000
 8002e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ea      	bne.n	8002e36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8097 	beq.w	8002f9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e72:	4b83      	ldr	r3, [pc, #524]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	4b7f      	ldr	r3, [pc, #508]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	4a7e      	ldr	r2, [pc, #504]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b7c      	ldr	r3, [pc, #496]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b79      	ldr	r3, [pc, #484]	; (8003084 <HAL_RCC_OscConfig+0x4b0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d118      	bne.n	8002edc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eaa:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x4b0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a75      	ldr	r2, [pc, #468]	; (8003084 <HAL_RCC_OscConfig+0x4b0>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fa03 	bl	80012c0 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebe:	f7fe f9ff 	bl	80012c0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e118      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	4b6c      	ldr	r3, [pc, #432]	; (8003084 <HAL_RCC_OscConfig+0x4b0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x31e>
 8002ee4:	4b66      	ldr	r3, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a65      	ldr	r2, [pc, #404]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef0:	e01c      	b.n	8002f2c <HAL_RCC_OscConfig+0x358>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x340>
 8002efa:	4b61      	ldr	r3, [pc, #388]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a60      	ldr	r2, [pc, #384]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a5d      	ldr	r2, [pc, #372]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0x358>
 8002f14:	4b5a      	ldr	r3, [pc, #360]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4a59      	ldr	r2, [pc, #356]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a56      	ldr	r2, [pc, #344]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f26:	f023 0304 	bic.w	r3, r3, #4
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d015      	beq.n	8002f60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe f9c4 	bl	80012c0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f9c0 	bl	80012c0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e0d7      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0ee      	beq.n	8002f3c <HAL_RCC_OscConfig+0x368>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f9ae 	bl	80012c0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe f9aa 	bl	80012c0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0c1      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7e:	4b40      	ldr	r3, [pc, #256]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1ee      	bne.n	8002f68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80ad 	beq.w	8003100 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d060      	beq.n	8003074 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d145      	bne.n	8003046 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_RCC_OscConfig+0x4b4>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f97e 	bl	80012c0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe f97a 	bl	80012c0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e093      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	4b29      	ldr	r3, [pc, #164]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	019b      	lsls	r3, r3, #6
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	3b01      	subs	r3, #1
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	071b      	lsls	r3, r3, #28
 8003012:	491b      	ldr	r1, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x4b4>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe f94f 	bl	80012c0 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe f94b 	bl	80012c0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e064      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x452>
 8003044:	e05c      	b.n	8003100 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x4b4>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe f938 	bl	80012c0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe f934 	bl	80012c0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e04d      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_OscConfig+0x4ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x480>
 8003072:	e045      	b.n	8003100 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e040      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
 8003080:	40023800 	.word	0x40023800
 8003084:	40007000 	.word	0x40007000
 8003088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800308c:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_RCC_OscConfig+0x538>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d030      	beq.n	80030fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d129      	bne.n	80030fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d122      	bne.n	80030fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d119      	bne.n	80030fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	3b01      	subs	r3, #1
 80030d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d10f      	bne.n	80030fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800

08003110 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e022      	b.n	8003168 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7fd fe3b 	bl	8000db0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2203      	movs	r2, #3
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f814 	bl	8003170 <HAL_SD_InitCard>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00a      	b.n	8003168 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003170:	b5b0      	push	{r4, r5, r7, lr}
 8003172:	b08e      	sub	sp, #56	; 0x38
 8003174:	af04      	add	r7, sp, #16
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800318c:	2376      	movs	r3, #118	; 0x76
 800318e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681d      	ldr	r5, [r3, #0]
 8003194:	466c      	mov	r4, sp
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800319e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031a2:	f107 0308 	add.w	r3, r7, #8
 80031a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a8:	4628      	mov	r0, r5
 80031aa:	f001 ff91 	bl	80050d0 <SDIO_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80031b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e04f      	b.n	8003260 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80031c0:	4b29      	ldr	r3, [pc, #164]	; (8003268 <HAL_SD_InitCard+0xf8>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 ffc9 	bl	8005162 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80031d0:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_SD_InitCard+0xf8>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80031d6:	2002      	movs	r0, #2
 80031d8:	f7fe f87e 	bl	80012d8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f001 f8f1 	bl	80043c4 <SD_PowerON>
 80031e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e02e      	b.n	8003260 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 f810 	bl	8004228 <SD_InitCard>
 8003208:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e01b      	b.n	8003260 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003230:	4618      	mov	r0, r3
 8003232:	f002 f828 	bl	8005286 <SDMMC_CmdBlockLength>
 8003236:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00f      	beq.n	800325e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <HAL_SD_InitCard+0xfc>)
 8003244:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3728      	adds	r7, #40	; 0x28
 8003264:	46bd      	mov	sp, r7
 8003266:	bdb0      	pop	{r4, r5, r7, pc}
 8003268:	422580a0 	.word	0x422580a0
 800326c:	004005ff 	.word	0x004005ff

08003270 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b092      	sub	sp, #72	; 0x48
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800327e:	f7fe f81f 	bl	80012c0 <HAL_GetTick>
 8003282:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e1bd      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	f040 81b0 	bne.w	8003610 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	441a      	add	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d907      	bls.n	80032d4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e1a4      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2200      	movs	r2, #0
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d002      	beq.n	80032f2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80032ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ee:	025b      	lsls	r3, r3, #9
 80032f0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032f6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	025b      	lsls	r3, r3, #9
 80032fc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032fe:	2390      	movs	r3, #144	; 0x90
 8003300:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003302:	2302      	movs	r3, #2
 8003304:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800330a:	2301      	movs	r3, #1
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f107 0214 	add.w	r2, r7, #20
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f001 ff88 	bl	800522e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d90a      	bls.n	800333a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2202      	movs	r2, #2
 8003328:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003330:	4618      	mov	r0, r3
 8003332:	f001 ffec 	bl	800530e <SDMMC_CmdReadMultiBlock>
 8003336:	6478      	str	r0, [r7, #68]	; 0x44
 8003338:	e009      	b.n	800334e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003346:	4618      	mov	r0, r3
 8003348:	f001 ffbf 	bl	80052ca <SDMMC_CmdReadSingleBlock>
 800334c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800334e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003350:	2b00      	cmp	r3, #0
 8003352:	d012      	beq.n	800337a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a7a      	ldr	r2, [pc, #488]	; (8003544 <HAL_SD_ReadBlocks+0x2d4>)
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003362:	431a      	orrs	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e151      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800337e:	e061      	b.n	8003444 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d03c      	beq.n	8003408 <HAL_SD_ReadBlocks+0x198>
 800338e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d039      	beq.n	8003408 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003394:	2300      	movs	r3, #0
 8003396:	643b      	str	r3, [r7, #64]	; 0x40
 8003398:	e033      	b.n	8003402 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f001 fec1 	bl	8005126 <SDIO_ReadFIFO>
 80033a4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80033ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b0:	3301      	adds	r3, #1
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b6:	3b01      	subs	r3, #1
 80033b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80033c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c6:	3301      	adds	r3, #1
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033cc:	3b01      	subs	r3, #1
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80033da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033dc:	3301      	adds	r3, #1
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e2:	3b01      	subs	r3, #1
 80033e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	0e1b      	lsrs	r3, r3, #24
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	3301      	adds	r3, #1
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	3b01      	subs	r3, #1
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80033fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fe:	3301      	adds	r3, #1
 8003400:	643b      	str	r3, [r7, #64]	; 0x40
 8003402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003404:	2b07      	cmp	r3, #7
 8003406:	d9c8      	bls.n	800339a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003408:	f7fd ff5a 	bl	80012c0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003414:	429a      	cmp	r2, r3
 8003416:	d902      	bls.n	800341e <HAL_SD_ReadBlocks+0x1ae>
 8003418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341a:	2b00      	cmp	r3, #0
 800341c:	d112      	bne.n	8003444 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a48      	ldr	r2, [pc, #288]	; (8003544 <HAL_SD_ReadBlocks+0x2d4>)
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0ec      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800344e:	2b00      	cmp	r3, #0
 8003450:	d096      	beq.n	8003380 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d022      	beq.n	80034a6 <HAL_SD_ReadBlocks+0x236>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d91f      	bls.n	80034a6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	2b03      	cmp	r3, #3
 800346c:	d01b      	beq.n	80034a6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f001 ffb2 	bl	80053dc <SDMMC_CmdStopTransfer>
 8003478:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800347a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347c:	2b00      	cmp	r3, #0
 800347e:	d012      	beq.n	80034a6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <HAL_SD_ReadBlocks+0x2d4>)
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348e:	431a      	orrs	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0bb      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d012      	beq.n	80034da <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a22      	ldr	r2, [pc, #136]	; (8003544 <HAL_SD_ReadBlocks+0x2d4>)
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	f043 0208 	orr.w	r2, r3, #8
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0a1      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d012      	beq.n	800350e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_SD_ReadBlocks+0x2d4>)
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	f043 0202 	orr.w	r2, r3, #2
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e087      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d064      	beq.n	80035e6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a08      	ldr	r2, [pc, #32]	; (8003544 <HAL_SD_ReadBlocks+0x2d4>)
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06d      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
 8003542:	bf00      	nop
 8003544:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f001 fdea 	bl	8005126 <SDIO_ReadFIFO>
 8003552:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	b2da      	uxtb	r2, r3
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	3301      	adds	r3, #1
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003564:	3b01      	subs	r3, #1
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	b2da      	uxtb	r2, r3
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003574:	3301      	adds	r3, #1
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	3b01      	subs	r3, #1
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	b2da      	uxtb	r2, r3
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	3301      	adds	r3, #1
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800358e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003590:	3b01      	subs	r3, #1
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	0e1b      	lsrs	r3, r3, #24
 8003598:	b2da      	uxtb	r2, r3
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	3301      	adds	r3, #1
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a6:	3b01      	subs	r3, #1
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035aa:	f7fd fe89 	bl	80012c0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d902      	bls.n	80035c0 <HAL_SD_ReadBlocks+0x350>
 80035ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d112      	bne.n	80035e6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a18      	ldr	r2, [pc, #96]	; (8003628 <HAL_SD_ReadBlocks+0x3b8>)
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e01b      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SD_ReadBlocks+0x38a>
 80035f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1a6      	bne.n	8003548 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8003602:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e006      	b.n	800361e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3748      	adds	r7, #72	; 0x48
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	004005ff 	.word	0x004005ff

0800362c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b092      	sub	sp, #72	; 0x48
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800363a:	f7fd fe41 	bl	80012c0 <HAL_GetTick>
 800363e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e165      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	f040 8158 	bne.w	800391c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	441a      	add	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	429a      	cmp	r2, r3
 800367e:	d907      	bls.n	8003690 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e14c      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2203      	movs	r2, #3
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d002      	beq.n	80036ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	025b      	lsls	r3, r3, #9
 80036ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	025b      	lsls	r3, r3, #9
 80036b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80036ba:	2390      	movs	r3, #144	; 0x90
 80036bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80036c6:	2301      	movs	r3, #1
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f107 0218 	add.w	r2, r7, #24
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fdaa 	bl	800522e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d90a      	bls.n	80036f6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fe52 	bl	8005396 <SDMMC_CmdWriteMultiBlock>
 80036f2:	6478      	str	r0, [r7, #68]	; 0x44
 80036f4:	e009      	b.n	800370a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2210      	movs	r2, #16
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fe25 	bl	8005352 <SDMMC_CmdWriteSingleBlock>
 8003708:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800370a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370c:	2b00      	cmp	r3, #0
 800370e:	d012      	beq.n	8003736 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a87      	ldr	r2, [pc, #540]	; (8003934 <HAL_SD_WriteBlocks+0x308>)
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371e:	431a      	orrs	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0f9      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800373a:	e065      	b.n	8003808 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d040      	beq.n	80037cc <HAL_SD_WriteBlocks+0x1a0>
 800374a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03d      	beq.n	80037cc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003750:	2300      	movs	r3, #0
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
 8003754:	e037      	b.n	80037c6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	3301      	adds	r3, #1
 8003760:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	3b01      	subs	r3, #1
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003776:	3301      	adds	r3, #1
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	3b01      	subs	r3, #1
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378e:	3301      	adds	r3, #1
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	3b01      	subs	r3, #1
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	061a      	lsls	r2, r3, #24
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a6:	3301      	adds	r3, #1
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ac:	3b01      	subs	r3, #1
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f107 0214 	add.w	r2, r7, #20
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fcc0 	bl	8005140 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80037c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c2:	3301      	adds	r3, #1
 80037c4:	643b      	str	r3, [r7, #64]	; 0x40
 80037c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c8:	2b07      	cmp	r3, #7
 80037ca:	d9c4      	bls.n	8003756 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80037cc:	f7fd fd78 	bl	80012c0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037d8:	429a      	cmp	r2, r3
 80037da:	d902      	bls.n	80037e2 <HAL_SD_WriteBlocks+0x1b6>
 80037dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d112      	bne.n	8003808 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a53      	ldr	r2, [pc, #332]	; (8003934 <HAL_SD_WriteBlocks+0x308>)
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e090      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003812:	2b00      	cmp	r3, #0
 8003814:	d092      	beq.n	800373c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d022      	beq.n	800386a <HAL_SD_WriteBlocks+0x23e>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d91f      	bls.n	800386a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	2b03      	cmp	r3, #3
 8003830:	d01b      	beq.n	800386a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f001 fdd0 	bl	80053dc <SDMMC_CmdStopTransfer>
 800383c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800383e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a3a      	ldr	r2, [pc, #232]	; (8003934 <HAL_SD_WriteBlocks+0x308>)
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003852:	431a      	orrs	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e05f      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <HAL_SD_WriteBlocks+0x308>)
 800387e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	f043 0208 	orr.w	r2, r3, #8
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e045      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d012      	beq.n	80038d2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a20      	ldr	r2, [pc, #128]	; (8003934 <HAL_SD_WriteBlocks+0x308>)
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	f043 0202 	orr.w	r2, r3, #2
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e02b      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d012      	beq.n	8003906 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_SD_WriteBlocks+0x308>)
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	f043 0210 	orr.w	r2, r3, #16
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e011      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f240 523a 	movw	r2, #1338	; 0x53a
 800390e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e006      	b.n	800392a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	3748      	adds	r7, #72	; 0x48
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	004005ff 	.word	0x004005ff

08003938 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_SD_IRQHandler+0x2e>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 ff4f 	bl	8004802 <SD_Read_IT>
 8003964:	e155      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 808f 	beq.w	8003a94 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800398e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003992:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d039      	beq.n	8003a22 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <HAL_SD_IRQHandler+0x8a>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d011      	beq.n	80039e6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 fd08 	bl	80053dc <SDMMC_CmdStopTransfer>
 80039cc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f91f 	bl	8003c24 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <HAL_SD_IRQHandler+0xda>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f002 f97e 	bl	8005d14 <HAL_SD_RxCpltCallback>
 8003a18:	e0fb      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f002 f970 	bl	8005d00 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a20:	e0f7      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80f2 	beq.w	8003c12 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d011      	beq.n	8003a5c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fccd 	bl	80053dc <SDMMC_CmdStopTransfer>
 8003a42:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f8e4 	bl	8003c24 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 80d5 	bne.w	8003c12 <HAL_SD_IRQHandler+0x2da>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 80cf 	bne.w	8003c12 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0208 	bic.w	r2, r2, #8
 8003a82:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f002 f937 	bl	8005d00 <HAL_SD_TxCpltCallback>
}
 8003a92:	e0be      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_SD_IRQHandler+0x17c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fef9 	bl	80048a4 <SD_Write_IT>
 8003ab2:	e0ae      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a7 	beq.w	8003c12 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f043 0202 	orr.w	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	f043 0208 	orr.w	r2, r3, #8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	f043 0210 	orr.w	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b34:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 fc46 	bl	80053dc <SDMMC_CmdStopTransfer>
 8003b50:	4602      	mov	r2, r0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f855 	bl	8003c24 <HAL_SD_ErrorCallback>
}
 8003b7a:	e04a      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d045      	beq.n	8003c12 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <HAL_SD_IRQHandler+0x262>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d011      	beq.n	8003bbe <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <HAL_SD_IRQHandler+0x2e4>)
 8003ba0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fd96 	bl	80016d8 <HAL_DMA_Abort_IT>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d02f      	beq.n	8003c12 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fac8 	bl	800414c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003bbc:	e029      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_SD_IRQHandler+0x29a>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d011      	beq.n	8003bf6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_SD_IRQHandler+0x2e8>)
 8003bd8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd fd7a 	bl	80016d8 <HAL_DMA_Abort_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d013      	beq.n	8003c12 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fae3 	bl	80041ba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003bf4:	e00d      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f002 f86e 	bl	8005cec <HAL_SD_AbortCallback>
}
 8003c10:	e7ff      	b.n	8003c12 <HAL_SD_IRQHandler+0x2da>
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	0800414d 	.word	0x0800414d
 8003c20:	080041bb 	.word	0x080041bb

08003c24 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c46:	0f9b      	lsrs	r3, r3, #30
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c52:	0e9b      	lsrs	r3, r3, #26
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c64:	0e1b      	lsrs	r3, r3, #24
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c98:	0d1b      	lsrs	r3, r3, #20
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb6:	0bdb      	lsrs	r3, r3, #15
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc8:	0b9b      	lsrs	r3, r3, #14
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cda:	0b5b      	lsrs	r3, r3, #13
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cec:	0b1b      	lsrs	r3, r3, #12
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d163      	bne.n	8003dd0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0c:	009a      	lsls	r2, r3, #2
 8003d0e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d12:	4013      	ands	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d18:	0f92      	lsrs	r2, r2, #30
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d24:	0edb      	lsrs	r3, r3, #27
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d36:	0e1b      	lsrs	r3, r3, #24
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d48:	0d5b      	lsrs	r3, r3, #21
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	0c9b      	lsrs	r3, r3, #18
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6c:	0bdb      	lsrs	r3, r3, #15
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	7e1b      	ldrb	r3, [r3, #24]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	3302      	adds	r3, #2
 8003d90:	2201      	movs	r2, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003d9a:	fb03 f202 	mul.w	r2, r3, r2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	7a1b      	ldrb	r3, [r3, #8]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	2201      	movs	r2, #1
 8003dae:	409a      	lsls	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003dbc:	0a52      	lsrs	r2, r2, #9
 8003dbe:	fb03 f202 	mul.w	r2, r3, r2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dcc:	661a      	str	r2, [r3, #96]	; 0x60
 8003dce:	e031      	b.n	8003e34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d11d      	bne.n	8003e14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de6:	0c1b      	lsrs	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	3301      	adds	r3, #1
 8003df4:	029a      	lsls	r2, r3, #10
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	661a      	str	r2, [r3, #96]	; 0x60
 8003e12:	e00f      	b.n	8003e34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_SD_GetCardCSD+0x344>)
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09d      	b.n	8003f70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e38:	0b9b      	lsrs	r3, r3, #14
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4a:	09db      	lsrs	r3, r3, #7
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	0fdb      	lsrs	r3, r3, #31
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	0f5b      	lsrs	r3, r3, #29
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	0e9b      	lsrs	r3, r3, #26
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	0d9b      	lsrs	r3, r3, #22
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	0d5b      	lsrs	r3, r3, #21
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	0bdb      	lsrs	r3, r3, #15
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	0b9b      	lsrs	r3, r3, #14
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	0b5b      	lsrs	r3, r3, #13
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	0b1b      	lsrs	r3, r3, #12
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	0a9b      	lsrs	r3, r3, #10
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	004005ff 	.word	0x004005ff

08003f80 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003fd8:	b5b0      	push	{r4, r5, r7, lr}
 8003fda:	b08e      	sub	sp, #56	; 0x38
 8003fdc:	af04      	add	r7, sp, #16
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2203      	movs	r2, #3
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d02e      	beq.n	8004056 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	d106      	bne.n	800400e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
 800400c:	e029      	b.n	8004062 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004014:	d10a      	bne.n	800402c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa8a 	bl	8004530 <SD_WideBus_Enable>
 800401c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
 800402a:	e01a      	b.n	8004062 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fac7 	bl	80045c6 <SD_WideBus_Disable>
 8004038:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
 8004046:	e00c      	b.n	8004062 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
 8004054:	e005      	b.n	8004062 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a26      	ldr	r2, [pc, #152]	; (8004108 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004080:	e01f      	b.n	80040c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681d      	ldr	r5, [r3, #0]
 80040a8:	466c      	mov	r4, sp
 80040aa:	f107 0314 	add.w	r3, r7, #20
 80040ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040b6:	f107 0308 	add.w	r3, r7, #8
 80040ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040bc:	4628      	mov	r0, r5
 80040be:	f001 f807 	bl	80050d0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f8db 	bl	8005286 <SDMMC_CmdBlockLength>
 80040d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00c      	beq.n	80040f2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <HAL_SD_ConfigWideBusOperation+0x130>)
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80040fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3728      	adds	r7, #40	; 0x28
 8004102:	46bd      	mov	sp, r7
 8004104:	bdb0      	pop	{r4, r5, r7, pc}
 8004106:	bf00      	nop
 8004108:	004005ff 	.word	0x004005ff

0800410c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9de 	bl	80044e0 <SD_SendStatus>
 8004124:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	0a5b      	lsrs	r3, r3, #9
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004142:	693b      	ldr	r3, [r7, #16]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004162:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f7ff ffd1 	bl	800410c <HAL_SD_GetCardState>
 800416a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b06      	cmp	r3, #6
 800417e:	d002      	beq.n	8004186 <SD_DMATxAbort+0x3a>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b05      	cmp	r3, #5
 8004184:	d10a      	bne.n	800419c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f926 	bl	80053dc <SDMMC_CmdStopTransfer>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	431a      	orrs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f001 fda1 	bl	8005cec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041aa:	e002      	b.n	80041b2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fd39 	bl	8003c24 <HAL_SD_ErrorCallback>
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff9a 	bl	800410c <HAL_SD_GetCardState>
 80041d8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d002      	beq.n	80041f4 <SD_DMARxAbort+0x3a>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d10a      	bne.n	800420a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 f8ef 	bl	80053dc <SDMMC_CmdStopTransfer>
 80041fe:	4602      	mov	r2, r0
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f001 fd6a 	bl	8005cec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004218:	e002      	b.n	8004220 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff fd02 	bl	8003c24 <HAL_SD_ErrorCallback>
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	b094      	sub	sp, #80	; 0x50
 800422c:	af04      	add	r7, sp, #16
 800422e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004230:	2301      	movs	r3, #1
 8004232:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 ffa0 	bl	800517e <SDIO_GetPowerState>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004244:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004248:	e0b8      	b.n	80043bc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	2b03      	cmp	r3, #3
 8004250:	d02f      	beq.n	80042b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f9ca 	bl	80055f0 <SDMMC_CmdSendCID>
 800425c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800425e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <SD_InitCard+0x40>
    {
      return errorstate;
 8004264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004266:	e0a9      	b.n	80043bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f000 ffca 	bl	8005208 <SDIO_GetResponse>
 8004274:	4602      	mov	r2, r0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2104      	movs	r1, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f000 ffc1 	bl	8005208 <SDIO_GetResponse>
 8004286:	4602      	mov	r2, r0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2108      	movs	r1, #8
 8004292:	4618      	mov	r0, r3
 8004294:	f000 ffb8 	bl	8005208 <SDIO_GetResponse>
 8004298:	4602      	mov	r2, r0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	210c      	movs	r1, #12
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 ffaf 	bl	8005208 <SDIO_GetResponse>
 80042aa:	4602      	mov	r2, r0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d00d      	beq.n	80042d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f107 020e 	add.w	r2, r7, #14
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 f9d0 	bl	800566a <SDMMC_CmdSetRelAdd>
 80042ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <SD_InitCard+0xae>
    {
      return errorstate;
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	e072      	b.n	80043bc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d036      	beq.n	800434c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80042de:	89fb      	ldrh	r3, [r7, #14]
 80042e0:	461a      	mov	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f001 f99a 	bl	800562c <SDMMC_CmdSendCSD>
 80042f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004302:	e05b      	b.n	80043bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f000 ff7c 	bl	8005208 <SDIO_GetResponse>
 8004310:	4602      	mov	r2, r0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2104      	movs	r1, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f000 ff73 	bl	8005208 <SDIO_GetResponse>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2108      	movs	r1, #8
 800432e:	4618      	mov	r0, r3
 8004330:	f000 ff6a 	bl	8005208 <SDIO_GetResponse>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	210c      	movs	r1, #12
 8004340:	4618      	mov	r0, r3
 8004342:	f000 ff61 	bl	8005208 <SDIO_GetResponse>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2104      	movs	r1, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f000 ff58 	bl	8005208 <SDIO_GetResponse>
 8004358:	4603      	mov	r3, r0
 800435a:	0d1a      	lsrs	r2, r3, #20
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004360:	f107 0310 	add.w	r3, r7, #16
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fc66 	bl	8003c38 <HAL_SD_GetCardCSD>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004372:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004376:	e021      	b.n	80043bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	2200      	movs	r2, #0
 8004384:	461c      	mov	r4, r3
 8004386:	4615      	mov	r5, r2
 8004388:	4622      	mov	r2, r4
 800438a:	462b      	mov	r3, r5
 800438c:	4608      	mov	r0, r1
 800438e:	f001 f847 	bl	8005420 <SDMMC_CmdSelDesel>
 8004392:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <SD_InitCard+0x176>
  {
    return errorstate;
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	e00e      	b.n	80043bc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681d      	ldr	r5, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	466c      	mov	r4, sp
 80043a6:	f103 0210 	add.w	r2, r3, #16
 80043aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80043ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043b0:	3304      	adds	r3, #4
 80043b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043b4:	4628      	mov	r0, r5
 80043b6:	f000 fe8b 	bl	80050d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3740      	adds	r7, #64	; 0x40
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bdb0      	pop	{r4, r5, r7, pc}

080043c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 f842 	bl	8005466 <SDMMC_CmdGoIdleState>
 80043e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <SD_PowerON+0x2a>
  {
    return errorstate;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	e072      	b.n	80044d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 f855 	bl	80054a2 <SDMMC_CmdOperCond>
 80043f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f001 f82b 	bl	8005466 <SDMMC_CmdGoIdleState>
 8004410:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	e05b      	b.n	80044d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004426:	2b01      	cmp	r3, #1
 8004428:	d137      	bne.n	800449a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f001 f855 	bl	80054e0 <SDMMC_CmdAppCommand>
 8004436:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d02d      	beq.n	800449a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800443e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004442:	e047      	b.n	80044d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f001 f848 	bl	80054e0 <SDMMC_CmdAppCommand>
 8004450:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <SD_PowerON+0x98>
    {
      return errorstate;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	e03b      	b.n	80044d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	491e      	ldr	r1, [pc, #120]	; (80044dc <SD_PowerON+0x118>)
 8004462:	4618      	mov	r0, r3
 8004464:	f001 f85e 	bl	8005524 <SDMMC_CmdAppOperCommand>
 8004468:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004474:	e02e      	b.n	80044d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fec3 	bl	8005208 <SDIO_GetResponse>
 8004482:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	0fdb      	lsrs	r3, r3, #31
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <SD_PowerON+0xcc>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <SD_PowerON+0xce>
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]

    count++;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	3301      	adds	r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d802      	bhi.n	80044aa <SD_PowerON+0xe6>
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0cc      	beq.n	8004444 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d902      	bls.n	80044ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80044b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b8:	e00c      	b.n	80044d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
 80044ca:	e002      	b.n	80044d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	c1100000 	.word	0xc1100000

080044e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80044f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044f4:	e018      	b.n	8004528 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f001 f8d2 	bl	80056ac <SDMMC_CmdSendStatus>
 8004508:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e009      	b.n	8004528 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fe74 	bl	8005208 <SDIO_GetResponse>
 8004520:	4602      	mov	r2, r0
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fe5e 	bl	8005208 <SDIO_GetResponse>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004556:	d102      	bne.n	800455e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800455c:	e02f      	b.n	80045be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800455e:	f107 030c 	add.w	r3, r7, #12
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f879 	bl	800465c <SD_FindSCR>
 800456a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	e023      	b.n	80045be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01c      	beq.n	80045ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 ffa7 	bl	80054e0 <SDMMC_CmdAppCommand>
 8004592:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	e00f      	b.n	80045be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2102      	movs	r1, #2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 ffe0 	bl	800556a <SDMMC_CmdBusWidth>
 80045aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e003      	b.n	80045be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e001      	b.n	80045be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fe13 	bl	8005208 <SDIO_GetResponse>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ec:	d102      	bne.n	80045f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045f2:	e02f      	b.n	8004654 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045f4:	f107 030c 	add.w	r3, r7, #12
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f82e 	bl	800465c <SD_FindSCR>
 8004600:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	e023      	b.n	8004654 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01c      	beq.n	8004650 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f000 ff5c 	bl	80054e0 <SDMMC_CmdAppCommand>
 8004628:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	e00f      	b.n	8004654 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f000 ff95 	bl	800556a <SDMMC_CmdBusWidth>
 8004640:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	e003      	b.n	8004654 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800464c:	2300      	movs	r3, #0
 800464e:	e001      	b.n	8004654 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004650:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b08f      	sub	sp, #60	; 0x3c
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004666:	f7fc fe2b 	bl	80012c0 <HAL_GetTick>
 800466a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2108      	movs	r1, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fdff 	bl	8005286 <SDMMC_CmdBlockLength>
 8004688:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	e0b2      	b.n	80047fa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 ff1d 	bl	80054e0 <SDMMC_CmdAppCommand>
 80046a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	e0a3      	b.n	80047fa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80046b8:	2308      	movs	r3, #8
 80046ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80046bc:	2330      	movs	r3, #48	; 0x30
 80046be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f107 0210 	add.w	r2, r7, #16
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fda9 	bl	800522e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 ff64 	bl	80055ae <SDMMC_CmdSendSCR>
 80046e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d02a      	beq.n	8004744 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	e083      	b.n	80047fa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	f107 0208 	add.w	r2, r7, #8
 800470c:	18d4      	adds	r4, r2, r3
 800470e:	4608      	mov	r0, r1
 8004710:	f000 fd09 	bl	8005126 <SDIO_ReadFIFO>
 8004714:	4603      	mov	r3, r0
 8004716:	6023      	str	r3, [r4, #0]
      index++;
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	3301      	adds	r3, #1
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
 800471e:	e006      	b.n	800472e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d012      	beq.n	8004754 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800472e:	f7fc fdc7 	bl	80012c0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800473c:	d102      	bne.n	8004744 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800473e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004742:	e05a      	b.n	80047fa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0cf      	beq.n	80046f2 <SD_FindSCR+0x96>
 8004752:	e000      	b.n	8004756 <SD_FindSCR+0xfa>
      break;
 8004754:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2208      	movs	r2, #8
 800476a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800476c:	2308      	movs	r3, #8
 800476e:	e044      	b.n	80047fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004786:	2302      	movs	r3, #2
 8004788:	e037      	b.n	80047fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2220      	movs	r2, #32
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80047a0:	2320      	movs	r3, #32
 80047a2:	e02a      	b.n	80047fa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	061a      	lsls	r2, r3, #24
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80047c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	0e1b      	lsrs	r3, r3, #24
 80047ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	601a      	str	r2, [r3, #0]
    scr++;
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	3304      	adds	r3, #4
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	061a      	lsls	r2, r3, #24
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0e1b      	lsrs	r3, r3, #24
 80047f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	373c      	adds	r7, #60	; 0x3c
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}

08004802 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d03f      	beq.n	800489c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e033      	b.n	800488a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fc7d 	bl	8005126 <SDIO_ReadFIFO>
 800482c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3b01      	subs	r3, #1
 8004840:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	b2da      	uxtb	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3b01      	subs	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3b01      	subs	r3, #1
 800486c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	0e1b      	lsrs	r3, r3, #24
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3b01      	subs	r3, #1
 8004882:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	3301      	adds	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b07      	cmp	r3, #7
 800488e:	d9c8      	bls.n	8004822 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800489c:	bf00      	nop
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d043      	beq.n	8004946 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e037      	b.n	8004934 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	041a      	lsls	r2, r3, #16
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3b01      	subs	r3, #1
 8004904:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	061a      	lsls	r2, r3, #24
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3b01      	subs	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f107 0208 	add.w	r2, r7, #8
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fc09 	bl	8005140 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3301      	adds	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b07      	cmp	r3, #7
 8004938:	d9c4      	bls.n	80048c4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e03f      	b.n	80049e0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fc fb3b 	bl	8000ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2224      	movs	r2, #36	; 0x24
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004990:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f928 	bl	8004be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d17c      	bne.n	8004b02 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_UART_Transmit+0x2c>
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e075      	b.n	8004b04 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Transmit+0x3e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e06e      	b.n	8004b04 <HAL_UART_Transmit+0x11c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2221      	movs	r2, #33	; 0x21
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a3c:	f7fc fc40 	bl	80012c0 <HAL_GetTick>
 8004a40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	88fa      	ldrh	r2, [r7, #6]
 8004a46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d108      	bne.n	8004a6a <HAL_UART_Transmit+0x82>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	e003      	b.n	8004a72 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a7a:	e02a      	b.n	8004ad2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	2180      	movs	r1, #128	; 0x80
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f840 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e036      	b.n	8004b04 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aaa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	3302      	adds	r3, #2
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e007      	b.n	8004ac4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1cf      	bne.n	8004a7c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2140      	movs	r1, #64	; 0x40
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f810 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e006      	b.n	8004b04 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e000      	b.n	8004b04 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b090      	sub	sp, #64	; 0x40
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1c:	e050      	b.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b24:	d04c      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2c:	f7fc fbc8 	bl	80012c0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d241      	bcs.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b5c:	637a      	str	r2, [r7, #52]	; 0x34
 8004b5e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e5      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3314      	adds	r3, #20
 8004b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3314      	adds	r3, #20
 8004b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b90:	623a      	str	r2, [r7, #32]
 8004b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	69f9      	ldr	r1, [r7, #28]
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e5      	bne.n	8004b70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e00f      	b.n	8004be0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d09f      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3740      	adds	r7, #64	; 0x40
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bec:	b0c0      	sub	sp, #256	; 0x100
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c04:	68d9      	ldr	r1, [r3, #12]
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	ea40 0301 	orr.w	r3, r0, r1
 8004c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c40:	f021 010c 	bic.w	r1, r1, #12
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c62:	6999      	ldr	r1, [r3, #24]
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	ea40 0301 	orr.w	r3, r0, r1
 8004c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b8f      	ldr	r3, [pc, #572]	; (8004eb4 <UART_SetConfig+0x2cc>)
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d005      	beq.n	8004c88 <UART_SetConfig+0xa0>
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b8d      	ldr	r3, [pc, #564]	; (8004eb8 <UART_SetConfig+0x2d0>)
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d104      	bne.n	8004c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fd fa36 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 8004c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c90:	e003      	b.n	8004c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c92:	f7fd fa1d 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8004c96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca4:	f040 810c 	bne.w	8004ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cba:	4622      	mov	r2, r4
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	1891      	adds	r1, r2, r2
 8004cc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cc2:	415b      	adcs	r3, r3
 8004cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cca:	4621      	mov	r1, r4
 8004ccc:	eb12 0801 	adds.w	r8, r2, r1
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	eb43 0901 	adc.w	r9, r3, r1
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cea:	4690      	mov	r8, r2
 8004cec:	4699      	mov	r9, r3
 8004cee:	4623      	mov	r3, r4
 8004cf0:	eb18 0303 	adds.w	r3, r8, r3
 8004cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	eb49 0303 	adc.w	r3, r9, r3
 8004cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d16:	460b      	mov	r3, r1
 8004d18:	18db      	adds	r3, r3, r3
 8004d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	eb42 0303 	adc.w	r3, r2, r3
 8004d22:	657b      	str	r3, [r7, #84]	; 0x54
 8004d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d2c:	f7fb fac8 	bl	80002c0 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <UART_SetConfig+0x2d4>)
 8004d36:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	011c      	lsls	r4, r3, #4
 8004d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d50:	4642      	mov	r2, r8
 8004d52:	464b      	mov	r3, r9
 8004d54:	1891      	adds	r1, r2, r2
 8004d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d58:	415b      	adcs	r3, r3
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d60:	4641      	mov	r1, r8
 8004d62:	eb12 0a01 	adds.w	sl, r2, r1
 8004d66:	4649      	mov	r1, r9
 8004d68:	eb43 0b01 	adc.w	fp, r3, r1
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d80:	4692      	mov	sl, r2
 8004d82:	469b      	mov	fp, r3
 8004d84:	4643      	mov	r3, r8
 8004d86:	eb1a 0303 	adds.w	r3, sl, r3
 8004d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	eb4b 0303 	adc.w	r3, fp, r3
 8004d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004da4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dac:	460b      	mov	r3, r1
 8004dae:	18db      	adds	r3, r3, r3
 8004db0:	643b      	str	r3, [r7, #64]	; 0x40
 8004db2:	4613      	mov	r3, r2
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dc2:	f7fb fa7d 	bl	80002c0 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <UART_SetConfig+0x2d4>)
 8004dce:	fba3 2301 	umull	r2, r3, r3, r1
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2264      	movs	r2, #100	; 0x64
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	1acb      	subs	r3, r1, r3
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004de2:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <UART_SetConfig+0x2d4>)
 8004de4:	fba3 2302 	umull	r2, r3, r3, r2
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004df0:	441c      	add	r4, r3
 8004df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	1891      	adds	r1, r2, r2
 8004e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e0c:	415b      	adcs	r3, r3
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e14:	4641      	mov	r1, r8
 8004e16:	1851      	adds	r1, r2, r1
 8004e18:	6339      	str	r1, [r7, #48]	; 0x30
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	414b      	adcs	r3, r1
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	00cb      	lsls	r3, r1, #3
 8004e30:	4651      	mov	r1, sl
 8004e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e36:	4651      	mov	r1, sl
 8004e38:	00ca      	lsls	r2, r1, #3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4642      	mov	r2, r8
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e48:	464b      	mov	r3, r9
 8004e4a:	460a      	mov	r2, r1
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e68:	460b      	mov	r3, r1
 8004e6a:	18db      	adds	r3, r3, r3
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6e:	4613      	mov	r3, r2
 8004e70:	eb42 0303 	adc.w	r3, r2, r3
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e7e:	f7fb fa1f 	bl	80002c0 <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <UART_SetConfig+0x2d4>)
 8004e88:	fba3 1302 	umull	r1, r3, r3, r2
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	2164      	movs	r1, #100	; 0x64
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	3332      	adds	r3, #50	; 0x32
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <UART_SetConfig+0x2d4>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	f003 0207 	and.w	r2, r3, #7
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4422      	add	r2, r4
 8004eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eb0:	e105      	b.n	80050be <UART_SetConfig+0x4d6>
 8004eb2:	bf00      	nop
 8004eb4:	40011000 	.word	0x40011000
 8004eb8:	40011400 	.word	0x40011400
 8004ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ed2:	4642      	mov	r2, r8
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	1891      	adds	r1, r2, r2
 8004ed8:	6239      	str	r1, [r7, #32]
 8004eda:	415b      	adcs	r3, r3
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	1854      	adds	r4, r2, r1
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	eb43 0501 	adc.w	r5, r3, r1
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	00eb      	lsls	r3, r5, #3
 8004ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004efa:	00e2      	lsls	r2, r4, #3
 8004efc:	4614      	mov	r4, r2
 8004efe:	461d      	mov	r5, r3
 8004f00:	4643      	mov	r3, r8
 8004f02:	18e3      	adds	r3, r4, r3
 8004f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f08:	464b      	mov	r3, r9
 8004f0a:	eb45 0303 	adc.w	r3, r5, r3
 8004f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f2e:	4629      	mov	r1, r5
 8004f30:	008b      	lsls	r3, r1, #2
 8004f32:	4621      	mov	r1, r4
 8004f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f38:	4621      	mov	r1, r4
 8004f3a:	008a      	lsls	r2, r1, #2
 8004f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f40:	f7fb f9be 	bl	80002c0 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4b60      	ldr	r3, [pc, #384]	; (80050cc <UART_SetConfig+0x4e4>)
 8004f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	011c      	lsls	r4, r3, #4
 8004f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	1891      	adds	r1, r2, r2
 8004f6a:	61b9      	str	r1, [r7, #24]
 8004f6c:	415b      	adcs	r3, r3
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f74:	4641      	mov	r1, r8
 8004f76:	1851      	adds	r1, r2, r1
 8004f78:	6139      	str	r1, [r7, #16]
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	414b      	adcs	r3, r1
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	00cb      	lsls	r3, r1, #3
 8004f90:	4651      	mov	r1, sl
 8004f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f96:	4651      	mov	r1, sl
 8004f98:	00ca      	lsls	r2, r1, #3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fa8:	464b      	mov	r3, r9
 8004faa:	460a      	mov	r2, r1
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fcc:	4649      	mov	r1, r9
 8004fce:	008b      	lsls	r3, r1, #2
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	008a      	lsls	r2, r1, #2
 8004fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fde:	f7fb f96f 	bl	80002c0 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4b39      	ldr	r3, [pc, #228]	; (80050cc <UART_SetConfig+0x4e4>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	2164      	movs	r1, #100	; 0x64
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	3332      	adds	r3, #50	; 0x32
 8004ffa:	4a34      	ldr	r2, [pc, #208]	; (80050cc <UART_SetConfig+0x4e4>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005006:	441c      	add	r4, r3
 8005008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500c:	2200      	movs	r2, #0
 800500e:	673b      	str	r3, [r7, #112]	; 0x70
 8005010:	677a      	str	r2, [r7, #116]	; 0x74
 8005012:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005016:	4642      	mov	r2, r8
 8005018:	464b      	mov	r3, r9
 800501a:	1891      	adds	r1, r2, r2
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	415b      	adcs	r3, r3
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005026:	4641      	mov	r1, r8
 8005028:	1851      	adds	r1, r2, r1
 800502a:	6039      	str	r1, [r7, #0]
 800502c:	4649      	mov	r1, r9
 800502e:	414b      	adcs	r3, r1
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800503e:	4659      	mov	r1, fp
 8005040:	00cb      	lsls	r3, r1, #3
 8005042:	4651      	mov	r1, sl
 8005044:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005048:	4651      	mov	r1, sl
 800504a:	00ca      	lsls	r2, r1, #3
 800504c:	4610      	mov	r0, r2
 800504e:	4619      	mov	r1, r3
 8005050:	4603      	mov	r3, r0
 8005052:	4642      	mov	r2, r8
 8005054:	189b      	adds	r3, r3, r2
 8005056:	66bb      	str	r3, [r7, #104]	; 0x68
 8005058:	464b      	mov	r3, r9
 800505a:	460a      	mov	r2, r1
 800505c:	eb42 0303 	adc.w	r3, r2, r3
 8005060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	663b      	str	r3, [r7, #96]	; 0x60
 800506c:	667a      	str	r2, [r7, #100]	; 0x64
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800507a:	4649      	mov	r1, r9
 800507c:	008b      	lsls	r3, r1, #2
 800507e:	4641      	mov	r1, r8
 8005080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005084:	4641      	mov	r1, r8
 8005086:	008a      	lsls	r2, r1, #2
 8005088:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800508c:	f7fb f918 	bl	80002c0 <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <UART_SetConfig+0x4e4>)
 8005096:	fba3 1302 	umull	r1, r3, r3, r2
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	2164      	movs	r1, #100	; 0x64
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	3332      	adds	r3, #50	; 0x32
 80050a8:	4a08      	ldr	r2, [pc, #32]	; (80050cc <UART_SetConfig+0x4e4>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	f003 020f 	and.w	r2, r3, #15
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4422      	add	r2, r4
 80050bc:	609a      	str	r2, [r3, #8]
}
 80050be:	bf00      	nop
 80050c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050c4:	46bd      	mov	sp, r7
 80050c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ca:	bf00      	nop
 80050cc:	51eb851f 	.word	0x51eb851f

080050d0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80050d0:	b084      	sub	sp, #16
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	f107 001c 	add.w	r0, r7, #28
 80050de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80050e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80050e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80050ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80050ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80050f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80050f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80050fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800510a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	b004      	add	sp, #16
 8005124:	4770      	bx	lr

08005126 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2203      	movs	r2, #3
 800516e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0303 	and.w	r3, r3, #3
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80051b8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80051be:	431a      	orrs	r2, r3
                       Command->CPSM);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80051c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80051d4:	f023 030f 	bic.w	r3, r3, #15
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	b2db      	uxtb	r3, r3
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3314      	adds	r3, #20
 8005216:	461a      	mov	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	4413      	add	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
}  
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005254:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800525a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005260:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005278:	2300      	movs	r3, #0

}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005294:	2310      	movs	r3, #16
 8005296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005298:	2340      	movs	r3, #64	; 0x40
 800529a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052a6:	f107 0308 	add.w	r3, r7, #8
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ff74 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80052b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b6:	2110      	movs	r1, #16
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fa19 	bl	80056f0 <SDMMC_GetCmdResp1>
 80052be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052c0:	69fb      	ldr	r3, [r7, #28]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b088      	sub	sp, #32
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80052d8:	2311      	movs	r3, #17
 80052da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052dc:	2340      	movs	r3, #64	; 0x40
 80052de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff52 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80052f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fa:	2111      	movs	r1, #17
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f9f7 	bl	80056f0 <SDMMC_GetCmdResp1>
 8005302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005304:	69fb      	ldr	r3, [r7, #28]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b088      	sub	sp, #32
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800531c:	2312      	movs	r3, #18
 800531e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005320:	2340      	movs	r3, #64	; 0x40
 8005322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800532c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800532e:	f107 0308 	add.w	r3, r7, #8
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff ff30 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800533a:	f241 3288 	movw	r2, #5000	; 0x1388
 800533e:	2112      	movs	r1, #18
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f9d5 	bl	80056f0 <SDMMC_GetCmdResp1>
 8005346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005348:	69fb      	ldr	r3, [r7, #28]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b088      	sub	sp, #32
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005360:	2318      	movs	r3, #24
 8005362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800536c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005370:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005372:	f107 0308 	add.w	r3, r7, #8
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff ff0e 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	2118      	movs	r1, #24
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9b3 	bl	80056f0 <SDMMC_GetCmdResp1>
 800538a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800538c:	69fb      	ldr	r3, [r7, #28]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b088      	sub	sp, #32
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80053a4:	2319      	movs	r3, #25
 80053a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053a8:	2340      	movs	r3, #64	; 0x40
 80053aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053b6:	f107 0308 	add.w	r3, r7, #8
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff feec 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80053c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c6:	2119      	movs	r1, #25
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f991 	bl	80056f0 <SDMMC_GetCmdResp1>
 80053ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053d0:	69fb      	ldr	r3, [r7, #28]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80053e8:	230c      	movs	r3, #12
 80053ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053ec:	2340      	movs	r3, #64	; 0x40
 80053ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053fa:	f107 0308 	add.w	r3, r7, #8
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff feca 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005406:	4a05      	ldr	r2, [pc, #20]	; (800541c <SDMMC_CmdStopTransfer+0x40>)
 8005408:	210c      	movs	r1, #12
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f970 	bl	80056f0 <SDMMC_GetCmdResp1>
 8005410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005412:	69fb      	ldr	r3, [r7, #28]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	05f5e100 	.word	0x05f5e100

08005420 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005430:	2307      	movs	r3, #7
 8005432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005434:	2340      	movs	r3, #64	; 0x40
 8005436:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800543c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005440:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005442:	f107 0310 	add.w	r3, r7, #16
 8005446:	4619      	mov	r1, r3
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fea6 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	2107      	movs	r1, #7
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f94b 	bl	80056f0 <SDMMC_GetCmdResp1>
 800545a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800545e:	4618      	mov	r0, r3
 8005460:	3728      	adds	r7, #40	; 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b088      	sub	sp, #32
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800547e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005482:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fe85 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fb65 	bl	8005b60 <SDMMC_GetCmdError>
 8005496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005498:	69fb      	ldr	r3, [r7, #28]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b088      	sub	sp, #32
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80054aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80054ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80054b0:	2308      	movs	r3, #8
 80054b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054b4:	2340      	movs	r3, #64	; 0x40
 80054b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054c2:	f107 0308 	add.w	r3, r7, #8
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fe66 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 faf8 	bl	8005ac4 <SDMMC_GetCmdResp7>
 80054d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054d6:	69fb      	ldr	r3, [r7, #28]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80054ee:	2337      	movs	r3, #55	; 0x37
 80054f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005500:	f107 0308 	add.w	r3, r7, #8
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fe47 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800550c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005510:	2137      	movs	r1, #55	; 0x37
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f8ec 	bl	80056f0 <SDMMC_GetCmdResp1>
 8005518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800551a:	69fb      	ldr	r3, [r7, #28]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800553a:	2329      	movs	r3, #41	; 0x29
 800553c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800554a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800554c:	f107 0308 	add.w	r3, r7, #8
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fe21 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f9ff 	bl	800595c <SDMMC_GetCmdResp3>
 800555e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005560:	69fb      	ldr	r3, [r7, #28]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b088      	sub	sp, #32
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005578:	2306      	movs	r3, #6
 800557a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800557c:	2340      	movs	r3, #64	; 0x40
 800557e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005588:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800558a:	f107 0308 	add.w	r3, r7, #8
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fe02 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	2106      	movs	r1, #6
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8a7 	bl	80056f0 <SDMMC_GetCmdResp1>
 80055a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b088      	sub	sp, #32
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80055ba:	2333      	movs	r3, #51	; 0x33
 80055bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055be:	2340      	movs	r3, #64	; 0x40
 80055c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055cc:	f107 0308 	add.w	r3, r7, #8
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff fde1 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80055d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055dc:	2133      	movs	r1, #51	; 0x33
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f886 	bl	80056f0 <SDMMC_GetCmdResp1>
 80055e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055e6:	69fb      	ldr	r3, [r7, #28]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80055fc:	2302      	movs	r3, #2
 80055fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005600:	23c0      	movs	r3, #192	; 0xc0
 8005602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800560c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800560e:	f107 0308 	add.w	r3, r7, #8
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fdc0 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f956 	bl	80058cc <SDMMC_GetCmdResp2>
 8005620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005622:	69fb      	ldr	r3, [r7, #28]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800563a:	2309      	movs	r3, #9
 800563c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800563e:	23c0      	movs	r3, #192	; 0xc0
 8005640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800564a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800564c:	f107 0308 	add.w	r3, r7, #8
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fda1 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f937 	bl	80058cc <SDMMC_GetCmdResp2>
 800565e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005660:	69fb      	ldr	r3, [r7, #28]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b088      	sub	sp, #32
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005678:	2303      	movs	r3, #3
 800567a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800567c:	2340      	movs	r3, #64	; 0x40
 800567e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fd82 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	2103      	movs	r1, #3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f99c 	bl	80059d8 <SDMMC_GetCmdResp6>
 80056a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056a2:	69fb      	ldr	r3, [r7, #28]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3720      	adds	r7, #32
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80056ba:	230d      	movs	r3, #13
 80056bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056cc:	f107 0308 	add.w	r3, r7, #8
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fd61 	bl	800519a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	210d      	movs	r1, #13
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f806 	bl	80056f0 <SDMMC_GetCmdResp1>
 80056e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e6:	69fb      	ldr	r3, [r7, #28]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	460b      	mov	r3, r1
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80056fe:	4b70      	ldr	r3, [pc, #448]	; (80058c0 <SDMMC_GetCmdResp1+0x1d0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a70      	ldr	r2, [pc, #448]	; (80058c4 <SDMMC_GetCmdResp1+0x1d4>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	0a5a      	lsrs	r2, r3, #9
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	fb02 f303 	mul.w	r3, r2, r3
 8005710:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	61fa      	str	r2, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800571c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005720:	e0c9      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ef      	beq.n	8005712 <SDMMC_GetCmdResp1+0x22>
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ea      	bne.n	8005712 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2204      	movs	r2, #4
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800574e:	2304      	movs	r3, #4
 8005750:	e0b1      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005764:	2301      	movs	r3, #1
 8005766:	e0a6      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	22c5      	movs	r2, #197	; 0xc5
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fd3d 	bl	80051ee <SDIO_GetCommandResponse>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	4293      	cmp	r3, r2
 800577c:	d001      	beq.n	8005782 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800577e:	2301      	movs	r3, #1
 8005780:	e099      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005782:	2100      	movs	r1, #0
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff fd3f 	bl	8005208 <SDIO_GetResponse>
 800578a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4b4e      	ldr	r3, [pc, #312]	; (80058c8 <SDMMC_GetCmdResp1+0x1d8>)
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
 8005798:	e08d      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	da02      	bge.n	80057a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80057a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057a4:	e087      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80057b0:	2340      	movs	r3, #64	; 0x40
 80057b2:	e080      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	e079      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80057cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d0:	e071      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80057dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e0:	e069      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80057ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f0:	e061      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80057fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005800:	e059      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800580c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005810:	e051      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800581c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005820:	e049      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800582c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005830:	e041      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800583c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005840:	e039      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800584c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005850:	e031      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800585c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005860:	e029      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800586c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005870:	e021      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800587c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005880:	e019      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800588c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005890:	e011      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800589c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058a0:	e009      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80058ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80058b0:	e001      	b.n	80058b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3720      	adds	r7, #32
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000000 	.word	0x20000000
 80058c4:	10624dd3 	.word	0x10624dd3
 80058c8:	fdffe008 	.word	0xfdffe008

080058cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058d4:	4b1f      	ldr	r3, [pc, #124]	; (8005954 <SDMMC_GetCmdResp2+0x88>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <SDMMC_GetCmdResp2+0x8c>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	0a5b      	lsrs	r3, r3, #9
 80058e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e4:	fb02 f303 	mul.w	r3, r2, r3
 80058e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1e5a      	subs	r2, r3, #1
 80058ee:	60fa      	str	r2, [r7, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d102      	bne.n	80058fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058f8:	e026      	b.n	8005948 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ef      	beq.n	80058ea <SDMMC_GetCmdResp2+0x1e>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1ea      	bne.n	80058ea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005926:	2304      	movs	r3, #4
 8005928:	e00e      	b.n	8005948 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800593c:	2301      	movs	r3, #1
 800593e:	e003      	b.n	8005948 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	22c5      	movs	r2, #197	; 0xc5
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20000000 	.word	0x20000000
 8005958:	10624dd3 	.word	0x10624dd3

0800595c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005964:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <SDMMC_GetCmdResp3+0x74>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1a      	ldr	r2, [pc, #104]	; (80059d4 <SDMMC_GetCmdResp3+0x78>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	0a5b      	lsrs	r3, r3, #9
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	fb02 f303 	mul.w	r3, r2, r3
 8005978:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1e5a      	subs	r2, r3, #1
 800597e:	60fa      	str	r2, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005988:	e01b      	b.n	80059c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ef      	beq.n	800597a <SDMMC_GetCmdResp3+0x1e>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ea      	bne.n	800597a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059b6:	2304      	movs	r3, #4
 80059b8:	e003      	b.n	80059c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	22c5      	movs	r2, #197	; 0xc5
 80059be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000000 	.word	0x20000000
 80059d4:	10624dd3 	.word	0x10624dd3

080059d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	460b      	mov	r3, r1
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059e6:	4b35      	ldr	r3, [pc, #212]	; (8005abc <SDMMC_GetCmdResp6+0xe4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a35      	ldr	r2, [pc, #212]	; (8005ac0 <SDMMC_GetCmdResp6+0xe8>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	0a5b      	lsrs	r3, r3, #9
 80059f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f6:	fb02 f303 	mul.w	r3, r2, r3
 80059fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	1e5a      	subs	r2, r3, #1
 8005a00:	61fa      	str	r2, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a0a:	e052      	b.n	8005ab2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0ef      	beq.n	80059fc <SDMMC_GetCmdResp6+0x24>
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1ea      	bne.n	80059fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2204      	movs	r2, #4
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a38:	2304      	movs	r3, #4
 8005a3a:	e03a      	b.n	8005ab2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e02f      	b.n	8005ab2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff fbcb 	bl	80051ee <SDIO_GetCommandResponse>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	7afb      	ldrb	r3, [r7, #11]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d001      	beq.n	8005a66 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e025      	b.n	8005ab2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	22c5      	movs	r2, #197	; 0xc5
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff fbca 	bl	8005208 <SDIO_GetResponse>
 8005a74:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d106      	bne.n	8005a8e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	0c1b      	lsrs	r3, r3, #16
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e011      	b.n	8005ab2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a9c:	e009      	b.n	8005ab2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aac:	e001      	b.n	8005ab2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000000 	.word	0x20000000
 8005ac0:	10624dd3 	.word	0x10624dd3

08005ac4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005acc:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <SDMMC_GetCmdResp7+0x94>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a22      	ldr	r2, [pc, #136]	; (8005b5c <SDMMC_GetCmdResp7+0x98>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	0a5b      	lsrs	r3, r3, #9
 8005ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005adc:	fb02 f303 	mul.w	r3, r2, r3
 8005ae0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1e5a      	subs	r2, r3, #1
 8005ae6:	60fa      	str	r2, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005af0:	e02c      	b.n	8005b4c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0ef      	beq.n	8005ae2 <SDMMC_GetCmdResp7+0x1e>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1ea      	bne.n	8005ae2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b1e:	2304      	movs	r3, #4
 8005b20:	e014      	b.n	8005b4c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e009      	b.n	8005b4c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2240      	movs	r2, #64	; 0x40
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b4a:	2300      	movs	r3, #0
  
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	10624dd3 	.word	0x10624dd3

08005b60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b68:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <SDMMC_GetCmdError+0x50>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <SDMMC_GetCmdError+0x54>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	0a5b      	lsrs	r3, r3, #9
 8005b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b78:	fb02 f303 	mul.w	r3, r2, r3
 8005b7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	60fa      	str	r2, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b8c:	e009      	b.n	8005ba2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f1      	beq.n	8005b7e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	22c5      	movs	r2, #197	; 0xc5
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000000 	.word	0x20000000
 8005bb4:	10624dd3 	.word	0x10624dd3

08005bb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005bbc:	4904      	ldr	r1, [pc, #16]	; (8005bd0 <MX_FATFS_Init+0x18>)
 8005bbe:	4805      	ldr	r0, [pc, #20]	; (8005bd4 <MX_FATFS_Init+0x1c>)
 8005bc0:	f002 fc16 	bl	80083f0 <FATFS_LinkDriver>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <MX_FATFS_Init+0x20>)
 8005bca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005bcc:	bf00      	nop
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000818 	.word	0x20000818
 8005bd4:	08009260 	.word	0x08009260
 8005bd8:	20000814 	.word	0x20000814

08005bdc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005be0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005bf6:	f000 f8ac 	bl	8005d52 <BSP_SD_IsDetected>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e012      	b.n	8005c2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005c04:	480b      	ldr	r0, [pc, #44]	; (8005c34 <BSP_SD_Init+0x48>)
 8005c06:	f7fd fa83 	bl	8003110 <HAL_SD_Init>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c18:	4806      	ldr	r0, [pc, #24]	; (8005c34 <BSP_SD_Init+0x48>)
 8005c1a:	f7fe f9dd 	bl	8003fd8 <HAL_SD_ConfigWideBusOperation>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005c28:	79fb      	ldrb	r3, [r7, #7]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000514 	.word	0x20000514

08005c38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	4806      	ldr	r0, [pc, #24]	; (8005c70 <BSP_SD_ReadBlocks+0x38>)
 8005c56:	f7fd fb0b 	bl	8003270 <HAL_SD_ReadBlocks>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000514 	.word	0x20000514

08005c74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	4806      	ldr	r0, [pc, #24]	; (8005cac <BSP_SD_WriteBlocks+0x38>)
 8005c92:	f7fd fccb 	bl	800362c <HAL_SD_WriteBlocks>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000514 	.word	0x20000514

08005cb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005cb4:	4805      	ldr	r0, [pc, #20]	; (8005ccc <BSP_SD_GetCardState+0x1c>)
 8005cb6:	f7fe fa29 	bl	800410c <HAL_SD_GetCardState>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000514 	.word	0x20000514

08005cd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4803      	ldr	r0, [pc, #12]	; (8005ce8 <BSP_SD_GetCardInfo+0x18>)
 8005cdc:	f7fe f950 	bl	8003f80 <HAL_SD_GetCardInfo>
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000514 	.word	0x20000514

08005cec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005cf4:	f000 f818 	bl	8005d28 <BSP_SD_AbortCallback>
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005d08:	f000 f815 	bl	8005d36 <BSP_SD_WriteCpltCallback>
}
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005d1c:	f000 f812 	bl	8005d44 <BSP_SD_ReadCpltCallback>
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0

}
 8005d2c:	bf00      	nop
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0

}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0

}
 8005d48:	bf00      	nop
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005d5c:	f000 f80c 	bl	8005d78 <BSP_PlatformIsDetected>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005d66:	2300      	movs	r3, #0
 8005d68:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	b2db      	uxtb	r3, r3
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d86:	4806      	ldr	r0, [pc, #24]	; (8005da0 <BSP_PlatformIsDetected+0x28>)
 8005d88:	f7fc f898 	bl	8001ebc <HAL_GPIO_ReadPin>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005d92:	2300      	movs	r3, #0
 8005d94:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005d96:	79fb      	ldrb	r3, [r7, #7]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40020400 	.word	0x40020400

08005da4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <SD_CheckStatus+0x38>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005db4:	f7ff ff7c 	bl	8005cb0 <BSP_SD_GetCardState>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d107      	bne.n	8005dce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005dbe:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <SD_CheckStatus+0x38>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <SD_CheckStatus+0x38>)
 8005dcc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <SD_CheckStatus+0x38>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b2db      	uxtb	r3, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000009 	.word	0x20000009

08005de0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <SD_initialize+0x38>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005df0:	f7ff fefc 	bl	8005bec <BSP_SD_Init>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d107      	bne.n	8005e0a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ffd1 	bl	8005da4 <SD_CheckStatus>
 8005e02:	4603      	mov	r3, r0
 8005e04:	461a      	mov	r2, r3
 8005e06:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <SD_initialize+0x38>)
 8005e08:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005e0a:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <SD_initialize+0x38>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	b2db      	uxtb	r3, r3
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000009 	.word	0x20000009

08005e1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff ffbb 	bl	8005da4 <SD_CheckStatus>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	68b8      	ldr	r0, [r7, #8]
 8005e56:	f7ff feef 	bl	8005c38 <BSP_SD_ReadBlocks>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d107      	bne.n	8005e70 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005e60:	bf00      	nop
 8005e62:	f7ff ff25 	bl	8005cb0 <BSP_SD_GetCardState>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1fa      	bne.n	8005e62 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
 8005e86:	4603      	mov	r3, r0
 8005e88:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	68b8      	ldr	r0, [r7, #8]
 8005e98:	f7ff feec 	bl	8005c74 <BSP_SD_WriteBlocks>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d107      	bne.n	8005eb2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005ea2:	bf00      	nop
 8005ea4:	f7ff ff04 	bl	8005cb0 <BSP_SD_GetCardState>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1fa      	bne.n	8005ea4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	; 0x30
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	603a      	str	r2, [r7, #0]
 8005ec6:	71fb      	strb	r3, [r7, #7]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ed2:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <SD_ioctl+0xac>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <SD_ioctl+0x28>
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e03c      	b.n	8005f5e <SD_ioctl+0xa2>

  switch (cmd)
 8005ee4:	79bb      	ldrb	r3, [r7, #6]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d834      	bhi.n	8005f54 <SD_ioctl+0x98>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <SD_ioctl+0x34>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f09 	.word	0x08005f09
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f3b 	.word	0x08005f3b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f06:	e028      	b.n	8005f5a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f08:	f107 030c 	add.w	r3, r7, #12
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fedf 	bl	8005cd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f1e:	e01c      	b.n	8005f5a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f20:	f107 030c 	add.w	r3, r7, #12
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fed3 	bl	8005cd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f38:	e00f      	b.n	8005f5a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f3a:	f107 030c 	add.w	r3, r7, #12
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fec6 	bl	8005cd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	0a5a      	lsrs	r2, r3, #9
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f52:	e002      	b.n	8005f5a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3730      	adds	r7, #48	; 0x30
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000009 	.word	0x20000009

08005f6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <disk_status+0x30>)
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	79fa      	ldrb	r2, [r7, #7]
 8005f84:	4905      	ldr	r1, [pc, #20]	; (8005f9c <disk_status+0x30>)
 8005f86:	440a      	add	r2, r1
 8005f88:	7a12      	ldrb	r2, [r2, #8]
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4798      	blx	r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000a74 	.word	0x20000a74

08005fa0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	4a0d      	ldr	r2, [pc, #52]	; (8005fe8 <disk_initialize+0x48>)
 8005fb2:	5cd3      	ldrb	r3, [r2, r3]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d111      	bne.n	8005fdc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <disk_initialize+0x48>)
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <disk_initialize+0x48>)
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	79fa      	ldrb	r2, [r7, #7]
 8005fce:	4906      	ldr	r1, [pc, #24]	; (8005fe8 <disk_initialize+0x48>)
 8005fd0:	440a      	add	r2, r1
 8005fd2:	7a12      	ldrb	r2, [r2, #8]
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000a74 	.word	0x20000a74

08005fec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <disk_read+0x3c>)
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	689c      	ldr	r4, [r3, #8]
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	4a07      	ldr	r2, [pc, #28]	; (8006028 <disk_read+0x3c>)
 800600c:	4413      	add	r3, r2
 800600e:	7a18      	ldrb	r0, [r3, #8]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	47a0      	blx	r4
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]
  return res;
 800601c:	7dfb      	ldrb	r3, [r7, #23]
}
 800601e:	4618      	mov	r0, r3
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd90      	pop	{r4, r7, pc}
 8006026:	bf00      	nop
 8006028:	20000a74 	.word	0x20000a74

0800602c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	4a0a      	ldr	r2, [pc, #40]	; (8006068 <disk_write+0x3c>)
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68dc      	ldr	r4, [r3, #12]
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	4a07      	ldr	r2, [pc, #28]	; (8006068 <disk_write+0x3c>)
 800604c:	4413      	add	r3, r2
 800604e:	7a18      	ldrb	r0, [r3, #8]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	47a0      	blx	r4
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]
  return res;
 800605c:	7dfb      	ldrb	r3, [r7, #23]
}
 800605e:	4618      	mov	r0, r3
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd90      	pop	{r4, r7, pc}
 8006066:	bf00      	nop
 8006068:	20000a74 	.word	0x20000a74

0800606c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	4603      	mov	r3, r0
 8006074:	603a      	str	r2, [r7, #0]
 8006076:	71fb      	strb	r3, [r7, #7]
 8006078:	460b      	mov	r3, r1
 800607a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <disk_ioctl+0x38>)
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	79fa      	ldrb	r2, [r7, #7]
 800608a:	4906      	ldr	r1, [pc, #24]	; (80060a4 <disk_ioctl+0x38>)
 800608c:	440a      	add	r2, r1
 800608e:	7a10      	ldrb	r0, [r2, #8]
 8006090:	79b9      	ldrb	r1, [r7, #6]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	73fb      	strb	r3, [r7, #15]
  return res;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000a74 	.word	0x20000a74

080060a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3301      	adds	r3, #1
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80060b8:	89fb      	ldrh	r3, [r7, #14]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	b21a      	sxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b21b      	sxth	r3, r3
 80060c4:	4313      	orrs	r3, r2
 80060c6:	b21b      	sxth	r3, r3
 80060c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80060ca:	89fb      	ldrh	r3, [r7, #14]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3303      	adds	r3, #3
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	3202      	adds	r2, #2
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	3201      	adds	r2, #1
 80060fe:	7812      	ldrb	r2, [r2, #0]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	887a      	ldrh	r2, [r7, #2]
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	887b      	ldrh	r3, [r7, #2]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	887a      	ldrh	r2, [r7, #2]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00d      	beq.n	80061e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	1c53      	adds	r3, r2, #1
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	1c59      	adds	r1, r3, #1
 80061d0:	6179      	str	r1, [r7, #20]
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3b01      	subs	r3, #1
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f1      	bne.n	80061c6 <mem_cpy+0x1a>
	}
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80061ee:	b480      	push	{r7}
 80061f0:	b087      	sub	sp, #28
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	617a      	str	r2, [r7, #20]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3b01      	subs	r3, #1
 800620e:	607b      	str	r3, [r7, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1f3      	bne.n	80061fe <mem_set+0x10>
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	61fa      	str	r2, [r7, #28]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	4619      	mov	r1, r3
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	61ba      	str	r2, [r7, #24]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	1acb      	subs	r3, r1, r3
 8006250:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3b01      	subs	r3, #1
 8006256:	607b      	str	r3, [r7, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <mem_cmp+0x40>
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0eb      	beq.n	800623c <mem_cmp+0x18>

	return r;
 8006264:	697b      	ldr	r3, [r7, #20]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800627c:	e002      	b.n	8006284 <chk_chr+0x12>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3301      	adds	r3, #1
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <chk_chr+0x26>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	4293      	cmp	r3, r2
 8006296:	d1f2      	bne.n	800627e <chk_chr+0xc>
	return *str;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	781b      	ldrb	r3, [r3, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e029      	b.n	8006310 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80062bc:	4a27      	ldr	r2, [pc, #156]	; (800635c <chk_lock+0xb4>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	4413      	add	r3, r2
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01d      	beq.n	8006306 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062ca:	4a24      	ldr	r2, [pc, #144]	; (800635c <chk_lock+0xb4>)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	4413      	add	r3, r2
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d116      	bne.n	800630a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80062dc:	4a1f      	ldr	r2, [pc, #124]	; (800635c <chk_lock+0xb4>)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	4413      	add	r3, r2
 80062e4:	3304      	adds	r3, #4
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d10c      	bne.n	800630a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062f0:	4a1a      	ldr	r2, [pc, #104]	; (800635c <chk_lock+0xb4>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	4413      	add	r3, r2
 80062f8:	3308      	adds	r3, #8
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006300:	429a      	cmp	r2, r3
 8006302:	d102      	bne.n	800630a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006304:	e007      	b.n	8006316 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006306:	2301      	movs	r3, #1
 8006308:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d9d2      	bls.n	80062bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d109      	bne.n	8006330 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <chk_lock+0x80>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d101      	bne.n	800632c <chk_lock+0x84>
 8006328:	2300      	movs	r3, #0
 800632a:	e010      	b.n	800634e <chk_lock+0xa6>
 800632c:	2312      	movs	r3, #18
 800632e:	e00e      	b.n	800634e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <chk_lock+0xa0>
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <chk_lock+0xb4>)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	4413      	add	r3, r2
 800633e:	330c      	adds	r3, #12
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006346:	d101      	bne.n	800634c <chk_lock+0xa4>
 8006348:	2310      	movs	r3, #16
 800634a:	e000      	b.n	800634e <chk_lock+0xa6>
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000a54 	.word	0x20000a54

08006360 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006366:	2300      	movs	r3, #0
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	e002      	b.n	8006372 <enq_lock+0x12>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3301      	adds	r3, #1
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d806      	bhi.n	8006386 <enq_lock+0x26>
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <enq_lock+0x40>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	4413      	add	r3, r2
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f2      	bne.n	800636c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b02      	cmp	r3, #2
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000a54 	.word	0x20000a54

080063a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e01f      	b.n	80063f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80063b4:	4a41      	ldr	r2, [pc, #260]	; (80064bc <inc_lock+0x118>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	4413      	add	r3, r2
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d113      	bne.n	80063ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80063c6:	4a3d      	ldr	r2, [pc, #244]	; (80064bc <inc_lock+0x118>)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	4413      	add	r3, r2
 80063ce:	3304      	adds	r3, #4
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d109      	bne.n	80063ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80063da:	4a38      	ldr	r2, [pc, #224]	; (80064bc <inc_lock+0x118>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	4413      	add	r3, r2
 80063e2:	3308      	adds	r3, #8
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d006      	beq.n	80063fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3301      	adds	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d9dc      	bls.n	80063b4 <inc_lock+0x10>
 80063fa:	e000      	b.n	80063fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80063fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d132      	bne.n	800646a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e002      	b.n	8006410 <inc_lock+0x6c>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3301      	adds	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d806      	bhi.n	8006424 <inc_lock+0x80>
 8006416:	4a29      	ldr	r2, [pc, #164]	; (80064bc <inc_lock+0x118>)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	4413      	add	r3, r2
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f2      	bne.n	800640a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d101      	bne.n	800642e <inc_lock+0x8a>
 800642a:	2300      	movs	r3, #0
 800642c:	e040      	b.n	80064b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4922      	ldr	r1, [pc, #136]	; (80064bc <inc_lock+0x118>)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	440b      	add	r3, r1
 800643a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	491e      	ldr	r1, [pc, #120]	; (80064bc <inc_lock+0x118>)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	440b      	add	r3, r1
 8006448:	3304      	adds	r3, #4
 800644a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695a      	ldr	r2, [r3, #20]
 8006450:	491a      	ldr	r1, [pc, #104]	; (80064bc <inc_lock+0x118>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	440b      	add	r3, r1
 8006458:	3308      	adds	r3, #8
 800645a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800645c:	4a17      	ldr	r2, [pc, #92]	; (80064bc <inc_lock+0x118>)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	4413      	add	r3, r2
 8006464:	330c      	adds	r3, #12
 8006466:	2200      	movs	r2, #0
 8006468:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <inc_lock+0xe0>
 8006470:	4a12      	ldr	r2, [pc, #72]	; (80064bc <inc_lock+0x118>)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	4413      	add	r3, r2
 8006478:	330c      	adds	r3, #12
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <inc_lock+0xe0>
 8006480:	2300      	movs	r3, #0
 8006482:	e015      	b.n	80064b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d108      	bne.n	800649c <inc_lock+0xf8>
 800648a:	4a0c      	ldr	r2, [pc, #48]	; (80064bc <inc_lock+0x118>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	4413      	add	r3, r2
 8006492:	330c      	adds	r3, #12
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	e001      	b.n	80064a0 <inc_lock+0xfc>
 800649c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064a0:	4906      	ldr	r1, [pc, #24]	; (80064bc <inc_lock+0x118>)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	440b      	add	r3, r1
 80064a8:	330c      	adds	r3, #12
 80064aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20000a54 	.word	0x20000a54

080064c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	607b      	str	r3, [r7, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d825      	bhi.n	8006520 <dec_lock+0x60>
		n = Files[i].ctr;
 80064d4:	4a17      	ldr	r2, [pc, #92]	; (8006534 <dec_lock+0x74>)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	4413      	add	r3, r2
 80064dc:	330c      	adds	r3, #12
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80064e2:	89fb      	ldrh	r3, [r7, #14]
 80064e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e8:	d101      	bne.n	80064ee <dec_lock+0x2e>
 80064ea:	2300      	movs	r3, #0
 80064ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80064ee:	89fb      	ldrh	r3, [r7, #14]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <dec_lock+0x3a>
 80064f4:	89fb      	ldrh	r3, [r7, #14]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80064fa:	4a0e      	ldr	r2, [pc, #56]	; (8006534 <dec_lock+0x74>)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	4413      	add	r3, r2
 8006502:	330c      	adds	r3, #12
 8006504:	89fa      	ldrh	r2, [r7, #14]
 8006506:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006508:	89fb      	ldrh	r3, [r7, #14]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d105      	bne.n	800651a <dec_lock+0x5a>
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <dec_lock+0x74>)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	4413      	add	r3, r2
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	737b      	strb	r3, [r7, #13]
 800651e:	e001      	b.n	8006524 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006520:	2302      	movs	r3, #2
 8006522:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006524:	7b7b      	ldrb	r3, [r7, #13]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000a54 	.word	0x20000a54

08006538 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e010      	b.n	8006568 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006546:	4a0d      	ldr	r2, [pc, #52]	; (800657c <clear_lock+0x44>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	4413      	add	r3, r2
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d105      	bne.n	8006562 <clear_lock+0x2a>
 8006556:	4a09      	ldr	r2, [pc, #36]	; (800657c <clear_lock+0x44>)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	4413      	add	r3, r2
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3301      	adds	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d9eb      	bls.n	8006546 <clear_lock+0xe>
	}
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	20000a54 	.word	0x20000a54

08006580 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	78db      	ldrb	r3, [r3, #3]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d034      	beq.n	80065fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	7858      	ldrb	r0, [r3, #1]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065a4:	2301      	movs	r3, #1
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	f7ff fd40 	bl	800602c <disk_write>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
 80065b6:	e022      	b.n	80065fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d217      	bcs.n	80065fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	789b      	ldrb	r3, [r3, #2]
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	e010      	b.n	80065f8 <sync_window+0x78>
					wsect += fs->fsize;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	7858      	ldrb	r0, [r3, #1]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065ea:	2301      	movs	r3, #1
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	f7ff fd1d 	bl	800602c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d8eb      	bhi.n	80065d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d01b      	beq.n	8006658 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ffad 	bl	8006580 <sync_window>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d113      	bne.n	8006658 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7858      	ldrb	r0, [r3, #1]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800663a:	2301      	movs	r3, #1
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	f7ff fcd5 	bl	8005fec <disk_read>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800664c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ff87 	bl	8006580 <sync_window>
 8006672:	4603      	mov	r3, r0
 8006674:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d158      	bne.n	800672e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b03      	cmp	r3, #3
 8006682:	d148      	bne.n	8006716 <sync_fs+0xb2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	791b      	ldrb	r3, [r3, #4]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d144      	bne.n	8006716 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3330      	adds	r3, #48	; 0x30
 8006690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006694:	2100      	movs	r1, #0
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fda9 	bl	80061ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3330      	adds	r3, #48	; 0x30
 80066a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066a4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fd38 	bl	800611e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3330      	adds	r3, #48	; 0x30
 80066b2:	4921      	ldr	r1, [pc, #132]	; (8006738 <sync_fs+0xd4>)
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff fd4d 	bl	8006154 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3330      	adds	r3, #48	; 0x30
 80066be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80066c2:	491e      	ldr	r1, [pc, #120]	; (800673c <sync_fs+0xd8>)
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fd45 	bl	8006154 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3330      	adds	r3, #48	; 0x30
 80066ce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f7ff fd3b 	bl	8006154 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3330      	adds	r3, #48	; 0x30
 80066e2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f7ff fd31 	bl	8006154 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7858      	ldrb	r0, [r3, #1]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670a:	2301      	movs	r3, #1
 800670c:	f7ff fc8e 	bl	800602c <disk_write>
			fs->fsi_flag = 0;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2200      	movs	r2, #0
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fca4 	bl	800606c <disk_ioctl>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <sync_fs+0xca>
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	41615252 	.word	0x41615252
 800673c:	61417272 	.word	0x61417272

08006740 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	3b02      	subs	r3, #2
 800674e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	3b02      	subs	r3, #2
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d301      	bcc.n	8006760 <clust2sect+0x20>
 800675c:	2300      	movs	r3, #0
 800675e:	e008      	b.n	8006772 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	895b      	ldrh	r3, [r3, #10]
 8006764:	461a      	mov	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	fb03 f202 	mul.w	r2, r3, r2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	4413      	add	r3, r2
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d904      	bls.n	800679e <get_fat+0x20>
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d302      	bcc.n	80067a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800679e:	2301      	movs	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	e08f      	b.n	80068c4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d062      	beq.n	8006878 <get_fat+0xfa>
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	dc7c      	bgt.n	80068b0 <get_fat+0x132>
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d002      	beq.n	80067c0 <get_fat+0x42>
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d042      	beq.n	8006844 <get_fat+0xc6>
 80067be:	e077      	b.n	80068b0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	0a5b      	lsrs	r3, r3, #9
 80067d6:	4413      	add	r3, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	6938      	ldr	r0, [r7, #16]
 80067dc:	f7ff ff14 	bl	8006608 <move_window>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d167      	bne.n	80068b6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	60fa      	str	r2, [r7, #12]
 80067ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	0a5b      	lsrs	r3, r3, #9
 8006802:	4413      	add	r3, r2
 8006804:	4619      	mov	r1, r3
 8006806:	6938      	ldr	r0, [r7, #16]
 8006808:	f7ff fefe 	bl	8006608 <move_window>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d153      	bne.n	80068ba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	461a      	mov	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4313      	orrs	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <get_fat+0xbc>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	091b      	lsrs	r3, r3, #4
 8006838:	e002      	b.n	8006840 <get_fat+0xc2>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006840:	617b      	str	r3, [r7, #20]
			break;
 8006842:	e03f      	b.n	80068c4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6a1a      	ldr	r2, [r3, #32]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	4413      	add	r3, r2
 800684e:	4619      	mov	r1, r3
 8006850:	6938      	ldr	r0, [r7, #16]
 8006852:	f7ff fed9 	bl	8006608 <move_window>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d130      	bne.n	80068be <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800686a:	4413      	add	r3, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fc1b 	bl	80060a8 <ld_word>
 8006872:	4603      	mov	r3, r0
 8006874:	617b      	str	r3, [r7, #20]
			break;
 8006876:	e025      	b.n	80068c4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	09db      	lsrs	r3, r3, #7
 8006880:	4413      	add	r3, r2
 8006882:	4619      	mov	r1, r3
 8006884:	6938      	ldr	r0, [r7, #16]
 8006886:	f7ff febf 	bl	8006608 <move_window>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d118      	bne.n	80068c2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800689e:	4413      	add	r3, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff fc19 	bl	80060d8 <ld_dword>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068ac:	617b      	str	r3, [r7, #20]
			break;
 80068ae:	e009      	b.n	80068c4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e006      	b.n	80068c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068b6:	bf00      	nop
 80068b8:	e004      	b.n	80068c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068ba:	bf00      	nop
 80068bc:	e002      	b.n	80068c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80068be:	bf00      	nop
 80068c0:	e000      	b.n	80068c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80068c2:	bf00      	nop
		}
	}

	return val;
 80068c4:	697b      	ldr	r3, [r7, #20]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80068ce:	b590      	push	{r4, r7, lr}
 80068d0:	b089      	sub	sp, #36	; 0x24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80068da:	2302      	movs	r3, #2
 80068dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	f240 80d2 	bls.w	8006a8a <put_fat+0x1bc>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	f080 80cc 	bcs.w	8006a8a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	f000 8096 	beq.w	8006a28 <put_fat+0x15a>
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	f300 80cd 	bgt.w	8006a9c <put_fat+0x1ce>
 8006902:	2b01      	cmp	r3, #1
 8006904:	d002      	beq.n	800690c <put_fat+0x3e>
 8006906:	2b02      	cmp	r3, #2
 8006908:	d06e      	beq.n	80069e8 <put_fat+0x11a>
 800690a:	e0c7      	b.n	8006a9c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	4413      	add	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a1a      	ldr	r2, [r3, #32]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	0a5b      	lsrs	r3, r3, #9
 8006922:	4413      	add	r3, r2
 8006924:	4619      	mov	r1, r3
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff fe6e 	bl	8006608 <move_window>
 800692c:	4603      	mov	r3, r0
 800692e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006930:	7ffb      	ldrb	r3, [r7, #31]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f040 80ab 	bne.w	8006a8e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	1c59      	adds	r1, r3, #1
 8006942:	61b9      	str	r1, [r7, #24]
 8006944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006948:	4413      	add	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00d      	beq.n	8006972 <put_fat+0xa4>
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b25b      	sxtb	r3, r3
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	b25a      	sxtb	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	b25b      	sxtb	r3, r3
 800696a:	4313      	orrs	r3, r2
 800696c:	b25b      	sxtb	r3, r3
 800696e:	b2db      	uxtb	r3, r3
 8006970:	e001      	b.n	8006976 <put_fat+0xa8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1a      	ldr	r2, [r3, #32]
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	0a5b      	lsrs	r3, r3, #9
 8006988:	4413      	add	r3, r2
 800698a:	4619      	mov	r1, r3
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fe3b 	bl	8006608 <move_window>
 8006992:	4603      	mov	r3, r0
 8006994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006996:	7ffb      	ldrb	r3, [r7, #31]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d17a      	bne.n	8006a92 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a8:	4413      	add	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <put_fat+0xf0>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	e00e      	b.n	80069dc <put_fat+0x10e>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b25b      	sxtb	r3, r3
 80069c4:	f023 030f 	bic.w	r3, r3, #15
 80069c8:	b25a      	sxtb	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	0a1b      	lsrs	r3, r3, #8
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	b25b      	sxtb	r3, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	b25b      	sxtb	r3, r3
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	70da      	strb	r2, [r3, #3]
			break;
 80069e6:	e059      	b.n	8006a9c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1a      	ldr	r2, [r3, #32]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	4413      	add	r3, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff fe07 	bl	8006608 <move_window>
 80069fa:	4603      	mov	r3, r0
 80069fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069fe:	7ffb      	ldrb	r3, [r7, #31]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d148      	bne.n	8006a96 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006a12:	4413      	add	r3, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	b292      	uxth	r2, r2
 8006a18:	4611      	mov	r1, r2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff fb7f 	bl	800611e <st_word>
			fs->wflag = 1;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	70da      	strb	r2, [r3, #3]
			break;
 8006a26:	e039      	b.n	8006a9c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	09db      	lsrs	r3, r3, #7
 8006a30:	4413      	add	r3, r2
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff fde7 	bl	8006608 <move_window>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a3e:	7ffb      	ldrb	r3, [r7, #31]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d12a      	bne.n	8006a9a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006a58:	4413      	add	r3, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff fb3c 	bl	80060d8 <ld_dword>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a66:	4323      	orrs	r3, r4
 8006a68:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006a78:	4413      	add	r3, r2
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff fb69 	bl	8006154 <st_dword>
			fs->wflag = 1;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	70da      	strb	r2, [r3, #3]
			break;
 8006a88:	e008      	b.n	8006a9c <put_fat+0x1ce>
		}
	}
 8006a8a:	bf00      	nop
 8006a8c:	e006      	b.n	8006a9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006a8e:	bf00      	nop
 8006a90:	e004      	b.n	8006a9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006a92:	bf00      	nop
 8006a94:	e002      	b.n	8006a9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006a96:	bf00      	nop
 8006a98:	e000      	b.n	8006a9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006a9a:	bf00      	nop
	return res;
 8006a9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3724      	adds	r7, #36	; 0x24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd90      	pop	{r4, r7, pc}

08006aa6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b088      	sub	sp, #32
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d904      	bls.n	8006acc <remove_chain+0x26>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d301      	bcc.n	8006ad0 <remove_chain+0x2a>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e04b      	b.n	8006b68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	69b8      	ldr	r0, [r7, #24]
 8006ade:	f7ff fef6 	bl	80068ce <put_fat>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ae6:	7ffb      	ldrb	r3, [r7, #31]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <remove_chain+0x4a>
 8006aec:	7ffb      	ldrb	r3, [r7, #31]
 8006aee:	e03b      	b.n	8006b68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff fe43 	bl	800677e <get_fat>
 8006af8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d031      	beq.n	8006b64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <remove_chain+0x64>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e02e      	b.n	8006b68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b10:	d101      	bne.n	8006b16 <remove_chain+0x70>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e028      	b.n	8006b68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006b16:	2200      	movs	r2, #0
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	69b8      	ldr	r0, [r7, #24]
 8006b1c:	f7ff fed7 	bl	80068ce <put_fat>
 8006b20:	4603      	mov	r3, r0
 8006b22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006b24:	7ffb      	ldrb	r3, [r7, #31]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <remove_chain+0x88>
 8006b2a:	7ffb      	ldrb	r3, [r7, #31]
 8006b2c:	e01c      	b.n	8006b68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	3b02      	subs	r3, #2
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d20b      	bcs.n	8006b54 <remove_chain+0xae>
			fs->free_clst++;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	791b      	ldrb	r3, [r3, #4]
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d3c6      	bcc.n	8006af0 <remove_chain+0x4a>
 8006b62:	e000      	b.n	8006b66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006b64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10d      	bne.n	8006ba2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <create_chain+0x2c>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d31b      	bcc.n	8006bd4 <create_chain+0x64>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	e018      	b.n	8006bd4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fdea 	bl	800677e <get_fat>
 8006baa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d801      	bhi.n	8006bb6 <create_chain+0x46>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e070      	b.n	8006c98 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bbc:	d101      	bne.n	8006bc2 <create_chain+0x52>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	e06a      	b.n	8006c98 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d201      	bcs.n	8006bd0 <create_chain+0x60>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	e063      	b.n	8006c98 <create_chain+0x128>
		scl = clst;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d307      	bcc.n	8006bf8 <create_chain+0x88>
				ncl = 2;
 8006be8:	2302      	movs	r3, #2
 8006bea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d901      	bls.n	8006bf8 <create_chain+0x88>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e04f      	b.n	8006c98 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006bf8:	69f9      	ldr	r1, [r7, #28]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fdbf 	bl	800677e <get_fat>
 8006c00:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d003      	beq.n	8006c16 <create_chain+0xa6>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c14:	d101      	bne.n	8006c1a <create_chain+0xaa>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	e03e      	b.n	8006c98 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d1da      	bne.n	8006bd8 <create_chain+0x68>
 8006c22:	2300      	movs	r3, #0
 8006c24:	e038      	b.n	8006c98 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006c26:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c2c:	69f9      	ldr	r1, [r7, #28]
 8006c2e:	6938      	ldr	r0, [r7, #16]
 8006c30:	f7ff fe4d 	bl	80068ce <put_fat>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d109      	bne.n	8006c52 <create_chain+0xe2>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d006      	beq.n	8006c52 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6938      	ldr	r0, [r7, #16]
 8006c4a:	f7ff fe40 	bl	80068ce <put_fat>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d116      	bne.n	8006c86 <create_chain+0x116>
		fs->last_clst = ncl;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	3b02      	subs	r3, #2
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d804      	bhi.n	8006c76 <create_chain+0x106>
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	1e5a      	subs	r2, r3, #1
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	711a      	strb	r2, [r3, #4]
 8006c84:	e007      	b.n	8006c96 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d102      	bne.n	8006c92 <create_chain+0x122>
 8006c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c90:	e000      	b.n	8006c94 <create_chain+0x124>
 8006c92:	2301      	movs	r3, #1
 8006c94:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006c96:	69fb      	ldr	r3, [r7, #28]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	0a5b      	lsrs	r3, r3, #9
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	8952      	ldrh	r2, [r2, #10]
 8006cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1d1a      	adds	r2, r3, #4
 8006cca:	613a      	str	r2, [r7, #16]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <clmt_clust+0x3a>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e010      	b.n	8006cfc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d307      	bcc.n	8006cf2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	3304      	adds	r3, #4
 8006cee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006cf0:	e7e9      	b.n	8006cc6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006cf2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4413      	add	r3, r2
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d1e:	d204      	bcs.n	8006d2a <dir_sdi+0x22>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <dir_sdi+0x26>
		return FR_INT_ERR;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e063      	b.n	8006df6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <dir_sdi+0x46>
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d902      	bls.n	8006d4e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10c      	bne.n	8006d6e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	8912      	ldrh	r2, [r2, #8]
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d301      	bcc.n	8006d64 <dir_sdi+0x5c>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e048      	b.n	8006df6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	61da      	str	r2, [r3, #28]
 8006d6c:	e029      	b.n	8006dc2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	895b      	ldrh	r3, [r3, #10]
 8006d72:	025b      	lsls	r3, r3, #9
 8006d74:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d76:	e019      	b.n	8006dac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fcfe 	bl	800677e <get_fat>
 8006d82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d8a:	d101      	bne.n	8006d90 <dir_sdi+0x88>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e032      	b.n	8006df6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d904      	bls.n	8006da0 <dir_sdi+0x98>
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d301      	bcc.n	8006da4 <dir_sdi+0x9c>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e028      	b.n	8006df6 <dir_sdi+0xee>
			ofs -= csz;
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d2e1      	bcs.n	8006d78 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006db4:	6979      	ldr	r1, [r7, #20]
 8006db6:	6938      	ldr	r0, [r7, #16]
 8006db8:	f7ff fcc2 	bl	8006740 <clust2sect>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <dir_sdi+0xcc>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e010      	b.n	8006df6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	0a5b      	lsrs	r3, r3, #9
 8006ddc:	441a      	add	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	441a      	add	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	3320      	adds	r3, #32
 8006e14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <dir_next+0x28>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e24:	d301      	bcc.n	8006e2a <dir_next+0x2c>
 8006e26:	2304      	movs	r3, #4
 8006e28:	e0aa      	b.n	8006f80 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 8098 	bne.w	8006f66 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	8912      	ldrh	r2, [r2, #8]
 8006e50:	4293      	cmp	r3, r2
 8006e52:	f0c0 8088 	bcc.w	8006f66 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	61da      	str	r2, [r3, #28]
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	e08f      	b.n	8006f80 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	0a5b      	lsrs	r3, r3, #9
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	8952      	ldrh	r2, [r2, #10]
 8006e68:	3a01      	subs	r2, #1
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d17a      	bne.n	8006f66 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f7ff fc80 	bl	800677e <get_fat>
 8006e7e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d801      	bhi.n	8006e8a <dir_next+0x8c>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e07a      	b.n	8006f80 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e90:	d101      	bne.n	8006e96 <dir_next+0x98>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e074      	b.n	8006f80 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d358      	bcc.n	8006f52 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d104      	bne.n	8006eb0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	61da      	str	r2, [r3, #28]
 8006eac:	2304      	movs	r3, #4
 8006eae:	e067      	b.n	8006f80 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f7ff fe59 	bl	8006b70 <create_chain>
 8006ebe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <dir_next+0xcc>
 8006ec6:	2307      	movs	r3, #7
 8006ec8:	e05a      	b.n	8006f80 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <dir_next+0xd6>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e055      	b.n	8006f80 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eda:	d101      	bne.n	8006ee0 <dir_next+0xe2>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e04f      	b.n	8006f80 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff fb4d 	bl	8006580 <sync_window>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <dir_next+0xf2>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e047      	b.n	8006f80 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3330      	adds	r3, #48	; 0x30
 8006ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff f977 	bl	80061ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f00:	2300      	movs	r3, #0
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	6979      	ldr	r1, [r7, #20]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fc1a 	bl	8006740 <clust2sect>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f12:	e012      	b.n	8006f3a <dir_next+0x13c>
						fs->wflag = 1;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff fb30 	bl	8006580 <sync_window>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <dir_next+0x12c>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e02a      	b.n	8006f80 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	895b      	ldrh	r3, [r3, #10]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d3e6      	bcc.n	8006f14 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006f58:	6979      	ldr	r1, [r7, #20]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff fbf0 	bl	8006740 <clust2sect>
 8006f60:	4602      	mov	r2, r0
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f78:	441a      	add	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff feb4 	bl	8006d08 <dir_sdi>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d12b      	bne.n	8007002 <dir_alloc+0x7a>
		n = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff fb27 	bl	8006608 <move_window>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d11d      	bne.n	8007000 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2be5      	cmp	r3, #229	; 0xe5
 8006fcc:	d004      	beq.n	8006fd8 <dir_alloc+0x50>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d107      	bne.n	8006fe8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d102      	bne.n	8006fec <dir_alloc+0x64>
 8006fe6:	e00c      	b.n	8007002 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006fe8:	2300      	movs	r3, #0
 8006fea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006fec:	2101      	movs	r1, #1
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff ff05 	bl	8006dfe <dir_next>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0d7      	beq.n	8006fae <dir_alloc+0x26>
 8006ffe:	e000      	b.n	8007002 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007000:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d101      	bne.n	800700c <dir_alloc+0x84>
 8007008:	2307      	movs	r3, #7
 800700a:	75fb      	strb	r3, [r7, #23]
	return res;
 800700c:	7dfb      	ldrb	r3, [r7, #23]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	331a      	adds	r3, #26
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff f83f 	bl	80060a8 <ld_word>
 800702a:	4603      	mov	r3, r0
 800702c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d109      	bne.n	800704a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff f834 	bl	80060a8 <ld_word>
 8007040:	4603      	mov	r3, r0
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800704a:	68fb      	ldr	r3, [r7, #12]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	331a      	adds	r3, #26
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	b292      	uxth	r2, r2
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff f857 	bl	800611e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d109      	bne.n	800708c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f103 0214 	add.w	r2, r3, #20
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	0c1b      	lsrs	r3, r3, #16
 8007082:	b29b      	uxth	r3, r3
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7ff f849 	bl	800611e <st_word>
	}
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80070a2:	2100      	movs	r1, #0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff fe2f 	bl	8006d08 <dir_sdi>
 80070aa:	4603      	mov	r3, r0
 80070ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <dir_find+0x24>
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	e03e      	b.n	8007136 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	4619      	mov	r1, r3
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f7ff faa2 	bl	8006608 <move_window>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d12f      	bne.n	800712e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <dir_find+0x4e>
 80070dc:	2304      	movs	r3, #4
 80070de:	75fb      	strb	r3, [r7, #23]
 80070e0:	e028      	b.n	8007134 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	330b      	adds	r3, #11
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	330b      	adds	r3, #11
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <dir_find+0x86>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a18      	ldr	r0, [r3, #32]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3324      	adds	r3, #36	; 0x24
 800710c:	220b      	movs	r2, #11
 800710e:	4619      	mov	r1, r3
 8007110:	f7ff f888 	bl	8006224 <mem_cmp>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800711a:	2100      	movs	r1, #0
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff fe6e 	bl	8006dfe <dir_next>
 8007122:	4603      	mov	r3, r0
 8007124:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0c5      	beq.n	80070b8 <dir_find+0x24>
 800712c:	e002      	b.n	8007134 <dir_find+0xa0>
		if (res != FR_OK) break;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007132:	bf00      	nop

	return res;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800714c:	2101      	movs	r1, #1
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff ff1a 	bl	8006f88 <dir_alloc>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11c      	bne.n	8007198 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	4619      	mov	r1, r3
 8007164:	68b8      	ldr	r0, [r7, #8]
 8007166:	f7ff fa4f 	bl	8006608 <move_window>
 800716a:	4603      	mov	r3, r0
 800716c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d111      	bne.n	8007198 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	2220      	movs	r2, #32
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff f836 	bl	80061ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a18      	ldr	r0, [r3, #32]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3324      	adds	r3, #36	; 0x24
 800718a:	220b      	movs	r2, #11
 800718c:	4619      	mov	r1, r3
 800718e:	f7ff f80d 	bl	80061ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2201      	movs	r2, #1
 8007196:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2200      	movs	r2, #0
 80071b0:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d04e      	beq.n	8007258 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80071c2:	e021      	b.n	8007208 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	1c59      	adds	r1, r3, #1
 80071cc:	6179      	str	r1, [r7, #20]
 80071ce:	4413      	add	r3, r2
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d100      	bne.n	80071dc <get_fileinfo+0x3a>
 80071da:	e015      	b.n	8007208 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	2b05      	cmp	r3, #5
 80071e0:	d101      	bne.n	80071e6 <get_fileinfo+0x44>
 80071e2:	23e5      	movs	r3, #229	; 0xe5
 80071e4:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b09      	cmp	r3, #9
 80071ea:	d106      	bne.n	80071fa <get_fileinfo+0x58>
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	613a      	str	r2, [r7, #16]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	4413      	add	r3, r2
 80071f6:	222e      	movs	r2, #46	; 0x2e
 80071f8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	613a      	str	r2, [r7, #16]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	4413      	add	r3, r2
 8007204:	7bfa      	ldrb	r2, [r7, #15]
 8007206:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b0a      	cmp	r3, #10
 800720c:	d9da      	bls.n	80071c4 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4413      	add	r3, r2
 8007214:	3309      	adds	r3, #9
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	7ada      	ldrb	r2, [r3, #11]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	331c      	adds	r3, #28
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe ff54 	bl	80060d8 <ld_dword>
 8007230:	4602      	mov	r2, r0
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	3316      	adds	r3, #22
 800723c:	4618      	mov	r0, r3
 800723e:	f7fe ff4b 	bl	80060d8 <ld_dword>
 8007242:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	b29a      	uxth	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	80da      	strh	r2, [r3, #6]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	0c1b      	lsrs	r3, r3, #16
 8007250:	b29a      	uxth	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	809a      	strh	r2, [r3, #4]
 8007256:	e000      	b.n	800725a <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007258:	bf00      	nop
}
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3324      	adds	r3, #36	; 0x24
 8007274:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007276:	220b      	movs	r2, #11
 8007278:	2120      	movs	r1, #32
 800727a:	68b8      	ldr	r0, [r7, #8]
 800727c:	f7fe ffb7 	bl	80061ee <mem_set>
	si = i = 0; ni = 8;
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	2308      	movs	r3, #8
 800728a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	61fa      	str	r2, [r7, #28]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800729a:	7efb      	ldrb	r3, [r7, #27]
 800729c:	2b20      	cmp	r3, #32
 800729e:	d94e      	bls.n	800733e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80072a0:	7efb      	ldrb	r3, [r7, #27]
 80072a2:	2b2f      	cmp	r3, #47	; 0x2f
 80072a4:	d006      	beq.n	80072b4 <create_name+0x54>
 80072a6:	7efb      	ldrb	r3, [r7, #27]
 80072a8:	2b5c      	cmp	r3, #92	; 0x5c
 80072aa:	d110      	bne.n	80072ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80072ac:	e002      	b.n	80072b4 <create_name+0x54>
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	3301      	adds	r3, #1
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b2f      	cmp	r3, #47	; 0x2f
 80072be:	d0f6      	beq.n	80072ae <create_name+0x4e>
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b5c      	cmp	r3, #92	; 0x5c
 80072ca:	d0f0      	beq.n	80072ae <create_name+0x4e>
			break;
 80072cc:	e038      	b.n	8007340 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80072ce:	7efb      	ldrb	r3, [r7, #27]
 80072d0:	2b2e      	cmp	r3, #46	; 0x2e
 80072d2:	d003      	beq.n	80072dc <create_name+0x7c>
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d30c      	bcc.n	80072f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b0b      	cmp	r3, #11
 80072e0:	d002      	beq.n	80072e8 <create_name+0x88>
 80072e2:	7efb      	ldrb	r3, [r7, #27]
 80072e4:	2b2e      	cmp	r3, #46	; 0x2e
 80072e6:	d001      	beq.n	80072ec <create_name+0x8c>
 80072e8:	2306      	movs	r3, #6
 80072ea:	e044      	b.n	8007376 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80072ec:	2308      	movs	r3, #8
 80072ee:	613b      	str	r3, [r7, #16]
 80072f0:	230b      	movs	r3, #11
 80072f2:	617b      	str	r3, [r7, #20]
			continue;
 80072f4:	e022      	b.n	800733c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80072f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	da04      	bge.n	8007308 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80072fe:	7efb      	ldrb	r3, [r7, #27]
 8007300:	3b80      	subs	r3, #128	; 0x80
 8007302:	4a1f      	ldr	r2, [pc, #124]	; (8007380 <create_name+0x120>)
 8007304:	5cd3      	ldrb	r3, [r2, r3]
 8007306:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007308:	7efb      	ldrb	r3, [r7, #27]
 800730a:	4619      	mov	r1, r3
 800730c:	481d      	ldr	r0, [pc, #116]	; (8007384 <create_name+0x124>)
 800730e:	f7fe ffb0 	bl	8006272 <chk_chr>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <create_name+0xbc>
 8007318:	2306      	movs	r3, #6
 800731a:	e02c      	b.n	8007376 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800731c:	7efb      	ldrb	r3, [r7, #27]
 800731e:	2b60      	cmp	r3, #96	; 0x60
 8007320:	d905      	bls.n	800732e <create_name+0xce>
 8007322:	7efb      	ldrb	r3, [r7, #27]
 8007324:	2b7a      	cmp	r3, #122	; 0x7a
 8007326:	d802      	bhi.n	800732e <create_name+0xce>
 8007328:	7efb      	ldrb	r3, [r7, #27]
 800732a:	3b20      	subs	r3, #32
 800732c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	613a      	str	r2, [r7, #16]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	4413      	add	r3, r2
 8007338:	7efa      	ldrb	r2, [r7, #27]
 800733a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800733c:	e7a6      	b.n	800728c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800733e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	441a      	add	r2, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <create_name+0xf4>
 8007350:	2306      	movs	r3, #6
 8007352:	e010      	b.n	8007376 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2be5      	cmp	r3, #229	; 0xe5
 800735a:	d102      	bne.n	8007362 <create_name+0x102>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2205      	movs	r2, #5
 8007360:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007362:	7efb      	ldrb	r3, [r7, #27]
 8007364:	2b20      	cmp	r3, #32
 8007366:	d801      	bhi.n	800736c <create_name+0x10c>
 8007368:	2204      	movs	r2, #4
 800736a:	e000      	b.n	800736e <create_name+0x10e>
 800736c:	2200      	movs	r2, #0
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	330b      	adds	r3, #11
 8007372:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007374:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007376:	4618      	mov	r0, r3
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	08009274 	.word	0x08009274
 8007384:	080091fc 	.word	0x080091fc

08007388 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800739c:	e002      	b.n	80073a4 <follow_path+0x1c>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	3301      	adds	r3, #1
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b2f      	cmp	r3, #47	; 0x2f
 80073aa:	d0f8      	beq.n	800739e <follow_path+0x16>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b5c      	cmp	r3, #92	; 0x5c
 80073b2:	d0f4      	beq.n	800739e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2200      	movs	r2, #0
 80073b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b1f      	cmp	r3, #31
 80073c0:	d80a      	bhi.n	80073d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2280      	movs	r2, #128	; 0x80
 80073c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80073ca:	2100      	movs	r1, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff fc9b 	bl	8006d08 <dir_sdi>
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]
 80073d6:	e043      	b.n	8007460 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073d8:	463b      	mov	r3, r7
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff ff3f 	bl	8007260 <create_name>
 80073e2:	4603      	mov	r3, r0
 80073e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d134      	bne.n	8007456 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fe51 	bl	8007094 <dir_find>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b04      	cmp	r3, #4
 8007408:	d127      	bne.n	800745a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d122      	bne.n	800745a <follow_path+0xd2>
 8007414:	2305      	movs	r3, #5
 8007416:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007418:	e01f      	b.n	800745a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11c      	bne.n	800745e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	799b      	ldrb	r3, [r3, #6]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007430:	2305      	movs	r3, #5
 8007432:	75fb      	strb	r3, [r7, #23]
 8007434:	e014      	b.n	8007460 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007444:	4413      	add	r3, r2
 8007446:	4619      	mov	r1, r3
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7ff fde4 	bl	8007016 <ld_clust>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007454:	e7c0      	b.n	80073d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007456:	bf00      	nop
 8007458:	e002      	b.n	8007460 <follow_path+0xd8>
				break;
 800745a:	bf00      	nop
 800745c:	e000      	b.n	8007460 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800745e:	bf00      	nop
			}
		}
	}

	return res;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800746a:	b480      	push	{r7}
 800746c:	b087      	sub	sp, #28
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007476:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d031      	beq.n	80074e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	e002      	b.n	800748e <get_ldnumber+0x24>
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	3301      	adds	r3, #1
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b20      	cmp	r3, #32
 8007494:	d903      	bls.n	800749e <get_ldnumber+0x34>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b3a      	cmp	r3, #58	; 0x3a
 800749c:	d1f4      	bne.n	8007488 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b3a      	cmp	r3, #58	; 0x3a
 80074a4:	d11c      	bne.n	80074e0 <get_ldnumber+0x76>
			tp = *path;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	60fa      	str	r2, [r7, #12]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	3b30      	subs	r3, #48	; 0x30
 80074b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b09      	cmp	r3, #9
 80074bc:	d80e      	bhi.n	80074dc <get_ldnumber+0x72>
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d10a      	bne.n	80074dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d107      	bne.n	80074dc <get_ldnumber+0x72>
					vol = (int)i;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3301      	adds	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	e002      	b.n	80074e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80074e0:	2300      	movs	r3, #0
 80074e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80074e4:	693b      	ldr	r3, [r7, #16]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	70da      	strb	r2, [r3, #3]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800750a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff f87a 	bl	8006608 <move_window>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <check_fs+0x2a>
 800751a:	2304      	movs	r3, #4
 800751c:	e038      	b.n	8007590 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3330      	adds	r3, #48	; 0x30
 8007522:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fdbe 	bl	80060a8 <ld_word>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007534:	429a      	cmp	r2, r3
 8007536:	d001      	beq.n	800753c <check_fs+0x48>
 8007538:	2303      	movs	r3, #3
 800753a:	e029      	b.n	8007590 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007542:	2be9      	cmp	r3, #233	; 0xe9
 8007544:	d009      	beq.n	800755a <check_fs+0x66>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800754c:	2beb      	cmp	r3, #235	; 0xeb
 800754e:	d11e      	bne.n	800758e <check_fs+0x9a>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007556:	2b90      	cmp	r3, #144	; 0x90
 8007558:	d119      	bne.n	800758e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3330      	adds	r3, #48	; 0x30
 800755e:	3336      	adds	r3, #54	; 0x36
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe fdb9 	bl	80060d8 <ld_dword>
 8007566:	4603      	mov	r3, r0
 8007568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800756c:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <check_fs+0xa4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d101      	bne.n	8007576 <check_fs+0x82>
 8007572:	2300      	movs	r3, #0
 8007574:	e00c      	b.n	8007590 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3330      	adds	r3, #48	; 0x30
 800757a:	3352      	adds	r3, #82	; 0x52
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fdab 	bl	80060d8 <ld_dword>
 8007582:	4603      	mov	r3, r0
 8007584:	4a05      	ldr	r2, [pc, #20]	; (800759c <check_fs+0xa8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d101      	bne.n	800758e <check_fs+0x9a>
 800758a:	2300      	movs	r3, #0
 800758c:	e000      	b.n	8007590 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800758e:	2302      	movs	r3, #2
}
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	00544146 	.word	0x00544146
 800759c:	33544146 	.word	0x33544146

080075a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b096      	sub	sp, #88	; 0x58
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff ff58 	bl	800746a <get_ldnumber>
 80075ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da01      	bge.n	80075c6 <find_volume+0x26>
 80075c2:	230b      	movs	r3, #11
 80075c4:	e22d      	b.n	8007a22 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80075c6:	4aa1      	ldr	r2, [pc, #644]	; (800784c <find_volume+0x2ac>)
 80075c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <find_volume+0x3a>
 80075d6:	230c      	movs	r3, #12
 80075d8:	e223      	b.n	8007a22 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	f023 0301 	bic.w	r3, r3, #1
 80075e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01a      	beq.n	8007626 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe fcb9 	bl	8005f6c <disk_status>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10c      	bne.n	8007626 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <find_volume+0x82>
 8007612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800761e:	230a      	movs	r3, #10
 8007620:	e1ff      	b.n	8007a22 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007622:	2300      	movs	r3, #0
 8007624:	e1fd      	b.n	8007a22 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800762c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762e:	b2da      	uxtb	r2, r3
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fcb1 	bl	8005fa0 <disk_initialize>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007650:	2303      	movs	r3, #3
 8007652:	e1e6      	b.n	8007a22 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d007      	beq.n	800766a <find_volume+0xca>
 800765a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007666:	230a      	movs	r3, #10
 8007668:	e1db      	b.n	8007a22 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800766e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007672:	f7ff ff3f 	bl	80074f4 <check_fs>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800767c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007680:	2b02      	cmp	r3, #2
 8007682:	d149      	bne.n	8007718 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007684:	2300      	movs	r3, #0
 8007686:	643b      	str	r3, [r7, #64]	; 0x40
 8007688:	e01e      	b.n	80076c8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007698:	4413      	add	r3, r2
 800769a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	3304      	adds	r3, #4
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d006      	beq.n	80076b4 <find_volume+0x114>
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	3308      	adds	r3, #8
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fd14 	bl	80060d8 <ld_dword>
 80076b0:	4602      	mov	r2, r0
 80076b2:	e000      	b.n	80076b6 <find_volume+0x116>
 80076b4:	2200      	movs	r2, #0
 80076b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	3358      	adds	r3, #88	; 0x58
 80076bc:	443b      	add	r3, r7
 80076be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c4:	3301      	adds	r3, #1
 80076c6:	643b      	str	r3, [r7, #64]	; 0x40
 80076c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d9dd      	bls.n	800768a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80076ce:	2300      	movs	r3, #0
 80076d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80076d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <find_volume+0x13e>
 80076d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076da:	3b01      	subs	r3, #1
 80076dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	3358      	adds	r3, #88	; 0x58
 80076e4:	443b      	add	r3, r7
 80076e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80076ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <find_volume+0x15e>
 80076f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076f6:	f7ff fefd 	bl	80074f4 <check_fs>
 80076fa:	4603      	mov	r3, r0
 80076fc:	e000      	b.n	8007700 <find_volume+0x160>
 80076fe:	2303      	movs	r3, #3
 8007700:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007708:	2b01      	cmp	r3, #1
 800770a:	d905      	bls.n	8007718 <find_volume+0x178>
 800770c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770e:	3301      	adds	r3, #1
 8007710:	643b      	str	r3, [r7, #64]	; 0x40
 8007712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007714:	2b03      	cmp	r3, #3
 8007716:	d9e2      	bls.n	80076de <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800771c:	2b04      	cmp	r3, #4
 800771e:	d101      	bne.n	8007724 <find_volume+0x184>
 8007720:	2301      	movs	r3, #1
 8007722:	e17e      	b.n	8007a22 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007728:	2b01      	cmp	r3, #1
 800772a:	d901      	bls.n	8007730 <find_volume+0x190>
 800772c:	230d      	movs	r3, #13
 800772e:	e178      	b.n	8007a22 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	3330      	adds	r3, #48	; 0x30
 8007734:	330b      	adds	r3, #11
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fcb6 	bl	80060a8 <ld_word>
 800773c:	4603      	mov	r3, r0
 800773e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007742:	d001      	beq.n	8007748 <find_volume+0x1a8>
 8007744:	230d      	movs	r3, #13
 8007746:	e16c      	b.n	8007a22 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	3330      	adds	r3, #48	; 0x30
 800774c:	3316      	adds	r3, #22
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe fcaa 	bl	80060a8 <ld_word>
 8007754:	4603      	mov	r3, r0
 8007756:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <find_volume+0x1cc>
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	3330      	adds	r3, #48	; 0x30
 8007762:	3324      	adds	r3, #36	; 0x24
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fcb7 	bl	80060d8 <ld_dword>
 800776a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007770:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	789b      	ldrb	r3, [r3, #2]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d005      	beq.n	8007790 <find_volume+0x1f0>
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	789b      	ldrb	r3, [r3, #2]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d001      	beq.n	8007790 <find_volume+0x1f0>
 800778c:	230d      	movs	r3, #13
 800778e:	e148      	b.n	8007a22 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	789b      	ldrb	r3, [r3, #2]
 8007794:	461a      	mov	r2, r3
 8007796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007798:	fb02 f303 	mul.w	r3, r2, r3
 800779c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	895b      	ldrh	r3, [r3, #10]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d008      	beq.n	80077c4 <find_volume+0x224>
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	895b      	ldrh	r3, [r3, #10]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	895b      	ldrh	r3, [r3, #10]
 80077bc:	3b01      	subs	r3, #1
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <find_volume+0x228>
 80077c4:	230d      	movs	r3, #13
 80077c6:	e12c      	b.n	8007a22 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	3330      	adds	r3, #48	; 0x30
 80077cc:	3311      	adds	r3, #17
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fc6a 	bl	80060a8 <ld_word>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	891b      	ldrh	r3, [r3, #8]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <find_volume+0x24e>
 80077ea:	230d      	movs	r3, #13
 80077ec:	e119      	b.n	8007a22 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	3330      	adds	r3, #48	; 0x30
 80077f2:	3313      	adds	r3, #19
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fe fc57 	bl	80060a8 <ld_word>
 80077fa:	4603      	mov	r3, r0
 80077fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80077fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007800:	2b00      	cmp	r3, #0
 8007802:	d106      	bne.n	8007812 <find_volume+0x272>
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	3330      	adds	r3, #48	; 0x30
 8007808:	3320      	adds	r3, #32
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fc64 	bl	80060d8 <ld_dword>
 8007810:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	3330      	adds	r3, #48	; 0x30
 8007816:	330e      	adds	r3, #14
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fc45 	bl	80060a8 <ld_word>
 800781e:	4603      	mov	r3, r0
 8007820:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007822:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <find_volume+0x28c>
 8007828:	230d      	movs	r3, #13
 800782a:	e0fa      	b.n	8007a22 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800782c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800782e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007830:	4413      	add	r3, r2
 8007832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007834:	8912      	ldrh	r2, [r2, #8]
 8007836:	0912      	lsrs	r2, r2, #4
 8007838:	b292      	uxth	r2, r2
 800783a:	4413      	add	r3, r2
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800783e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	429a      	cmp	r2, r3
 8007844:	d204      	bcs.n	8007850 <find_volume+0x2b0>
 8007846:	230d      	movs	r3, #13
 8007848:	e0eb      	b.n	8007a22 <find_volume+0x482>
 800784a:	bf00      	nop
 800784c:	20000a4c 	.word	0x20000a4c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007858:	8952      	ldrh	r2, [r2, #10]
 800785a:	fbb3 f3f2 	udiv	r3, r3, r2
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <find_volume+0x2ca>
 8007866:	230d      	movs	r3, #13
 8007868:	e0db      	b.n	8007a22 <find_volume+0x482>
		fmt = FS_FAT32;
 800786a:	2303      	movs	r3, #3
 800786c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007876:	4293      	cmp	r3, r2
 8007878:	d802      	bhi.n	8007880 <find_volume+0x2e0>
 800787a:	2302      	movs	r3, #2
 800787c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007886:	4293      	cmp	r3, r2
 8007888:	d802      	bhi.n	8007890 <find_volume+0x2f0>
 800788a:	2301      	movs	r3, #1
 800788c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	1c9a      	adds	r2, r3, #2
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800789c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800789e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80078a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a2:	441a      	add	r2, r3
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80078a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	441a      	add	r2, r3
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80078b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d11e      	bne.n	80078f8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	3330      	adds	r3, #48	; 0x30
 80078be:	332a      	adds	r3, #42	; 0x2a
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fbf1 	bl	80060a8 <ld_word>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <find_volume+0x330>
 80078cc:	230d      	movs	r3, #13
 80078ce:	e0a8      	b.n	8007a22 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	891b      	ldrh	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <find_volume+0x33c>
 80078d8:	230d      	movs	r3, #13
 80078da:	e0a2      	b.n	8007a22 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	3330      	adds	r3, #48	; 0x30
 80078e0:	332c      	adds	r3, #44	; 0x2c
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fbf8 	bl	80060d8 <ld_dword>
 80078e8:	4602      	mov	r2, r0
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	647b      	str	r3, [r7, #68]	; 0x44
 80078f6:	e01f      	b.n	8007938 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	891b      	ldrh	r3, [r3, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <find_volume+0x364>
 8007900:	230d      	movs	r3, #13
 8007902:	e08e      	b.n	8007a22 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	6a1a      	ldr	r2, [r3, #32]
 8007908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790a:	441a      	add	r2, r3
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007914:	2b02      	cmp	r3, #2
 8007916:	d103      	bne.n	8007920 <find_volume+0x380>
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	e00a      	b.n	8007936 <find_volume+0x396>
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	4613      	mov	r3, r2
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	4413      	add	r3, r2
 800792a:	085a      	lsrs	r2, r3, #1
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007936:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800793e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007942:	0a5b      	lsrs	r3, r3, #9
 8007944:	429a      	cmp	r2, r3
 8007946:	d201      	bcs.n	800794c <find_volume+0x3ac>
 8007948:	230d      	movs	r3, #13
 800794a:	e06a      	b.n	8007a22 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007952:	611a      	str	r2, [r3, #16]
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	2280      	movs	r2, #128	; 0x80
 8007960:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007962:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007966:	2b03      	cmp	r3, #3
 8007968:	d149      	bne.n	80079fe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	3330      	adds	r3, #48	; 0x30
 800796e:	3330      	adds	r3, #48	; 0x30
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe fb99 	bl	80060a8 <ld_word>
 8007976:	4603      	mov	r3, r0
 8007978:	2b01      	cmp	r3, #1
 800797a:	d140      	bne.n	80079fe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800797c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797e:	3301      	adds	r3, #1
 8007980:	4619      	mov	r1, r3
 8007982:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007984:	f7fe fe40 	bl	8006608 <move_window>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d137      	bne.n	80079fe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	2200      	movs	r2, #0
 8007992:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	3330      	adds	r3, #48	; 0x30
 8007998:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe fb83 	bl	80060a8 <ld_word>
 80079a2:	4603      	mov	r3, r0
 80079a4:	461a      	mov	r2, r3
 80079a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d127      	bne.n	80079fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	3330      	adds	r3, #48	; 0x30
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fb90 	bl	80060d8 <ld_dword>
 80079b8:	4603      	mov	r3, r0
 80079ba:	4a1c      	ldr	r2, [pc, #112]	; (8007a2c <find_volume+0x48c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d11e      	bne.n	80079fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	3330      	adds	r3, #48	; 0x30
 80079c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe fb85 	bl	80060d8 <ld_dword>
 80079ce:	4603      	mov	r3, r0
 80079d0:	4a17      	ldr	r2, [pc, #92]	; (8007a30 <find_volume+0x490>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d113      	bne.n	80079fe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	3330      	adds	r3, #48	; 0x30
 80079da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fb7a 	bl	80060d8 <ld_dword>
 80079e4:	4602      	mov	r2, r0
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	3330      	adds	r3, #48	; 0x30
 80079ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fb70 	bl	80060d8 <ld_dword>
 80079f8:	4602      	mov	r2, r0
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007a04:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <find_volume+0x494>)
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <find_volume+0x494>)
 8007a10:	801a      	strh	r2, [r3, #0]
 8007a12:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <find_volume+0x494>)
 8007a14:	881a      	ldrh	r2, [r3, #0]
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a1c:	f7fe fd8c 	bl	8006538 <clear_lock>
#endif
	return FR_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3758      	adds	r7, #88	; 0x58
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	41615252 	.word	0x41615252
 8007a30:	61417272 	.word	0x61417272
 8007a34:	20000a50 	.word	0x20000a50

08007a38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a42:	2309      	movs	r3, #9
 8007a44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01c      	beq.n	8007a86 <validate+0x4e>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d018      	beq.n	8007a86 <validate+0x4e>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d013      	beq.n	8007a86 <validate+0x4e>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	889a      	ldrh	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	88db      	ldrh	r3, [r3, #6]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d10c      	bne.n	8007a86 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	785b      	ldrb	r3, [r3, #1]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe fa7a 	bl	8005f6c <disk_status>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <validate+0x4e>
			res = FR_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <validate+0x5a>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	e000      	b.n	8007a94 <validate+0x5c>
 8007a92:	2300      	movs	r3, #0
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	6013      	str	r3, [r2, #0]
	return res;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ab6:	f107 0310 	add.w	r3, r7, #16
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff fcd5 	bl	800746a <get_ldnumber>
 8007ac0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da01      	bge.n	8007acc <f_mount+0x28>
 8007ac8:	230b      	movs	r3, #11
 8007aca:	e02b      	b.n	8007b24 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007acc:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <f_mount+0x88>)
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007adc:	69b8      	ldr	r0, [r7, #24]
 8007ade:	f7fe fd2b 	bl	8006538 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	490d      	ldr	r1, [pc, #52]	; (8007b2c <f_mount+0x88>)
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <f_mount+0x66>
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d001      	beq.n	8007b0e <f_mount+0x6a>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e00a      	b.n	8007b24 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007b0e:	f107 010c 	add.w	r1, r7, #12
 8007b12:	f107 0308 	add.w	r3, r7, #8
 8007b16:	2200      	movs	r2, #0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff fd41 	bl	80075a0 <find_volume>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3720      	adds	r7, #32
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000a4c 	.word	0x20000a4c

08007b30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b098      	sub	sp, #96	; 0x60
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <f_open+0x18>
 8007b44:	2309      	movs	r3, #9
 8007b46:	e1ad      	b.n	8007ea4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b4e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b50:	79fa      	ldrb	r2, [r7, #7]
 8007b52:	f107 0110 	add.w	r1, r7, #16
 8007b56:	f107 0308 	add.w	r3, r7, #8
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff fd20 	bl	80075a0 <find_volume>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 8191 	bne.w	8007e92 <f_open+0x362>
		dj.obj.fs = fs;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	f107 0314 	add.w	r3, r7, #20
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff fc03 	bl	8007388 <follow_path>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11a      	bne.n	8007bc6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b94:	b25b      	sxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da03      	bge.n	8007ba2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b9a:	2306      	movs	r3, #6
 8007b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007ba0:	e011      	b.n	8007bc6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	f023 0301 	bic.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bf14      	ite	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fb74 	bl	80062a8 <chk_lock>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	f003 031c 	and.w	r3, r3, #28
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d07f      	beq.n	8007cd0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007bd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d017      	beq.n	8007c08 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d10e      	bne.n	8007bfe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007be0:	f7fe fbbe 	bl	8006360 <enq_lock>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d006      	beq.n	8007bf8 <f_open+0xc8>
 8007bea:	f107 0314 	add.w	r3, r7, #20
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff faa5 	bl	800713e <dir_register>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	e000      	b.n	8007bfa <f_open+0xca>
 8007bf8:	2312      	movs	r3, #18
 8007bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	f043 0308 	orr.w	r3, r3, #8
 8007c04:	71fb      	strb	r3, [r7, #7]
 8007c06:	e010      	b.n	8007c2a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007c08:	7ebb      	ldrb	r3, [r7, #26]
 8007c0a:	f003 0311 	and.w	r3, r3, #17
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <f_open+0xea>
					res = FR_DENIED;
 8007c12:	2307      	movs	r3, #7
 8007c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007c18:	e007      	b.n	8007c2a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <f_open+0xfa>
 8007c24:	2308      	movs	r3, #8
 8007c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d168      	bne.n	8007d04 <f_open+0x1d4>
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d063      	beq.n	8007d04 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007c3c:	f7fd ffce 	bl	8005bdc <get_fattime>
 8007c40:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	330e      	adds	r3, #14
 8007c46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fa83 	bl	8006154 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	3316      	adds	r3, #22
 8007c52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe fa7d 	bl	8006154 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5c:	330b      	adds	r3, #11
 8007c5e:	2220      	movs	r2, #32
 8007c60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c66:	4611      	mov	r1, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff f9d4 	bl	8007016 <ld_clust>
 8007c6e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c74:	2200      	movs	r2, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff f9ec 	bl	8007054 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7e:	331c      	adds	r3, #28
 8007c80:	2100      	movs	r1, #0
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe fa66 	bl	8006154 <st_dword>
					fs->wflag = 1;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d037      	beq.n	8007d04 <f_open+0x1d4>
						dw = fs->winsect;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007c9a:	f107 0314 	add.w	r3, r7, #20
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe feff 	bl	8006aa6 <remove_chain>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d126      	bne.n	8007d04 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fca4 	bl	8006608 <move_window>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cca:	3a01      	subs	r2, #1
 8007ccc:	60da      	str	r2, [r3, #12]
 8007cce:	e019      	b.n	8007d04 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d115      	bne.n	8007d04 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007cd8:	7ebb      	ldrb	r3, [r7, #26]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <f_open+0x1ba>
					res = FR_NO_FILE;
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007ce8:	e00c      	b.n	8007d04 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d007      	beq.n	8007d04 <f_open+0x1d4>
 8007cf4:	7ebb      	ldrb	r3, [r7, #26]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <f_open+0x1d4>
						res = FR_DENIED;
 8007cfe:	2307      	movs	r3, #7
 8007d00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d128      	bne.n	8007d5e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	bf14      	ite	ne
 8007d36:	2301      	movne	r3, #1
 8007d38:	2300      	moveq	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f107 0314 	add.w	r3, r7, #20
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fb2d 	bl	80063a4 <inc_lock>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <f_open+0x22e>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f040 8095 	bne.w	8007e92 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff f951 	bl	8007016 <ld_clust>
 8007d74:	4602      	mov	r2, r0
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7c:	331c      	adds	r3, #28
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe f9aa 	bl	80060d8 <ld_dword>
 8007d84:	4602      	mov	r2, r0
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	88da      	ldrh	r2, [r3, #6]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	79fa      	ldrb	r2, [r7, #7]
 8007da2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3330      	adds	r3, #48	; 0x30
 8007dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe fa14 	bl	80061ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d060      	beq.n	8007e92 <f_open+0x362>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d05c      	beq.n	8007e92 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	895b      	ldrh	r3, [r3, #10]
 8007de4:	025b      	lsls	r3, r3, #9
 8007de6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	657b      	str	r3, [r7, #84]	; 0x54
 8007df4:	e016      	b.n	8007e24 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fcbf 	bl	800677e <get_fat>
 8007e00:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d802      	bhi.n	8007e0e <f_open+0x2de>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e14:	d102      	bne.n	8007e1c <f_open+0x2ec>
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	657b      	str	r3, [r7, #84]	; 0x54
 8007e24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <f_open+0x304>
 8007e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d8e0      	bhi.n	8007df6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d127      	bne.n	8007e92 <f_open+0x362>
 8007e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d022      	beq.n	8007e92 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe fc75 	bl	8006740 <clust2sect>
 8007e56:	6478      	str	r0, [r7, #68]	; 0x44
 8007e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d103      	bne.n	8007e66 <f_open+0x336>
						res = FR_INT_ERR;
 8007e5e:	2302      	movs	r3, #2
 8007e60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007e64:	e015      	b.n	8007e92 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e68:	0a5a      	lsrs	r2, r3, #9
 8007e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	7858      	ldrb	r0, [r3, #1]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a1a      	ldr	r2, [r3, #32]
 8007e80:	2301      	movs	r3, #1
 8007e82:	f7fe f8b3 	bl	8005fec <disk_read>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <f_open+0x362>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007e92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <f_open+0x370>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3760      	adds	r7, #96	; 0x60
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08c      	sub	sp, #48	; 0x30
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f107 0210 	add.w	r2, r7, #16
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fdb3 	bl	8007a38 <validate>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d107      	bne.n	8007ef0 <f_write+0x44>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	7d5b      	ldrb	r3, [r3, #21]
 8007ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <f_write+0x4a>
 8007ef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ef4:	e14b      	b.n	800818e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	7d1b      	ldrb	r3, [r3, #20]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <f_write+0x5a>
 8007f02:	2307      	movs	r3, #7
 8007f04:	e143      	b.n	800818e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	441a      	add	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f080 812d 	bcs.w	8008172 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	43db      	mvns	r3, r3
 8007f1e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007f20:	e127      	b.n	8008172 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f040 80e3 	bne.w	80080f6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	0a5b      	lsrs	r3, r3, #9
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	8952      	ldrh	r2, [r2, #10]
 8007f3a:	3a01      	subs	r2, #1
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d143      	bne.n	8007fce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10c      	bne.n	8007f68 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d11a      	bne.n	8007f90 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fe06 	bl	8006b70 <create_chain>
 8007f64:	62b8      	str	r0, [r7, #40]	; 0x28
 8007f66:	e013      	b.n	8007f90 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	4619      	mov	r1, r3
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7fe fe92 	bl	8006ca0 <clmt_clust>
 8007f7c:	62b8      	str	r0, [r7, #40]	; 0x28
 8007f7e:	e007      	b.n	8007f90 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	4619      	mov	r1, r3
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f7fe fdf1 	bl	8006b70 <create_chain>
 8007f8e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 80f2 	beq.w	800817c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d104      	bne.n	8007fa8 <f_write+0xfc>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	755a      	strb	r2, [r3, #21]
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e0f2      	b.n	800818e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fae:	d104      	bne.n	8007fba <f_write+0x10e>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	755a      	strb	r2, [r3, #21]
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e0e9      	b.n	800818e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fbe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <f_write+0x122>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fcc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	7d1b      	ldrb	r3, [r3, #20]
 8007fd2:	b25b      	sxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da18      	bge.n	800800a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	7858      	ldrb	r0, [r3, #1]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1a      	ldr	r2, [r3, #32]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f7fe f820 	bl	800602c <disk_write>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <f_write+0x150>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	755a      	strb	r2, [r3, #21]
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e0c8      	b.n	800818e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	7d1b      	ldrb	r3, [r3, #20]
 8008000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008004:	b2da      	uxtb	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7fe fb94 	bl	8006740 <clust2sect>
 8008018:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <f_write+0x17e>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2202      	movs	r2, #2
 8008024:	755a      	strb	r2, [r3, #21]
 8008026:	2302      	movs	r3, #2
 8008028:	e0b1      	b.n	800818e <f_write+0x2e2>
			sect += csect;
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	4413      	add	r3, r2
 8008030:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	0a5b      	lsrs	r3, r3, #9
 8008036:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d03c      	beq.n	80080b8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	4413      	add	r3, r2
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	8952      	ldrh	r2, [r2, #10]
 8008048:	4293      	cmp	r3, r2
 800804a:	d905      	bls.n	8008058 <f_write+0x1ac>
					cc = fs->csize - csect;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	895b      	ldrh	r3, [r3, #10]
 8008050:	461a      	mov	r2, r3
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	7858      	ldrb	r0, [r3, #1]
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	69f9      	ldr	r1, [r7, #28]
 8008062:	f7fd ffe3 	bl	800602c <disk_write>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <f_write+0x1ca>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2201      	movs	r2, #1
 8008070:	755a      	strb	r2, [r3, #21]
 8008072:	2301      	movs	r3, #1
 8008074:	e08b      	b.n	800818e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6a1a      	ldr	r2, [r3, #32]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	6a3a      	ldr	r2, [r7, #32]
 8008080:	429a      	cmp	r2, r3
 8008082:	d915      	bls.n	80080b0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	025b      	lsls	r3, r3, #9
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	4413      	add	r3, r2
 8008098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800809c:	4619      	mov	r1, r3
 800809e:	f7fe f885 	bl	80061ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	7d1b      	ldrb	r3, [r3, #20]
 80080a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	025b      	lsls	r3, r3, #9
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80080b6:	e03f      	b.n	8008138 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d016      	beq.n	80080f0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d210      	bcs.n	80080f0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	7858      	ldrb	r0, [r3, #1]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080d8:	2301      	movs	r3, #1
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	f7fd ff86 	bl	8005fec <disk_read>
 80080e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	755a      	strb	r2, [r3, #21]
 80080ec:	2301      	movs	r3, #1
 80080ee:	e04e      	b.n	800818e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	429a      	cmp	r2, r3
 800810a:	d901      	bls.n	8008110 <f_write+0x264>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811e:	4413      	add	r3, r2
 8008120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008122:	69f9      	ldr	r1, [r7, #28]
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe f841 	bl	80061ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	7d1b      	ldrb	r3, [r3, #20]
 800812e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008132:	b2da      	uxtb	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008138:	69fa      	ldr	r2, [r7, #28]
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	4413      	add	r3, r2
 800813e:	61fb      	str	r3, [r7, #28]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	699a      	ldr	r2, [r3, #24]
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	441a      	add	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	619a      	str	r2, [r3, #24]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	429a      	cmp	r2, r3
 8008156:	bf38      	it	cc
 8008158:	461a      	movcc	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	60da      	str	r2, [r3, #12]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	441a      	add	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f47f aed4 	bne.w	8007f22 <f_write+0x76>
 800817a:	e000      	b.n	800817e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800817c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	7d1b      	ldrb	r3, [r3, #20]
 8008182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008186:	b2da      	uxtb	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3730      	adds	r7, #48	; 0x30
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b086      	sub	sp, #24
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f107 0208 	add.w	r2, r7, #8
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff fc46 	bl	8007a38 <validate>
 80081ac:	4603      	mov	r3, r0
 80081ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d168      	bne.n	8008288 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7d1b      	ldrb	r3, [r3, #20]
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d062      	beq.n	8008288 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	7d1b      	ldrb	r3, [r3, #20]
 80081c6:	b25b      	sxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da15      	bge.n	80081f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	7858      	ldrb	r0, [r3, #1]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1a      	ldr	r2, [r3, #32]
 80081da:	2301      	movs	r3, #1
 80081dc:	f7fd ff26 	bl	800602c <disk_write>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <f_sync+0x54>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e04f      	b.n	800828a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	7d1b      	ldrb	r3, [r3, #20]
 80081ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80081f8:	f7fd fcf0 	bl	8005bdc <get_fattime>
 80081fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe f9fe 	bl	8006608 <move_window>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d138      	bne.n	8008288 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	330b      	adds	r3, #11
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	330b      	adds	r3, #11
 8008226:	f042 0220 	orr.w	r2, r2, #32
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	461a      	mov	r2, r3
 8008238:	68f9      	ldr	r1, [r7, #12]
 800823a:	f7fe ff0b 	bl	8007054 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f103 021c 	add.w	r2, r3, #28
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4619      	mov	r1, r3
 800824a:	4610      	mov	r0, r2
 800824c:	f7fd ff82 	bl	8006154 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3316      	adds	r3, #22
 8008254:	6939      	ldr	r1, [r7, #16]
 8008256:	4618      	mov	r0, r3
 8008258:	f7fd ff7c 	bl	8006154 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3312      	adds	r3, #18
 8008260:	2100      	movs	r1, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f7fd ff5b 	bl	800611e <st_word>
					fs->wflag = 1;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2201      	movs	r2, #1
 800826c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe f9f7 	bl	8006664 <sync_fs>
 8008276:	4603      	mov	r3, r0
 8008278:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7d1b      	ldrb	r3, [r3, #20]
 800827e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008282:	b2da      	uxtb	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008288:	7dfb      	ldrb	r3, [r7, #23]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff ff7b 	bl	8008196 <f_sync>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d118      	bne.n	80082dc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f107 0208 	add.w	r2, r7, #8
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff fbc0 	bl	8007a38 <validate>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10c      	bne.n	80082dc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe f8fa 	bl	80064c0 <dec_lock>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b090      	sub	sp, #64	; 0x40
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80082f0:	f107 010c 	add.w	r1, r7, #12
 80082f4:	1d3b      	adds	r3, r7, #4
 80082f6:	2200      	movs	r2, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff f951 	bl	80075a0 <find_volume>
 80082fe:	4603      	mov	r3, r0
 8008300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008304:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008308:	2b00      	cmp	r3, #0
 800830a:	d11f      	bne.n	800834c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	f107 030c 	add.w	r3, r7, #12
 8008312:	4611      	mov	r1, r2
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff f837 	bl	8007388 <follow_path>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008320:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008324:	2b00      	cmp	r3, #0
 8008326:	d111      	bne.n	800834c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008328:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800832c:	b25b      	sxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	da03      	bge.n	800833a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008332:	2306      	movs	r3, #6
 8008334:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008338:	e008      	b.n	800834c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <f_stat+0x66>
 8008340:	f107 030c 	add.w	r3, r7, #12
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe ff2b 	bl	80071a2 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800834c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008350:	4618      	mov	r0, r3
 8008352:	3740      	adds	r7, #64	; 0x40
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008366:	2301      	movs	r3, #1
 8008368:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800836e:	4b1f      	ldr	r3, [pc, #124]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 8008370:	7a5b      	ldrb	r3, [r3, #9]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d131      	bne.n	80083dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008378:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 800837a:	7a5b      	ldrb	r3, [r3, #9]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	461a      	mov	r2, r3
 8008380:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 8008382:	2100      	movs	r1, #0
 8008384:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008386:	4b19      	ldr	r3, [pc, #100]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 8008388:	7a5b      	ldrb	r3, [r3, #9]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	4a17      	ldr	r2, [pc, #92]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008396:	4b15      	ldr	r3, [pc, #84]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 8008398:	7a5b      	ldrb	r3, [r3, #9]
 800839a:	b2db      	uxtb	r3, r3
 800839c:	461a      	mov	r2, r3
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 80083a0:	4413      	add	r3, r2
 80083a2:	79fa      	ldrb	r2, [r7, #7]
 80083a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80083a6:	4b11      	ldr	r3, [pc, #68]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 80083a8:	7a5b      	ldrb	r3, [r3, #9]
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	b2d1      	uxtb	r1, r2
 80083b0:	4a0e      	ldr	r2, [pc, #56]	; (80083ec <FATFS_LinkDriverEx+0x94>)
 80083b2:	7251      	strb	r1, [r2, #9]
 80083b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80083b6:	7dbb      	ldrb	r3, [r7, #22]
 80083b8:	3330      	adds	r3, #48	; 0x30
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	3301      	adds	r3, #1
 80083c4:	223a      	movs	r2, #58	; 0x3a
 80083c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	3302      	adds	r3, #2
 80083cc:	222f      	movs	r2, #47	; 0x2f
 80083ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	3303      	adds	r3, #3
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	20000a74 	.word	0x20000a74

080083f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80083fa:	2200      	movs	r2, #0
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff ffaa 	bl	8008358 <FATFS_LinkDriverEx>
 8008404:	4603      	mov	r3, r0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <__errno>:
 8008410:	4b01      	ldr	r3, [pc, #4]	; (8008418 <__errno+0x8>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	2000000c 	.word	0x2000000c

0800841c <__libc_init_array>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4d0d      	ldr	r5, [pc, #52]	; (8008454 <__libc_init_array+0x38>)
 8008420:	4c0d      	ldr	r4, [pc, #52]	; (8008458 <__libc_init_array+0x3c>)
 8008422:	1b64      	subs	r4, r4, r5
 8008424:	10a4      	asrs	r4, r4, #2
 8008426:	2600      	movs	r6, #0
 8008428:	42a6      	cmp	r6, r4
 800842a:	d109      	bne.n	8008440 <__libc_init_array+0x24>
 800842c:	4d0b      	ldr	r5, [pc, #44]	; (800845c <__libc_init_array+0x40>)
 800842e:	4c0c      	ldr	r4, [pc, #48]	; (8008460 <__libc_init_array+0x44>)
 8008430:	f000 fc9e 	bl	8008d70 <_init>
 8008434:	1b64      	subs	r4, r4, r5
 8008436:	10a4      	asrs	r4, r4, #2
 8008438:	2600      	movs	r6, #0
 800843a:	42a6      	cmp	r6, r4
 800843c:	d105      	bne.n	800844a <__libc_init_array+0x2e>
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	f855 3b04 	ldr.w	r3, [r5], #4
 8008444:	4798      	blx	r3
 8008446:	3601      	adds	r6, #1
 8008448:	e7ee      	b.n	8008428 <__libc_init_array+0xc>
 800844a:	f855 3b04 	ldr.w	r3, [r5], #4
 800844e:	4798      	blx	r3
 8008450:	3601      	adds	r6, #1
 8008452:	e7f2      	b.n	800843a <__libc_init_array+0x1e>
 8008454:	08009330 	.word	0x08009330
 8008458:	08009330 	.word	0x08009330
 800845c:	08009330 	.word	0x08009330
 8008460:	08009334 	.word	0x08009334

08008464 <malloc>:
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <malloc+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f000 b87f 	b.w	800856c <_malloc_r>
 800846e:	bf00      	nop
 8008470:	2000000c 	.word	0x2000000c

08008474 <free>:
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <free+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f000 b80b 	b.w	8008494 <_free_r>
 800847e:	bf00      	nop
 8008480:	2000000c 	.word	0x2000000c

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <_free_r>:
 8008494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008496:	2900      	cmp	r1, #0
 8008498:	d044      	beq.n	8008524 <_free_r+0x90>
 800849a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800849e:	9001      	str	r0, [sp, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f1a1 0404 	sub.w	r4, r1, #4
 80084a6:	bfb8      	it	lt
 80084a8:	18e4      	addlt	r4, r4, r3
 80084aa:	f000 f903 	bl	80086b4 <__malloc_lock>
 80084ae:	4a1e      	ldr	r2, [pc, #120]	; (8008528 <_free_r+0x94>)
 80084b0:	9801      	ldr	r0, [sp, #4]
 80084b2:	6813      	ldr	r3, [r2, #0]
 80084b4:	b933      	cbnz	r3, 80084c4 <_free_r+0x30>
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	6014      	str	r4, [r2, #0]
 80084ba:	b003      	add	sp, #12
 80084bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084c0:	f000 b8fe 	b.w	80086c0 <__malloc_unlock>
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	d908      	bls.n	80084da <_free_r+0x46>
 80084c8:	6825      	ldr	r5, [r4, #0]
 80084ca:	1961      	adds	r1, r4, r5
 80084cc:	428b      	cmp	r3, r1
 80084ce:	bf01      	itttt	eq
 80084d0:	6819      	ldreq	r1, [r3, #0]
 80084d2:	685b      	ldreq	r3, [r3, #4]
 80084d4:	1949      	addeq	r1, r1, r5
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	e7ed      	b.n	80084b6 <_free_r+0x22>
 80084da:	461a      	mov	r2, r3
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	b10b      	cbz	r3, 80084e4 <_free_r+0x50>
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	d9fa      	bls.n	80084da <_free_r+0x46>
 80084e4:	6811      	ldr	r1, [r2, #0]
 80084e6:	1855      	adds	r5, r2, r1
 80084e8:	42a5      	cmp	r5, r4
 80084ea:	d10b      	bne.n	8008504 <_free_r+0x70>
 80084ec:	6824      	ldr	r4, [r4, #0]
 80084ee:	4421      	add	r1, r4
 80084f0:	1854      	adds	r4, r2, r1
 80084f2:	42a3      	cmp	r3, r4
 80084f4:	6011      	str	r1, [r2, #0]
 80084f6:	d1e0      	bne.n	80084ba <_free_r+0x26>
 80084f8:	681c      	ldr	r4, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	6053      	str	r3, [r2, #4]
 80084fe:	4421      	add	r1, r4
 8008500:	6011      	str	r1, [r2, #0]
 8008502:	e7da      	b.n	80084ba <_free_r+0x26>
 8008504:	d902      	bls.n	800850c <_free_r+0x78>
 8008506:	230c      	movs	r3, #12
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	e7d6      	b.n	80084ba <_free_r+0x26>
 800850c:	6825      	ldr	r5, [r4, #0]
 800850e:	1961      	adds	r1, r4, r5
 8008510:	428b      	cmp	r3, r1
 8008512:	bf04      	itt	eq
 8008514:	6819      	ldreq	r1, [r3, #0]
 8008516:	685b      	ldreq	r3, [r3, #4]
 8008518:	6063      	str	r3, [r4, #4]
 800851a:	bf04      	itt	eq
 800851c:	1949      	addeq	r1, r1, r5
 800851e:	6021      	streq	r1, [r4, #0]
 8008520:	6054      	str	r4, [r2, #4]
 8008522:	e7ca      	b.n	80084ba <_free_r+0x26>
 8008524:	b003      	add	sp, #12
 8008526:	bd30      	pop	{r4, r5, pc}
 8008528:	20000a80 	.word	0x20000a80

0800852c <sbrk_aligned>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	4e0e      	ldr	r6, [pc, #56]	; (8008568 <sbrk_aligned+0x3c>)
 8008530:	460c      	mov	r4, r1
 8008532:	6831      	ldr	r1, [r6, #0]
 8008534:	4605      	mov	r5, r0
 8008536:	b911      	cbnz	r1, 800853e <sbrk_aligned+0x12>
 8008538:	f000 f88c 	bl	8008654 <_sbrk_r>
 800853c:	6030      	str	r0, [r6, #0]
 800853e:	4621      	mov	r1, r4
 8008540:	4628      	mov	r0, r5
 8008542:	f000 f887 	bl	8008654 <_sbrk_r>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	d00a      	beq.n	8008560 <sbrk_aligned+0x34>
 800854a:	1cc4      	adds	r4, r0, #3
 800854c:	f024 0403 	bic.w	r4, r4, #3
 8008550:	42a0      	cmp	r0, r4
 8008552:	d007      	beq.n	8008564 <sbrk_aligned+0x38>
 8008554:	1a21      	subs	r1, r4, r0
 8008556:	4628      	mov	r0, r5
 8008558:	f000 f87c 	bl	8008654 <_sbrk_r>
 800855c:	3001      	adds	r0, #1
 800855e:	d101      	bne.n	8008564 <sbrk_aligned+0x38>
 8008560:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008564:	4620      	mov	r0, r4
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	20000a84 	.word	0x20000a84

0800856c <_malloc_r>:
 800856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008570:	1ccd      	adds	r5, r1, #3
 8008572:	f025 0503 	bic.w	r5, r5, #3
 8008576:	3508      	adds	r5, #8
 8008578:	2d0c      	cmp	r5, #12
 800857a:	bf38      	it	cc
 800857c:	250c      	movcc	r5, #12
 800857e:	2d00      	cmp	r5, #0
 8008580:	4607      	mov	r7, r0
 8008582:	db01      	blt.n	8008588 <_malloc_r+0x1c>
 8008584:	42a9      	cmp	r1, r5
 8008586:	d905      	bls.n	8008594 <_malloc_r+0x28>
 8008588:	230c      	movs	r3, #12
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	2600      	movs	r6, #0
 800858e:	4630      	mov	r0, r6
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	4e2e      	ldr	r6, [pc, #184]	; (8008650 <_malloc_r+0xe4>)
 8008596:	f000 f88d 	bl	80086b4 <__malloc_lock>
 800859a:	6833      	ldr	r3, [r6, #0]
 800859c:	461c      	mov	r4, r3
 800859e:	bb34      	cbnz	r4, 80085ee <_malloc_r+0x82>
 80085a0:	4629      	mov	r1, r5
 80085a2:	4638      	mov	r0, r7
 80085a4:	f7ff ffc2 	bl	800852c <sbrk_aligned>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	4604      	mov	r4, r0
 80085ac:	d14d      	bne.n	800864a <_malloc_r+0xde>
 80085ae:	6834      	ldr	r4, [r6, #0]
 80085b0:	4626      	mov	r6, r4
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d140      	bne.n	8008638 <_malloc_r+0xcc>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	4631      	mov	r1, r6
 80085ba:	4638      	mov	r0, r7
 80085bc:	eb04 0803 	add.w	r8, r4, r3
 80085c0:	f000 f848 	bl	8008654 <_sbrk_r>
 80085c4:	4580      	cmp	r8, r0
 80085c6:	d13a      	bne.n	800863e <_malloc_r+0xd2>
 80085c8:	6821      	ldr	r1, [r4, #0]
 80085ca:	3503      	adds	r5, #3
 80085cc:	1a6d      	subs	r5, r5, r1
 80085ce:	f025 0503 	bic.w	r5, r5, #3
 80085d2:	3508      	adds	r5, #8
 80085d4:	2d0c      	cmp	r5, #12
 80085d6:	bf38      	it	cc
 80085d8:	250c      	movcc	r5, #12
 80085da:	4629      	mov	r1, r5
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ffa5 	bl	800852c <sbrk_aligned>
 80085e2:	3001      	adds	r0, #1
 80085e4:	d02b      	beq.n	800863e <_malloc_r+0xd2>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	442b      	add	r3, r5
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	e00e      	b.n	800860c <_malloc_r+0xa0>
 80085ee:	6822      	ldr	r2, [r4, #0]
 80085f0:	1b52      	subs	r2, r2, r5
 80085f2:	d41e      	bmi.n	8008632 <_malloc_r+0xc6>
 80085f4:	2a0b      	cmp	r2, #11
 80085f6:	d916      	bls.n	8008626 <_malloc_r+0xba>
 80085f8:	1961      	adds	r1, r4, r5
 80085fa:	42a3      	cmp	r3, r4
 80085fc:	6025      	str	r5, [r4, #0]
 80085fe:	bf18      	it	ne
 8008600:	6059      	strne	r1, [r3, #4]
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	bf08      	it	eq
 8008606:	6031      	streq	r1, [r6, #0]
 8008608:	5162      	str	r2, [r4, r5]
 800860a:	604b      	str	r3, [r1, #4]
 800860c:	4638      	mov	r0, r7
 800860e:	f104 060b 	add.w	r6, r4, #11
 8008612:	f000 f855 	bl	80086c0 <__malloc_unlock>
 8008616:	f026 0607 	bic.w	r6, r6, #7
 800861a:	1d23      	adds	r3, r4, #4
 800861c:	1af2      	subs	r2, r6, r3
 800861e:	d0b6      	beq.n	800858e <_malloc_r+0x22>
 8008620:	1b9b      	subs	r3, r3, r6
 8008622:	50a3      	str	r3, [r4, r2]
 8008624:	e7b3      	b.n	800858e <_malloc_r+0x22>
 8008626:	6862      	ldr	r2, [r4, #4]
 8008628:	42a3      	cmp	r3, r4
 800862a:	bf0c      	ite	eq
 800862c:	6032      	streq	r2, [r6, #0]
 800862e:	605a      	strne	r2, [r3, #4]
 8008630:	e7ec      	b.n	800860c <_malloc_r+0xa0>
 8008632:	4623      	mov	r3, r4
 8008634:	6864      	ldr	r4, [r4, #4]
 8008636:	e7b2      	b.n	800859e <_malloc_r+0x32>
 8008638:	4634      	mov	r4, r6
 800863a:	6876      	ldr	r6, [r6, #4]
 800863c:	e7b9      	b.n	80085b2 <_malloc_r+0x46>
 800863e:	230c      	movs	r3, #12
 8008640:	603b      	str	r3, [r7, #0]
 8008642:	4638      	mov	r0, r7
 8008644:	f000 f83c 	bl	80086c0 <__malloc_unlock>
 8008648:	e7a1      	b.n	800858e <_malloc_r+0x22>
 800864a:	6025      	str	r5, [r4, #0]
 800864c:	e7de      	b.n	800860c <_malloc_r+0xa0>
 800864e:	bf00      	nop
 8008650:	20000a80 	.word	0x20000a80

08008654 <_sbrk_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d06      	ldr	r5, [pc, #24]	; (8008670 <_sbrk_r+0x1c>)
 8008658:	2300      	movs	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f8 fd56 	bl	8001110 <_sbrk>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_sbrk_r+0x1a>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_sbrk_r+0x1a>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	20000a88 	.word	0x20000a88

08008674 <siprintf>:
 8008674:	b40e      	push	{r1, r2, r3}
 8008676:	b500      	push	{lr}
 8008678:	b09c      	sub	sp, #112	; 0x70
 800867a:	ab1d      	add	r3, sp, #116	; 0x74
 800867c:	9002      	str	r0, [sp, #8]
 800867e:	9006      	str	r0, [sp, #24]
 8008680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008684:	4809      	ldr	r0, [pc, #36]	; (80086ac <siprintf+0x38>)
 8008686:	9107      	str	r1, [sp, #28]
 8008688:	9104      	str	r1, [sp, #16]
 800868a:	4909      	ldr	r1, [pc, #36]	; (80086b0 <siprintf+0x3c>)
 800868c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008690:	9105      	str	r1, [sp, #20]
 8008692:	6800      	ldr	r0, [r0, #0]
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	a902      	add	r1, sp, #8
 8008698:	f000 f874 	bl	8008784 <_svfiprintf_r>
 800869c:	9b02      	ldr	r3, [sp, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]
 80086a2:	b01c      	add	sp, #112	; 0x70
 80086a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a8:	b003      	add	sp, #12
 80086aa:	4770      	bx	lr
 80086ac:	2000000c 	.word	0x2000000c
 80086b0:	ffff0208 	.word	0xffff0208

080086b4 <__malloc_lock>:
 80086b4:	4801      	ldr	r0, [pc, #4]	; (80086bc <__malloc_lock+0x8>)
 80086b6:	f000 baf9 	b.w	8008cac <__retarget_lock_acquire_recursive>
 80086ba:	bf00      	nop
 80086bc:	20000a8c 	.word	0x20000a8c

080086c0 <__malloc_unlock>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__malloc_unlock+0x8>)
 80086c2:	f000 baf4 	b.w	8008cae <__retarget_lock_release_recursive>
 80086c6:	bf00      	nop
 80086c8:	20000a8c 	.word	0x20000a8c

080086cc <__ssputs_r>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	688e      	ldr	r6, [r1, #8]
 80086d2:	429e      	cmp	r6, r3
 80086d4:	4682      	mov	sl, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4690      	mov	r8, r2
 80086da:	461f      	mov	r7, r3
 80086dc:	d838      	bhi.n	8008750 <__ssputs_r+0x84>
 80086de:	898a      	ldrh	r2, [r1, #12]
 80086e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086e4:	d032      	beq.n	800874c <__ssputs_r+0x80>
 80086e6:	6825      	ldr	r5, [r4, #0]
 80086e8:	6909      	ldr	r1, [r1, #16]
 80086ea:	eba5 0901 	sub.w	r9, r5, r1
 80086ee:	6965      	ldr	r5, [r4, #20]
 80086f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086f8:	3301      	adds	r3, #1
 80086fa:	444b      	add	r3, r9
 80086fc:	106d      	asrs	r5, r5, #1
 80086fe:	429d      	cmp	r5, r3
 8008700:	bf38      	it	cc
 8008702:	461d      	movcc	r5, r3
 8008704:	0553      	lsls	r3, r2, #21
 8008706:	d531      	bpl.n	800876c <__ssputs_r+0xa0>
 8008708:	4629      	mov	r1, r5
 800870a:	f7ff ff2f 	bl	800856c <_malloc_r>
 800870e:	4606      	mov	r6, r0
 8008710:	b950      	cbnz	r0, 8008728 <__ssputs_r+0x5c>
 8008712:	230c      	movs	r3, #12
 8008714:	f8ca 3000 	str.w	r3, [sl]
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008728:	6921      	ldr	r1, [r4, #16]
 800872a:	464a      	mov	r2, r9
 800872c:	f000 fac0 	bl	8008cb0 <memcpy>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	6126      	str	r6, [r4, #16]
 800873e:	6165      	str	r5, [r4, #20]
 8008740:	444e      	add	r6, r9
 8008742:	eba5 0509 	sub.w	r5, r5, r9
 8008746:	6026      	str	r6, [r4, #0]
 8008748:	60a5      	str	r5, [r4, #8]
 800874a:	463e      	mov	r6, r7
 800874c:	42be      	cmp	r6, r7
 800874e:	d900      	bls.n	8008752 <__ssputs_r+0x86>
 8008750:	463e      	mov	r6, r7
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	4632      	mov	r2, r6
 8008756:	4641      	mov	r1, r8
 8008758:	f000 fab8 	bl	8008ccc <memmove>
 800875c:	68a3      	ldr	r3, [r4, #8]
 800875e:	1b9b      	subs	r3, r3, r6
 8008760:	60a3      	str	r3, [r4, #8]
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	4433      	add	r3, r6
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	2000      	movs	r0, #0
 800876a:	e7db      	b.n	8008724 <__ssputs_r+0x58>
 800876c:	462a      	mov	r2, r5
 800876e:	f000 fac7 	bl	8008d00 <_realloc_r>
 8008772:	4606      	mov	r6, r0
 8008774:	2800      	cmp	r0, #0
 8008776:	d1e1      	bne.n	800873c <__ssputs_r+0x70>
 8008778:	6921      	ldr	r1, [r4, #16]
 800877a:	4650      	mov	r0, sl
 800877c:	f7ff fe8a 	bl	8008494 <_free_r>
 8008780:	e7c7      	b.n	8008712 <__ssputs_r+0x46>
	...

08008784 <_svfiprintf_r>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	4698      	mov	r8, r3
 800878a:	898b      	ldrh	r3, [r1, #12]
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	b09d      	sub	sp, #116	; 0x74
 8008790:	4607      	mov	r7, r0
 8008792:	460d      	mov	r5, r1
 8008794:	4614      	mov	r4, r2
 8008796:	d50e      	bpl.n	80087b6 <_svfiprintf_r+0x32>
 8008798:	690b      	ldr	r3, [r1, #16]
 800879a:	b963      	cbnz	r3, 80087b6 <_svfiprintf_r+0x32>
 800879c:	2140      	movs	r1, #64	; 0x40
 800879e:	f7ff fee5 	bl	800856c <_malloc_r>
 80087a2:	6028      	str	r0, [r5, #0]
 80087a4:	6128      	str	r0, [r5, #16]
 80087a6:	b920      	cbnz	r0, 80087b2 <_svfiprintf_r+0x2e>
 80087a8:	230c      	movs	r3, #12
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b0:	e0d1      	b.n	8008956 <_svfiprintf_r+0x1d2>
 80087b2:	2340      	movs	r3, #64	; 0x40
 80087b4:	616b      	str	r3, [r5, #20]
 80087b6:	2300      	movs	r3, #0
 80087b8:	9309      	str	r3, [sp, #36]	; 0x24
 80087ba:	2320      	movs	r3, #32
 80087bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c4:	2330      	movs	r3, #48	; 0x30
 80087c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008970 <_svfiprintf_r+0x1ec>
 80087ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ce:	f04f 0901 	mov.w	r9, #1
 80087d2:	4623      	mov	r3, r4
 80087d4:	469a      	mov	sl, r3
 80087d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087da:	b10a      	cbz	r2, 80087e0 <_svfiprintf_r+0x5c>
 80087dc:	2a25      	cmp	r2, #37	; 0x25
 80087de:	d1f9      	bne.n	80087d4 <_svfiprintf_r+0x50>
 80087e0:	ebba 0b04 	subs.w	fp, sl, r4
 80087e4:	d00b      	beq.n	80087fe <_svfiprintf_r+0x7a>
 80087e6:	465b      	mov	r3, fp
 80087e8:	4622      	mov	r2, r4
 80087ea:	4629      	mov	r1, r5
 80087ec:	4638      	mov	r0, r7
 80087ee:	f7ff ff6d 	bl	80086cc <__ssputs_r>
 80087f2:	3001      	adds	r0, #1
 80087f4:	f000 80aa 	beq.w	800894c <_svfiprintf_r+0x1c8>
 80087f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087fa:	445a      	add	r2, fp
 80087fc:	9209      	str	r2, [sp, #36]	; 0x24
 80087fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 80a2 	beq.w	800894c <_svfiprintf_r+0x1c8>
 8008808:	2300      	movs	r3, #0
 800880a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800880e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008812:	f10a 0a01 	add.w	sl, sl, #1
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	9307      	str	r3, [sp, #28]
 800881a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800881e:	931a      	str	r3, [sp, #104]	; 0x68
 8008820:	4654      	mov	r4, sl
 8008822:	2205      	movs	r2, #5
 8008824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008828:	4851      	ldr	r0, [pc, #324]	; (8008970 <_svfiprintf_r+0x1ec>)
 800882a:	f7f7 fcf9 	bl	8000220 <memchr>
 800882e:	9a04      	ldr	r2, [sp, #16]
 8008830:	b9d8      	cbnz	r0, 800886a <_svfiprintf_r+0xe6>
 8008832:	06d0      	lsls	r0, r2, #27
 8008834:	bf44      	itt	mi
 8008836:	2320      	movmi	r3, #32
 8008838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800883c:	0711      	lsls	r1, r2, #28
 800883e:	bf44      	itt	mi
 8008840:	232b      	movmi	r3, #43	; 0x2b
 8008842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008846:	f89a 3000 	ldrb.w	r3, [sl]
 800884a:	2b2a      	cmp	r3, #42	; 0x2a
 800884c:	d015      	beq.n	800887a <_svfiprintf_r+0xf6>
 800884e:	9a07      	ldr	r2, [sp, #28]
 8008850:	4654      	mov	r4, sl
 8008852:	2000      	movs	r0, #0
 8008854:	f04f 0c0a 	mov.w	ip, #10
 8008858:	4621      	mov	r1, r4
 800885a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800885e:	3b30      	subs	r3, #48	; 0x30
 8008860:	2b09      	cmp	r3, #9
 8008862:	d94e      	bls.n	8008902 <_svfiprintf_r+0x17e>
 8008864:	b1b0      	cbz	r0, 8008894 <_svfiprintf_r+0x110>
 8008866:	9207      	str	r2, [sp, #28]
 8008868:	e014      	b.n	8008894 <_svfiprintf_r+0x110>
 800886a:	eba0 0308 	sub.w	r3, r0, r8
 800886e:	fa09 f303 	lsl.w	r3, r9, r3
 8008872:	4313      	orrs	r3, r2
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	46a2      	mov	sl, r4
 8008878:	e7d2      	b.n	8008820 <_svfiprintf_r+0x9c>
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	1d19      	adds	r1, r3, #4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	9103      	str	r1, [sp, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	bfbb      	ittet	lt
 8008886:	425b      	neglt	r3, r3
 8008888:	f042 0202 	orrlt.w	r2, r2, #2
 800888c:	9307      	strge	r3, [sp, #28]
 800888e:	9307      	strlt	r3, [sp, #28]
 8008890:	bfb8      	it	lt
 8008892:	9204      	strlt	r2, [sp, #16]
 8008894:	7823      	ldrb	r3, [r4, #0]
 8008896:	2b2e      	cmp	r3, #46	; 0x2e
 8008898:	d10c      	bne.n	80088b4 <_svfiprintf_r+0x130>
 800889a:	7863      	ldrb	r3, [r4, #1]
 800889c:	2b2a      	cmp	r3, #42	; 0x2a
 800889e:	d135      	bne.n	800890c <_svfiprintf_r+0x188>
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	1d1a      	adds	r2, r3, #4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	9203      	str	r2, [sp, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bfb8      	it	lt
 80088ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088b0:	3402      	adds	r4, #2
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008980 <_svfiprintf_r+0x1fc>
 80088b8:	7821      	ldrb	r1, [r4, #0]
 80088ba:	2203      	movs	r2, #3
 80088bc:	4650      	mov	r0, sl
 80088be:	f7f7 fcaf 	bl	8000220 <memchr>
 80088c2:	b140      	cbz	r0, 80088d6 <_svfiprintf_r+0x152>
 80088c4:	2340      	movs	r3, #64	; 0x40
 80088c6:	eba0 000a 	sub.w	r0, r0, sl
 80088ca:	fa03 f000 	lsl.w	r0, r3, r0
 80088ce:	9b04      	ldr	r3, [sp, #16]
 80088d0:	4303      	orrs	r3, r0
 80088d2:	3401      	adds	r4, #1
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088da:	4826      	ldr	r0, [pc, #152]	; (8008974 <_svfiprintf_r+0x1f0>)
 80088dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088e0:	2206      	movs	r2, #6
 80088e2:	f7f7 fc9d 	bl	8000220 <memchr>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d038      	beq.n	800895c <_svfiprintf_r+0x1d8>
 80088ea:	4b23      	ldr	r3, [pc, #140]	; (8008978 <_svfiprintf_r+0x1f4>)
 80088ec:	bb1b      	cbnz	r3, 8008936 <_svfiprintf_r+0x1b2>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	f023 0307 	bic.w	r3, r3, #7
 80088f6:	3308      	adds	r3, #8
 80088f8:	9303      	str	r3, [sp, #12]
 80088fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fc:	4433      	add	r3, r6
 80088fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008900:	e767      	b.n	80087d2 <_svfiprintf_r+0x4e>
 8008902:	fb0c 3202 	mla	r2, ip, r2, r3
 8008906:	460c      	mov	r4, r1
 8008908:	2001      	movs	r0, #1
 800890a:	e7a5      	b.n	8008858 <_svfiprintf_r+0xd4>
 800890c:	2300      	movs	r3, #0
 800890e:	3401      	adds	r4, #1
 8008910:	9305      	str	r3, [sp, #20]
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0c0a 	mov.w	ip, #10
 8008918:	4620      	mov	r0, r4
 800891a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891e:	3a30      	subs	r2, #48	; 0x30
 8008920:	2a09      	cmp	r2, #9
 8008922:	d903      	bls.n	800892c <_svfiprintf_r+0x1a8>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0c5      	beq.n	80088b4 <_svfiprintf_r+0x130>
 8008928:	9105      	str	r1, [sp, #20]
 800892a:	e7c3      	b.n	80088b4 <_svfiprintf_r+0x130>
 800892c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008930:	4604      	mov	r4, r0
 8008932:	2301      	movs	r3, #1
 8008934:	e7f0      	b.n	8008918 <_svfiprintf_r+0x194>
 8008936:	ab03      	add	r3, sp, #12
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	462a      	mov	r2, r5
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <_svfiprintf_r+0x1f8>)
 800893e:	a904      	add	r1, sp, #16
 8008940:	4638      	mov	r0, r7
 8008942:	f3af 8000 	nop.w
 8008946:	1c42      	adds	r2, r0, #1
 8008948:	4606      	mov	r6, r0
 800894a:	d1d6      	bne.n	80088fa <_svfiprintf_r+0x176>
 800894c:	89ab      	ldrh	r3, [r5, #12]
 800894e:	065b      	lsls	r3, r3, #25
 8008950:	f53f af2c 	bmi.w	80087ac <_svfiprintf_r+0x28>
 8008954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008956:	b01d      	add	sp, #116	; 0x74
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895c:	ab03      	add	r3, sp, #12
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	462a      	mov	r2, r5
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <_svfiprintf_r+0x1f8>)
 8008964:	a904      	add	r1, sp, #16
 8008966:	4638      	mov	r0, r7
 8008968:	f000 f87a 	bl	8008a60 <_printf_i>
 800896c:	e7eb      	b.n	8008946 <_svfiprintf_r+0x1c2>
 800896e:	bf00      	nop
 8008970:	080092f4 	.word	0x080092f4
 8008974:	080092fe 	.word	0x080092fe
 8008978:	00000000 	.word	0x00000000
 800897c:	080086cd 	.word	0x080086cd
 8008980:	080092fa 	.word	0x080092fa

08008984 <_printf_common>:
 8008984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	4616      	mov	r6, r2
 800898a:	4699      	mov	r9, r3
 800898c:	688a      	ldr	r2, [r1, #8]
 800898e:	690b      	ldr	r3, [r1, #16]
 8008990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008994:	4293      	cmp	r3, r2
 8008996:	bfb8      	it	lt
 8008998:	4613      	movlt	r3, r2
 800899a:	6033      	str	r3, [r6, #0]
 800899c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089a0:	4607      	mov	r7, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	b10a      	cbz	r2, 80089aa <_printf_common+0x26>
 80089a6:	3301      	adds	r3, #1
 80089a8:	6033      	str	r3, [r6, #0]
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	0699      	lsls	r1, r3, #26
 80089ae:	bf42      	ittt	mi
 80089b0:	6833      	ldrmi	r3, [r6, #0]
 80089b2:	3302      	addmi	r3, #2
 80089b4:	6033      	strmi	r3, [r6, #0]
 80089b6:	6825      	ldr	r5, [r4, #0]
 80089b8:	f015 0506 	ands.w	r5, r5, #6
 80089bc:	d106      	bne.n	80089cc <_printf_common+0x48>
 80089be:	f104 0a19 	add.w	sl, r4, #25
 80089c2:	68e3      	ldr	r3, [r4, #12]
 80089c4:	6832      	ldr	r2, [r6, #0]
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	dc26      	bgt.n	8008a1a <_printf_common+0x96>
 80089cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089d0:	1e13      	subs	r3, r2, #0
 80089d2:	6822      	ldr	r2, [r4, #0]
 80089d4:	bf18      	it	ne
 80089d6:	2301      	movne	r3, #1
 80089d8:	0692      	lsls	r2, r2, #26
 80089da:	d42b      	bmi.n	8008a34 <_printf_common+0xb0>
 80089dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089e0:	4649      	mov	r1, r9
 80089e2:	4638      	mov	r0, r7
 80089e4:	47c0      	blx	r8
 80089e6:	3001      	adds	r0, #1
 80089e8:	d01e      	beq.n	8008a28 <_printf_common+0xa4>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	68e5      	ldr	r5, [r4, #12]
 80089ee:	6832      	ldr	r2, [r6, #0]
 80089f0:	f003 0306 	and.w	r3, r3, #6
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	bf08      	it	eq
 80089f8:	1aad      	subeq	r5, r5, r2
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	6922      	ldr	r2, [r4, #16]
 80089fe:	bf0c      	ite	eq
 8008a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a04:	2500      	movne	r5, #0
 8008a06:	4293      	cmp	r3, r2
 8008a08:	bfc4      	itt	gt
 8008a0a:	1a9b      	subgt	r3, r3, r2
 8008a0c:	18ed      	addgt	r5, r5, r3
 8008a0e:	2600      	movs	r6, #0
 8008a10:	341a      	adds	r4, #26
 8008a12:	42b5      	cmp	r5, r6
 8008a14:	d11a      	bne.n	8008a4c <_printf_common+0xc8>
 8008a16:	2000      	movs	r0, #0
 8008a18:	e008      	b.n	8008a2c <_printf_common+0xa8>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4652      	mov	r2, sl
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4638      	mov	r0, r7
 8008a22:	47c0      	blx	r8
 8008a24:	3001      	adds	r0, #1
 8008a26:	d103      	bne.n	8008a30 <_printf_common+0xac>
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a30:	3501      	adds	r5, #1
 8008a32:	e7c6      	b.n	80089c2 <_printf_common+0x3e>
 8008a34:	18e1      	adds	r1, r4, r3
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	2030      	movs	r0, #48	; 0x30
 8008a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a3e:	4422      	add	r2, r4
 8008a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a48:	3302      	adds	r3, #2
 8008a4a:	e7c7      	b.n	80089dc <_printf_common+0x58>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4622      	mov	r2, r4
 8008a50:	4649      	mov	r1, r9
 8008a52:	4638      	mov	r0, r7
 8008a54:	47c0      	blx	r8
 8008a56:	3001      	adds	r0, #1
 8008a58:	d0e6      	beq.n	8008a28 <_printf_common+0xa4>
 8008a5a:	3601      	adds	r6, #1
 8008a5c:	e7d9      	b.n	8008a12 <_printf_common+0x8e>
	...

08008a60 <_printf_i>:
 8008a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a64:	7e0f      	ldrb	r7, [r1, #24]
 8008a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a68:	2f78      	cmp	r7, #120	; 0x78
 8008a6a:	4691      	mov	r9, r2
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	469a      	mov	sl, r3
 8008a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a76:	d807      	bhi.n	8008a88 <_printf_i+0x28>
 8008a78:	2f62      	cmp	r7, #98	; 0x62
 8008a7a:	d80a      	bhi.n	8008a92 <_printf_i+0x32>
 8008a7c:	2f00      	cmp	r7, #0
 8008a7e:	f000 80d8 	beq.w	8008c32 <_printf_i+0x1d2>
 8008a82:	2f58      	cmp	r7, #88	; 0x58
 8008a84:	f000 80a3 	beq.w	8008bce <_printf_i+0x16e>
 8008a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a90:	e03a      	b.n	8008b08 <_printf_i+0xa8>
 8008a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a96:	2b15      	cmp	r3, #21
 8008a98:	d8f6      	bhi.n	8008a88 <_printf_i+0x28>
 8008a9a:	a101      	add	r1, pc, #4	; (adr r1, 8008aa0 <_printf_i+0x40>)
 8008a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008aa0:	08008af9 	.word	0x08008af9
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008a89 	.word	0x08008a89
 8008aac:	08008a89 	.word	0x08008a89
 8008ab0:	08008a89 	.word	0x08008a89
 8008ab4:	08008a89 	.word	0x08008a89
 8008ab8:	08008b0d 	.word	0x08008b0d
 8008abc:	08008a89 	.word	0x08008a89
 8008ac0:	08008a89 	.word	0x08008a89
 8008ac4:	08008a89 	.word	0x08008a89
 8008ac8:	08008a89 	.word	0x08008a89
 8008acc:	08008c19 	.word	0x08008c19
 8008ad0:	08008b3d 	.word	0x08008b3d
 8008ad4:	08008bfb 	.word	0x08008bfb
 8008ad8:	08008a89 	.word	0x08008a89
 8008adc:	08008a89 	.word	0x08008a89
 8008ae0:	08008c3b 	.word	0x08008c3b
 8008ae4:	08008a89 	.word	0x08008a89
 8008ae8:	08008b3d 	.word	0x08008b3d
 8008aec:	08008a89 	.word	0x08008a89
 8008af0:	08008a89 	.word	0x08008a89
 8008af4:	08008c03 	.word	0x08008c03
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	1d1a      	adds	r2, r3, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	602a      	str	r2, [r5, #0]
 8008b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e0a3      	b.n	8008c54 <_printf_i+0x1f4>
 8008b0c:	6820      	ldr	r0, [r4, #0]
 8008b0e:	6829      	ldr	r1, [r5, #0]
 8008b10:	0606      	lsls	r6, r0, #24
 8008b12:	f101 0304 	add.w	r3, r1, #4
 8008b16:	d50a      	bpl.n	8008b2e <_printf_i+0xce>
 8008b18:	680e      	ldr	r6, [r1, #0]
 8008b1a:	602b      	str	r3, [r5, #0]
 8008b1c:	2e00      	cmp	r6, #0
 8008b1e:	da03      	bge.n	8008b28 <_printf_i+0xc8>
 8008b20:	232d      	movs	r3, #45	; 0x2d
 8008b22:	4276      	negs	r6, r6
 8008b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b28:	485e      	ldr	r0, [pc, #376]	; (8008ca4 <_printf_i+0x244>)
 8008b2a:	230a      	movs	r3, #10
 8008b2c:	e019      	b.n	8008b62 <_printf_i+0x102>
 8008b2e:	680e      	ldr	r6, [r1, #0]
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b36:	bf18      	it	ne
 8008b38:	b236      	sxthne	r6, r6
 8008b3a:	e7ef      	b.n	8008b1c <_printf_i+0xbc>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	1d19      	adds	r1, r3, #4
 8008b42:	6029      	str	r1, [r5, #0]
 8008b44:	0601      	lsls	r1, r0, #24
 8008b46:	d501      	bpl.n	8008b4c <_printf_i+0xec>
 8008b48:	681e      	ldr	r6, [r3, #0]
 8008b4a:	e002      	b.n	8008b52 <_printf_i+0xf2>
 8008b4c:	0646      	lsls	r6, r0, #25
 8008b4e:	d5fb      	bpl.n	8008b48 <_printf_i+0xe8>
 8008b50:	881e      	ldrh	r6, [r3, #0]
 8008b52:	4854      	ldr	r0, [pc, #336]	; (8008ca4 <_printf_i+0x244>)
 8008b54:	2f6f      	cmp	r7, #111	; 0x6f
 8008b56:	bf0c      	ite	eq
 8008b58:	2308      	moveq	r3, #8
 8008b5a:	230a      	movne	r3, #10
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b62:	6865      	ldr	r5, [r4, #4]
 8008b64:	60a5      	str	r5, [r4, #8]
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	bfa2      	ittt	ge
 8008b6a:	6821      	ldrge	r1, [r4, #0]
 8008b6c:	f021 0104 	bicge.w	r1, r1, #4
 8008b70:	6021      	strge	r1, [r4, #0]
 8008b72:	b90e      	cbnz	r6, 8008b78 <_printf_i+0x118>
 8008b74:	2d00      	cmp	r5, #0
 8008b76:	d04d      	beq.n	8008c14 <_printf_i+0x1b4>
 8008b78:	4615      	mov	r5, r2
 8008b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b82:	5dc7      	ldrb	r7, [r0, r7]
 8008b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b88:	4637      	mov	r7, r6
 8008b8a:	42bb      	cmp	r3, r7
 8008b8c:	460e      	mov	r6, r1
 8008b8e:	d9f4      	bls.n	8008b7a <_printf_i+0x11a>
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d10b      	bne.n	8008bac <_printf_i+0x14c>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	07de      	lsls	r6, r3, #31
 8008b98:	d508      	bpl.n	8008bac <_printf_i+0x14c>
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	6861      	ldr	r1, [r4, #4]
 8008b9e:	4299      	cmp	r1, r3
 8008ba0:	bfde      	ittt	le
 8008ba2:	2330      	movle	r3, #48	; 0x30
 8008ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ba8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008bac:	1b52      	subs	r2, r2, r5
 8008bae:	6122      	str	r2, [r4, #16]
 8008bb0:	f8cd a000 	str.w	sl, [sp]
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	aa03      	add	r2, sp, #12
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7ff fee2 	bl	8008984 <_printf_common>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d14c      	bne.n	8008c5e <_printf_i+0x1fe>
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc8:	b004      	add	sp, #16
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	4835      	ldr	r0, [pc, #212]	; (8008ca4 <_printf_i+0x244>)
 8008bd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bd4:	6829      	ldr	r1, [r5, #0]
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bdc:	6029      	str	r1, [r5, #0]
 8008bde:	061d      	lsls	r5, r3, #24
 8008be0:	d514      	bpl.n	8008c0c <_printf_i+0x1ac>
 8008be2:	07df      	lsls	r7, r3, #31
 8008be4:	bf44      	itt	mi
 8008be6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bea:	6023      	strmi	r3, [r4, #0]
 8008bec:	b91e      	cbnz	r6, 8008bf6 <_printf_i+0x196>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	f023 0320 	bic.w	r3, r3, #32
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	2310      	movs	r3, #16
 8008bf8:	e7b0      	b.n	8008b5c <_printf_i+0xfc>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	f043 0320 	orr.w	r3, r3, #32
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	2378      	movs	r3, #120	; 0x78
 8008c04:	4828      	ldr	r0, [pc, #160]	; (8008ca8 <_printf_i+0x248>)
 8008c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c0a:	e7e3      	b.n	8008bd4 <_printf_i+0x174>
 8008c0c:	0659      	lsls	r1, r3, #25
 8008c0e:	bf48      	it	mi
 8008c10:	b2b6      	uxthmi	r6, r6
 8008c12:	e7e6      	b.n	8008be2 <_printf_i+0x182>
 8008c14:	4615      	mov	r5, r2
 8008c16:	e7bb      	b.n	8008b90 <_printf_i+0x130>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	6826      	ldr	r6, [r4, #0]
 8008c1c:	6961      	ldr	r1, [r4, #20]
 8008c1e:	1d18      	adds	r0, r3, #4
 8008c20:	6028      	str	r0, [r5, #0]
 8008c22:	0635      	lsls	r5, r6, #24
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	d501      	bpl.n	8008c2c <_printf_i+0x1cc>
 8008c28:	6019      	str	r1, [r3, #0]
 8008c2a:	e002      	b.n	8008c32 <_printf_i+0x1d2>
 8008c2c:	0670      	lsls	r0, r6, #25
 8008c2e:	d5fb      	bpl.n	8008c28 <_printf_i+0x1c8>
 8008c30:	8019      	strh	r1, [r3, #0]
 8008c32:	2300      	movs	r3, #0
 8008c34:	6123      	str	r3, [r4, #16]
 8008c36:	4615      	mov	r5, r2
 8008c38:	e7ba      	b.n	8008bb0 <_printf_i+0x150>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	1d1a      	adds	r2, r3, #4
 8008c3e:	602a      	str	r2, [r5, #0]
 8008c40:	681d      	ldr	r5, [r3, #0]
 8008c42:	6862      	ldr	r2, [r4, #4]
 8008c44:	2100      	movs	r1, #0
 8008c46:	4628      	mov	r0, r5
 8008c48:	f7f7 faea 	bl	8000220 <memchr>
 8008c4c:	b108      	cbz	r0, 8008c52 <_printf_i+0x1f2>
 8008c4e:	1b40      	subs	r0, r0, r5
 8008c50:	6060      	str	r0, [r4, #4]
 8008c52:	6863      	ldr	r3, [r4, #4]
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	2300      	movs	r3, #0
 8008c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c5c:	e7a8      	b.n	8008bb0 <_printf_i+0x150>
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	462a      	mov	r2, r5
 8008c62:	4649      	mov	r1, r9
 8008c64:	4640      	mov	r0, r8
 8008c66:	47d0      	blx	sl
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d0ab      	beq.n	8008bc4 <_printf_i+0x164>
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	079b      	lsls	r3, r3, #30
 8008c70:	d413      	bmi.n	8008c9a <_printf_i+0x23a>
 8008c72:	68e0      	ldr	r0, [r4, #12]
 8008c74:	9b03      	ldr	r3, [sp, #12]
 8008c76:	4298      	cmp	r0, r3
 8008c78:	bfb8      	it	lt
 8008c7a:	4618      	movlt	r0, r3
 8008c7c:	e7a4      	b.n	8008bc8 <_printf_i+0x168>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4632      	mov	r2, r6
 8008c82:	4649      	mov	r1, r9
 8008c84:	4640      	mov	r0, r8
 8008c86:	47d0      	blx	sl
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d09b      	beq.n	8008bc4 <_printf_i+0x164>
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	68e3      	ldr	r3, [r4, #12]
 8008c90:	9903      	ldr	r1, [sp, #12]
 8008c92:	1a5b      	subs	r3, r3, r1
 8008c94:	42ab      	cmp	r3, r5
 8008c96:	dcf2      	bgt.n	8008c7e <_printf_i+0x21e>
 8008c98:	e7eb      	b.n	8008c72 <_printf_i+0x212>
 8008c9a:	2500      	movs	r5, #0
 8008c9c:	f104 0619 	add.w	r6, r4, #25
 8008ca0:	e7f5      	b.n	8008c8e <_printf_i+0x22e>
 8008ca2:	bf00      	nop
 8008ca4:	08009305 	.word	0x08009305
 8008ca8:	08009316 	.word	0x08009316

08008cac <__retarget_lock_acquire_recursive>:
 8008cac:	4770      	bx	lr

08008cae <__retarget_lock_release_recursive>:
 8008cae:	4770      	bx	lr

08008cb0 <memcpy>:
 8008cb0:	440a      	add	r2, r1
 8008cb2:	4291      	cmp	r1, r2
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008cb8:	d100      	bne.n	8008cbc <memcpy+0xc>
 8008cba:	4770      	bx	lr
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cc6:	4291      	cmp	r1, r2
 8008cc8:	d1f9      	bne.n	8008cbe <memcpy+0xe>
 8008cca:	bd10      	pop	{r4, pc}

08008ccc <memmove>:
 8008ccc:	4288      	cmp	r0, r1
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	eb01 0402 	add.w	r4, r1, r2
 8008cd4:	d902      	bls.n	8008cdc <memmove+0x10>
 8008cd6:	4284      	cmp	r4, r0
 8008cd8:	4623      	mov	r3, r4
 8008cda:	d807      	bhi.n	8008cec <memmove+0x20>
 8008cdc:	1e43      	subs	r3, r0, #1
 8008cde:	42a1      	cmp	r1, r4
 8008ce0:	d008      	beq.n	8008cf4 <memmove+0x28>
 8008ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cea:	e7f8      	b.n	8008cde <memmove+0x12>
 8008cec:	4402      	add	r2, r0
 8008cee:	4601      	mov	r1, r0
 8008cf0:	428a      	cmp	r2, r1
 8008cf2:	d100      	bne.n	8008cf6 <memmove+0x2a>
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cfe:	e7f7      	b.n	8008cf0 <memmove+0x24>

08008d00 <_realloc_r>:
 8008d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d04:	4680      	mov	r8, r0
 8008d06:	4614      	mov	r4, r2
 8008d08:	460e      	mov	r6, r1
 8008d0a:	b921      	cbnz	r1, 8008d16 <_realloc_r+0x16>
 8008d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	4611      	mov	r1, r2
 8008d12:	f7ff bc2b 	b.w	800856c <_malloc_r>
 8008d16:	b92a      	cbnz	r2, 8008d24 <_realloc_r+0x24>
 8008d18:	f7ff fbbc 	bl	8008494 <_free_r>
 8008d1c:	4625      	mov	r5, r4
 8008d1e:	4628      	mov	r0, r5
 8008d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d24:	f000 f81b 	bl	8008d5e <_malloc_usable_size_r>
 8008d28:	4284      	cmp	r4, r0
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	d802      	bhi.n	8008d34 <_realloc_r+0x34>
 8008d2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d32:	d812      	bhi.n	8008d5a <_realloc_r+0x5a>
 8008d34:	4621      	mov	r1, r4
 8008d36:	4640      	mov	r0, r8
 8008d38:	f7ff fc18 	bl	800856c <_malloc_r>
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d0ed      	beq.n	8008d1e <_realloc_r+0x1e>
 8008d42:	42bc      	cmp	r4, r7
 8008d44:	4622      	mov	r2, r4
 8008d46:	4631      	mov	r1, r6
 8008d48:	bf28      	it	cs
 8008d4a:	463a      	movcs	r2, r7
 8008d4c:	f7ff ffb0 	bl	8008cb0 <memcpy>
 8008d50:	4631      	mov	r1, r6
 8008d52:	4640      	mov	r0, r8
 8008d54:	f7ff fb9e 	bl	8008494 <_free_r>
 8008d58:	e7e1      	b.n	8008d1e <_realloc_r+0x1e>
 8008d5a:	4635      	mov	r5, r6
 8008d5c:	e7df      	b.n	8008d1e <_realloc_r+0x1e>

08008d5e <_malloc_usable_size_r>:
 8008d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d62:	1f18      	subs	r0, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bfbc      	itt	lt
 8008d68:	580b      	ldrlt	r3, [r1, r0]
 8008d6a:	18c0      	addlt	r0, r0, r3
 8008d6c:	4770      	bx	lr
	...

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
