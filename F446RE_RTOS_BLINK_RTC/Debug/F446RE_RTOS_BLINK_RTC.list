
F446RE_RTOS_BLINK_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007298  08007298  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072a0  080072a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072a4  080072a4  000172a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080072a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b2c  20000074  0800731c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba0  0800731c  00024ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2f3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003526  00000000  00000000  0003c397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  0003f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  00040fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ffb  00000000  00000000  00042560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1ea  00000000  00000000  0004655b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddebb  00000000  00000000  00060745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066e4  00000000  00000000  0013e650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007130 	.word	0x08007130

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007130 	.word	0x08007130

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fbc4 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f828 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8ec 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8c0 	bl	8000758 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005d8:	f000 f890 	bl	80006fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005dc:	f003 fb24 	bl	8003c28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BLINK */
  BLINKHandle = osThreadNew(Toggle_Led, NULL, &BLINK_attributes);
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <main+0x44>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x48>)
 80005e6:	f003 fb69 	bl	8003cbc <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <main+0x4c>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Read_RTC, NULL, &RTC_attributes);
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <main+0x50>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <main+0x54>)
 80005f6:	f003 fb61 	bl	8003cbc <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <main+0x58>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f003 fb36 	bl	8003c70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x40>
 8000606:	bf00      	nop
 8000608:	080071a4 	.word	0x080071a4
 800060c:	08000889 	.word	0x08000889
 8000610:	20000128 	.word	0x20000128
 8000614:	080071c8 	.word	0x080071c8
 8000618:	080008a9 	.word	0x080008a9
 800061c:	2000012c 	.word	0x2000012c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 f8ae 	bl	8006790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <SystemClock_Config+0xd4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a29      	ldr	r2, [pc, #164]	; (80006f4 <SystemClock_Config+0xd4>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <SystemClock_Config+0xd4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <SystemClock_Config+0xd8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066c:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <SystemClock_Config+0xd8>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <SystemClock_Config+0xd8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000694:	2310      	movs	r3, #16
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000698:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800069c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069e:	2304      	movs	r3, #4
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f968 	bl	8002984 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ba:	f000 f99d 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fdd6 	bl	800228c <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006e6:	f000 f987 	bl	80009f8 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C1_Init+0x50>)
 800073a:	f000 fdf7 	bl	800132c <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f958 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000090 	.word	0x20000090
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART2_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000790:	f002 fe44 	bl	800341c <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f92d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2c      	ldr	r2, [pc, #176]	; (800087c <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a25      	ldr	r2, [pc, #148]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1e      	ldr	r2, [pc, #120]	; (800087c <MX_GPIO_Init+0xd0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_GPIO_Init+0xd0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fd44 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0xd8>)
 8000854:	f000 fba2 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000870:	f000 fb94 	bl	8000f9c <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800

08000888 <Toggle_Led>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Toggle_Led */
void Toggle_Led(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000890:	2120      	movs	r1, #32
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <Toggle_Led+0x1c>)
 8000894:	f000 fd2f 	bl	80012f6 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000898:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089c:	f003 faa0 	bl	8003de0 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008a0:	e7f6      	b.n	8000890 <Toggle_Led+0x8>
 80008a2:	bf00      	nop
 80008a4:	40020000 	.word	0x40020000

080008a8 <Read_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_RTC */
void Read_RTC(void *argument)
{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_RTC */
	HAL_StatusTypeDef ret;
	uint8_t buf[24];
	uint8_t ini_time[] = {REG_TIME, 0x00, 0x00, 0x00};
 80008b0:	2303      	movs	r3, #3
 80008b2:	723b      	strb	r3, [r7, #8]
 80008b4:	2300      	movs	r3, #0
 80008b6:	727b      	strb	r3, [r7, #9]
 80008b8:	2300      	movs	r3, #0
 80008ba:	72bb      	strb	r3, [r7, #10]
 80008bc:	2300      	movs	r3, #0
 80008be:	72fb      	strb	r3, [r7, #11]

	ret = HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, ini_time, 4, 100);
 80008c0:	23d0      	movs	r3, #208	; 0xd0
 80008c2:	b299      	uxth	r1, r3
 80008c4:	f107 0208 	add.w	r2, r7, #8
 80008c8:	2364      	movs	r3, #100	; 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2304      	movs	r3, #4
 80008ce:	483c      	ldr	r0, [pc, #240]	; (80009c0 <Read_RTC+0x118>)
 80008d0:	f000 fe70 	bl	80015b4 <HAL_I2C_Master_Transmit>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 80008da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d01c      	beq.n	800091c <Read_RTC+0x74>
		strcpy((char*)buf, "Error Inicializacion\r\n");
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4a37      	ldr	r2, [pc, #220]	; (80009c4 <Read_RTC+0x11c>)
 80008e8:	461c      	mov	r4, r3
 80008ea:	4615      	mov	r5, r2
 80008ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008f4:	6020      	str	r0, [r4, #0]
 80008f6:	3404      	adds	r4, #4
 80008f8:	8021      	strh	r1, [r4, #0]
 80008fa:	3402      	adds	r4, #2
 80008fc:	0c0b      	lsrs	r3, r1, #16
 80008fe:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);		// transmito el mensaje de error
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fc83 	bl	8000210 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	b29a      	uxth	r2, r3
 800090e:	f107 010c 	add.w	r1, r7, #12
 8000912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000916:	482c      	ldr	r0, [pc, #176]	; (80009c8 <Read_RTC+0x120>)
 8000918:	f002 fdcd 	bl	80034b6 <HAL_UART_Transmit>
	}
  /* Infinite loop */
  for(;;)
  {
	ret = HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, REG_TIME, 1, buf, 3, 100);
 800091c:	23d0      	movs	r3, #208	; 0xd0
 800091e:	b299      	uxth	r1, r3
 8000920:	2303      	movs	r3, #3
 8000922:	b29a      	uxth	r2, r3
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	9302      	str	r3, [sp, #8]
 8000928:	2303      	movs	r3, #3
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2301      	movs	r3, #1
 8000934:	4822      	ldr	r0, [pc, #136]	; (80009c0 <Read_RTC+0x118>)
 8000936:	f000 ff3b 	bl	80017b0 <HAL_I2C_Mem_Read>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 8000940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000944:	2b00      	cmp	r3, #0
 8000946:	d017      	beq.n	8000978 <Read_RTC+0xd0>
		strcpy((char*)buf, "Error Rx\r\n");
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <Read_RTC+0x124>)
 800094e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000950:	c303      	stmia	r3!, {r0, r1}
 8000952:	801a      	strh	r2, [r3, #0]
 8000954:	3302      	adds	r3, #2
 8000956:	0c12      	lsrs	r2, r2, #16
 8000958:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);		// transmito el error de recepcion
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fc56 	bl	8000210 <strlen>
 8000964:	4603      	mov	r3, r0
 8000966:	b29a      	uxth	r2, r3
 8000968:	f107 010c 	add.w	r1, r7, #12
 800096c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <Read_RTC+0x120>)
 8000972:	f002 fda0 	bl	80034b6 <HAL_UART_Transmit>
 8000976:	e01d      	b.n	80009b4 <Read_RTC+0x10c>
	} else {
		sprintf((char*)buf, "%02x:%02x:%02x\r\n", buf[2] & 0x3F, buf[1] & 0x7F, buf[0] & 0x7F);
 8000978:	7bbb      	ldrb	r3, [r7, #14]
 800097a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800097e:	7b7b      	ldrb	r3, [r7, #13]
 8000980:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800098a:	f107 000c 	add.w	r0, r7, #12
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	460b      	mov	r3, r1
 8000992:	490f      	ldr	r1, [pc, #60]	; (80009d0 <Read_RTC+0x128>)
 8000994:	f006 f812 	bl	80069bc <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc37 	bl	8000210 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	f107 010c 	add.w	r1, r7, #12
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <Read_RTC+0x120>)
 80009b0:	f002 fd81 	bl	80034b6 <HAL_UART_Transmit>
	}
    osDelay(1000);
 80009b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b8:	f003 fa12 	bl	8003de0 <osDelay>
	ret = HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, REG_TIME, 1, buf, 3, 100);
 80009bc:	e7ae      	b.n	800091c <Read_RTC+0x74>
 80009be:	bf00      	nop
 80009c0:	20000090 	.word	0x20000090
 80009c4:	08007154 	.word	0x08007154
 80009c8:	200000e4 	.word	0x200000e4
 80009cc:	0800716c 	.word	0x0800716c
 80009d0:	08007178 	.word	0x08007178

080009d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 f9d7 	bl	8000d98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40001000 	.word	0x40001000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_MspInit+0x54>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <HAL_MspInit+0x54>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x54>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_MspInit+0x54>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_MspInit+0x54>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_MspInit+0x54>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	f06f 0001 	mvn.w	r0, #1
 8000a4a:	f000 fa7d 	bl	8000f48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12c      	bne.n	8000ad8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa0:	2312      	movs	r3, #18
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aac:	2304      	movs	r3, #4
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <HAL_I2C_MspInit+0x8c>)
 8000ab8:	f000 fa70 	bl	8000f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0x84>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12b      	bne.n	8000b66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_UART_MspInit+0x8c>)
 8000b62:	f000 fa1b 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2036      	movs	r0, #54	; 0x36
 8000b92:	f000 f9d9 	bl	8000f48 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b96:	2036      	movs	r0, #54	; 0x36
 8000b98:	f000 f9f2 	bl	8000f80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <HAL_InitTick+0xa4>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <HAL_InitTick+0xa4>)
 8000ba6:	f043 0310 	orr.w	r3, r3, #16
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_InitTick+0xa4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb8:	f107 0210 	add.w	r2, r7, #16
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 fc7c 	bl	80024c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bc8:	f001 fc52 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_InitTick+0xa8>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	0c9b      	lsrs	r3, r3, #18
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_InitTick+0xac>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <HAL_InitTick+0xb0>)
 8000be4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_InitTick+0xac>)
 8000be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_InitTick+0xac>)
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_InitTick+0xac>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_InitTick+0xac>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <HAL_InitTick+0xac>)
 8000c02:	f002 f95d 	bl	8002ec0 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <HAL_InitTick+0xac>)
 8000c0e:	f002 f9b1 	bl	8002f74 <HAL_TIM_Base_Start_IT>
 8000c12:	4603      	mov	r3, r0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3730      	adds	r7, #48	; 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	431bde83 	.word	0x431bde83
 8000c28:	20000130 	.word	0x20000130
 8000c2c:	40001000 	.word	0x40001000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM6_DAC_IRQHandler+0x10>)
 8000c62:	f002 f9f7 	bl	8003054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000130 	.word	0x20000130

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f005 fd3c 	bl	800671c <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20020000 	.word	0x20020000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	20000178 	.word	0x20000178
 8000cd8:	20004ba0 	.word	0x20004ba0

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	; (8000d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2a:	f7ff ffd7 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f005 fcfb 	bl	8006728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fc47 	bl	80005c4 <main>
  bx  lr    
 8000d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d44:	080072a8 	.word	0x080072a8
  ldr r2, =_sbss
 8000d48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d4c:	20004ba0 	.word	0x20004ba0

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <HAL_Init+0x40>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_Init+0x40>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_Init+0x40>)
 8000d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f8d8 	bl	8000f32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	200f      	movs	r0, #15
 8000d84:	f7ff fefa 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d88:	f7ff fe3c 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	2000017c 	.word	0x2000017c

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000017c 	.word	0x2000017c

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff4c 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5a:	f7ff ff61 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff ffb1 	bl	8000ecc <NVIC_EncodePriority>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff80 	bl	8000e78 <__NVIC_SetPriority>
}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff54 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e165      	b.n	8001284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 8154 	bne.w	800127e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80ae 	beq.w	800127e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b5d      	ldr	r3, [pc, #372]	; (800129c <HAL_GPIO_Init+0x300>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a5c      	ldr	r2, [pc, #368]	; (800129c <HAL_GPIO_Init+0x300>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b5a      	ldr	r3, [pc, #360]	; (800129c <HAL_GPIO_Init+0x300>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a58      	ldr	r2, [pc, #352]	; (80012a0 <HAL_GPIO_Init+0x304>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4f      	ldr	r2, [pc, #316]	; (80012a4 <HAL_GPIO_Init+0x308>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d025      	beq.n	80011b6 <HAL_GPIO_Init+0x21a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4e      	ldr	r2, [pc, #312]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01f      	beq.n	80011b2 <HAL_GPIO_Init+0x216>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4d      	ldr	r2, [pc, #308]	; (80012ac <HAL_GPIO_Init+0x310>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x212>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4c      	ldr	r2, [pc, #304]	; (80012b0 <HAL_GPIO_Init+0x314>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x20e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4b      	ldr	r2, [pc, #300]	; (80012b4 <HAL_GPIO_Init+0x318>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x20a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4a      	ldr	r2, [pc, #296]	; (80012b8 <HAL_GPIO_Init+0x31c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x206>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_GPIO_Init+0x320>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x202>
 800119a:	2306      	movs	r3, #6
 800119c:	e00c      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 800119e:	2307      	movs	r3, #7
 80011a0:	e00a      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x304>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_GPIO_Init+0x324>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <HAL_GPIO_Init+0x324>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_GPIO_Init+0x324>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_GPIO_Init+0x324>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f ae96 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40021400 	.word	0x40021400
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001308:	887a      	ldrh	r2, [r7, #2]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	041a      	lsls	r2, r3, #16
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43d9      	mvns	r1, r3
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	400b      	ands	r3, r1
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e12b      	b.n	8001596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fb82 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2224      	movs	r2, #36	; 0x24
 800135c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800137e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800138e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001390:	f001 f86e 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 8001394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a81      	ldr	r2, [pc, #516]	; (80015a0 <HAL_I2C_Init+0x274>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d807      	bhi.n	80013b0 <HAL_I2C_Init+0x84>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a80      	ldr	r2, [pc, #512]	; (80015a4 <HAL_I2C_Init+0x278>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	bf94      	ite	ls
 80013a8:	2301      	movls	r3, #1
 80013aa:	2300      	movhi	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	e006      	b.n	80013be <HAL_I2C_Init+0x92>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4a7d      	ldr	r2, [pc, #500]	; (80015a8 <HAL_I2C_Init+0x27c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	bf94      	ite	ls
 80013b8:	2301      	movls	r3, #1
 80013ba:	2300      	movhi	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0e7      	b.n	8001596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4a78      	ldr	r2, [pc, #480]	; (80015ac <HAL_I2C_Init+0x280>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9b      	lsrs	r3, r3, #18
 80013d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a6a      	ldr	r2, [pc, #424]	; (80015a0 <HAL_I2C_Init+0x274>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d802      	bhi.n	8001400 <HAL_I2C_Init+0xd4>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3301      	adds	r3, #1
 80013fe:	e009      	b.n	8001414 <HAL_I2C_Init+0xe8>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4a69      	ldr	r2, [pc, #420]	; (80015b0 <HAL_I2C_Init+0x284>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	3301      	adds	r3, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	430b      	orrs	r3, r1
 800141a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	495c      	ldr	r1, [pc, #368]	; (80015a0 <HAL_I2C_Init+0x274>)
 8001430:	428b      	cmp	r3, r1
 8001432:	d819      	bhi.n	8001468 <HAL_I2C_Init+0x13c>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e59      	subs	r1, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001448:	400b      	ands	r3, r1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00a      	beq.n	8001464 <HAL_I2C_Init+0x138>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1e59      	subs	r1, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fbb1 f3f3 	udiv	r3, r1, r3
 800145c:	3301      	adds	r3, #1
 800145e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001462:	e051      	b.n	8001508 <HAL_I2C_Init+0x1dc>
 8001464:	2304      	movs	r3, #4
 8001466:	e04f      	b.n	8001508 <HAL_I2C_Init+0x1dc>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d111      	bne.n	8001494 <HAL_I2C_Init+0x168>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1e58      	subs	r0, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6859      	ldr	r1, [r3, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	440b      	add	r3, r1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf0c      	ite	eq
 800148c:	2301      	moveq	r3, #1
 800148e:	2300      	movne	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	e012      	b.n	80014ba <HAL_I2C_Init+0x18e>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1e58      	subs	r0, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	0099      	lsls	r1, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Init+0x196>
 80014be:	2301      	movs	r3, #1
 80014c0:	e022      	b.n	8001508 <HAL_I2C_Init+0x1dc>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10e      	bne.n	80014e8 <HAL_I2C_Init+0x1bc>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e58      	subs	r0, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6859      	ldr	r1, [r3, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	440b      	add	r3, r1
 80014d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e6:	e00f      	b.n	8001508 <HAL_I2C_Init+0x1dc>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e58      	subs	r0, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	0099      	lsls	r1, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	6809      	ldr	r1, [r1, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69da      	ldr	r2, [r3, #28]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6911      	ldr	r1, [r2, #16]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68d2      	ldr	r2, [r2, #12]
 8001542:	4311      	orrs	r1, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	430b      	orrs	r3, r1
 800154a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2220      	movs	r2, #32
 8001582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	000186a0 	.word	0x000186a0
 80015a4:	001e847f 	.word	0x001e847f
 80015a8:	003d08ff 	.word	0x003d08ff
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	10624dd3 	.word	0x10624dd3

080015b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	460b      	mov	r3, r1
 80015c2:	817b      	strh	r3, [r7, #10]
 80015c4:	4613      	mov	r3, r2
 80015c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff fbfa 	bl	8000dc0 <HAL_GetTick>
 80015cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	f040 80e0 	bne.w	800179c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2319      	movs	r3, #25
 80015e2:	2201      	movs	r2, #1
 80015e4:	4970      	ldr	r1, [pc, #448]	; (80017a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 fc72 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015f2:	2302      	movs	r3, #2
 80015f4:	e0d3      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_I2C_Master_Transmit+0x50>
 8001600:	2302      	movs	r3, #2
 8001602:	e0cc      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ea>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d007      	beq.n	800162a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0201 	orr.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001638:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2221      	movs	r2, #33	; 0x21
 800163e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2210      	movs	r2, #16
 8001646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	893a      	ldrh	r2, [r7, #8]
 800165a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4a50      	ldr	r2, [pc, #320]	; (80017ac <HAL_I2C_Master_Transmit+0x1f8>)
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800166c:	8979      	ldrh	r1, [r7, #10]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	6a3a      	ldr	r2, [r7, #32]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fac2 	bl	8001bfc <I2C_MasterRequestWrite>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e08d      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001698:	e066      	b.n	8001768 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	6a39      	ldr	r1, [r7, #32]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 fcec 	bl	800207c <I2C_WaitOnTXEFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00d      	beq.n	80016c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d107      	bne.n	80016c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e06b      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b04      	cmp	r3, #4
 8001702:	d11b      	bne.n	800173c <HAL_I2C_Master_Transmit+0x188>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	d017      	beq.n	800173c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	6a39      	ldr	r1, [r7, #32]
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 fcdc 	bl	80020fe <I2C_WaitOnBTFFlagUntilTimeout>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00d      	beq.n	8001768 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	2b04      	cmp	r3, #4
 8001752:	d107      	bne.n	8001764 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001762:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e01a      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176c:	2b00      	cmp	r3, #0
 800176e:	d194      	bne.n	800169a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2220      	movs	r2, #32
 8001784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	e000      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800179c:	2302      	movs	r3, #2
  }
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	00100002 	.word	0x00100002
 80017ac:	ffff0000 	.word	0xffff0000

080017b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	817b      	strh	r3, [r7, #10]
 80017c2:	460b      	mov	r3, r1
 80017c4:	813b      	strh	r3, [r7, #8]
 80017c6:	4613      	mov	r3, r2
 80017c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017ca:	f7ff faf9 	bl	8000dc0 <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b20      	cmp	r3, #32
 80017da:	f040 8208 	bne.w	8001bee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2319      	movs	r3, #25
 80017e4:	2201      	movs	r2, #1
 80017e6:	497b      	ldr	r1, [pc, #492]	; (80019d4 <HAL_I2C_Mem_Read+0x224>)
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 fb71 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80017f4:	2302      	movs	r3, #2
 80017f6:	e1fb      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Mem_Read+0x56>
 8001802:	2302      	movs	r3, #2
 8001804:	e1f4      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d007      	beq.n	800182c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800183a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2222      	movs	r2, #34	; 0x22
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800185c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a5b      	ldr	r2, [pc, #364]	; (80019d8 <HAL_I2C_Mem_Read+0x228>)
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800186e:	88f8      	ldrh	r0, [r7, #6]
 8001870:	893a      	ldrh	r2, [r7, #8]
 8001872:	8979      	ldrh	r1, [r7, #10]
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4603      	mov	r3, r0
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fa3e 	bl	8001d00 <I2C_RequestMemoryRead>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e1b0      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001892:	2b00      	cmp	r3, #0
 8001894:	d113      	bne.n	80018be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	623b      	str	r3, [r7, #32]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e184      	b.n	8001bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d11b      	bne.n	80018fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e164      	b.n	8001bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	2b02      	cmp	r3, #2
 8001904:	d11b      	bne.n	800193e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001914:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	e144      	b.n	8001bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001954:	e138      	b.n	8001bc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	2b03      	cmp	r3, #3
 800195c:	f200 80f1 	bhi.w	8001b42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	2b01      	cmp	r3, #1
 8001966:	d123      	bne.n	80019b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 fc07 	bl	8002180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e139      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019ae:	e10b      	b.n	8001bc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d14e      	bne.n	8001a56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019be:	2200      	movs	r2, #0
 80019c0:	4906      	ldr	r1, [pc, #24]	; (80019dc <HAL_I2C_Mem_Read+0x22c>)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fa84 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e10e      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
 80019d2:	bf00      	nop
 80019d4:	00100002 	.word	0x00100002
 80019d8:	ffff0000 	.word	0xffff0000
 80019dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a54:	e0b8      	b.n	8001bc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4966      	ldr	r1, [pc, #408]	; (8001bf8 <HAL_I2C_Mem_Read+0x448>)
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 fa35 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0bf      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	2200      	movs	r2, #0
 8001aba:	494f      	ldr	r1, [pc, #316]	; (8001bf8 <HAL_I2C_Mem_Read+0x448>)
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fa07 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e091      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b40:	e042      	b.n	8001bc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fb1a 	bl	8002180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e04c      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d118      	bne.n	8001bc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f47f aec2 	bne.w	8001956 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001bee:	2302      	movs	r3, #2
  }
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	00010004 	.word	0x00010004

08001bfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d006      	beq.n	8001c26 <I2C_MasterRequestWrite+0x2a>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d003      	beq.n	8001c26 <I2C_MasterRequestWrite+0x2a>
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c24:	d108      	bne.n	8001c38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e00b      	b.n	8001c50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d107      	bne.n	8001c50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f937 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00d      	beq.n	8001c84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c76:	d103      	bne.n	8001c80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e035      	b.n	8001cf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c8c:	d108      	bne.n	8001ca0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	e01b      	b.n	8001cd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	11db      	asrs	r3, r3, #7
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f003 0306 	and.w	r3, r3, #6
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f063 030f 	orn	r3, r3, #15
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <I2C_MasterRequestWrite+0xfc>)
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f95d 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e010      	b.n	8001cf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cce:	897b      	ldrh	r3, [r7, #10]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <I2C_MasterRequestWrite+0x100>)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f94d 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	00010008 	.word	0x00010008
 8001cfc:	00010002 	.word	0x00010002

08001d00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	817b      	strh	r3, [r7, #10]
 8001d12:	460b      	mov	r3, r1
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8c2 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d60:	d103      	bne.n	8001d6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0aa      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	6a3a      	ldr	r2, [r7, #32]
 8001d82:	4952      	ldr	r1, [pc, #328]	; (8001ecc <I2C_RequestMemoryRead+0x1cc>)
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f8fa 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e097      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dac:	6a39      	ldr	r1, [r7, #32]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f964 	bl	800207c <I2C_WaitOnTXEFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d107      	bne.n	8001dd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e076      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ddc:	893b      	ldrh	r3, [r7, #8]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	e021      	b.n	8001e2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001de8:	893b      	ldrh	r3, [r7, #8]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f93e 	bl	800207c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d107      	bne.n	8001e1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e050      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e22:	893b      	ldrh	r3, [r7, #8]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	6a39      	ldr	r1, [r7, #32]
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f923 	bl	800207c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d107      	bne.n	8001e54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e035      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f82b 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e8e:	d103      	bne.n	8001e98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e013      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e9c:	897b      	ldrh	r3, [r7, #10]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	4906      	ldr	r1, [pc, #24]	; (8001ecc <I2C_RequestMemoryRead+0x1cc>)
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f863 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	00010002 	.word	0x00010002

08001ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee0:	e025      	b.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ee8:	d021      	beq.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eea:	f7fe ff69 	bl	8000dc0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d116      	bne.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f043 0220 	orr.w	r2, r3, #32
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e023      	b.n	8001f76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10d      	bne.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4013      	ands	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	e00c      	b.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d0b6      	beq.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f8c:	e051      	b.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d123      	bne.n	8001fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0204 	orr.w	r2, r3, #4
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e046      	b.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fec:	d021      	beq.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fee:	f7fe fee7 	bl	8000dc0 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d302      	bcc.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d116      	bne.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f043 0220 	orr.w	r2, r3, #32
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e020      	b.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10c      	bne.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4013      	ands	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	e00b      	b.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	43da      	mvns	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4013      	ands	r3, r2
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d18d      	bne.n	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002088:	e02d      	b.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f8ce 	bl	800222c <I2C_IsAcknowledgeFailed>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e02d      	b.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a0:	d021      	beq.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7fe fe8d 	bl	8000dc0 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d302      	bcc.n	80020b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d116      	bne.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f043 0220 	orr.w	r2, r3, #32
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e007      	b.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b80      	cmp	r3, #128	; 0x80
 80020f2:	d1ca      	bne.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800210a:	e02d      	b.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f88d 	bl	800222c <I2C_IsAcknowledgeFailed>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e02d      	b.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002122:	d021      	beq.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002124:	f7fe fe4c 	bl	8000dc0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	429a      	cmp	r2, r3
 8002132:	d302      	bcc.n	800213a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e007      	b.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b04      	cmp	r3, #4
 8002174:	d1ca      	bne.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800218c:	e042      	b.n	8002214 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b10      	cmp	r3, #16
 800219a:	d119      	bne.n	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0210 	mvn.w	r2, #16
 80021a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e029      	b.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d0:	f7fe fdf6 	bl	8000dc0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d302      	bcc.n	80021e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e007      	b.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d1b5      	bne.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002242:	d11b      	bne.n	800227c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800224c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f043 0204 	orr.w	r2, r3, #4
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cc      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d90c      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b65      	ldr	r3, [pc, #404]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b8      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e0:	4b59      	ldr	r3, [pc, #356]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a58      	ldr	r2, [pc, #352]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f8:	4b53      	ldr	r3, [pc, #332]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4b50      	ldr	r3, [pc, #320]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	494d      	ldr	r1, [pc, #308]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d044      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e07f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e067      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4934      	ldr	r1, [pc, #208]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fd20 	bl	8000dc0 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fd1c 	bl	8000dc0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e04f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d20c      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e032      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4916      	ldr	r1, [pc, #88]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	490e      	ldr	r1, [pc, #56]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002412:	f000 f887 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 8002416:	4602      	mov	r2, r0
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	490a      	ldr	r1, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fba2 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00
 8002448:	40023800 	.word	0x40023800
 800244c:	080071ec 	.word	0x080071ec
 8002450:	20000000 	.word	0x20000000
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_GetHCLKFreq+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000

08002470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002474:	f7ff fff0 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0a9b      	lsrs	r3, r3, #10
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4903      	ldr	r1, [pc, #12]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	080071fc 	.word	0x080071fc

08002498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800249c:	f7ff ffdc 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0b5b      	lsrs	r3, r3, #13
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4903      	ldr	r1, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	080071fc 	.word	0x080071fc

080024c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	220f      	movs	r2, #15
 80024ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_RCC_GetClockConfig+0x60>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40023c00 	.word	0x40023c00

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b0ae      	sub	sp, #184	; 0xb8
 800252a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254a:	4bcb      	ldr	r3, [pc, #812]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b0c      	cmp	r3, #12
 8002554:	f200 8206 	bhi.w	8002964 <HAL_RCC_GetSysClockFreq+0x440>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <HAL_RCC_GetSysClockFreq+0x3c>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002595 	.word	0x08002595
 8002564:	08002965 	.word	0x08002965
 8002568:	08002965 	.word	0x08002965
 800256c:	08002965 	.word	0x08002965
 8002570:	0800259d 	.word	0x0800259d
 8002574:	08002965 	.word	0x08002965
 8002578:	08002965 	.word	0x08002965
 800257c:	08002965 	.word	0x08002965
 8002580:	080025a5 	.word	0x080025a5
 8002584:	08002965 	.word	0x08002965
 8002588:	08002965 	.word	0x08002965
 800258c:	08002965 	.word	0x08002965
 8002590:	08002795 	.word	0x08002795
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4bb9      	ldr	r3, [pc, #740]	; (800287c <HAL_RCC_GetSysClockFreq+0x358>)
 8002596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800259a:	e1e7      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259c:	4bb8      	ldr	r3, [pc, #736]	; (8002880 <HAL_RCC_GetSysClockFreq+0x35c>)
 800259e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025a2:	e1e3      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4bb4      	ldr	r3, [pc, #720]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b0:	4bb1      	ldr	r3, [pc, #708]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d071      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025bc:	4bae      	ldr	r3, [pc, #696]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025e2:	4622      	mov	r2, r4
 80025e4:	462b      	mov	r3, r5
 80025e6:	f04f 0000 	mov.w	r0, #0
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f4:	0150      	lsls	r0, r2, #5
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4621      	mov	r1, r4
 80025fc:	1a51      	subs	r1, r2, r1
 80025fe:	6439      	str	r1, [r7, #64]	; 0x40
 8002600:	4629      	mov	r1, r5
 8002602:	eb63 0301 	sbc.w	r3, r3, r1
 8002606:	647b      	str	r3, [r7, #68]	; 0x44
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002614:	4649      	mov	r1, r9
 8002616:	018b      	lsls	r3, r1, #6
 8002618:	4641      	mov	r1, r8
 800261a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261e:	4641      	mov	r1, r8
 8002620:	018a      	lsls	r2, r1, #6
 8002622:	4641      	mov	r1, r8
 8002624:	1a51      	subs	r1, r2, r1
 8002626:	63b9      	str	r1, [r7, #56]	; 0x38
 8002628:	4649      	mov	r1, r9
 800262a:	eb63 0301 	sbc.w	r3, r3, r1
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800263c:	4649      	mov	r1, r9
 800263e:	00cb      	lsls	r3, r1, #3
 8002640:	4641      	mov	r1, r8
 8002642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002646:	4641      	mov	r1, r8
 8002648:	00ca      	lsls	r2, r1, #3
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	4603      	mov	r3, r0
 8002650:	4622      	mov	r2, r4
 8002652:	189b      	adds	r3, r3, r2
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
 8002656:	462b      	mov	r3, r5
 8002658:	460a      	mov	r2, r1
 800265a:	eb42 0303 	adc.w	r3, r2, r3
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800266c:	4629      	mov	r1, r5
 800266e:	024b      	lsls	r3, r1, #9
 8002670:	4621      	mov	r1, r4
 8002672:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002676:	4621      	mov	r1, r4
 8002678:	024a      	lsls	r2, r1, #9
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002688:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800268c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002690:	f7fd fe16 	bl	80002c0 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800269e:	e067      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a0:	4b75      	ldr	r3, [pc, #468]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80026b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ba:	2300      	movs	r3, #0
 80026bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4621      	mov	r1, r4
 80026dc:	1a51      	subs	r1, r2, r1
 80026de:	62b9      	str	r1, [r7, #40]	; 0x28
 80026e0:	4629      	mov	r1, r5
 80026e2:	eb63 0301 	sbc.w	r3, r3, r1
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026f4:	4649      	mov	r1, r9
 80026f6:	018b      	lsls	r3, r1, #6
 80026f8:	4641      	mov	r1, r8
 80026fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fe:	4641      	mov	r1, r8
 8002700:	018a      	lsls	r2, r1, #6
 8002702:	4641      	mov	r1, r8
 8002704:	ebb2 0a01 	subs.w	sl, r2, r1
 8002708:	4649      	mov	r1, r9
 800270a:	eb63 0b01 	sbc.w	fp, r3, r1
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800271a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800271e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002722:	4692      	mov	sl, r2
 8002724:	469b      	mov	fp, r3
 8002726:	4623      	mov	r3, r4
 8002728:	eb1a 0303 	adds.w	r3, sl, r3
 800272c:	623b      	str	r3, [r7, #32]
 800272e:	462b      	mov	r3, r5
 8002730:	eb4b 0303 	adc.w	r3, fp, r3
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002742:	4629      	mov	r1, r5
 8002744:	028b      	lsls	r3, r1, #10
 8002746:	4621      	mov	r1, r4
 8002748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800274c:	4621      	mov	r1, r4
 800274e:	028a      	lsls	r2, r1, #10
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002758:	2200      	movs	r2, #0
 800275a:	673b      	str	r3, [r7, #112]	; 0x70
 800275c:	677a      	str	r2, [r7, #116]	; 0x74
 800275e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002762:	f7fd fdad 	bl	80002c0 <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4613      	mov	r3, r2
 800276c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002770:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002792:	e0eb      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002794:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800279c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a0:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d06b      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	2200      	movs	r2, #0
 80027b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	663b      	str	r3, [r7, #96]	; 0x60
 80027c0:	2300      	movs	r3, #0
 80027c2:	667b      	str	r3, [r7, #100]	; 0x64
 80027c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027c8:	4622      	mov	r2, r4
 80027ca:	462b      	mov	r3, r5
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	0159      	lsls	r1, r3, #5
 80027d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027da:	0150      	lsls	r0, r2, #5
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4621      	mov	r1, r4
 80027e2:	1a51      	subs	r1, r2, r1
 80027e4:	61b9      	str	r1, [r7, #24]
 80027e6:	4629      	mov	r1, r5
 80027e8:	eb63 0301 	sbc.w	r3, r3, r1
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027fa:	4659      	mov	r1, fp
 80027fc:	018b      	lsls	r3, r1, #6
 80027fe:	4651      	mov	r1, sl
 8002800:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002804:	4651      	mov	r1, sl
 8002806:	018a      	lsls	r2, r1, #6
 8002808:	4651      	mov	r1, sl
 800280a:	ebb2 0801 	subs.w	r8, r2, r1
 800280e:	4659      	mov	r1, fp
 8002810:	eb63 0901 	sbc.w	r9, r3, r1
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002820:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002824:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002828:	4690      	mov	r8, r2
 800282a:	4699      	mov	r9, r3
 800282c:	4623      	mov	r3, r4
 800282e:	eb18 0303 	adds.w	r3, r8, r3
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	462b      	mov	r3, r5
 8002836:	eb49 0303 	adc.w	r3, r9, r3
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002848:	4629      	mov	r1, r5
 800284a:	024b      	lsls	r3, r1, #9
 800284c:	4621      	mov	r1, r4
 800284e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002852:	4621      	mov	r1, r4
 8002854:	024a      	lsls	r2, r1, #9
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800285e:	2200      	movs	r2, #0
 8002860:	65bb      	str	r3, [r7, #88]	; 0x58
 8002862:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002864:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002868:	f7fd fd2a 	bl	80002c0 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002876:	e065      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x420>
 8002878:	40023800 	.word	0x40023800
 800287c:	00f42400 	.word	0x00f42400
 8002880:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002884:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_RCC_GetSysClockFreq+0x458>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	2200      	movs	r2, #0
 800288c:	4618      	mov	r0, r3
 800288e:	4611      	mov	r1, r2
 8002890:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002894:	653b      	str	r3, [r7, #80]	; 0x50
 8002896:	2300      	movs	r3, #0
 8002898:	657b      	str	r3, [r7, #84]	; 0x54
 800289a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800289e:	4642      	mov	r2, r8
 80028a0:	464b      	mov	r3, r9
 80028a2:	f04f 0000 	mov.w	r0, #0
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	0159      	lsls	r1, r3, #5
 80028ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b0:	0150      	lsls	r0, r2, #5
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4641      	mov	r1, r8
 80028b8:	1a51      	subs	r1, r2, r1
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	4649      	mov	r1, r9
 80028be:	eb63 0301 	sbc.w	r3, r3, r1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028d0:	4659      	mov	r1, fp
 80028d2:	018b      	lsls	r3, r1, #6
 80028d4:	4651      	mov	r1, sl
 80028d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028da:	4651      	mov	r1, sl
 80028dc:	018a      	lsls	r2, r1, #6
 80028de:	4651      	mov	r1, sl
 80028e0:	1a54      	subs	r4, r2, r1
 80028e2:	4659      	mov	r1, fp
 80028e4:	eb63 0501 	sbc.w	r5, r3, r1
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	00eb      	lsls	r3, r5, #3
 80028f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f6:	00e2      	lsls	r2, r4, #3
 80028f8:	4614      	mov	r4, r2
 80028fa:	461d      	mov	r5, r3
 80028fc:	4643      	mov	r3, r8
 80028fe:	18e3      	adds	r3, r4, r3
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	464b      	mov	r3, r9
 8002904:	eb45 0303 	adc.w	r3, r5, r3
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002916:	4629      	mov	r1, r5
 8002918:	028b      	lsls	r3, r1, #10
 800291a:	4621      	mov	r1, r4
 800291c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002920:	4621      	mov	r1, r4
 8002922:	028a      	lsls	r2, r1, #10
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800292c:	2200      	movs	r2, #0
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002930:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002932:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002936:	f7fd fcc3 	bl	80002c0 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4613      	mov	r3, r2
 8002940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_RCC_GetSysClockFreq+0x458>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0f1b      	lsrs	r3, r3, #28
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002962:	e003      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800296a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002970:	4618      	mov	r0, r3
 8002972:	37b8      	adds	r7, #184	; 0xb8
 8002974:	46bd      	mov	sp, r7
 8002976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	00f42400 	.word	0x00f42400

08002984 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e28d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8083 	beq.w	8002aaa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a4:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d019      	beq.n	80029e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029b0:	4b91      	ldr	r3, [pc, #580]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029bc:	4b8e      	ldr	r3, [pc, #568]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c8:	d00c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ca:	4b8b      	ldr	r3, [pc, #556]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d112      	bne.n	80029fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b88      	ldr	r3, [pc, #544]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b84      	ldr	r3, [pc, #528]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05b      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x124>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d157      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e25a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x90>
 8002a06:	4b7c      	ldr	r3, [pc, #496]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7b      	ldr	r2, [pc, #492]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xcc>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0xb4>
 8002a1e:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a75      	ldr	r2, [pc, #468]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b73      	ldr	r3, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a72      	ldr	r2, [pc, #456]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xcc>
 8002a38:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a6e      	ldr	r2, [pc, #440]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6b      	ldr	r2, [pc, #428]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe f9b2 	bl	8000dc0 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe f9ae 	bl	8000dc0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e21f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xdc>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe f99e 	bl	8000dc0 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe f99a 	bl	8000dc0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e20b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x104>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d06f      	beq.n	8002b96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ab6:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d017      	beq.n	8002af2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ac2:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d105      	bne.n	8002ada <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ace:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae2:	2b0c      	cmp	r3, #12
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x186>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1d3      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4937      	ldr	r1, [pc, #220]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_RCC_OscConfig+0x278>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe f947 	bl	8000dc0 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe f943 	bl	8000dc0 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1b4      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4925      	ldr	r1, [pc, #148]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x278>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe f926 	bl	8000dc0 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe f922 	bl	8000dc0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e193      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d036      	beq.n	8002c10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe f906 	bl	8000dc0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe f902 	bl	8000dc0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e173      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x234>
 8002bd6:	e01b      	b.n	8002c10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x27c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe f8ef 	bl	8000dc0 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	e00e      	b.n	8002c04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe f8eb 	bl	8000dc0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d907      	bls.n	8002c04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e15c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	42470000 	.word	0x42470000
 8002c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	4b8a      	ldr	r3, [pc, #552]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ea      	bne.n	8002be6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8097 	beq.w	8002d4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c22:	4b83      	ldr	r3, [pc, #524]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	4b7f      	ldr	r3, [pc, #508]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a7e      	ldr	r2, [pc, #504]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b7c      	ldr	r3, [pc, #496]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <HAL_RCC_OscConfig+0x4b0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x4b0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a75      	ldr	r2, [pc, #468]	; (8002e34 <HAL_RCC_OscConfig+0x4b0>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fe f8ab 	bl	8000dc0 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe f8a7 	bl	8000dc0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e118      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <HAL_RCC_OscConfig+0x4b0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x31e>
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x358>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x340>
 8002caa:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a60      	ldr	r2, [pc, #384]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a5d      	ldr	r2, [pc, #372]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0x358>
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a59      	ldr	r2, [pc, #356]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe f86c 	bl	8000dc0 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe f868 	bl	8000dc0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0d7      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ee      	beq.n	8002cec <HAL_RCC_OscConfig+0x368>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe f856 	bl	8000dc0 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe f852 	bl	8000dc0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0c1      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ee      	bne.n	8002d18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	4a3a      	ldr	r2, [pc, #232]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80ad 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d060      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d145      	bne.n	8002df6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_RCC_OscConfig+0x4b4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe f826 	bl	8000dc0 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe f822 	bl	8000dc0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e093      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	019b      	lsls	r3, r3, #6
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	3b01      	subs	r3, #1
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	071b      	lsls	r3, r3, #28
 8002dc2:	491b      	ldr	r1, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x4b4>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fd fff7 	bl	8000dc0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fd fff3 	bl	8000dc0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e064      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x452>
 8002df4:	e05c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <HAL_RCC_OscConfig+0x4b4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fd ffe0 	bl	8000dc0 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fd ffdc 	bl	8000dc0 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e04d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x480>
 8002e22:	e045      	b.n	8002eb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e040      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000
 8002e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_RCC_OscConfig+0x538>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d030      	beq.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d129      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d122      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d119      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	3b01      	subs	r3, #1
 8002e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d10f      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e041      	b.n	8002f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f839 	bl	8002f5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 f9d8 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d001      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e04e      	b.n	800302a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a23      	ldr	r2, [pc, #140]	; (8003038 <HAL_TIM_Base_Start_IT+0xc4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d022      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x80>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d01d      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x80>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_TIM_Base_Start_IT+0xc8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d018      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x80>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x80>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x80>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d009      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x80>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_TIM_Base_Start_IT+0xd8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x80>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d111      	bne.n	8003018 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b06      	cmp	r3, #6
 8003004:	d010      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003016:	e007      	b.n	8003028 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40010000 	.word	0x40010000
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800
 8003044:	40000c00 	.word	0x40000c00
 8003048:	40010400 	.word	0x40010400
 800304c:	40014000 	.word	0x40014000
 8003050:	40001800 	.word	0x40001800

08003054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d122      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b02      	cmp	r3, #2
 8003076:	d11b      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0202 	mvn.w	r2, #2
 8003080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8ee 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8e0 	bl	8003264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8f1 	bl	800328c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d122      	bne.n	8003104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d11b      	bne.n	8003104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0204 	mvn.w	r2, #4
 80030d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2202      	movs	r2, #2
 80030da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8c4 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 80030f0:	e005      	b.n	80030fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8b6 	bl	8003264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f8c7 	bl	800328c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b08      	cmp	r3, #8
 8003110:	d122      	bne.n	8003158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b08      	cmp	r3, #8
 800311e:	d11b      	bne.n	8003158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0208 	mvn.w	r2, #8
 8003128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2204      	movs	r2, #4
 800312e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f89a 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8003144:	e005      	b.n	8003152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f88c 	bl	8003264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f89d 	bl	800328c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b10      	cmp	r3, #16
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b10      	cmp	r3, #16
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0210 	mvn.w	r2, #16
 800317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2208      	movs	r2, #8
 8003182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f870 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f862 	bl	8003264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f873 	bl	800328c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10e      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0201 	mvn.w	r2, #1
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd fbfe 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	2b80      	cmp	r3, #128	; 0x80
 80031e4:	d10e      	bne.n	8003204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b80      	cmp	r3, #128	; 0x80
 80031f2:	d107      	bne.n	8003204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f902 	bl	8003408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d10e      	bne.n	8003230 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d107      	bne.n	8003230 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f838 	bl	80032a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b20      	cmp	r3, #32
 800323c:	d10e      	bne.n	800325c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b20      	cmp	r3, #32
 800324a:	d107      	bne.n	800325c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0220 	mvn.w	r2, #32
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8cc 	bl	80033f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a40      	ldr	r2, [pc, #256]	; (80033c8 <TIM_Base_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d00f      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3d      	ldr	r2, [pc, #244]	; (80033cc <TIM_Base_SetConfig+0x118>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00b      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <TIM_Base_SetConfig+0x11c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3b      	ldr	r2, [pc, #236]	; (80033d4 <TIM_Base_SetConfig+0x120>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3a      	ldr	r2, [pc, #232]	; (80033d8 <TIM_Base_SetConfig+0x124>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <TIM_Base_SetConfig+0x114>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02b      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d027      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <TIM_Base_SetConfig+0x118>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d023      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2b      	ldr	r2, [pc, #172]	; (80033d0 <TIM_Base_SetConfig+0x11c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <TIM_Base_SetConfig+0x120>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01b      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <TIM_Base_SetConfig+0x124>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d017      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a28      	ldr	r2, [pc, #160]	; (80033dc <TIM_Base_SetConfig+0x128>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <TIM_Base_SetConfig+0x12c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00f      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <TIM_Base_SetConfig+0x130>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00b      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <TIM_Base_SetConfig+0x134>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <TIM_Base_SetConfig+0x138>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <TIM_Base_SetConfig+0x13c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d108      	bne.n	8003378 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <TIM_Base_SetConfig+0x114>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_Base_SetConfig+0xf8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <TIM_Base_SetConfig+0x124>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d103      	bne.n	80033b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	615a      	str	r2, [r3, #20]
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	40001800 	.word	0x40001800
 80033ec:	40001c00 	.word	0x40001c00
 80033f0:	40002000 	.word	0x40002000

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e03f      	b.n	80034ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fb52 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f929 	bl	80036b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b08a      	sub	sp, #40	; 0x28
 80034ba:	af02      	add	r7, sp, #8
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d17c      	bne.n	80035d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_UART_Transmit+0x2c>
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e075      	b.n	80035d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Transmit+0x3e>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e06e      	b.n	80035d2 <HAL_UART_Transmit+0x11c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2221      	movs	r2, #33	; 0x21
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800350a:	f7fd fc59 	bl	8000dc0 <HAL_GetTick>
 800350e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003524:	d108      	bne.n	8003538 <HAL_UART_Transmit+0x82>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	e003      	b.n	8003540 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003548:	e02a      	b.n	80035a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f840 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e036      	b.n	80035d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003578:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3302      	adds	r3, #2
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	e007      	b.n	8003592 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3301      	adds	r3, #1
 8003590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1cf      	bne.n	800354a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2140      	movs	r1, #64	; 0x40
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f810 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e006      	b.n	80035d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b090      	sub	sp, #64	; 0x40
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	e050      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f2:	d04c      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x30>
 80035fa:	f7fd fbe1 	bl	8000dc0 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003606:	429a      	cmp	r2, r3
 8003608:	d241      	bcs.n	800368e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	330c      	adds	r3, #12
 8003628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800362a:	637a      	str	r2, [r7, #52]	; 0x34
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e5      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	613b      	str	r3, [r7, #16]
   return(result);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800365e:	623a      	str	r2, [r7, #32]
 8003660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	69f9      	ldr	r1, [r7, #28]
 8003664:	6a3a      	ldr	r2, [r7, #32]
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	61bb      	str	r3, [r7, #24]
   return(result);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e5      	bne.n	800363e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e00f      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d09f      	beq.n	80035ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3740      	adds	r7, #64	; 0x40
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036bc:	b0c0      	sub	sp, #256	; 0x100
 80036be:	af00      	add	r7, sp, #0
 80036c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	68d9      	ldr	r1, [r3, #12]
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	ea40 0301 	orr.w	r3, r0, r1
 80036e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003710:	f021 010c 	bic.w	r1, r1, #12
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800371e:	430b      	orrs	r3, r1
 8003720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003732:	6999      	ldr	r1, [r3, #24]
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	ea40 0301 	orr.w	r3, r0, r1
 800373e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b8f      	ldr	r3, [pc, #572]	; (8003984 <UART_SetConfig+0x2cc>)
 8003748:	429a      	cmp	r2, r3
 800374a:	d005      	beq.n	8003758 <UART_SetConfig+0xa0>
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <UART_SetConfig+0x2d0>)
 8003754:	429a      	cmp	r2, r3
 8003756:	d104      	bne.n	8003762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7fe fe9e 	bl	8002498 <HAL_RCC_GetPCLK2Freq>
 800375c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003760:	e003      	b.n	800376a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7fe fe85 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 8003766:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003774:	f040 810c 	bne.w	8003990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377c:	2200      	movs	r2, #0
 800377e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003782:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	1891      	adds	r1, r2, r2
 8003790:	65b9      	str	r1, [r7, #88]	; 0x58
 8003792:	415b      	adcs	r3, r3
 8003794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800379a:	4621      	mov	r1, r4
 800379c:	eb12 0801 	adds.w	r8, r2, r1
 80037a0:	4629      	mov	r1, r5
 80037a2:	eb43 0901 	adc.w	r9, r3, r1
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ba:	4690      	mov	r8, r2
 80037bc:	4699      	mov	r9, r3
 80037be:	4623      	mov	r3, r4
 80037c0:	eb18 0303 	adds.w	r3, r8, r3
 80037c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037c8:	462b      	mov	r3, r5
 80037ca:	eb49 0303 	adc.w	r3, r9, r3
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037e6:	460b      	mov	r3, r1
 80037e8:	18db      	adds	r3, r3, r3
 80037ea:	653b      	str	r3, [r7, #80]	; 0x50
 80037ec:	4613      	mov	r3, r2
 80037ee:	eb42 0303 	adc.w	r3, r2, r3
 80037f2:	657b      	str	r3, [r7, #84]	; 0x54
 80037f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037fc:	f7fc fd60 	bl	80002c0 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4b61      	ldr	r3, [pc, #388]	; (800398c <UART_SetConfig+0x2d4>)
 8003806:	fba3 2302 	umull	r2, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	011c      	lsls	r4, r3, #4
 800380e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003818:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800381c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	1891      	adds	r1, r2, r2
 8003826:	64b9      	str	r1, [r7, #72]	; 0x48
 8003828:	415b      	adcs	r3, r3
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800382c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003830:	4641      	mov	r1, r8
 8003832:	eb12 0a01 	adds.w	sl, r2, r1
 8003836:	4649      	mov	r1, r9
 8003838:	eb43 0b01 	adc.w	fp, r3, r1
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800384c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003850:	4692      	mov	sl, r2
 8003852:	469b      	mov	fp, r3
 8003854:	4643      	mov	r3, r8
 8003856:	eb1a 0303 	adds.w	r3, sl, r3
 800385a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800385e:	464b      	mov	r3, r9
 8003860:	eb4b 0303 	adc.w	r3, fp, r3
 8003864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003874:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800387c:	460b      	mov	r3, r1
 800387e:	18db      	adds	r3, r3, r3
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
 8003882:	4613      	mov	r3, r2
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
 800388a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800388e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003892:	f7fc fd15 	bl	80002c0 <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4611      	mov	r1, r2
 800389c:	4b3b      	ldr	r3, [pc, #236]	; (800398c <UART_SetConfig+0x2d4>)
 800389e:	fba3 2301 	umull	r2, r3, r3, r1
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2264      	movs	r2, #100	; 0x64
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	1acb      	subs	r3, r1, r3
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <UART_SetConfig+0x2d4>)
 80038b4:	fba3 2302 	umull	r2, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038c0:	441c      	add	r4, r3
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	1891      	adds	r1, r2, r2
 80038da:	63b9      	str	r1, [r7, #56]	; 0x38
 80038dc:	415b      	adcs	r3, r3
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038e4:	4641      	mov	r1, r8
 80038e6:	1851      	adds	r1, r2, r1
 80038e8:	6339      	str	r1, [r7, #48]	; 0x30
 80038ea:	4649      	mov	r1, r9
 80038ec:	414b      	adcs	r3, r1
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038fc:	4659      	mov	r1, fp
 80038fe:	00cb      	lsls	r3, r1, #3
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003906:	4651      	mov	r1, sl
 8003908:	00ca      	lsls	r2, r1, #3
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	4603      	mov	r3, r0
 8003910:	4642      	mov	r2, r8
 8003912:	189b      	adds	r3, r3, r2
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003918:	464b      	mov	r3, r9
 800391a:	460a      	mov	r2, r1
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003930:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003938:	460b      	mov	r3, r1
 800393a:	18db      	adds	r3, r3, r3
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
 800393e:	4613      	mov	r3, r2
 8003940:	eb42 0303 	adc.w	r3, r2, r3
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800394a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800394e:	f7fc fcb7 	bl	80002c0 <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <UART_SetConfig+0x2d4>)
 8003958:	fba3 1302 	umull	r1, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2164      	movs	r1, #100	; 0x64
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	3332      	adds	r3, #50	; 0x32
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <UART_SetConfig+0x2d4>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 0207 	and.w	r2, r3, #7
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4422      	add	r2, r4
 800397e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003980:	e105      	b.n	8003b8e <UART_SetConfig+0x4d6>
 8003982:	bf00      	nop
 8003984:	40011000 	.word	0x40011000
 8003988:	40011400 	.word	0x40011400
 800398c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003994:	2200      	movs	r2, #0
 8003996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800399a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800399e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039a2:	4642      	mov	r2, r8
 80039a4:	464b      	mov	r3, r9
 80039a6:	1891      	adds	r1, r2, r2
 80039a8:	6239      	str	r1, [r7, #32]
 80039aa:	415b      	adcs	r3, r3
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039b2:	4641      	mov	r1, r8
 80039b4:	1854      	adds	r4, r2, r1
 80039b6:	4649      	mov	r1, r9
 80039b8:	eb43 0501 	adc.w	r5, r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	00eb      	lsls	r3, r5, #3
 80039c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ca:	00e2      	lsls	r2, r4, #3
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4643      	mov	r3, r8
 80039d2:	18e3      	adds	r3, r4, r3
 80039d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039d8:	464b      	mov	r3, r9
 80039da:	eb45 0303 	adc.w	r3, r5, r3
 80039de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039fe:	4629      	mov	r1, r5
 8003a00:	008b      	lsls	r3, r1, #2
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a08:	4621      	mov	r1, r4
 8003a0a:	008a      	lsls	r2, r1, #2
 8003a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a10:	f7fc fc56 	bl	80002c0 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4b60      	ldr	r3, [pc, #384]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	011c      	lsls	r4, r3, #4
 8003a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	61b9      	str	r1, [r7, #24]
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a44:	4641      	mov	r1, r8
 8003a46:	1851      	adds	r1, r2, r1
 8003a48:	6139      	str	r1, [r7, #16]
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	00cb      	lsls	r3, r1, #3
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a66:	4651      	mov	r1, sl
 8003a68:	00ca      	lsls	r2, r1, #3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4642      	mov	r2, r8
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a78:	464b      	mov	r3, r9
 8003a7a:	460a      	mov	r2, r1
 8003a7c:	eb42 0303 	adc.w	r3, r2, r3
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	008b      	lsls	r3, r1, #2
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	008a      	lsls	r2, r1, #2
 8003aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aae:	f7fc fc07 	bl	80002c0 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	2164      	movs	r1, #100	; 0x64
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	3332      	adds	r3, #50	; 0x32
 8003aca:	4a34      	ldr	r2, [pc, #208]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad6:	441c      	add	r4, r3
 8003ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003adc:	2200      	movs	r2, #0
 8003ade:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ae6:	4642      	mov	r2, r8
 8003ae8:	464b      	mov	r3, r9
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	415b      	adcs	r3, r3
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af6:	4641      	mov	r1, r8
 8003af8:	1851      	adds	r1, r2, r1
 8003afa:	6039      	str	r1, [r7, #0]
 8003afc:	4649      	mov	r1, r9
 8003afe:	414b      	adcs	r3, r1
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b0e:	4659      	mov	r1, fp
 8003b10:	00cb      	lsls	r3, r1, #3
 8003b12:	4651      	mov	r1, sl
 8003b14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b18:	4651      	mov	r1, sl
 8003b1a:	00ca      	lsls	r2, r1, #3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4603      	mov	r3, r0
 8003b22:	4642      	mov	r2, r8
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b28:	464b      	mov	r3, r9
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3c:	667a      	str	r2, [r7, #100]	; 0x64
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	008b      	lsls	r3, r1, #2
 8003b4e:	4641      	mov	r1, r8
 8003b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b54:	4641      	mov	r1, r8
 8003b56:	008a      	lsls	r2, r1, #2
 8003b58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b5c:	f7fc fbb0 	bl	80002c0 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003b66:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2164      	movs	r1, #100	; 0x64
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	3332      	adds	r3, #50	; 0x32
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	f003 020f 	and.w	r2, r3, #15
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4422      	add	r2, r4
 8003b8c:	609a      	str	r2, [r3, #8]
}
 8003b8e:	bf00      	nop
 8003b90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	51eb851f 	.word	0x51eb851f

08003ba0 <__NVIC_SetPriority>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	6039      	str	r1, [r7, #0]
 8003baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db0a      	blt.n	8003bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	490c      	ldr	r1, [pc, #48]	; (8003bec <__NVIC_SetPriority+0x4c>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	0112      	lsls	r2, r2, #4
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bc8:	e00a      	b.n	8003be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4908      	ldr	r1, [pc, #32]	; (8003bf0 <__NVIC_SetPriority+0x50>)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	3b04      	subs	r3, #4
 8003bd8:	0112      	lsls	r2, r2, #4
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	440b      	add	r3, r1
 8003bde:	761a      	strb	r2, [r3, #24]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <SysTick_Handler+0x1c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003bfc:	f001 fd28 	bl	8005650 <xTaskGetSchedulerState>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c06:	f002 fb0f 	bl	8006228 <xPortSysTickHandler>
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	e000e010 	.word	0xe000e010

08003c14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f06f 0004 	mvn.w	r0, #4
 8003c1e:	f7ff ffbf 	bl	8003ba0 <__NVIC_SetPriority>
#endif
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c2e:	f3ef 8305 	mrs	r3, IPSR
 8003c32:	603b      	str	r3, [r7, #0]
  return(result);
 8003c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c3a:	f06f 0305 	mvn.w	r3, #5
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	e00c      	b.n	8003c5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <osKernelInitialize+0x44>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <osKernelInitialize+0x44>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	e002      	b.n	8003c5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c5c:	687b      	ldr	r3, [r7, #4]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000180 	.word	0x20000180

08003c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c76:	f3ef 8305 	mrs	r3, IPSR
 8003c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003c82:	f06f 0305 	mvn.w	r3, #5
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	e010      	b.n	8003cac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <osKernelStart+0x48>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d109      	bne.n	8003ca6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c92:	f7ff ffbf 	bl	8003c14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <osKernelStart+0x48>)
 8003c98:	2202      	movs	r2, #2
 8003c9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c9c:	f001 f87c 	bl	8004d98 <vTaskStartScheduler>
      stat = osOK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	e002      	b.n	8003cac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cac:	687b      	ldr	r3, [r7, #4]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000180 	.word	0x20000180

08003cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08e      	sub	sp, #56	; 0x38
 8003cc0:	af04      	add	r7, sp, #16
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ccc:	f3ef 8305 	mrs	r3, IPSR
 8003cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d17e      	bne.n	8003dd6 <osThreadNew+0x11a>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d07b      	beq.n	8003dd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ce2:	2318      	movs	r3, #24
 8003ce4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d045      	beq.n	8003d82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <osThreadNew+0x48>
        name = attr->name;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <osThreadNew+0x6e>
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b38      	cmp	r3, #56	; 0x38
 8003d1c:	d805      	bhi.n	8003d2a <osThreadNew+0x6e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <osThreadNew+0x72>
        return (NULL);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e054      	b.n	8003dd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <osThreadNew+0xa8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2bbb      	cmp	r3, #187	; 0xbb
 8003d4c:	d90a      	bls.n	8003d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <osThreadNew+0xa8>
        mem = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e010      	b.n	8003d86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10c      	bne.n	8003d86 <osThreadNew+0xca>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <osThreadNew+0xca>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <osThreadNew+0xca>
          mem = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e001      	b.n	8003d86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d110      	bne.n	8003dae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d94:	9202      	str	r2, [sp, #8]
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fe0c 	bl	80049c0 <xTaskCreateStatic>
 8003da8:	4603      	mov	r3, r0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e013      	b.n	8003dd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d110      	bne.n	8003dd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	f107 0310 	add.w	r3, r7, #16
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fe57 	bl	8004a7a <xTaskCreate>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <osThreadNew+0x11a>
            hTask = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003dd6:	693b      	ldr	r3, [r7, #16]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de8:	f3ef 8305 	mrs	r3, IPSR
 8003dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <osDelay+0x1c>
    stat = osErrorISR;
 8003df4:	f06f 0305 	mvn.w	r3, #5
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e007      	b.n	8003e0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 ff92 	bl	8004d30 <vTaskDelay>
    }
  }

  return (stat);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4a06      	ldr	r2, [pc, #24]	; (8003e48 <vApplicationGetIdleTaskMemory+0x30>)
 8003e2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000184 	.word	0x20000184
 8003e48:	20000240 	.word	0x20000240

08003e4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a07      	ldr	r2, [pc, #28]	; (8003e78 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4a06      	ldr	r2, [pc, #24]	; (8003e7c <vApplicationGetTimerTaskMemory+0x30>)
 8003e62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e6a:	601a      	str	r2, [r3, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	20000440 	.word	0x20000440
 8003e7c:	200004fc 	.word	0x200004fc

08003e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f103 0208 	add.w	r2, r3, #8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f103 0208 	add.w	r2, r3, #8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f103 0208 	add.w	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f38:	d103      	bne.n	8003f42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e00c      	b.n	8003f5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3308      	adds	r3, #8
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e002      	b.n	8003f50 <vListInsert+0x2e>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d2f6      	bcs.n	8003f4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6892      	ldr	r2, [r2, #8]
 8003faa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6852      	ldr	r2, [r2, #4]
 8003fb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d103      	bne.n	8003fc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	1e5a      	subs	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004012:	f002 f877 	bl	8006104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	441a      	add	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	3b01      	subs	r3, #1
 8004044:	68f9      	ldr	r1, [r7, #12]
 8004046:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	441a      	add	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	22ff      	movs	r2, #255	; 0xff
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	22ff      	movs	r2, #255	; 0xff
 800405e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d114      	bne.n	8004092 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01a      	beq.n	80040a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3310      	adds	r3, #16
 8004074:	4618      	mov	r0, r3
 8004076:	f001 f929 	bl	80052cc <xTaskRemoveFromEventList>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d012      	beq.n	80040a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <xQueueGenericReset+0xcc>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	e009      	b.n	80040a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3310      	adds	r3, #16
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fef2 	bl	8003e80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3324      	adds	r3, #36	; 0x24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff feed 	bl	8003e80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040a6:	f002 f85d 	bl	8006164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040aa:	2301      	movs	r3, #1
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <xQueueGenericCreateStatic+0x52>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <xQueueGenericCreateStatic+0x56>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <xQueueGenericCreateStatic+0x58>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	623b      	str	r3, [r7, #32]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <xQueueGenericCreateStatic+0x7e>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <xQueueGenericCreateStatic+0x82>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xQueueGenericCreateStatic+0x84>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	61fb      	str	r3, [r7, #28]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004156:	2350      	movs	r3, #80	; 0x50
 8004158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b50      	cmp	r3, #80	; 0x50
 800415e:	d00a      	beq.n	8004176 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	61bb      	str	r3, [r7, #24]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004176:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800418a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f805 	bl	80041a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3730      	adds	r7, #48	; 0x30
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d103      	bne.n	80041c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e002      	b.n	80041ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041d6:	2101      	movs	r1, #1
 80041d8:	69b8      	ldr	r0, [r7, #24]
 80041da:	f7ff ff05 	bl	8003fe8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08e      	sub	sp, #56	; 0x38
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <xQueueGenericSend+0x32>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <xQueueGenericSend+0x40>
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <xQueueGenericSend+0x44>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <xQueueGenericSend+0x46>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <xQueueGenericSend+0x60>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d103      	bne.n	800425e <xQueueGenericSend+0x6e>
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <xQueueGenericSend+0x72>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericSend+0x74>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericSend+0x8e>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	623b      	str	r3, [r7, #32]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800427e:	f001 f9e7 	bl	8005650 <xTaskGetSchedulerState>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <xQueueGenericSend+0x9e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <xQueueGenericSend+0xa2>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueGenericSend+0xa4>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xQueueGenericSend+0xbe>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	61fb      	str	r3, [r7, #28]
}
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ae:	f001 ff29 	bl	8006104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <xQueueGenericSend+0xd4>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d129      	bne.n	8004318 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ca:	f000 fa0b 	bl	80046e4 <prvCopyDataToQueue>
 80042ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	3324      	adds	r3, #36	; 0x24
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fff5 	bl	80052cc <xTaskRemoveFromEventList>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042e8:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <xQueueGenericSend+0x1f8>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	e00a      	b.n	8004310 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <xQueueGenericSend+0x1f8>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004310:	f001 ff28 	bl	8006164 <vPortExitCritical>
				return pdPASS;
 8004314:	2301      	movs	r3, #1
 8004316:	e063      	b.n	80043e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800431e:	f001 ff21 	bl	8006164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004322:	2300      	movs	r3, #0
 8004324:	e05c      	b.n	80043e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800432c:	f107 0314 	add.w	r3, r7, #20
 8004330:	4618      	mov	r0, r3
 8004332:	f001 f82f 	bl	8005394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800433a:	f001 ff13 	bl	8006164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800433e:	f000 fd9b 	bl	8004e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004342:	f001 fedf 	bl	8006104 <vPortEnterCritical>
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800434c:	b25b      	sxtb	r3, r3
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004352:	d103      	bne.n	800435c <xQueueGenericSend+0x16c>
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004362:	b25b      	sxtb	r3, r3
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004368:	d103      	bne.n	8004372 <xQueueGenericSend+0x182>
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004372:	f001 fef7 	bl	8006164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004376:	1d3a      	adds	r2, r7, #4
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f001 f81e 	bl	80053c0 <xTaskCheckForTimeOut>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d124      	bne.n	80043d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800438a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800438c:	f000 faa2 	bl	80048d4 <prvIsQueueFull>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	3310      	adds	r3, #16
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 ff44 	bl	800522c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a6:	f000 fa2d 	bl	8004804 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043aa:	f000 fd73 	bl	8004e94 <xTaskResumeAll>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f47f af7c 	bne.w	80042ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <xQueueGenericSend+0x1f8>)
 80043b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	e772      	b.n	80042ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ca:	f000 fa1b 	bl	8004804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043ce:	f000 fd61 	bl	8004e94 <xTaskResumeAll>
 80043d2:	e76c      	b.n	80042ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043d6:	f000 fa15 	bl	8004804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043da:	f000 fd5b 	bl	8004e94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3738      	adds	r7, #56	; 0x38
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b090      	sub	sp, #64	; 0x40
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <xQueueGenericSendFromISR+0x3c>
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <xQueueGenericSendFromISR+0x40>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <xQueueGenericSendFromISR+0x42>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d103      	bne.n	8004456 <xQueueGenericSendFromISR+0x6a>
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <xQueueGenericSendFromISR+0x6e>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueGenericSendFromISR+0x70>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	623b      	str	r3, [r7, #32]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004476:	f001 ff27 	bl	80062c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800447a:	f3ef 8211 	mrs	r2, BASEPRI
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	61fa      	str	r2, [r7, #28]
 8004490:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004492:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <xQueueGenericSendFromISR+0xbc>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d12f      	bne.n	8004508 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044be:	f000 f911 	bl	80046e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ca:	d112      	bne.n	80044f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d016      	beq.n	8004502 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fef7 	bl	80052cc <xTaskRemoveFromEventList>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00e      	beq.n	8004502 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e007      	b.n	8004502 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044f6:	3301      	adds	r3, #1
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	b25a      	sxtb	r2, r3
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004502:	2301      	movs	r3, #1
 8004504:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004506:	e001      	b.n	800450c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004508:	2300      	movs	r3, #0
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004516:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800451a:	4618      	mov	r0, r3
 800451c:	3740      	adds	r7, #64	; 0x40
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08c      	sub	sp, #48	; 0x30
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004530:	2300      	movs	r3, #0
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <xQueueReceive+0x30>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	623b      	str	r3, [r7, #32]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <xQueueReceive+0x3e>
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <xQueueReceive+0x42>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueReceive+0x44>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xQueueReceive+0x5e>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61fb      	str	r3, [r7, #28]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004582:	f001 f865 	bl	8005650 <xTaskGetSchedulerState>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <xQueueReceive+0x6e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <xQueueReceive+0x72>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <xQueueReceive+0x74>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xQueueReceive+0x8e>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	61bb      	str	r3, [r7, #24]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045b2:	f001 fda7 	bl	8006104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01f      	beq.n	8004602 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c6:	f000 f8f7 	bl	80047b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	1e5a      	subs	r2, r3, #1
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00f      	beq.n	80045fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	3310      	adds	r3, #16
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fe74 	bl	80052cc <xTaskRemoveFromEventList>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045ea:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <xQueueReceive+0x1bc>)
 80045ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045fa:	f001 fdb3 	bl	8006164 <vPortExitCritical>
				return pdPASS;
 80045fe:	2301      	movs	r3, #1
 8004600:	e069      	b.n	80046d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004608:	f001 fdac 	bl	8006164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800460c:	2300      	movs	r3, #0
 800460e:	e062      	b.n	80046d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004616:	f107 0310 	add.w	r3, r7, #16
 800461a:	4618      	mov	r0, r3
 800461c:	f000 feba 	bl	8005394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004624:	f001 fd9e 	bl	8006164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004628:	f000 fc26 	bl	8004e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800462c:	f001 fd6a 	bl	8006104 <vPortEnterCritical>
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004636:	b25b      	sxtb	r3, r3
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800463c:	d103      	bne.n	8004646 <xQueueReceive+0x122>
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800464c:	b25b      	sxtb	r3, r3
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004652:	d103      	bne.n	800465c <xQueueReceive+0x138>
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800465c:	f001 fd82 	bl	8006164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004660:	1d3a      	adds	r2, r7, #4
 8004662:	f107 0310 	add.w	r3, r7, #16
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fea9 	bl	80053c0 <xTaskCheckForTimeOut>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d123      	bne.n	80046bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004676:	f000 f917 	bl	80048a8 <prvIsQueueEmpty>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d017      	beq.n	80046b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	3324      	adds	r3, #36	; 0x24
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fdcf 	bl	800522c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800468e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004690:	f000 f8b8 	bl	8004804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004694:	f000 fbfe 	bl	8004e94 <xTaskResumeAll>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d189      	bne.n	80045b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <xQueueReceive+0x1bc>)
 80046a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	e780      	b.n	80045b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b2:	f000 f8a7 	bl	8004804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046b6:	f000 fbed 	bl	8004e94 <xTaskResumeAll>
 80046ba:	e77a      	b.n	80045b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046be:	f000 f8a1 	bl	8004804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046c2:	f000 fbe7 	bl	8004e94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c8:	f000 f8ee 	bl	80048a8 <prvIsQueueEmpty>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f43f af6f 	beq.w	80045b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3730      	adds	r7, #48	; 0x30
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d14d      	bne.n	80047a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 ffbc 	bl	800568c <xTaskPriorityDisinherit>
 8004714:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	e043      	b.n	80047a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d119      	bne.n	8004758 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6858      	ldr	r0, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	461a      	mov	r2, r3
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	f002 f820 	bl	8006774 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	441a      	add	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	429a      	cmp	r2, r3
 800474c:	d32b      	bcc.n	80047a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	e026      	b.n	80047a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68d8      	ldr	r0, [r3, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	461a      	mov	r2, r3
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	f002 f806 	bl	8006774 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	425b      	negs	r3, r3
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d207      	bcs.n	8004794 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	425b      	negs	r3, r3
 800478e:	441a      	add	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d105      	bne.n	80047a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047ae:	697b      	ldr	r3, [r7, #20]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d018      	beq.n	80047fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	441a      	add	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d303      	bcc.n	80047ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68d9      	ldr	r1, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	461a      	mov	r2, r3
 80047f6:	6838      	ldr	r0, [r7, #0]
 80047f8:	f001 ffbc 	bl	8006774 <memcpy>
	}
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800480c:	f001 fc7a 	bl	8006104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004816:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004818:	e011      	b.n	800483e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d012      	beq.n	8004848 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3324      	adds	r3, #36	; 0x24
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fd50 	bl	80052cc <xTaskRemoveFromEventList>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004832:	f000 fe27 	bl	8005484 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	3b01      	subs	r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800483e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	dce9      	bgt.n	800481a <prvUnlockQueue+0x16>
 8004846:	e000      	b.n	800484a <prvUnlockQueue+0x46>
					break;
 8004848:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	22ff      	movs	r2, #255	; 0xff
 800484e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004852:	f001 fc87 	bl	8006164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004856:	f001 fc55 	bl	8006104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004860:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004862:	e011      	b.n	8004888 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d012      	beq.n	8004892 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3310      	adds	r3, #16
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fd2b 	bl	80052cc <xTaskRemoveFromEventList>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800487c:	f000 fe02 	bl	8005484 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004880:	7bbb      	ldrb	r3, [r7, #14]
 8004882:	3b01      	subs	r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800488c:	2b00      	cmp	r3, #0
 800488e:	dce9      	bgt.n	8004864 <prvUnlockQueue+0x60>
 8004890:	e000      	b.n	8004894 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004892:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	22ff      	movs	r2, #255	; 0xff
 8004898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800489c:	f001 fc62 	bl	8006164 <vPortExitCritical>
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048b0:	f001 fc28 	bl	8006104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e001      	b.n	80048c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048c6:	f001 fc4d 	bl	8006164 <vPortExitCritical>

	return xReturn;
 80048ca:	68fb      	ldr	r3, [r7, #12]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048dc:	f001 fc12 	bl	8006104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d102      	bne.n	80048f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e001      	b.n	80048f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048f6:	f001 fc35 	bl	8006164 <vPortExitCritical>

	return xReturn;
 80048fa:	68fb      	ldr	r3, [r7, #12]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e014      	b.n	800493e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004914:	4a0f      	ldr	r2, [pc, #60]	; (8004954 <vQueueAddToRegistry+0x50>)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004920:	490c      	ldr	r1, [pc, #48]	; (8004954 <vQueueAddToRegistry+0x50>)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800492a:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <vQueueAddToRegistry+0x50>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004936:	e006      	b.n	8004946 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3301      	adds	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b07      	cmp	r3, #7
 8004942:	d9e7      	bls.n	8004914 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	200008fc 	.word	0x200008fc

08004958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004968:	f001 fbcc 	bl	8006104 <vPortEnterCritical>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004972:	b25b      	sxtb	r3, r3
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004978:	d103      	bne.n	8004982 <vQueueWaitForMessageRestricted+0x2a>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004988:	b25b      	sxtb	r3, r3
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800498e:	d103      	bne.n	8004998 <vQueueWaitForMessageRestricted+0x40>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004998:	f001 fbe4 	bl	8006164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3324      	adds	r3, #36	; 0x24
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fc61 	bl	8005274 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7ff ff26 	bl	8004804 <prvUnlockQueue>
	}
 80049b8:	bf00      	nop
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08e      	sub	sp, #56	; 0x38
 80049c4:	af04      	add	r7, sp, #16
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	623b      	str	r3, [r7, #32]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xTaskCreateStatic+0x46>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	61fb      	str	r3, [r7, #28]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a06:	23bc      	movs	r3, #188	; 0xbc
 8004a08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2bbc      	cmp	r3, #188	; 0xbc
 8004a0e:	d00a      	beq.n	8004a26 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	61bb      	str	r3, [r7, #24]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01e      	beq.n	8004a6c <xTaskCreateStatic+0xac>
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a46:	2300      	movs	r3, #0
 8004a48:	9303      	str	r3, [sp, #12]
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	9302      	str	r3, [sp, #8]
 8004a4e:	f107 0314 	add.w	r3, r7, #20
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f850 	bl	8004b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a66:	f000 f8f3 	bl	8004c50 <prvAddNewTaskToReadyList>
 8004a6a:	e001      	b.n	8004a70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a70:	697b      	ldr	r3, [r7, #20]
	}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3728      	adds	r7, #40	; 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b08c      	sub	sp, #48	; 0x30
 8004a7e:	af04      	add	r7, sp, #16
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 fc5a 	bl	8006348 <pvPortMalloc>
 8004a94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00e      	beq.n	8004aba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a9c:	20bc      	movs	r0, #188	; 0xbc
 8004a9e:	f001 fc53 	bl	8006348 <pvPortMalloc>
 8004aa2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
 8004ab0:	e005      	b.n	8004abe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ab2:	6978      	ldr	r0, [r7, #20]
 8004ab4:	f001 fd14 	bl	80064e0 <vPortFree>
 8004ab8:	e001      	b.n	8004abe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d017      	beq.n	8004af4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9303      	str	r3, [sp, #12]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	9302      	str	r3, [sp, #8]
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f80e 	bl	8004b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ae8:	69f8      	ldr	r0, [r7, #28]
 8004aea:	f000 f8b1 	bl	8004c50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e002      	b.n	8004afa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004af8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004afa:	69bb      	ldr	r3, [r7, #24]
	}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	21a5      	movs	r1, #165	; 0xa5
 8004b1e:	f001 fe37 	bl	8006790 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	617b      	str	r3, [r7, #20]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01f      	beq.n	8004ba2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	e012      	b.n	8004b8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	7819      	ldrb	r1, [r3, #0]
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	3334      	adds	r3, #52	; 0x34
 8004b78:	460a      	mov	r2, r1
 8004b7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b0f      	cmp	r3, #15
 8004b92:	d9e9      	bls.n	8004b68 <prvInitialiseNewTask+0x64>
 8004b94:	e000      	b.n	8004b98 <prvInitialiseNewTask+0x94>
			{
				break;
 8004b96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba0:	e003      	b.n	8004baa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	2b37      	cmp	r3, #55	; 0x37
 8004bae:	d901      	bls.n	8004bb4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bb0:	2337      	movs	r3, #55	; 0x37
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff f978 	bl	8003ec0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	3318      	adds	r3, #24
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff f973 	bl	8003ec0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	3354      	adds	r3, #84	; 0x54
 8004c04:	2260      	movs	r2, #96	; 0x60
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fdc1 	bl	8006790 <memset>
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <prvInitialiseNewTask+0x140>)
 8004c12:	659a      	str	r2, [r3, #88]	; 0x58
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	4a0c      	ldr	r2, [pc, #48]	; (8004c48 <prvInitialiseNewTask+0x144>)
 8004c18:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <prvInitialiseNewTask+0x148>)
 8004c1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	69b8      	ldr	r0, [r7, #24]
 8004c26:	f001 f941 	bl	8005eac <pxPortInitialiseStack>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3c:	bf00      	nop
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	08007224 	.word	0x08007224
 8004c48:	08007244 	.word	0x08007244
 8004c4c:	08007204 	.word	0x08007204

08004c50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c58:	f001 fa54 	bl	8006104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <prvAddNewTaskToReadyList+0xc4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	4a2c      	ldr	r2, [pc, #176]	; (8004d14 <prvAddNewTaskToReadyList+0xc4>)
 8004c64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c66:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <prvAddNewTaskToReadyList+0xc8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c6e:	4a2a      	ldr	r2, [pc, #168]	; (8004d18 <prvAddNewTaskToReadyList+0xc8>)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c74:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <prvAddNewTaskToReadyList+0xc4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d110      	bne.n	8004c9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c7c:	f000 fc26 	bl	80054cc <prvInitialiseTaskLists>
 8004c80:	e00d      	b.n	8004c9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c82:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <prvAddNewTaskToReadyList+0xcc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c8a:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <prvAddNewTaskToReadyList+0xc8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d802      	bhi.n	8004c9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <prvAddNewTaskToReadyList+0xc8>)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c9e:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <prvAddNewTaskToReadyList+0xd0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <prvAddNewTaskToReadyList+0xd0>)
 8004ca6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <prvAddNewTaskToReadyList+0xd0>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <prvAddNewTaskToReadyList+0xd4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d903      	bls.n	8004cc4 <prvAddNewTaskToReadyList+0x74>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <prvAddNewTaskToReadyList+0xd4>)
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <prvAddNewTaskToReadyList+0xd8>)
 8004cd2:	441a      	add	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f7ff f8fd 	bl	8003eda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ce0:	f001 fa40 	bl	8006164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <prvAddNewTaskToReadyList+0xcc>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00e      	beq.n	8004d0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <prvAddNewTaskToReadyList+0xc8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d207      	bcs.n	8004d0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <prvAddNewTaskToReadyList+0xdc>)
 8004cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000e10 	.word	0x20000e10
 8004d18:	2000093c 	.word	0x2000093c
 8004d1c:	20000e1c 	.word	0x20000e1c
 8004d20:	20000e2c 	.word	0x20000e2c
 8004d24:	20000e18 	.word	0x20000e18
 8004d28:	20000940 	.word	0x20000940
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d42:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <vTaskDelay+0x60>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <vTaskDelay+0x30>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	60bb      	str	r3, [r7, #8]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d60:	f000 f88a 	bl	8004e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d64:	2100      	movs	r1, #0
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fcfe 	bl	8005768 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d6c:	f000 f892 	bl	8004e94 <xTaskResumeAll>
 8004d70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <vTaskDelay+0x64>)
 8004d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000e38 	.word	0x20000e38
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004da6:	463a      	mov	r2, r7
 8004da8:	1d39      	adds	r1, r7, #4
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff f832 	bl	8003e18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	9202      	str	r2, [sp, #8]
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	460a      	mov	r2, r1
 8004dc6:	4924      	ldr	r1, [pc, #144]	; (8004e58 <vTaskStartScheduler+0xc0>)
 8004dc8:	4824      	ldr	r0, [pc, #144]	; (8004e5c <vTaskStartScheduler+0xc4>)
 8004dca:	f7ff fdf9 	bl	80049c0 <xTaskCreateStatic>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <vTaskStartScheduler+0xc8>)
 8004dd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dd4:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <vTaskStartScheduler+0xc8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e001      	b.n	8004de6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d102      	bne.n	8004df2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dec:	f000 fd10 	bl	8005810 <xTimerCreateTimerTask>
 8004df0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d11b      	bne.n	8004e30 <vTaskStartScheduler+0x98>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	613b      	str	r3, [r7, #16]
}
 8004e0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e0c:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <vTaskStartScheduler+0xcc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3354      	adds	r3, #84	; 0x54
 8004e12:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <vTaskStartScheduler+0xd0>)
 8004e14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <vTaskStartScheduler+0xd4>)
 8004e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <vTaskStartScheduler+0xd8>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e24:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <vTaskStartScheduler+0xdc>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e2a:	f001 f8c9 	bl	8005fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e2e:	e00e      	b.n	8004e4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e36:	d10a      	bne.n	8004e4e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	60fb      	str	r3, [r7, #12]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <vTaskStartScheduler+0xb4>
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	0800718c 	.word	0x0800718c
 8004e5c:	0800549d 	.word	0x0800549d
 8004e60:	20000e34 	.word	0x20000e34
 8004e64:	2000093c 	.word	0x2000093c
 8004e68:	20000010 	.word	0x20000010
 8004e6c:	20000e30 	.word	0x20000e30
 8004e70:	20000e1c 	.word	0x20000e1c
 8004e74:	20000e14 	.word	0x20000e14

08004e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <vTaskSuspendAll+0x18>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	4a03      	ldr	r2, [pc, #12]	; (8004e90 <vTaskSuspendAll+0x18>)
 8004e84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	20000e38 	.word	0x20000e38

08004e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ea2:	4b42      	ldr	r3, [pc, #264]	; (8004fac <xTaskResumeAll+0x118>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	603b      	str	r3, [r7, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ec0:	f001 f920 	bl	8006104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ec4:	4b39      	ldr	r3, [pc, #228]	; (8004fac <xTaskResumeAll+0x118>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	4a38      	ldr	r2, [pc, #224]	; (8004fac <xTaskResumeAll+0x118>)
 8004ecc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ece:	4b37      	ldr	r3, [pc, #220]	; (8004fac <xTaskResumeAll+0x118>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d162      	bne.n	8004f9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ed6:	4b36      	ldr	r3, [pc, #216]	; (8004fb0 <xTaskResumeAll+0x11c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d05e      	beq.n	8004f9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ede:	e02f      	b.n	8004f40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee0:	4b34      	ldr	r3, [pc, #208]	; (8004fb4 <xTaskResumeAll+0x120>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3318      	adds	r3, #24
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff f851 	bl	8003f94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff f84c 	bl	8003f94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <xTaskResumeAll+0x124>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d903      	bls.n	8004f10 <xTaskResumeAll+0x7c>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	; (8004fb8 <xTaskResumeAll+0x124>)
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <xTaskResumeAll+0x128>)
 8004f1e:	441a      	add	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7fe ffd7 	bl	8003eda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f30:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <xTaskResumeAll+0x12c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f3a:	4b22      	ldr	r3, [pc, #136]	; (8004fc4 <xTaskResumeAll+0x130>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f40:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <xTaskResumeAll+0x120>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1cb      	bne.n	8004ee0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f4e:	f000 fb5f 	bl	8005610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f52:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <xTaskResumeAll+0x134>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d010      	beq.n	8004f80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f5e:	f000 f847 	bl	8004ff0 <xTaskIncrementTick>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f68:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <xTaskResumeAll+0x130>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f1      	bne.n	8004f5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f7a:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <xTaskResumeAll+0x134>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f80:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <xTaskResumeAll+0x130>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <xTaskResumeAll+0x138>)
 8004f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f9c:	f001 f8e2 	bl	8006164 <vPortExitCritical>

	return xAlreadyYielded;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000e38 	.word	0x20000e38
 8004fb0:	20000e10 	.word	0x20000e10
 8004fb4:	20000dd0 	.word	0x20000dd0
 8004fb8:	20000e18 	.word	0x20000e18
 8004fbc:	20000940 	.word	0x20000940
 8004fc0:	2000093c 	.word	0x2000093c
 8004fc4:	20000e24 	.word	0x20000e24
 8004fc8:	20000e20 	.word	0x20000e20
 8004fcc:	e000ed04 	.word	0xe000ed04

08004fd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <xTaskGetTickCount+0x1c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fdc:	687b      	ldr	r3, [r7, #4]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000e14 	.word	0x20000e14

08004ff0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffa:	4b4f      	ldr	r3, [pc, #316]	; (8005138 <xTaskIncrementTick+0x148>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 808f 	bne.w	8005122 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005004:	4b4d      	ldr	r3, [pc, #308]	; (800513c <xTaskIncrementTick+0x14c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800500c:	4a4b      	ldr	r2, [pc, #300]	; (800513c <xTaskIncrementTick+0x14c>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d120      	bne.n	800505a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005018:	4b49      	ldr	r3, [pc, #292]	; (8005140 <xTaskIncrementTick+0x150>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <xTaskIncrementTick+0x48>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	603b      	str	r3, [r7, #0]
}
 8005034:	bf00      	nop
 8005036:	e7fe      	b.n	8005036 <xTaskIncrementTick+0x46>
 8005038:	4b41      	ldr	r3, [pc, #260]	; (8005140 <xTaskIncrementTick+0x150>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <xTaskIncrementTick+0x154>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3f      	ldr	r2, [pc, #252]	; (8005140 <xTaskIncrementTick+0x150>)
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4a3f      	ldr	r2, [pc, #252]	; (8005144 <xTaskIncrementTick+0x154>)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <xTaskIncrementTick+0x158>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3301      	adds	r3, #1
 8005052:	4a3d      	ldr	r2, [pc, #244]	; (8005148 <xTaskIncrementTick+0x158>)
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	f000 fadb 	bl	8005610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800505a:	4b3c      	ldr	r3, [pc, #240]	; (800514c <xTaskIncrementTick+0x15c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	429a      	cmp	r2, r3
 8005062:	d349      	bcc.n	80050f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005064:	4b36      	ldr	r3, [pc, #216]	; (8005140 <xTaskIncrementTick+0x150>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506e:	4b37      	ldr	r3, [pc, #220]	; (800514c <xTaskIncrementTick+0x15c>)
 8005070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005074:	601a      	str	r2, [r3, #0]
					break;
 8005076:	e03f      	b.n	80050f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005078:	4b31      	ldr	r3, [pc, #196]	; (8005140 <xTaskIncrementTick+0x150>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d203      	bcs.n	8005098 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005090:	4a2e      	ldr	r2, [pc, #184]	; (800514c <xTaskIncrementTick+0x15c>)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005096:	e02f      	b.n	80050f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	3304      	adds	r3, #4
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe ff79 	bl	8003f94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	3318      	adds	r3, #24
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe ff70 	bl	8003f94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <xTaskIncrementTick+0x160>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d903      	bls.n	80050c8 <xTaskIncrementTick+0xd8>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a22      	ldr	r2, [pc, #136]	; (8005150 <xTaskIncrementTick+0x160>)
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4a1f      	ldr	r2, [pc, #124]	; (8005154 <xTaskIncrementTick+0x164>)
 80050d6:	441a      	add	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7fe fefb 	bl	8003eda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <xTaskIncrementTick+0x168>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d3b8      	bcc.n	8005064 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050f2:	2301      	movs	r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050f6:	e7b5      	b.n	8005064 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050f8:	4b17      	ldr	r3, [pc, #92]	; (8005158 <xTaskIncrementTick+0x168>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fe:	4915      	ldr	r1, [pc, #84]	; (8005154 <xTaskIncrementTick+0x164>)
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d901      	bls.n	8005114 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005110:	2301      	movs	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <xTaskIncrementTick+0x16c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800511c:	2301      	movs	r3, #1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e004      	b.n	800512c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005122:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <xTaskIncrementTick+0x170>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <xTaskIncrementTick+0x170>)
 800512a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800512c:	697b      	ldr	r3, [r7, #20]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000e38 	.word	0x20000e38
 800513c:	20000e14 	.word	0x20000e14
 8005140:	20000dc8 	.word	0x20000dc8
 8005144:	20000dcc 	.word	0x20000dcc
 8005148:	20000e28 	.word	0x20000e28
 800514c:	20000e30 	.word	0x20000e30
 8005150:	20000e18 	.word	0x20000e18
 8005154:	20000940 	.word	0x20000940
 8005158:	2000093c 	.word	0x2000093c
 800515c:	20000e24 	.word	0x20000e24
 8005160:	20000e20 	.word	0x20000e20

08005164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800516a:	4b2a      	ldr	r3, [pc, #168]	; (8005214 <vTaskSwitchContext+0xb0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005172:	4b29      	ldr	r3, [pc, #164]	; (8005218 <vTaskSwitchContext+0xb4>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005178:	e046      	b.n	8005208 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800517a:	4b27      	ldr	r3, [pc, #156]	; (8005218 <vTaskSwitchContext+0xb4>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005180:	4b26      	ldr	r3, [pc, #152]	; (800521c <vTaskSwitchContext+0xb8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e010      	b.n	80051aa <vTaskSwitchContext+0x46>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <vTaskSwitchContext+0x3e>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	491d      	ldr	r1, [pc, #116]	; (8005220 <vTaskSwitchContext+0xbc>)
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0e4      	beq.n	8005188 <vTaskSwitchContext+0x24>
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4a15      	ldr	r2, [pc, #84]	; (8005220 <vTaskSwitchContext+0xbc>)
 80051ca:	4413      	add	r3, r2
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	3308      	adds	r3, #8
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d104      	bne.n	80051ee <vTaskSwitchContext+0x8a>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <vTaskSwitchContext+0xc0>)
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <vTaskSwitchContext+0xb8>)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <vTaskSwitchContext+0xc0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3354      	adds	r3, #84	; 0x54
 8005204:	4a08      	ldr	r2, [pc, #32]	; (8005228 <vTaskSwitchContext+0xc4>)
 8005206:	6013      	str	r3, [r2, #0]
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	20000e38 	.word	0x20000e38
 8005218:	20000e24 	.word	0x20000e24
 800521c:	20000e18 	.word	0x20000e18
 8005220:	20000940 	.word	0x20000940
 8005224:	2000093c 	.word	0x2000093c
 8005228:	20000010 	.word	0x20000010

0800522c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60fb      	str	r3, [r7, #12]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005252:	4b07      	ldr	r3, [pc, #28]	; (8005270 <vTaskPlaceOnEventList+0x44>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3318      	adds	r3, #24
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fe fe61 	bl	8003f22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005260:	2101      	movs	r1, #1
 8005262:	6838      	ldr	r0, [r7, #0]
 8005264:	f000 fa80 	bl	8005768 <prvAddCurrentTaskToDelayedList>
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	2000093c 	.word	0x2000093c

08005274 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	617b      	str	r3, [r7, #20]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3318      	adds	r3, #24
 80052a2:	4619      	mov	r1, r3
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7fe fe18 	bl	8003eda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80052b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	68b8      	ldr	r0, [r7, #8]
 80052ba:	f000 fa55 	bl	8005768 <prvAddCurrentTaskToDelayedList>
	}
 80052be:	bf00      	nop
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	2000093c 	.word	0x2000093c

080052cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60fb      	str	r3, [r7, #12]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	3318      	adds	r3, #24
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fe49 	bl	8003f94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <xTaskRemoveFromEventList+0xb0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d11d      	bne.n	8005346 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	3304      	adds	r3, #4
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fe40 	bl	8003f94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <xTaskRemoveFromEventList+0xb4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	429a      	cmp	r2, r3
 800531e:	d903      	bls.n	8005328 <xTaskRemoveFromEventList+0x5c>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <xTaskRemoveFromEventList+0xb4>)
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4a13      	ldr	r2, [pc, #76]	; (8005384 <xTaskRemoveFromEventList+0xb8>)
 8005336:	441a      	add	r2, r3
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f7fe fdcb 	bl	8003eda <vListInsertEnd>
 8005344:	e005      	b.n	8005352 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3318      	adds	r3, #24
 800534a:	4619      	mov	r1, r3
 800534c:	480e      	ldr	r0, [pc, #56]	; (8005388 <xTaskRemoveFromEventList+0xbc>)
 800534e:	f7fe fdc4 	bl	8003eda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4b0d      	ldr	r3, [pc, #52]	; (800538c <xTaskRemoveFromEventList+0xc0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	429a      	cmp	r2, r3
 800535e:	d905      	bls.n	800536c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005360:	2301      	movs	r3, #1
 8005362:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005364:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <xTaskRemoveFromEventList+0xc4>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e001      	b.n	8005370 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005370:	697b      	ldr	r3, [r7, #20]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000e38 	.word	0x20000e38
 8005380:	20000e18 	.word	0x20000e18
 8005384:	20000940 	.word	0x20000940
 8005388:	20000dd0 	.word	0x20000dd0
 800538c:	2000093c 	.word	0x2000093c
 8005390:	20000e24 	.word	0x20000e24

08005394 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <vTaskInternalSetTimeOutState+0x24>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <vTaskInternalSetTimeOutState+0x28>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	605a      	str	r2, [r3, #4]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	20000e28 	.word	0x20000e28
 80053bc:	20000e14 	.word	0x20000e14

080053c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	613b      	str	r3, [r7, #16]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	60fb      	str	r3, [r7, #12]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005402:	f000 fe7f 	bl	8006104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005406:	4b1d      	ldr	r3, [pc, #116]	; (800547c <xTaskCheckForTimeOut+0xbc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800541e:	d102      	bne.n	8005426 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	e023      	b.n	800546e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <xTaskCheckForTimeOut+0xc0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d007      	beq.n	8005442 <xTaskCheckForTimeOut+0x82>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800543c:	2301      	movs	r3, #1
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	e015      	b.n	800546e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	429a      	cmp	r2, r3
 800544a:	d20b      	bcs.n	8005464 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad2      	subs	r2, r2, r3
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ff9b 	bl	8005394 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	e004      	b.n	800546e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800546a:	2301      	movs	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800546e:	f000 fe79 	bl	8006164 <vPortExitCritical>

	return xReturn;
 8005472:	69fb      	ldr	r3, [r7, #28]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3720      	adds	r7, #32
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000e14 	.word	0x20000e14
 8005480:	20000e28 	.word	0x20000e28

08005484 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <vTaskMissedYield+0x14>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
}
 800548e:	bf00      	nop
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	20000e24 	.word	0x20000e24

0800549c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054a4:	f000 f852 	bl	800554c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <prvIdleTask+0x28>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d9f9      	bls.n	80054a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <prvIdleTask+0x2c>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054c0:	e7f0      	b.n	80054a4 <prvIdleTask+0x8>
 80054c2:	bf00      	nop
 80054c4:	20000940 	.word	0x20000940
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054d2:	2300      	movs	r3, #0
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	e00c      	b.n	80054f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4a12      	ldr	r2, [pc, #72]	; (800552c <prvInitialiseTaskLists+0x60>)
 80054e4:	4413      	add	r3, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fcca 	bl	8003e80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3301      	adds	r3, #1
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b37      	cmp	r3, #55	; 0x37
 80054f6:	d9ef      	bls.n	80054d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054f8:	480d      	ldr	r0, [pc, #52]	; (8005530 <prvInitialiseTaskLists+0x64>)
 80054fa:	f7fe fcc1 	bl	8003e80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054fe:	480d      	ldr	r0, [pc, #52]	; (8005534 <prvInitialiseTaskLists+0x68>)
 8005500:	f7fe fcbe 	bl	8003e80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005504:	480c      	ldr	r0, [pc, #48]	; (8005538 <prvInitialiseTaskLists+0x6c>)
 8005506:	f7fe fcbb 	bl	8003e80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800550a:	480c      	ldr	r0, [pc, #48]	; (800553c <prvInitialiseTaskLists+0x70>)
 800550c:	f7fe fcb8 	bl	8003e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005510:	480b      	ldr	r0, [pc, #44]	; (8005540 <prvInitialiseTaskLists+0x74>)
 8005512:	f7fe fcb5 	bl	8003e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <prvInitialiseTaskLists+0x78>)
 8005518:	4a05      	ldr	r2, [pc, #20]	; (8005530 <prvInitialiseTaskLists+0x64>)
 800551a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <prvInitialiseTaskLists+0x7c>)
 800551e:	4a05      	ldr	r2, [pc, #20]	; (8005534 <prvInitialiseTaskLists+0x68>)
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000940 	.word	0x20000940
 8005530:	20000da0 	.word	0x20000da0
 8005534:	20000db4 	.word	0x20000db4
 8005538:	20000dd0 	.word	0x20000dd0
 800553c:	20000de4 	.word	0x20000de4
 8005540:	20000dfc 	.word	0x20000dfc
 8005544:	20000dc8 	.word	0x20000dc8
 8005548:	20000dcc 	.word	0x20000dcc

0800554c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005552:	e019      	b.n	8005588 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005554:	f000 fdd6 	bl	8006104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005558:	4b10      	ldr	r3, [pc, #64]	; (800559c <prvCheckTasksWaitingTermination+0x50>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe fd15 	bl	8003f94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800556a:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <prvCheckTasksWaitingTermination+0x54>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3b01      	subs	r3, #1
 8005570:	4a0b      	ldr	r2, [pc, #44]	; (80055a0 <prvCheckTasksWaitingTermination+0x54>)
 8005572:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <prvCheckTasksWaitingTermination+0x58>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3b01      	subs	r3, #1
 800557a:	4a0a      	ldr	r2, [pc, #40]	; (80055a4 <prvCheckTasksWaitingTermination+0x58>)
 800557c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800557e:	f000 fdf1 	bl	8006164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f810 	bl	80055a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <prvCheckTasksWaitingTermination+0x58>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e1      	bne.n	8005554 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000de4 	.word	0x20000de4
 80055a0:	20000e10 	.word	0x20000e10
 80055a4:	20000df8 	.word	0x20000df8

080055a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3354      	adds	r3, #84	; 0x54
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 f995 	bl	80068e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d108      	bne.n	80055d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 ff89 	bl	80064e0 <vPortFree>
				vPortFree( pxTCB );
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 ff86 	bl	80064e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055d4:	e018      	b.n	8005608 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d103      	bne.n	80055e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 ff7d 	bl	80064e0 <vPortFree>
	}
 80055e6:	e00f      	b.n	8005608 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d00a      	beq.n	8005608 <prvDeleteTCB+0x60>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	60fb      	str	r3, [r7, #12]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <prvDeleteTCB+0x5e>
	}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <prvResetNextTaskUnblockTime+0x38>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <prvResetNextTaskUnblockTime+0x3c>)
 8005622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005626:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005628:	e008      	b.n	800563c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <prvResetNextTaskUnblockTime+0x38>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <prvResetNextTaskUnblockTime+0x3c>)
 800563a:	6013      	str	r3, [r2, #0]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	20000dc8 	.word	0x20000dc8
 800564c:	20000e30 	.word	0x20000e30

08005650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <xTaskGetSchedulerState+0x34>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d102      	bne.n	8005664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800565e:	2301      	movs	r3, #1
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	e008      	b.n	8005676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <xTaskGetSchedulerState+0x38>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800566c:	2302      	movs	r3, #2
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	e001      	b.n	8005676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005676:	687b      	ldr	r3, [r7, #4]
	}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	20000e1c 	.word	0x20000e1c
 8005688:	20000e38 	.word	0x20000e38

0800568c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d056      	beq.n	8005750 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056a2:	4b2e      	ldr	r3, [pc, #184]	; (800575c <xTaskPriorityDisinherit+0xd0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d00a      	beq.n	80056c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60fb      	str	r3, [r7, #12]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	60bb      	str	r3, [r7, #8]
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	1e5a      	subs	r2, r3, #1
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d02c      	beq.n	8005750 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d128      	bne.n	8005750 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fc46 	bl	8003f94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <xTaskPriorityDisinherit+0xd4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d903      	bls.n	8005730 <xTaskPriorityDisinherit+0xa4>
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <xTaskPriorityDisinherit+0xd4>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a09      	ldr	r2, [pc, #36]	; (8005764 <xTaskPriorityDisinherit+0xd8>)
 800573e:	441a      	add	r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f7fe fbc7 	bl	8003eda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005750:	697b      	ldr	r3, [r7, #20]
	}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	2000093c 	.word	0x2000093c
 8005760:	20000e18 	.word	0x20000e18
 8005764:	20000940 	.word	0x20000940

08005768 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005772:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005778:	4b20      	ldr	r3, [pc, #128]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3304      	adds	r3, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe fc08 	bl	8003f94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578a:	d10a      	bne.n	80057a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d007      	beq.n	80057a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005792:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4819      	ldr	r0, [pc, #100]	; (8005800 <prvAddCurrentTaskToDelayedList+0x98>)
 800579c:	f7fe fb9d 	bl	8003eda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057a0:	e026      	b.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4413      	add	r3, r2
 80057a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d209      	bcs.n	80057ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f7fe fbab 	bl	8003f22 <vListInsert>
}
 80057cc:	e010      	b.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ce:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f7fe fba1 	bl	8003f22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <prvAddCurrentTaskToDelayedList+0xa4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d202      	bcs.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057ea:	4a08      	ldr	r2, [pc, #32]	; (800580c <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6013      	str	r3, [r2, #0]
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000e14 	.word	0x20000e14
 80057fc:	2000093c 	.word	0x2000093c
 8005800:	20000dfc 	.word	0x20000dfc
 8005804:	20000dcc 	.word	0x20000dcc
 8005808:	20000dc8 	.word	0x20000dc8
 800580c:	20000e30 	.word	0x20000e30

08005810 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800581a:	f000 fb07 	bl	8005e2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800581e:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <xTimerCreateTimerTask+0x80>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d021      	beq.n	800586a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800582e:	1d3a      	adds	r2, r7, #4
 8005830:	f107 0108 	add.w	r1, r7, #8
 8005834:	f107 030c 	add.w	r3, r7, #12
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe fb07 	bl	8003e4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	9202      	str	r2, [sp, #8]
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	2302      	movs	r3, #2
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2300      	movs	r3, #0
 800584e:	460a      	mov	r2, r1
 8005850:	4910      	ldr	r1, [pc, #64]	; (8005894 <xTimerCreateTimerTask+0x84>)
 8005852:	4811      	ldr	r0, [pc, #68]	; (8005898 <xTimerCreateTimerTask+0x88>)
 8005854:	f7ff f8b4 	bl	80049c0 <xTaskCreateStatic>
 8005858:	4603      	mov	r3, r0
 800585a:	4a10      	ldr	r2, [pc, #64]	; (800589c <xTimerCreateTimerTask+0x8c>)
 800585c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800585e:	4b0f      	ldr	r3, [pc, #60]	; (800589c <xTimerCreateTimerTask+0x8c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005866:	2301      	movs	r3, #1
 8005868:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005886:	697b      	ldr	r3, [r7, #20]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000e6c 	.word	0x20000e6c
 8005894:	08007194 	.word	0x08007194
 8005898:	080059d5 	.word	0x080059d5
 800589c:	20000e70 	.word	0x20000e70

080058a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	; 0x28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	623b      	str	r3, [r7, #32]
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058ce:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <xTimerGenericCommand+0x98>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d02a      	beq.n	800592c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b05      	cmp	r3, #5
 80058e6:	dc18      	bgt.n	800591a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058e8:	f7ff feb2 	bl	8005650 <xTaskGetSchedulerState>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d109      	bne.n	8005906 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <xTimerGenericCommand+0x98>)
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	f107 0110 	add.w	r1, r7, #16
 80058fa:	2300      	movs	r3, #0
 80058fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fe:	f7fe fc77 	bl	80041f0 <xQueueGenericSend>
 8005902:	6278      	str	r0, [r7, #36]	; 0x24
 8005904:	e012      	b.n	800592c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <xTimerGenericCommand+0x98>)
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f107 0110 	add.w	r1, r7, #16
 800590e:	2300      	movs	r3, #0
 8005910:	2200      	movs	r2, #0
 8005912:	f7fe fc6d 	bl	80041f0 <xQueueGenericSend>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24
 8005918:	e008      	b.n	800592c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <xTimerGenericCommand+0x98>)
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	f107 0110 	add.w	r1, r7, #16
 8005922:	2300      	movs	r3, #0
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	f7fe fd61 	bl	80043ec <xQueueGenericSendFromISR>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000e6c 	.word	0x20000e6c

0800593c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af02      	add	r7, sp, #8
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005946:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <prvProcessExpiredTimer+0x94>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fb1d 	bl	8003f94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d022      	beq.n	80059ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	18d1      	adds	r1, r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	6978      	ldr	r0, [r7, #20]
 8005976:	f000 f8d1 	bl	8005b1c <prvInsertTimerInActiveList>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01f      	beq.n	80059c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005980:	2300      	movs	r3, #0
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	2300      	movs	r3, #0
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	2100      	movs	r1, #0
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f7ff ff88 	bl	80058a0 <xTimerGenericCommand>
 8005990:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d113      	bne.n	80059c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	60fb      	str	r3, [r7, #12]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	6978      	ldr	r0, [r7, #20]
 80059c6:	4798      	blx	r3
}
 80059c8:	bf00      	nop
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000e64 	.word	0x20000e64

080059d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059dc:	f107 0308 	add.w	r3, r7, #8
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f857 	bl	8005a94 <prvGetNextExpireTime>
 80059e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f803 	bl	80059f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059f2:	f000 f8d5 	bl	8005ba0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059f6:	e7f1      	b.n	80059dc <prvTimerTask+0x8>

080059f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a02:	f7ff fa39 	bl	8004e78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f866 	bl	8005adc <prvSampleTimeNow>
 8005a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d130      	bne.n	8005a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <prvProcessTimerOrBlockTask+0x3c>
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d806      	bhi.n	8005a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a26:	f7ff fa35 	bl	8004e94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff ff85 	bl	800593c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a32:	e024      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <prvProcessTimerOrBlockTask+0x90>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <prvProcessTimerOrBlockTask+0x50>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <prvProcessTimerOrBlockTask+0x52>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <prvProcessTimerOrBlockTask+0x94>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f7fe ff7d 	bl	8004958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a5e:	f7ff fa19 	bl	8004e94 <xTaskResumeAll>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a68:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <prvProcessTimerOrBlockTask+0x98>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
}
 8005a78:	e001      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a7a:	f7ff fa0b 	bl	8004e94 <xTaskResumeAll>
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000e68 	.word	0x20000e68
 8005a8c:	20000e6c 	.word	0x20000e6c
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	; (8005ad8 <prvGetNextExpireTime+0x44>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <prvGetNextExpireTime+0x16>
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	e000      	b.n	8005aac <prvGetNextExpireTime+0x18>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <prvGetNextExpireTime+0x44>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e001      	b.n	8005ac8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000e64 	.word	0x20000e64

08005adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ae4:	f7ff fa74 	bl	8004fd0 <xTaskGetTickCount>
 8005ae8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <prvSampleTimeNow+0x3c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d205      	bcs.n	8005b00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005af4:	f000 f936 	bl	8005d64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e002      	b.n	8005b06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b06:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <prvSampleTimeNow+0x3c>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000e74 	.word	0x20000e74

08005b1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d812      	bhi.n	8005b68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d302      	bcc.n	8005b56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e01b      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <prvInsertTimerInActiveList+0x7c>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7fe f9de 	bl	8003f22 <vListInsert>
 8005b66:	e012      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d206      	bcs.n	8005b7e <prvInsertTimerInActiveList+0x62>
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e007      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b7e:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <prvInsertTimerInActiveList+0x80>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7fe f9ca 	bl	8003f22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000e68 	.word	0x20000e68
 8005b9c:	20000e64 	.word	0x20000e64

08005ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	; 0x38
 8005ba4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ba6:	e0ca      	b.n	8005d3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da18      	bge.n	8005be0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bae:	1d3b      	adds	r3, r7, #4
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	61fb      	str	r3, [r7, #28]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd6:	6850      	ldr	r0, [r2, #4]
 8005bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bda:	6892      	ldr	r2, [r2, #8]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f2c0 80aa 	blt.w	8005d3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe f9cb 	bl	8003f94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bfe:	463b      	mov	r3, r7
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff6b 	bl	8005adc <prvSampleTimeNow>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b09      	cmp	r3, #9
 8005c0c:	f200 8097 	bhi.w	8005d3e <prvProcessReceivedCommands+0x19e>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <prvProcessReceivedCommands+0x78>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c41 	.word	0x08005c41
 8005c24:	08005cb5 	.word	0x08005cb5
 8005c28:	08005cc9 	.word	0x08005cc9
 8005c2c:	08005d13 	.word	0x08005d13
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c41 	.word	0x08005c41
 8005c38:	08005cb5 	.word	0x08005cb5
 8005c3c:	08005cc9 	.word	0x08005cc9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	18d1      	adds	r1, r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c60:	f7ff ff5c 	bl	8005b1c <prvInsertTimerInActiveList>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d069      	beq.n	8005d3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05e      	beq.n	8005d3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	441a      	add	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c92:	f7ff fe05 	bl	80058a0 <xTimerGenericCommand>
 8005c96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d14f      	bne.n	8005d3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	61bb      	str	r3, [r7, #24]
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cc6:	e03a      	b.n	8005d3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	617b      	str	r3, [r7, #20]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	18d1      	adds	r1, r2, r3
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0c:	f7ff ff06 	bl	8005b1c <prvInsertTimerInActiveList>
					break;
 8005d10:	e015      	b.n	8005d3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d22:	f000 fbdd 	bl	80064e0 <vPortFree>
 8005d26:	e00a      	b.n	8005d3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d3a:	e000      	b.n	8005d3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d3e:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <prvProcessReceivedCommands+0x1c0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	1d39      	adds	r1, r7, #4
 8005d44:	2200      	movs	r2, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fbec 	bl	8004524 <xQueueReceive>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f47f af2a 	bne.w	8005ba8 <prvProcessReceivedCommands+0x8>
	}
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	3730      	adds	r7, #48	; 0x30
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000e6c 	.word	0x20000e6c

08005d64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d6a:	e048      	b.n	8005dfe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d6c:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <prvSwitchTimerLists+0xc0>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d76:	4b2b      	ldr	r3, [pc, #172]	; (8005e24 <prvSwitchTimerLists+0xc0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe f905 	bl	8003f94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d02e      	beq.n	8005dfe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4413      	add	r3, r2
 8005da8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d90e      	bls.n	8005dd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dbe:	4b19      	ldr	r3, [pc, #100]	; (8005e24 <prvSwitchTimerLists+0xc0>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7fe f8aa 	bl	8003f22 <vListInsert>
 8005dce:	e016      	b.n	8005dfe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	2100      	movs	r1, #0
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff fd60 	bl	80058a0 <xTimerGenericCommand>
 8005de0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	603b      	str	r3, [r7, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <prvSwitchTimerLists+0xc0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1b1      	bne.n	8005d6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <prvSwitchTimerLists+0xc0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <prvSwitchTimerLists+0xc4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <prvSwitchTimerLists+0xc0>)
 8005e14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e16:	4a04      	ldr	r2, [pc, #16]	; (8005e28 <prvSwitchTimerLists+0xc4>)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	6013      	str	r3, [r2, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000e64 	.word	0x20000e64
 8005e28:	20000e68 	.word	0x20000e68

08005e2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e32:	f000 f967 	bl	8006104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e36:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <prvCheckForValidListAndQueue+0x60>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d120      	bne.n	8005e80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e3e:	4814      	ldr	r0, [pc, #80]	; (8005e90 <prvCheckForValidListAndQueue+0x64>)
 8005e40:	f7fe f81e 	bl	8003e80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e44:	4813      	ldr	r0, [pc, #76]	; (8005e94 <prvCheckForValidListAndQueue+0x68>)
 8005e46:	f7fe f81b 	bl	8003e80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <prvCheckForValidListAndQueue+0x6c>)
 8005e4c:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <prvCheckForValidListAndQueue+0x64>)
 8005e4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <prvCheckForValidListAndQueue+0x70>)
 8005e52:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <prvCheckForValidListAndQueue+0x68>)
 8005e54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <prvCheckForValidListAndQueue+0x74>)
 8005e5c:	4a11      	ldr	r2, [pc, #68]	; (8005ea4 <prvCheckForValidListAndQueue+0x78>)
 8005e5e:	2110      	movs	r1, #16
 8005e60:	200a      	movs	r0, #10
 8005e62:	f7fe f929 	bl	80040b8 <xQueueGenericCreateStatic>
 8005e66:	4603      	mov	r3, r0
 8005e68:	4a08      	ldr	r2, [pc, #32]	; (8005e8c <prvCheckForValidListAndQueue+0x60>)
 8005e6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e6c:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <prvCheckForValidListAndQueue+0x60>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <prvCheckForValidListAndQueue+0x60>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	490b      	ldr	r1, [pc, #44]	; (8005ea8 <prvCheckForValidListAndQueue+0x7c>)
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fd42 	bl	8004904 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e80:	f000 f970 	bl	8006164 <vPortExitCritical>
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000e6c 	.word	0x20000e6c
 8005e90:	20000e3c 	.word	0x20000e3c
 8005e94:	20000e50 	.word	0x20000e50
 8005e98:	20000e64 	.word	0x20000e64
 8005e9c:	20000e68 	.word	0x20000e68
 8005ea0:	20000f18 	.word	0x20000f18
 8005ea4:	20000e78 	.word	0x20000e78
 8005ea8:	0800719c 	.word	0x0800719c

08005eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b04      	subs	r3, #4
 8005ebc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3b04      	subs	r3, #4
 8005eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f023 0201 	bic.w	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3b04      	subs	r3, #4
 8005eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005edc:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <pxPortInitialiseStack+0x64>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b14      	subs	r3, #20
 8005ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3b04      	subs	r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f06f 0202 	mvn.w	r2, #2
 8005efa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3b20      	subs	r3, #32
 8005f00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f02:	68fb      	ldr	r3, [r7, #12]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	08005f15 	.word	0x08005f15

08005f14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f1e:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <prvTaskExitError+0x54>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f26:	d00a      	beq.n	8005f3e <prvTaskExitError+0x2a>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	60fb      	str	r3, [r7, #12]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <prvTaskExitError+0x28>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	60bb      	str	r3, [r7, #8]
}
 8005f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f52:	bf00      	nop
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0fc      	beq.n	8005f54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	2000000c 	.word	0x2000000c
 8005f6c:	00000000 	.word	0x00000000

08005f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <pxCurrentTCBConst2>)
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	6808      	ldr	r0, [r1, #0]
 8005f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7a:	f380 8809 	msr	PSP, r0
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f380 8811 	msr	BASEPRI, r0
 8005f8a:	4770      	bx	lr
 8005f8c:	f3af 8000 	nop.w

08005f90 <pxCurrentTCBConst2>:
 8005f90:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop

08005f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f98:	4808      	ldr	r0, [pc, #32]	; (8005fbc <prvPortStartFirstTask+0x24>)
 8005f9a:	6800      	ldr	r0, [r0, #0]
 8005f9c:	6800      	ldr	r0, [r0, #0]
 8005f9e:	f380 8808 	msr	MSP, r0
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f380 8814 	msr	CONTROL, r0
 8005faa:	b662      	cpsie	i
 8005fac:	b661      	cpsie	f
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	df00      	svc	0
 8005fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fba:	bf00      	nop
 8005fbc:	e000ed08 	.word	0xe000ed08

08005fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fc6:	4b46      	ldr	r3, [pc, #280]	; (80060e0 <xPortStartScheduler+0x120>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a46      	ldr	r2, [pc, #280]	; (80060e4 <xPortStartScheduler+0x124>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10a      	bne.n	8005fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	613b      	str	r3, [r7, #16]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fe6:	4b3e      	ldr	r3, [pc, #248]	; (80060e0 <xPortStartScheduler+0x120>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3f      	ldr	r2, [pc, #252]	; (80060e8 <xPortStartScheduler+0x128>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d10a      	bne.n	8006006 <xPortStartScheduler+0x46>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	60fb      	str	r3, [r7, #12]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006006:	4b39      	ldr	r3, [pc, #228]	; (80060ec <xPortStartScheduler+0x12c>)
 8006008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <xPortStartScheduler+0x130>)
 800602c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800602e:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <xPortStartScheduler+0x134>)
 8006030:	2207      	movs	r2, #7
 8006032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006034:	e009      	b.n	800604a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <xPortStartScheduler+0x134>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	4a2d      	ldr	r2, [pc, #180]	; (80060f4 <xPortStartScheduler+0x134>)
 800603e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d0ef      	beq.n	8006036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006056:	4b27      	ldr	r3, [pc, #156]	; (80060f4 <xPortStartScheduler+0x134>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1c3 0307 	rsb	r3, r3, #7
 800605e:	2b04      	cmp	r3, #4
 8006060:	d00a      	beq.n	8006078 <xPortStartScheduler+0xb8>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	60bb      	str	r3, [r7, #8]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006078:	4b1e      	ldr	r3, [pc, #120]	; (80060f4 <xPortStartScheduler+0x134>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <xPortStartScheduler+0x134>)
 8006080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006082:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <xPortStartScheduler+0x134>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800608a:	4a1a      	ldr	r2, [pc, #104]	; (80060f4 <xPortStartScheduler+0x134>)
 800608c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006096:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <xPortStartScheduler+0x138>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a17      	ldr	r2, [pc, #92]	; (80060f8 <xPortStartScheduler+0x138>)
 800609c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <xPortStartScheduler+0x138>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <xPortStartScheduler+0x138>)
 80060a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060ae:	f000 f8dd 	bl	800626c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060b2:	4b12      	ldr	r3, [pc, #72]	; (80060fc <xPortStartScheduler+0x13c>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060b8:	f000 f8fc 	bl	80062b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060bc:	4b10      	ldr	r3, [pc, #64]	; (8006100 <xPortStartScheduler+0x140>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a0f      	ldr	r2, [pc, #60]	; (8006100 <xPortStartScheduler+0x140>)
 80060c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060c8:	f7ff ff66 	bl	8005f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060cc:	f7ff f84a 	bl	8005164 <vTaskSwitchContext>
	prvTaskExitError();
 80060d0:	f7ff ff20 	bl	8005f14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	e000ed00 	.word	0xe000ed00
 80060e4:	410fc271 	.word	0x410fc271
 80060e8:	410fc270 	.word	0x410fc270
 80060ec:	e000e400 	.word	0xe000e400
 80060f0:	20000f68 	.word	0x20000f68
 80060f4:	20000f6c 	.word	0x20000f6c
 80060f8:	e000ed20 	.word	0xe000ed20
 80060fc:	2000000c 	.word	0x2000000c
 8006100:	e000ef34 	.word	0xe000ef34

08006104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	607b      	str	r3, [r7, #4]
}
 800611c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <vPortEnterCritical+0x58>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3301      	adds	r3, #1
 8006124:	4a0d      	ldr	r2, [pc, #52]	; (800615c <vPortEnterCritical+0x58>)
 8006126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006128:	4b0c      	ldr	r3, [pc, #48]	; (800615c <vPortEnterCritical+0x58>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d10f      	bne.n	8006150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <vPortEnterCritical+0x5c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <vPortEnterCritical+0x4c>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	603b      	str	r3, [r7, #0]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <vPortEnterCritical+0x4a>
	}
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	2000000c 	.word	0x2000000c
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800616a:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <vPortExitCritical+0x50>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <vPortExitCritical+0x24>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	607b      	str	r3, [r7, #4]
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <vPortExitCritical+0x50>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3b01      	subs	r3, #1
 800618e:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <vPortExitCritical+0x50>)
 8006190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <vPortExitCritical+0x50>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <vPortExitCritical+0x42>
 800619a:	2300      	movs	r3, #0
 800619c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f383 8811 	msr	BASEPRI, r3
}
 80061a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	2000000c 	.word	0x2000000c
	...

080061c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061c0:	f3ef 8009 	mrs	r0, PSP
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4b15      	ldr	r3, [pc, #84]	; (8006220 <pxCurrentTCBConst>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	f01e 0f10 	tst.w	lr, #16
 80061d0:	bf08      	it	eq
 80061d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	6010      	str	r0, [r2, #0]
 80061dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061e4:	f380 8811 	msr	BASEPRI, r0
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f7fe ffb8 	bl	8005164 <vTaskSwitchContext>
 80061f4:	f04f 0000 	mov.w	r0, #0
 80061f8:	f380 8811 	msr	BASEPRI, r0
 80061fc:	bc09      	pop	{r0, r3}
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	6808      	ldr	r0, [r1, #0]
 8006202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006206:	f01e 0f10 	tst.w	lr, #16
 800620a:	bf08      	it	eq
 800620c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006210:	f380 8809 	msr	PSP, r0
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst>:
 8006220:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	607b      	str	r3, [r7, #4]
}
 8006240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006242:	f7fe fed5 	bl	8004ff0 <xTaskIncrementTick>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800624c:	4b06      	ldr	r3, [pc, #24]	; (8006268 <xPortSysTickHandler+0x40>)
 800624e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f383 8811 	msr	BASEPRI, r3
}
 800625e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006270:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <vPortSetupTimerInterrupt+0x34>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <vPortSetupTimerInterrupt+0x38>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <vPortSetupTimerInterrupt+0x3c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <vPortSetupTimerInterrupt+0x40>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	099b      	lsrs	r3, r3, #6
 8006288:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <vPortSetupTimerInterrupt+0x44>)
 800628a:	3b01      	subs	r3, #1
 800628c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800628e:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <vPortSetupTimerInterrupt+0x34>)
 8006290:	2207      	movs	r2, #7
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	e000e010 	.word	0xe000e010
 80062a4:	e000e018 	.word	0xe000e018
 80062a8:	20000000 	.word	0x20000000
 80062ac:	10624dd3 	.word	0x10624dd3
 80062b0:	e000e014 	.word	0xe000e014

080062b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062c4 <vPortEnableVFP+0x10>
 80062b8:	6801      	ldr	r1, [r0, #0]
 80062ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062be:	6001      	str	r1, [r0, #0]
 80062c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062c2:	bf00      	nop
 80062c4:	e000ed88 	.word	0xe000ed88

080062c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062ce:	f3ef 8305 	mrs	r3, IPSR
 80062d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b0f      	cmp	r3, #15
 80062d8:	d914      	bls.n	8006304 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062da:	4a17      	ldr	r2, [pc, #92]	; (8006338 <vPortValidateInterruptPriority+0x70>)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062e4:	4b15      	ldr	r3, [pc, #84]	; (800633c <vPortValidateInterruptPriority+0x74>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	7afa      	ldrb	r2, [r7, #11]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d20a      	bcs.n	8006304 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006304:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <vPortValidateInterruptPriority+0x78>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800630c:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <vPortValidateInterruptPriority+0x7c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d90a      	bls.n	800632a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	603b      	str	r3, [r7, #0]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <vPortValidateInterruptPriority+0x60>
	}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	e000e3f0 	.word	0xe000e3f0
 800633c:	20000f68 	.word	0x20000f68
 8006340:	e000ed0c 	.word	0xe000ed0c
 8006344:	20000f6c 	.word	0x20000f6c

08006348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	; 0x28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006354:	f7fe fd90 	bl	8004e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006358:	4b5b      	ldr	r3, [pc, #364]	; (80064c8 <pvPortMalloc+0x180>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006360:	f000 f920 	bl	80065a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006364:	4b59      	ldr	r3, [pc, #356]	; (80064cc <pvPortMalloc+0x184>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	f040 8093 	bne.w	8006498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01d      	beq.n	80063b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006378:	2208      	movs	r2, #8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4413      	add	r3, r2
 800637e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	2b00      	cmp	r3, #0
 8006388:	d014      	beq.n	80063b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f023 0307 	bic.w	r3, r3, #7
 8006390:	3308      	adds	r3, #8
 8006392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <pvPortMalloc+0x6c>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	617b      	str	r3, [r7, #20]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d06e      	beq.n	8006498 <pvPortMalloc+0x150>
 80063ba:	4b45      	ldr	r3, [pc, #276]	; (80064d0 <pvPortMalloc+0x188>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d869      	bhi.n	8006498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063c4:	4b43      	ldr	r3, [pc, #268]	; (80064d4 <pvPortMalloc+0x18c>)
 80063c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063c8:	4b42      	ldr	r3, [pc, #264]	; (80064d4 <pvPortMalloc+0x18c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ce:	e004      	b.n	80063da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d903      	bls.n	80063ec <pvPortMalloc+0xa4>
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f1      	bne.n	80063d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063ec:	4b36      	ldr	r3, [pc, #216]	; (80064c8 <pvPortMalloc+0x180>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d050      	beq.n	8006498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2208      	movs	r2, #8
 80063fc:	4413      	add	r3, r2
 80063fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	2308      	movs	r3, #8
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	429a      	cmp	r2, r3
 8006416:	d91f      	bls.n	8006458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4413      	add	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <pvPortMalloc+0xf8>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	613b      	str	r3, [r7, #16]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006452:	69b8      	ldr	r0, [r7, #24]
 8006454:	f000 f908 	bl	8006668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006458:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <pvPortMalloc+0x188>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	4a1b      	ldr	r2, [pc, #108]	; (80064d0 <pvPortMalloc+0x188>)
 8006464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <pvPortMalloc+0x188>)
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <pvPortMalloc+0x190>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d203      	bcs.n	800647a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006472:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <pvPortMalloc+0x188>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a18      	ldr	r2, [pc, #96]	; (80064d8 <pvPortMalloc+0x190>)
 8006478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <pvPortMalloc+0x184>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	431a      	orrs	r2, r3
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <pvPortMalloc+0x194>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3301      	adds	r3, #1
 8006494:	4a11      	ldr	r2, [pc, #68]	; (80064dc <pvPortMalloc+0x194>)
 8006496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006498:	f7fe fcfc 	bl	8004e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <pvPortMalloc+0x174>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60fb      	str	r3, [r7, #12]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <pvPortMalloc+0x172>
	return pvReturn;
 80064bc:	69fb      	ldr	r3, [r7, #28]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3728      	adds	r7, #40	; 0x28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20004b78 	.word	0x20004b78
 80064cc:	20004b8c 	.word	0x20004b8c
 80064d0:	20004b7c 	.word	0x20004b7c
 80064d4:	20004b70 	.word	0x20004b70
 80064d8:	20004b80 	.word	0x20004b80
 80064dc:	20004b84 	.word	0x20004b84

080064e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d04d      	beq.n	800658e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064f2:	2308      	movs	r3, #8
 80064f4:	425b      	negs	r3, r3
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4413      	add	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	4b24      	ldr	r3, [pc, #144]	; (8006598 <vPortFree+0xb8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4013      	ands	r3, r2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <vPortFree+0x44>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60fb      	str	r3, [r7, #12]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <vPortFree+0x62>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60bb      	str	r3, [r7, #8]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <vPortFree+0xb8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01e      	beq.n	800658e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d11a      	bne.n	800658e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <vPortFree+0xb8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	43db      	mvns	r3, r3
 8006562:	401a      	ands	r2, r3
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006568:	f7fe fc86 	bl	8004e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <vPortFree+0xbc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4413      	add	r3, r2
 8006576:	4a09      	ldr	r2, [pc, #36]	; (800659c <vPortFree+0xbc>)
 8006578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800657a:	6938      	ldr	r0, [r7, #16]
 800657c:	f000 f874 	bl	8006668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <vPortFree+0xc0>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	4a06      	ldr	r2, [pc, #24]	; (80065a0 <vPortFree+0xc0>)
 8006588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800658a:	f7fe fc83 	bl	8004e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800658e:	bf00      	nop
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20004b8c 	.word	0x20004b8c
 800659c:	20004b7c 	.word	0x20004b7c
 80065a0:	20004b88 	.word	0x20004b88

080065a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <prvHeapInit+0xac>)
 80065b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00c      	beq.n	80065d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3307      	adds	r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	4a1f      	ldr	r2, [pc, #124]	; (8006650 <prvHeapInit+0xac>)
 80065d4:	4413      	add	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065dc:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <prvHeapInit+0xb0>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065e2:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <prvHeapInit+0xb0>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065f0:	2208      	movs	r2, #8
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a15      	ldr	r2, [pc, #84]	; (8006658 <prvHeapInit+0xb4>)
 8006604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <prvHeapInit+0xb4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800660e:	4b12      	ldr	r3, [pc, #72]	; (8006658 <prvHeapInit+0xb4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <prvHeapInit+0xb4>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a0a      	ldr	r2, [pc, #40]	; (800665c <prvHeapInit+0xb8>)
 8006632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	4a09      	ldr	r2, [pc, #36]	; (8006660 <prvHeapInit+0xbc>)
 800663a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800663c:	4b09      	ldr	r3, [pc, #36]	; (8006664 <prvHeapInit+0xc0>)
 800663e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	20000f70 	.word	0x20000f70
 8006654:	20004b70 	.word	0x20004b70
 8006658:	20004b78 	.word	0x20004b78
 800665c:	20004b80 	.word	0x20004b80
 8006660:	20004b7c 	.word	0x20004b7c
 8006664:	20004b8c 	.word	0x20004b8c

08006668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006670:	4b28      	ldr	r3, [pc, #160]	; (8006714 <prvInsertBlockIntoFreeList+0xac>)
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e002      	b.n	800667c <prvInsertBlockIntoFreeList+0x14>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	d8f7      	bhi.n	8006676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	4413      	add	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d108      	bne.n	80066aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	441a      	add	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d118      	bne.n	80066f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <prvInsertBlockIntoFreeList+0xb0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d00d      	beq.n	80066e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	441a      	add	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e008      	b.n	80066f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066e6:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <prvInsertBlockIntoFreeList+0xb0>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e003      	b.n	80066f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d002      	beq.n	8006706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20004b70 	.word	0x20004b70
 8006718:	20004b78 	.word	0x20004b78

0800671c <__errno>:
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <__errno+0x8>)
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000010 	.word	0x20000010

08006728 <__libc_init_array>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4d0d      	ldr	r5, [pc, #52]	; (8006760 <__libc_init_array+0x38>)
 800672c:	4c0d      	ldr	r4, [pc, #52]	; (8006764 <__libc_init_array+0x3c>)
 800672e:	1b64      	subs	r4, r4, r5
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	2600      	movs	r6, #0
 8006734:	42a6      	cmp	r6, r4
 8006736:	d109      	bne.n	800674c <__libc_init_array+0x24>
 8006738:	4d0b      	ldr	r5, [pc, #44]	; (8006768 <__libc_init_array+0x40>)
 800673a:	4c0c      	ldr	r4, [pc, #48]	; (800676c <__libc_init_array+0x44>)
 800673c:	f000 fcf8 	bl	8007130 <_init>
 8006740:	1b64      	subs	r4, r4, r5
 8006742:	10a4      	asrs	r4, r4, #2
 8006744:	2600      	movs	r6, #0
 8006746:	42a6      	cmp	r6, r4
 8006748:	d105      	bne.n	8006756 <__libc_init_array+0x2e>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006750:	4798      	blx	r3
 8006752:	3601      	adds	r6, #1
 8006754:	e7ee      	b.n	8006734 <__libc_init_array+0xc>
 8006756:	f855 3b04 	ldr.w	r3, [r5], #4
 800675a:	4798      	blx	r3
 800675c:	3601      	adds	r6, #1
 800675e:	e7f2      	b.n	8006746 <__libc_init_array+0x1e>
 8006760:	080072a0 	.word	0x080072a0
 8006764:	080072a0 	.word	0x080072a0
 8006768:	080072a0 	.word	0x080072a0
 800676c:	080072a4 	.word	0x080072a4

08006770 <__retarget_lock_acquire_recursive>:
 8006770:	4770      	bx	lr

08006772 <__retarget_lock_release_recursive>:
 8006772:	4770      	bx	lr

08006774 <memcpy>:
 8006774:	440a      	add	r2, r1
 8006776:	4291      	cmp	r1, r2
 8006778:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800677c:	d100      	bne.n	8006780 <memcpy+0xc>
 800677e:	4770      	bx	lr
 8006780:	b510      	push	{r4, lr}
 8006782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800678a:	4291      	cmp	r1, r2
 800678c:	d1f9      	bne.n	8006782 <memcpy+0xe>
 800678e:	bd10      	pop	{r4, pc}

08006790 <memset>:
 8006790:	4402      	add	r2, r0
 8006792:	4603      	mov	r3, r0
 8006794:	4293      	cmp	r3, r2
 8006796:	d100      	bne.n	800679a <memset+0xa>
 8006798:	4770      	bx	lr
 800679a:	f803 1b01 	strb.w	r1, [r3], #1
 800679e:	e7f9      	b.n	8006794 <memset+0x4>

080067a0 <sbrk_aligned>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4e0e      	ldr	r6, [pc, #56]	; (80067dc <sbrk_aligned+0x3c>)
 80067a4:	460c      	mov	r4, r1
 80067a6:	6831      	ldr	r1, [r6, #0]
 80067a8:	4605      	mov	r5, r0
 80067aa:	b911      	cbnz	r1, 80067b2 <sbrk_aligned+0x12>
 80067ac:	f000 f8f6 	bl	800699c <_sbrk_r>
 80067b0:	6030      	str	r0, [r6, #0]
 80067b2:	4621      	mov	r1, r4
 80067b4:	4628      	mov	r0, r5
 80067b6:	f000 f8f1 	bl	800699c <_sbrk_r>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	d00a      	beq.n	80067d4 <sbrk_aligned+0x34>
 80067be:	1cc4      	adds	r4, r0, #3
 80067c0:	f024 0403 	bic.w	r4, r4, #3
 80067c4:	42a0      	cmp	r0, r4
 80067c6:	d007      	beq.n	80067d8 <sbrk_aligned+0x38>
 80067c8:	1a21      	subs	r1, r4, r0
 80067ca:	4628      	mov	r0, r5
 80067cc:	f000 f8e6 	bl	800699c <_sbrk_r>
 80067d0:	3001      	adds	r0, #1
 80067d2:	d101      	bne.n	80067d8 <sbrk_aligned+0x38>
 80067d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80067d8:	4620      	mov	r0, r4
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	20004b98 	.word	0x20004b98

080067e0 <_malloc_r>:
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	1ccd      	adds	r5, r1, #3
 80067e6:	f025 0503 	bic.w	r5, r5, #3
 80067ea:	3508      	adds	r5, #8
 80067ec:	2d0c      	cmp	r5, #12
 80067ee:	bf38      	it	cc
 80067f0:	250c      	movcc	r5, #12
 80067f2:	2d00      	cmp	r5, #0
 80067f4:	4607      	mov	r7, r0
 80067f6:	db01      	blt.n	80067fc <_malloc_r+0x1c>
 80067f8:	42a9      	cmp	r1, r5
 80067fa:	d905      	bls.n	8006808 <_malloc_r+0x28>
 80067fc:	230c      	movs	r3, #12
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	2600      	movs	r6, #0
 8006802:	4630      	mov	r0, r6
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006808:	4e2e      	ldr	r6, [pc, #184]	; (80068c4 <_malloc_r+0xe4>)
 800680a:	f000 f8f7 	bl	80069fc <__malloc_lock>
 800680e:	6833      	ldr	r3, [r6, #0]
 8006810:	461c      	mov	r4, r3
 8006812:	bb34      	cbnz	r4, 8006862 <_malloc_r+0x82>
 8006814:	4629      	mov	r1, r5
 8006816:	4638      	mov	r0, r7
 8006818:	f7ff ffc2 	bl	80067a0 <sbrk_aligned>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	4604      	mov	r4, r0
 8006820:	d14d      	bne.n	80068be <_malloc_r+0xde>
 8006822:	6834      	ldr	r4, [r6, #0]
 8006824:	4626      	mov	r6, r4
 8006826:	2e00      	cmp	r6, #0
 8006828:	d140      	bne.n	80068ac <_malloc_r+0xcc>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	4631      	mov	r1, r6
 800682e:	4638      	mov	r0, r7
 8006830:	eb04 0803 	add.w	r8, r4, r3
 8006834:	f000 f8b2 	bl	800699c <_sbrk_r>
 8006838:	4580      	cmp	r8, r0
 800683a:	d13a      	bne.n	80068b2 <_malloc_r+0xd2>
 800683c:	6821      	ldr	r1, [r4, #0]
 800683e:	3503      	adds	r5, #3
 8006840:	1a6d      	subs	r5, r5, r1
 8006842:	f025 0503 	bic.w	r5, r5, #3
 8006846:	3508      	adds	r5, #8
 8006848:	2d0c      	cmp	r5, #12
 800684a:	bf38      	it	cc
 800684c:	250c      	movcc	r5, #12
 800684e:	4629      	mov	r1, r5
 8006850:	4638      	mov	r0, r7
 8006852:	f7ff ffa5 	bl	80067a0 <sbrk_aligned>
 8006856:	3001      	adds	r0, #1
 8006858:	d02b      	beq.n	80068b2 <_malloc_r+0xd2>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	442b      	add	r3, r5
 800685e:	6023      	str	r3, [r4, #0]
 8006860:	e00e      	b.n	8006880 <_malloc_r+0xa0>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	1b52      	subs	r2, r2, r5
 8006866:	d41e      	bmi.n	80068a6 <_malloc_r+0xc6>
 8006868:	2a0b      	cmp	r2, #11
 800686a:	d916      	bls.n	800689a <_malloc_r+0xba>
 800686c:	1961      	adds	r1, r4, r5
 800686e:	42a3      	cmp	r3, r4
 8006870:	6025      	str	r5, [r4, #0]
 8006872:	bf18      	it	ne
 8006874:	6059      	strne	r1, [r3, #4]
 8006876:	6863      	ldr	r3, [r4, #4]
 8006878:	bf08      	it	eq
 800687a:	6031      	streq	r1, [r6, #0]
 800687c:	5162      	str	r2, [r4, r5]
 800687e:	604b      	str	r3, [r1, #4]
 8006880:	4638      	mov	r0, r7
 8006882:	f104 060b 	add.w	r6, r4, #11
 8006886:	f000 f8bf 	bl	8006a08 <__malloc_unlock>
 800688a:	f026 0607 	bic.w	r6, r6, #7
 800688e:	1d23      	adds	r3, r4, #4
 8006890:	1af2      	subs	r2, r6, r3
 8006892:	d0b6      	beq.n	8006802 <_malloc_r+0x22>
 8006894:	1b9b      	subs	r3, r3, r6
 8006896:	50a3      	str	r3, [r4, r2]
 8006898:	e7b3      	b.n	8006802 <_malloc_r+0x22>
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	42a3      	cmp	r3, r4
 800689e:	bf0c      	ite	eq
 80068a0:	6032      	streq	r2, [r6, #0]
 80068a2:	605a      	strne	r2, [r3, #4]
 80068a4:	e7ec      	b.n	8006880 <_malloc_r+0xa0>
 80068a6:	4623      	mov	r3, r4
 80068a8:	6864      	ldr	r4, [r4, #4]
 80068aa:	e7b2      	b.n	8006812 <_malloc_r+0x32>
 80068ac:	4634      	mov	r4, r6
 80068ae:	6876      	ldr	r6, [r6, #4]
 80068b0:	e7b9      	b.n	8006826 <_malloc_r+0x46>
 80068b2:	230c      	movs	r3, #12
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4638      	mov	r0, r7
 80068b8:	f000 f8a6 	bl	8006a08 <__malloc_unlock>
 80068bc:	e7a1      	b.n	8006802 <_malloc_r+0x22>
 80068be:	6025      	str	r5, [r4, #0]
 80068c0:	e7de      	b.n	8006880 <_malloc_r+0xa0>
 80068c2:	bf00      	nop
 80068c4:	20004b94 	.word	0x20004b94

080068c8 <cleanup_glue>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	460c      	mov	r4, r1
 80068cc:	6809      	ldr	r1, [r1, #0]
 80068ce:	4605      	mov	r5, r0
 80068d0:	b109      	cbz	r1, 80068d6 <cleanup_glue+0xe>
 80068d2:	f7ff fff9 	bl	80068c8 <cleanup_glue>
 80068d6:	4621      	mov	r1, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068de:	f000 b899 	b.w	8006a14 <_free_r>
	...

080068e4 <_reclaim_reent>:
 80068e4:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <_reclaim_reent+0xb4>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4283      	cmp	r3, r0
 80068ea:	b570      	push	{r4, r5, r6, lr}
 80068ec:	4604      	mov	r4, r0
 80068ee:	d051      	beq.n	8006994 <_reclaim_reent+0xb0>
 80068f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068f2:	b143      	cbz	r3, 8006906 <_reclaim_reent+0x22>
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d14a      	bne.n	8006990 <_reclaim_reent+0xac>
 80068fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068fc:	6819      	ldr	r1, [r3, #0]
 80068fe:	b111      	cbz	r1, 8006906 <_reclaim_reent+0x22>
 8006900:	4620      	mov	r0, r4
 8006902:	f000 f887 	bl	8006a14 <_free_r>
 8006906:	6961      	ldr	r1, [r4, #20]
 8006908:	b111      	cbz	r1, 8006910 <_reclaim_reent+0x2c>
 800690a:	4620      	mov	r0, r4
 800690c:	f000 f882 	bl	8006a14 <_free_r>
 8006910:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006912:	b111      	cbz	r1, 800691a <_reclaim_reent+0x36>
 8006914:	4620      	mov	r0, r4
 8006916:	f000 f87d 	bl	8006a14 <_free_r>
 800691a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800691c:	b111      	cbz	r1, 8006924 <_reclaim_reent+0x40>
 800691e:	4620      	mov	r0, r4
 8006920:	f000 f878 	bl	8006a14 <_free_r>
 8006924:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006926:	b111      	cbz	r1, 800692e <_reclaim_reent+0x4a>
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f873 	bl	8006a14 <_free_r>
 800692e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006930:	b111      	cbz	r1, 8006938 <_reclaim_reent+0x54>
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f86e 	bl	8006a14 <_free_r>
 8006938:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800693a:	b111      	cbz	r1, 8006942 <_reclaim_reent+0x5e>
 800693c:	4620      	mov	r0, r4
 800693e:	f000 f869 	bl	8006a14 <_free_r>
 8006942:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006944:	b111      	cbz	r1, 800694c <_reclaim_reent+0x68>
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f864 	bl	8006a14 <_free_r>
 800694c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800694e:	b111      	cbz	r1, 8006956 <_reclaim_reent+0x72>
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f85f 	bl	8006a14 <_free_r>
 8006956:	69a3      	ldr	r3, [r4, #24]
 8006958:	b1e3      	cbz	r3, 8006994 <_reclaim_reent+0xb0>
 800695a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800695c:	4620      	mov	r0, r4
 800695e:	4798      	blx	r3
 8006960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006962:	b1b9      	cbz	r1, 8006994 <_reclaim_reent+0xb0>
 8006964:	4620      	mov	r0, r4
 8006966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800696a:	f7ff bfad 	b.w	80068c8 <cleanup_glue>
 800696e:	5949      	ldr	r1, [r1, r5]
 8006970:	b941      	cbnz	r1, 8006984 <_reclaim_reent+0xa0>
 8006972:	3504      	adds	r5, #4
 8006974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006976:	2d80      	cmp	r5, #128	; 0x80
 8006978:	68d9      	ldr	r1, [r3, #12]
 800697a:	d1f8      	bne.n	800696e <_reclaim_reent+0x8a>
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f849 	bl	8006a14 <_free_r>
 8006982:	e7ba      	b.n	80068fa <_reclaim_reent+0x16>
 8006984:	680e      	ldr	r6, [r1, #0]
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f844 	bl	8006a14 <_free_r>
 800698c:	4631      	mov	r1, r6
 800698e:	e7ef      	b.n	8006970 <_reclaim_reent+0x8c>
 8006990:	2500      	movs	r5, #0
 8006992:	e7ef      	b.n	8006974 <_reclaim_reent+0x90>
 8006994:	bd70      	pop	{r4, r5, r6, pc}
 8006996:	bf00      	nop
 8006998:	20000010 	.word	0x20000010

0800699c <_sbrk_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d06      	ldr	r5, [pc, #24]	; (80069b8 <_sbrk_r+0x1c>)
 80069a0:	2300      	movs	r3, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	f7fa f962 	bl	8000c70 <_sbrk>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_sbrk_r+0x1a>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_sbrk_r+0x1a>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	20004b9c 	.word	0x20004b9c

080069bc <siprintf>:
 80069bc:	b40e      	push	{r1, r2, r3}
 80069be:	b500      	push	{lr}
 80069c0:	b09c      	sub	sp, #112	; 0x70
 80069c2:	ab1d      	add	r3, sp, #116	; 0x74
 80069c4:	9002      	str	r0, [sp, #8]
 80069c6:	9006      	str	r0, [sp, #24]
 80069c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069cc:	4809      	ldr	r0, [pc, #36]	; (80069f4 <siprintf+0x38>)
 80069ce:	9107      	str	r1, [sp, #28]
 80069d0:	9104      	str	r1, [sp, #16]
 80069d2:	4909      	ldr	r1, [pc, #36]	; (80069f8 <siprintf+0x3c>)
 80069d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d8:	9105      	str	r1, [sp, #20]
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	a902      	add	r1, sp, #8
 80069e0:	f000 f8c0 	bl	8006b64 <_svfiprintf_r>
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	b01c      	add	sp, #112	; 0x70
 80069ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f0:	b003      	add	sp, #12
 80069f2:	4770      	bx	lr
 80069f4:	20000010 	.word	0x20000010
 80069f8:	ffff0208 	.word	0xffff0208

080069fc <__malloc_lock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_lock+0x8>)
 80069fe:	f7ff beb7 	b.w	8006770 <__retarget_lock_acquire_recursive>
 8006a02:	bf00      	nop
 8006a04:	20004b90 	.word	0x20004b90

08006a08 <__malloc_unlock>:
 8006a08:	4801      	ldr	r0, [pc, #4]	; (8006a10 <__malloc_unlock+0x8>)
 8006a0a:	f7ff beb2 	b.w	8006772 <__retarget_lock_release_recursive>
 8006a0e:	bf00      	nop
 8006a10:	20004b90 	.word	0x20004b90

08006a14 <_free_r>:
 8006a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d044      	beq.n	8006aa4 <_free_r+0x90>
 8006a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1e:	9001      	str	r0, [sp, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f1a1 0404 	sub.w	r4, r1, #4
 8006a26:	bfb8      	it	lt
 8006a28:	18e4      	addlt	r4, r4, r3
 8006a2a:	f7ff ffe7 	bl	80069fc <__malloc_lock>
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <_free_r+0x94>)
 8006a30:	9801      	ldr	r0, [sp, #4]
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	b933      	cbnz	r3, 8006a44 <_free_r+0x30>
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	6014      	str	r4, [r2, #0]
 8006a3a:	b003      	add	sp, #12
 8006a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a40:	f7ff bfe2 	b.w	8006a08 <__malloc_unlock>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d908      	bls.n	8006a5a <_free_r+0x46>
 8006a48:	6825      	ldr	r5, [r4, #0]
 8006a4a:	1961      	adds	r1, r4, r5
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	bf01      	itttt	eq
 8006a50:	6819      	ldreq	r1, [r3, #0]
 8006a52:	685b      	ldreq	r3, [r3, #4]
 8006a54:	1949      	addeq	r1, r1, r5
 8006a56:	6021      	streq	r1, [r4, #0]
 8006a58:	e7ed      	b.n	8006a36 <_free_r+0x22>
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	b10b      	cbz	r3, 8006a64 <_free_r+0x50>
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d9fa      	bls.n	8006a5a <_free_r+0x46>
 8006a64:	6811      	ldr	r1, [r2, #0]
 8006a66:	1855      	adds	r5, r2, r1
 8006a68:	42a5      	cmp	r5, r4
 8006a6a:	d10b      	bne.n	8006a84 <_free_r+0x70>
 8006a6c:	6824      	ldr	r4, [r4, #0]
 8006a6e:	4421      	add	r1, r4
 8006a70:	1854      	adds	r4, r2, r1
 8006a72:	42a3      	cmp	r3, r4
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	d1e0      	bne.n	8006a3a <_free_r+0x26>
 8006a78:	681c      	ldr	r4, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	6053      	str	r3, [r2, #4]
 8006a7e:	4421      	add	r1, r4
 8006a80:	6011      	str	r1, [r2, #0]
 8006a82:	e7da      	b.n	8006a3a <_free_r+0x26>
 8006a84:	d902      	bls.n	8006a8c <_free_r+0x78>
 8006a86:	230c      	movs	r3, #12
 8006a88:	6003      	str	r3, [r0, #0]
 8006a8a:	e7d6      	b.n	8006a3a <_free_r+0x26>
 8006a8c:	6825      	ldr	r5, [r4, #0]
 8006a8e:	1961      	adds	r1, r4, r5
 8006a90:	428b      	cmp	r3, r1
 8006a92:	bf04      	itt	eq
 8006a94:	6819      	ldreq	r1, [r3, #0]
 8006a96:	685b      	ldreq	r3, [r3, #4]
 8006a98:	6063      	str	r3, [r4, #4]
 8006a9a:	bf04      	itt	eq
 8006a9c:	1949      	addeq	r1, r1, r5
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	6054      	str	r4, [r2, #4]
 8006aa2:	e7ca      	b.n	8006a3a <_free_r+0x26>
 8006aa4:	b003      	add	sp, #12
 8006aa6:	bd30      	pop	{r4, r5, pc}
 8006aa8:	20004b94 	.word	0x20004b94

08006aac <__ssputs_r>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	688e      	ldr	r6, [r1, #8]
 8006ab2:	429e      	cmp	r6, r3
 8006ab4:	4682      	mov	sl, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	4690      	mov	r8, r2
 8006aba:	461f      	mov	r7, r3
 8006abc:	d838      	bhi.n	8006b30 <__ssputs_r+0x84>
 8006abe:	898a      	ldrh	r2, [r1, #12]
 8006ac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ac4:	d032      	beq.n	8006b2c <__ssputs_r+0x80>
 8006ac6:	6825      	ldr	r5, [r4, #0]
 8006ac8:	6909      	ldr	r1, [r1, #16]
 8006aca:	eba5 0901 	sub.w	r9, r5, r1
 8006ace:	6965      	ldr	r5, [r4, #20]
 8006ad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ad8:	3301      	adds	r3, #1
 8006ada:	444b      	add	r3, r9
 8006adc:	106d      	asrs	r5, r5, #1
 8006ade:	429d      	cmp	r5, r3
 8006ae0:	bf38      	it	cc
 8006ae2:	461d      	movcc	r5, r3
 8006ae4:	0553      	lsls	r3, r2, #21
 8006ae6:	d531      	bpl.n	8006b4c <__ssputs_r+0xa0>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7ff fe79 	bl	80067e0 <_malloc_r>
 8006aee:	4606      	mov	r6, r0
 8006af0:	b950      	cbnz	r0, 8006b08 <__ssputs_r+0x5c>
 8006af2:	230c      	movs	r3, #12
 8006af4:	f8ca 3000 	str.w	r3, [sl]
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b08:	6921      	ldr	r1, [r4, #16]
 8006b0a:	464a      	mov	r2, r9
 8006b0c:	f7ff fe32 	bl	8006774 <memcpy>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	6126      	str	r6, [r4, #16]
 8006b1e:	6165      	str	r5, [r4, #20]
 8006b20:	444e      	add	r6, r9
 8006b22:	eba5 0509 	sub.w	r5, r5, r9
 8006b26:	6026      	str	r6, [r4, #0]
 8006b28:	60a5      	str	r5, [r4, #8]
 8006b2a:	463e      	mov	r6, r7
 8006b2c:	42be      	cmp	r6, r7
 8006b2e:	d900      	bls.n	8006b32 <__ssputs_r+0x86>
 8006b30:	463e      	mov	r6, r7
 8006b32:	6820      	ldr	r0, [r4, #0]
 8006b34:	4632      	mov	r2, r6
 8006b36:	4641      	mov	r1, r8
 8006b38:	f000 faa8 	bl	800708c <memmove>
 8006b3c:	68a3      	ldr	r3, [r4, #8]
 8006b3e:	1b9b      	subs	r3, r3, r6
 8006b40:	60a3      	str	r3, [r4, #8]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	4433      	add	r3, r6
 8006b46:	6023      	str	r3, [r4, #0]
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e7db      	b.n	8006b04 <__ssputs_r+0x58>
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	f000 fab7 	bl	80070c0 <_realloc_r>
 8006b52:	4606      	mov	r6, r0
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d1e1      	bne.n	8006b1c <__ssputs_r+0x70>
 8006b58:	6921      	ldr	r1, [r4, #16]
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	f7ff ff5a 	bl	8006a14 <_free_r>
 8006b60:	e7c7      	b.n	8006af2 <__ssputs_r+0x46>
	...

08006b64 <_svfiprintf_r>:
 8006b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	4698      	mov	r8, r3
 8006b6a:	898b      	ldrh	r3, [r1, #12]
 8006b6c:	061b      	lsls	r3, r3, #24
 8006b6e:	b09d      	sub	sp, #116	; 0x74
 8006b70:	4607      	mov	r7, r0
 8006b72:	460d      	mov	r5, r1
 8006b74:	4614      	mov	r4, r2
 8006b76:	d50e      	bpl.n	8006b96 <_svfiprintf_r+0x32>
 8006b78:	690b      	ldr	r3, [r1, #16]
 8006b7a:	b963      	cbnz	r3, 8006b96 <_svfiprintf_r+0x32>
 8006b7c:	2140      	movs	r1, #64	; 0x40
 8006b7e:	f7ff fe2f 	bl	80067e0 <_malloc_r>
 8006b82:	6028      	str	r0, [r5, #0]
 8006b84:	6128      	str	r0, [r5, #16]
 8006b86:	b920      	cbnz	r0, 8006b92 <_svfiprintf_r+0x2e>
 8006b88:	230c      	movs	r3, #12
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b90:	e0d1      	b.n	8006d36 <_svfiprintf_r+0x1d2>
 8006b92:	2340      	movs	r3, #64	; 0x40
 8006b94:	616b      	str	r3, [r5, #20]
 8006b96:	2300      	movs	r3, #0
 8006b98:	9309      	str	r3, [sp, #36]	; 0x24
 8006b9a:	2320      	movs	r3, #32
 8006b9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ba4:	2330      	movs	r3, #48	; 0x30
 8006ba6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d50 <_svfiprintf_r+0x1ec>
 8006baa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bae:	f04f 0901 	mov.w	r9, #1
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	469a      	mov	sl, r3
 8006bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bba:	b10a      	cbz	r2, 8006bc0 <_svfiprintf_r+0x5c>
 8006bbc:	2a25      	cmp	r2, #37	; 0x25
 8006bbe:	d1f9      	bne.n	8006bb4 <_svfiprintf_r+0x50>
 8006bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8006bc4:	d00b      	beq.n	8006bde <_svfiprintf_r+0x7a>
 8006bc6:	465b      	mov	r3, fp
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f7ff ff6d 	bl	8006aac <__ssputs_r>
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	f000 80aa 	beq.w	8006d2c <_svfiprintf_r+0x1c8>
 8006bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bda:	445a      	add	r2, fp
 8006bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8006bde:	f89a 3000 	ldrb.w	r3, [sl]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80a2 	beq.w	8006d2c <_svfiprintf_r+0x1c8>
 8006be8:	2300      	movs	r3, #0
 8006bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bf2:	f10a 0a01 	add.w	sl, sl, #1
 8006bf6:	9304      	str	r3, [sp, #16]
 8006bf8:	9307      	str	r3, [sp, #28]
 8006bfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bfe:	931a      	str	r3, [sp, #104]	; 0x68
 8006c00:	4654      	mov	r4, sl
 8006c02:	2205      	movs	r2, #5
 8006c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c08:	4851      	ldr	r0, [pc, #324]	; (8006d50 <_svfiprintf_r+0x1ec>)
 8006c0a:	f7f9 fb09 	bl	8000220 <memchr>
 8006c0e:	9a04      	ldr	r2, [sp, #16]
 8006c10:	b9d8      	cbnz	r0, 8006c4a <_svfiprintf_r+0xe6>
 8006c12:	06d0      	lsls	r0, r2, #27
 8006c14:	bf44      	itt	mi
 8006c16:	2320      	movmi	r3, #32
 8006c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c1c:	0711      	lsls	r1, r2, #28
 8006c1e:	bf44      	itt	mi
 8006c20:	232b      	movmi	r3, #43	; 0x2b
 8006c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c26:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2c:	d015      	beq.n	8006c5a <_svfiprintf_r+0xf6>
 8006c2e:	9a07      	ldr	r2, [sp, #28]
 8006c30:	4654      	mov	r4, sl
 8006c32:	2000      	movs	r0, #0
 8006c34:	f04f 0c0a 	mov.w	ip, #10
 8006c38:	4621      	mov	r1, r4
 8006c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c3e:	3b30      	subs	r3, #48	; 0x30
 8006c40:	2b09      	cmp	r3, #9
 8006c42:	d94e      	bls.n	8006ce2 <_svfiprintf_r+0x17e>
 8006c44:	b1b0      	cbz	r0, 8006c74 <_svfiprintf_r+0x110>
 8006c46:	9207      	str	r2, [sp, #28]
 8006c48:	e014      	b.n	8006c74 <_svfiprintf_r+0x110>
 8006c4a:	eba0 0308 	sub.w	r3, r0, r8
 8006c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	46a2      	mov	sl, r4
 8006c58:	e7d2      	b.n	8006c00 <_svfiprintf_r+0x9c>
 8006c5a:	9b03      	ldr	r3, [sp, #12]
 8006c5c:	1d19      	adds	r1, r3, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	9103      	str	r1, [sp, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bfbb      	ittet	lt
 8006c66:	425b      	neglt	r3, r3
 8006c68:	f042 0202 	orrlt.w	r2, r2, #2
 8006c6c:	9307      	strge	r3, [sp, #28]
 8006c6e:	9307      	strlt	r3, [sp, #28]
 8006c70:	bfb8      	it	lt
 8006c72:	9204      	strlt	r2, [sp, #16]
 8006c74:	7823      	ldrb	r3, [r4, #0]
 8006c76:	2b2e      	cmp	r3, #46	; 0x2e
 8006c78:	d10c      	bne.n	8006c94 <_svfiprintf_r+0x130>
 8006c7a:	7863      	ldrb	r3, [r4, #1]
 8006c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7e:	d135      	bne.n	8006cec <_svfiprintf_r+0x188>
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	1d1a      	adds	r2, r3, #4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	9203      	str	r2, [sp, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bfb8      	it	lt
 8006c8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c90:	3402      	adds	r4, #2
 8006c92:	9305      	str	r3, [sp, #20]
 8006c94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d60 <_svfiprintf_r+0x1fc>
 8006c98:	7821      	ldrb	r1, [r4, #0]
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	f7f9 fabf 	bl	8000220 <memchr>
 8006ca2:	b140      	cbz	r0, 8006cb6 <_svfiprintf_r+0x152>
 8006ca4:	2340      	movs	r3, #64	; 0x40
 8006ca6:	eba0 000a 	sub.w	r0, r0, sl
 8006caa:	fa03 f000 	lsl.w	r0, r3, r0
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	4303      	orrs	r3, r0
 8006cb2:	3401      	adds	r4, #1
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cba:	4826      	ldr	r0, [pc, #152]	; (8006d54 <_svfiprintf_r+0x1f0>)
 8006cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cc0:	2206      	movs	r2, #6
 8006cc2:	f7f9 faad 	bl	8000220 <memchr>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d038      	beq.n	8006d3c <_svfiprintf_r+0x1d8>
 8006cca:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <_svfiprintf_r+0x1f4>)
 8006ccc:	bb1b      	cbnz	r3, 8006d16 <_svfiprintf_r+0x1b2>
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	3307      	adds	r3, #7
 8006cd2:	f023 0307 	bic.w	r3, r3, #7
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	9303      	str	r3, [sp, #12]
 8006cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cdc:	4433      	add	r3, r6
 8006cde:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce0:	e767      	b.n	8006bb2 <_svfiprintf_r+0x4e>
 8006ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	2001      	movs	r0, #1
 8006cea:	e7a5      	b.n	8006c38 <_svfiprintf_r+0xd4>
 8006cec:	2300      	movs	r3, #0
 8006cee:	3401      	adds	r4, #1
 8006cf0:	9305      	str	r3, [sp, #20]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f04f 0c0a 	mov.w	ip, #10
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cfe:	3a30      	subs	r2, #48	; 0x30
 8006d00:	2a09      	cmp	r2, #9
 8006d02:	d903      	bls.n	8006d0c <_svfiprintf_r+0x1a8>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0c5      	beq.n	8006c94 <_svfiprintf_r+0x130>
 8006d08:	9105      	str	r1, [sp, #20]
 8006d0a:	e7c3      	b.n	8006c94 <_svfiprintf_r+0x130>
 8006d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d10:	4604      	mov	r4, r0
 8006d12:	2301      	movs	r3, #1
 8006d14:	e7f0      	b.n	8006cf8 <_svfiprintf_r+0x194>
 8006d16:	ab03      	add	r3, sp, #12
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <_svfiprintf_r+0x1f8>)
 8006d1e:	a904      	add	r1, sp, #16
 8006d20:	4638      	mov	r0, r7
 8006d22:	f3af 8000 	nop.w
 8006d26:	1c42      	adds	r2, r0, #1
 8006d28:	4606      	mov	r6, r0
 8006d2a:	d1d6      	bne.n	8006cda <_svfiprintf_r+0x176>
 8006d2c:	89ab      	ldrh	r3, [r5, #12]
 8006d2e:	065b      	lsls	r3, r3, #25
 8006d30:	f53f af2c 	bmi.w	8006b8c <_svfiprintf_r+0x28>
 8006d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d36:	b01d      	add	sp, #116	; 0x74
 8006d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3c:	ab03      	add	r3, sp, #12
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	462a      	mov	r2, r5
 8006d42:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <_svfiprintf_r+0x1f8>)
 8006d44:	a904      	add	r1, sp, #16
 8006d46:	4638      	mov	r0, r7
 8006d48:	f000 f87a 	bl	8006e40 <_printf_i>
 8006d4c:	e7eb      	b.n	8006d26 <_svfiprintf_r+0x1c2>
 8006d4e:	bf00      	nop
 8006d50:	08007264 	.word	0x08007264
 8006d54:	0800726e 	.word	0x0800726e
 8006d58:	00000000 	.word	0x00000000
 8006d5c:	08006aad 	.word	0x08006aad
 8006d60:	0800726a 	.word	0x0800726a

08006d64 <_printf_common>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	4616      	mov	r6, r2
 8006d6a:	4699      	mov	r9, r3
 8006d6c:	688a      	ldr	r2, [r1, #8]
 8006d6e:	690b      	ldr	r3, [r1, #16]
 8006d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	bfb8      	it	lt
 8006d78:	4613      	movlt	r3, r2
 8006d7a:	6033      	str	r3, [r6, #0]
 8006d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d80:	4607      	mov	r7, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	b10a      	cbz	r2, 8006d8a <_printf_common+0x26>
 8006d86:	3301      	adds	r3, #1
 8006d88:	6033      	str	r3, [r6, #0]
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	0699      	lsls	r1, r3, #26
 8006d8e:	bf42      	ittt	mi
 8006d90:	6833      	ldrmi	r3, [r6, #0]
 8006d92:	3302      	addmi	r3, #2
 8006d94:	6033      	strmi	r3, [r6, #0]
 8006d96:	6825      	ldr	r5, [r4, #0]
 8006d98:	f015 0506 	ands.w	r5, r5, #6
 8006d9c:	d106      	bne.n	8006dac <_printf_common+0x48>
 8006d9e:	f104 0a19 	add.w	sl, r4, #25
 8006da2:	68e3      	ldr	r3, [r4, #12]
 8006da4:	6832      	ldr	r2, [r6, #0]
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	42ab      	cmp	r3, r5
 8006daa:	dc26      	bgt.n	8006dfa <_printf_common+0x96>
 8006dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006db0:	1e13      	subs	r3, r2, #0
 8006db2:	6822      	ldr	r2, [r4, #0]
 8006db4:	bf18      	it	ne
 8006db6:	2301      	movne	r3, #1
 8006db8:	0692      	lsls	r2, r2, #26
 8006dba:	d42b      	bmi.n	8006e14 <_printf_common+0xb0>
 8006dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	47c0      	blx	r8
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d01e      	beq.n	8006e08 <_printf_common+0xa4>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	68e5      	ldr	r5, [r4, #12]
 8006dce:	6832      	ldr	r2, [r6, #0]
 8006dd0:	f003 0306 	and.w	r3, r3, #6
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	bf08      	it	eq
 8006dd8:	1aad      	subeq	r5, r5, r2
 8006dda:	68a3      	ldr	r3, [r4, #8]
 8006ddc:	6922      	ldr	r2, [r4, #16]
 8006dde:	bf0c      	ite	eq
 8006de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006de4:	2500      	movne	r5, #0
 8006de6:	4293      	cmp	r3, r2
 8006de8:	bfc4      	itt	gt
 8006dea:	1a9b      	subgt	r3, r3, r2
 8006dec:	18ed      	addgt	r5, r5, r3
 8006dee:	2600      	movs	r6, #0
 8006df0:	341a      	adds	r4, #26
 8006df2:	42b5      	cmp	r5, r6
 8006df4:	d11a      	bne.n	8006e2c <_printf_common+0xc8>
 8006df6:	2000      	movs	r0, #0
 8006df8:	e008      	b.n	8006e0c <_printf_common+0xa8>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	4649      	mov	r1, r9
 8006e00:	4638      	mov	r0, r7
 8006e02:	47c0      	blx	r8
 8006e04:	3001      	adds	r0, #1
 8006e06:	d103      	bne.n	8006e10 <_printf_common+0xac>
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e10:	3501      	adds	r5, #1
 8006e12:	e7c6      	b.n	8006da2 <_printf_common+0x3e>
 8006e14:	18e1      	adds	r1, r4, r3
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	2030      	movs	r0, #48	; 0x30
 8006e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e1e:	4422      	add	r2, r4
 8006e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e28:	3302      	adds	r3, #2
 8006e2a:	e7c7      	b.n	8006dbc <_printf_common+0x58>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4622      	mov	r2, r4
 8006e30:	4649      	mov	r1, r9
 8006e32:	4638      	mov	r0, r7
 8006e34:	47c0      	blx	r8
 8006e36:	3001      	adds	r0, #1
 8006e38:	d0e6      	beq.n	8006e08 <_printf_common+0xa4>
 8006e3a:	3601      	adds	r6, #1
 8006e3c:	e7d9      	b.n	8006df2 <_printf_common+0x8e>
	...

08006e40 <_printf_i>:
 8006e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e44:	7e0f      	ldrb	r7, [r1, #24]
 8006e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e48:	2f78      	cmp	r7, #120	; 0x78
 8006e4a:	4691      	mov	r9, r2
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	469a      	mov	sl, r3
 8006e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e56:	d807      	bhi.n	8006e68 <_printf_i+0x28>
 8006e58:	2f62      	cmp	r7, #98	; 0x62
 8006e5a:	d80a      	bhi.n	8006e72 <_printf_i+0x32>
 8006e5c:	2f00      	cmp	r7, #0
 8006e5e:	f000 80d8 	beq.w	8007012 <_printf_i+0x1d2>
 8006e62:	2f58      	cmp	r7, #88	; 0x58
 8006e64:	f000 80a3 	beq.w	8006fae <_printf_i+0x16e>
 8006e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e70:	e03a      	b.n	8006ee8 <_printf_i+0xa8>
 8006e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e76:	2b15      	cmp	r3, #21
 8006e78:	d8f6      	bhi.n	8006e68 <_printf_i+0x28>
 8006e7a:	a101      	add	r1, pc, #4	; (adr r1, 8006e80 <_printf_i+0x40>)
 8006e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e80:	08006ed9 	.word	0x08006ed9
 8006e84:	08006eed 	.word	0x08006eed
 8006e88:	08006e69 	.word	0x08006e69
 8006e8c:	08006e69 	.word	0x08006e69
 8006e90:	08006e69 	.word	0x08006e69
 8006e94:	08006e69 	.word	0x08006e69
 8006e98:	08006eed 	.word	0x08006eed
 8006e9c:	08006e69 	.word	0x08006e69
 8006ea0:	08006e69 	.word	0x08006e69
 8006ea4:	08006e69 	.word	0x08006e69
 8006ea8:	08006e69 	.word	0x08006e69
 8006eac:	08006ff9 	.word	0x08006ff9
 8006eb0:	08006f1d 	.word	0x08006f1d
 8006eb4:	08006fdb 	.word	0x08006fdb
 8006eb8:	08006e69 	.word	0x08006e69
 8006ebc:	08006e69 	.word	0x08006e69
 8006ec0:	0800701b 	.word	0x0800701b
 8006ec4:	08006e69 	.word	0x08006e69
 8006ec8:	08006f1d 	.word	0x08006f1d
 8006ecc:	08006e69 	.word	0x08006e69
 8006ed0:	08006e69 	.word	0x08006e69
 8006ed4:	08006fe3 	.word	0x08006fe3
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	1d1a      	adds	r2, r3, #4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	602a      	str	r2, [r5, #0]
 8006ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0a3      	b.n	8007034 <_printf_i+0x1f4>
 8006eec:	6820      	ldr	r0, [r4, #0]
 8006eee:	6829      	ldr	r1, [r5, #0]
 8006ef0:	0606      	lsls	r6, r0, #24
 8006ef2:	f101 0304 	add.w	r3, r1, #4
 8006ef6:	d50a      	bpl.n	8006f0e <_printf_i+0xce>
 8006ef8:	680e      	ldr	r6, [r1, #0]
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	2e00      	cmp	r6, #0
 8006efe:	da03      	bge.n	8006f08 <_printf_i+0xc8>
 8006f00:	232d      	movs	r3, #45	; 0x2d
 8006f02:	4276      	negs	r6, r6
 8006f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f08:	485e      	ldr	r0, [pc, #376]	; (8007084 <_printf_i+0x244>)
 8006f0a:	230a      	movs	r3, #10
 8006f0c:	e019      	b.n	8006f42 <_printf_i+0x102>
 8006f0e:	680e      	ldr	r6, [r1, #0]
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f16:	bf18      	it	ne
 8006f18:	b236      	sxthne	r6, r6
 8006f1a:	e7ef      	b.n	8006efc <_printf_i+0xbc>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	6820      	ldr	r0, [r4, #0]
 8006f20:	1d19      	adds	r1, r3, #4
 8006f22:	6029      	str	r1, [r5, #0]
 8006f24:	0601      	lsls	r1, r0, #24
 8006f26:	d501      	bpl.n	8006f2c <_printf_i+0xec>
 8006f28:	681e      	ldr	r6, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <_printf_i+0xf2>
 8006f2c:	0646      	lsls	r6, r0, #25
 8006f2e:	d5fb      	bpl.n	8006f28 <_printf_i+0xe8>
 8006f30:	881e      	ldrh	r6, [r3, #0]
 8006f32:	4854      	ldr	r0, [pc, #336]	; (8007084 <_printf_i+0x244>)
 8006f34:	2f6f      	cmp	r7, #111	; 0x6f
 8006f36:	bf0c      	ite	eq
 8006f38:	2308      	moveq	r3, #8
 8006f3a:	230a      	movne	r3, #10
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f42:	6865      	ldr	r5, [r4, #4]
 8006f44:	60a5      	str	r5, [r4, #8]
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	bfa2      	ittt	ge
 8006f4a:	6821      	ldrge	r1, [r4, #0]
 8006f4c:	f021 0104 	bicge.w	r1, r1, #4
 8006f50:	6021      	strge	r1, [r4, #0]
 8006f52:	b90e      	cbnz	r6, 8006f58 <_printf_i+0x118>
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	d04d      	beq.n	8006ff4 <_printf_i+0x1b4>
 8006f58:	4615      	mov	r5, r2
 8006f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f62:	5dc7      	ldrb	r7, [r0, r7]
 8006f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f68:	4637      	mov	r7, r6
 8006f6a:	42bb      	cmp	r3, r7
 8006f6c:	460e      	mov	r6, r1
 8006f6e:	d9f4      	bls.n	8006f5a <_printf_i+0x11a>
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d10b      	bne.n	8006f8c <_printf_i+0x14c>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	07de      	lsls	r6, r3, #31
 8006f78:	d508      	bpl.n	8006f8c <_printf_i+0x14c>
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	6861      	ldr	r1, [r4, #4]
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	bfde      	ittt	le
 8006f82:	2330      	movle	r3, #48	; 0x30
 8006f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f8c:	1b52      	subs	r2, r2, r5
 8006f8e:	6122      	str	r2, [r4, #16]
 8006f90:	f8cd a000 	str.w	sl, [sp]
 8006f94:	464b      	mov	r3, r9
 8006f96:	aa03      	add	r2, sp, #12
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	f7ff fee2 	bl	8006d64 <_printf_common>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d14c      	bne.n	800703e <_printf_i+0x1fe>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fa8:	b004      	add	sp, #16
 8006faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fae:	4835      	ldr	r0, [pc, #212]	; (8007084 <_printf_i+0x244>)
 8006fb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fb4:	6829      	ldr	r1, [r5, #0]
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fbc:	6029      	str	r1, [r5, #0]
 8006fbe:	061d      	lsls	r5, r3, #24
 8006fc0:	d514      	bpl.n	8006fec <_printf_i+0x1ac>
 8006fc2:	07df      	lsls	r7, r3, #31
 8006fc4:	bf44      	itt	mi
 8006fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8006fca:	6023      	strmi	r3, [r4, #0]
 8006fcc:	b91e      	cbnz	r6, 8006fd6 <_printf_i+0x196>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	f023 0320 	bic.w	r3, r3, #32
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	2310      	movs	r3, #16
 8006fd8:	e7b0      	b.n	8006f3c <_printf_i+0xfc>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	f043 0320 	orr.w	r3, r3, #32
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	2378      	movs	r3, #120	; 0x78
 8006fe4:	4828      	ldr	r0, [pc, #160]	; (8007088 <_printf_i+0x248>)
 8006fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fea:	e7e3      	b.n	8006fb4 <_printf_i+0x174>
 8006fec:	0659      	lsls	r1, r3, #25
 8006fee:	bf48      	it	mi
 8006ff0:	b2b6      	uxthmi	r6, r6
 8006ff2:	e7e6      	b.n	8006fc2 <_printf_i+0x182>
 8006ff4:	4615      	mov	r5, r2
 8006ff6:	e7bb      	b.n	8006f70 <_printf_i+0x130>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	6826      	ldr	r6, [r4, #0]
 8006ffc:	6961      	ldr	r1, [r4, #20]
 8006ffe:	1d18      	adds	r0, r3, #4
 8007000:	6028      	str	r0, [r5, #0]
 8007002:	0635      	lsls	r5, r6, #24
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	d501      	bpl.n	800700c <_printf_i+0x1cc>
 8007008:	6019      	str	r1, [r3, #0]
 800700a:	e002      	b.n	8007012 <_printf_i+0x1d2>
 800700c:	0670      	lsls	r0, r6, #25
 800700e:	d5fb      	bpl.n	8007008 <_printf_i+0x1c8>
 8007010:	8019      	strh	r1, [r3, #0]
 8007012:	2300      	movs	r3, #0
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	4615      	mov	r5, r2
 8007018:	e7ba      	b.n	8006f90 <_printf_i+0x150>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	1d1a      	adds	r2, r3, #4
 800701e:	602a      	str	r2, [r5, #0]
 8007020:	681d      	ldr	r5, [r3, #0]
 8007022:	6862      	ldr	r2, [r4, #4]
 8007024:	2100      	movs	r1, #0
 8007026:	4628      	mov	r0, r5
 8007028:	f7f9 f8fa 	bl	8000220 <memchr>
 800702c:	b108      	cbz	r0, 8007032 <_printf_i+0x1f2>
 800702e:	1b40      	subs	r0, r0, r5
 8007030:	6060      	str	r0, [r4, #4]
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	2300      	movs	r3, #0
 8007038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800703c:	e7a8      	b.n	8006f90 <_printf_i+0x150>
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	462a      	mov	r2, r5
 8007042:	4649      	mov	r1, r9
 8007044:	4640      	mov	r0, r8
 8007046:	47d0      	blx	sl
 8007048:	3001      	adds	r0, #1
 800704a:	d0ab      	beq.n	8006fa4 <_printf_i+0x164>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	079b      	lsls	r3, r3, #30
 8007050:	d413      	bmi.n	800707a <_printf_i+0x23a>
 8007052:	68e0      	ldr	r0, [r4, #12]
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	4298      	cmp	r0, r3
 8007058:	bfb8      	it	lt
 800705a:	4618      	movlt	r0, r3
 800705c:	e7a4      	b.n	8006fa8 <_printf_i+0x168>
 800705e:	2301      	movs	r3, #1
 8007060:	4632      	mov	r2, r6
 8007062:	4649      	mov	r1, r9
 8007064:	4640      	mov	r0, r8
 8007066:	47d0      	blx	sl
 8007068:	3001      	adds	r0, #1
 800706a:	d09b      	beq.n	8006fa4 <_printf_i+0x164>
 800706c:	3501      	adds	r5, #1
 800706e:	68e3      	ldr	r3, [r4, #12]
 8007070:	9903      	ldr	r1, [sp, #12]
 8007072:	1a5b      	subs	r3, r3, r1
 8007074:	42ab      	cmp	r3, r5
 8007076:	dcf2      	bgt.n	800705e <_printf_i+0x21e>
 8007078:	e7eb      	b.n	8007052 <_printf_i+0x212>
 800707a:	2500      	movs	r5, #0
 800707c:	f104 0619 	add.w	r6, r4, #25
 8007080:	e7f5      	b.n	800706e <_printf_i+0x22e>
 8007082:	bf00      	nop
 8007084:	08007275 	.word	0x08007275
 8007088:	08007286 	.word	0x08007286

0800708c <memmove>:
 800708c:	4288      	cmp	r0, r1
 800708e:	b510      	push	{r4, lr}
 8007090:	eb01 0402 	add.w	r4, r1, r2
 8007094:	d902      	bls.n	800709c <memmove+0x10>
 8007096:	4284      	cmp	r4, r0
 8007098:	4623      	mov	r3, r4
 800709a:	d807      	bhi.n	80070ac <memmove+0x20>
 800709c:	1e43      	subs	r3, r0, #1
 800709e:	42a1      	cmp	r1, r4
 80070a0:	d008      	beq.n	80070b4 <memmove+0x28>
 80070a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070aa:	e7f8      	b.n	800709e <memmove+0x12>
 80070ac:	4402      	add	r2, r0
 80070ae:	4601      	mov	r1, r0
 80070b0:	428a      	cmp	r2, r1
 80070b2:	d100      	bne.n	80070b6 <memmove+0x2a>
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070be:	e7f7      	b.n	80070b0 <memmove+0x24>

080070c0 <_realloc_r>:
 80070c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	4680      	mov	r8, r0
 80070c6:	4614      	mov	r4, r2
 80070c8:	460e      	mov	r6, r1
 80070ca:	b921      	cbnz	r1, 80070d6 <_realloc_r+0x16>
 80070cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	4611      	mov	r1, r2
 80070d2:	f7ff bb85 	b.w	80067e0 <_malloc_r>
 80070d6:	b92a      	cbnz	r2, 80070e4 <_realloc_r+0x24>
 80070d8:	f7ff fc9c 	bl	8006a14 <_free_r>
 80070dc:	4625      	mov	r5, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	f000 f81b 	bl	800711e <_malloc_usable_size_r>
 80070e8:	4284      	cmp	r4, r0
 80070ea:	4607      	mov	r7, r0
 80070ec:	d802      	bhi.n	80070f4 <_realloc_r+0x34>
 80070ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070f2:	d812      	bhi.n	800711a <_realloc_r+0x5a>
 80070f4:	4621      	mov	r1, r4
 80070f6:	4640      	mov	r0, r8
 80070f8:	f7ff fb72 	bl	80067e0 <_malloc_r>
 80070fc:	4605      	mov	r5, r0
 80070fe:	2800      	cmp	r0, #0
 8007100:	d0ed      	beq.n	80070de <_realloc_r+0x1e>
 8007102:	42bc      	cmp	r4, r7
 8007104:	4622      	mov	r2, r4
 8007106:	4631      	mov	r1, r6
 8007108:	bf28      	it	cs
 800710a:	463a      	movcs	r2, r7
 800710c:	f7ff fb32 	bl	8006774 <memcpy>
 8007110:	4631      	mov	r1, r6
 8007112:	4640      	mov	r0, r8
 8007114:	f7ff fc7e 	bl	8006a14 <_free_r>
 8007118:	e7e1      	b.n	80070de <_realloc_r+0x1e>
 800711a:	4635      	mov	r5, r6
 800711c:	e7df      	b.n	80070de <_realloc_r+0x1e>

0800711e <_malloc_usable_size_r>:
 800711e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007122:	1f18      	subs	r0, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbc      	itt	lt
 8007128:	580b      	ldrlt	r3, [r1, r0]
 800712a:	18c0      	addlt	r0, r0, r3
 800712c:	4770      	bx	lr
	...

08007130 <_init>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	bf00      	nop
 8007134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007136:	bc08      	pop	{r3}
 8007138:	469e      	mov	lr, r3
 800713a:	4770      	bx	lr

0800713c <_fini>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	bf00      	nop
 8007140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007142:	bc08      	pop	{r3}
 8007144:	469e      	mov	lr, r3
 8007146:	4770      	bx	lr
