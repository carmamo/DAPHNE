
F446RE_NODO_GRABA_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae64  0800ae64  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae64  0800ae64  0001ae64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae6c  0800ae6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae6c  0800ae6c  0001ae6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae70  0800ae70  0001ae70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ae74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b14  20000074  0800aee8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b88  0800aee8  00021b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140e6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003178  00000000  00000000  0003418a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00037308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00038468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025584  00000000  00000000  00039448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e71  00000000  00000000  0005e9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2944  00000000  00000000  0007683d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b80  00000000  00000000  001491d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800acf0 	.word	0x0800acf0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800acf0 	.word	0x0800acf0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AIC3254_Init>:

/*
 * INIZIALIZE
 */

uint8_t AIC3254_Init(AIC3254_t *dev, I2C_HandleTypeDef *i2cHandle) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev->i2cHandle = i2cHandle;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	601a      	str	r2, [r3, #0]
	 * Set Stereo ADC with 48ksps Sample Rate and High Performance
	 */

	/* Initialize to Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f91e 	bl	800082a <AIC3254_SendCommand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <AIC3254_Init+0x2a>
 80005f8:	2001      	movs	r0, #1
 80005fa:	f009 febb 	bl	800a374 <exit>

	/* S/W Reset to initialize all registers */

	status = AIC3254_SendCommand(dev, SW_RESET, 0x01);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f911 	bl	800082a <AIC3254_SendCommand>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <AIC3254_Init+0x44>
 8000612:	2001      	movs	r0, #1
 8000614:	f009 feae 	bl	800a374 <exit>

	/* Power up NADC divider with value 1 */

	status = AIC3254_SendCommand(dev, CSR_8, 0x81);
 8000618:	2281      	movs	r2, #129	; 0x81
 800061a:	2112      	movs	r1, #18
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f904 	bl	800082a <AIC3254_SendCommand>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <AIC3254_Init+0x5e>
 800062c:	2001      	movs	r0, #1
 800062e:	f009 fea1 	bl	800a374 <exit>

	/* Power up MADC divider with value 2 */

	status = AIC3254_SendCommand(dev, CSR_9, 0x82);
 8000632:	2282      	movs	r2, #130	; 0x82
 8000634:	2113      	movs	r1, #19
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f8f7 	bl	800082a <AIC3254_SendCommand>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <AIC3254_Init+0x78>
 8000646:	2001      	movs	r0, #1
 8000648:	f009 fe94 	bl	800a374 <exit>

	/* Program OSR for ADC to 128 */

	status = AIC3254_SendCommand(dev, AOSR, 0x80);
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	2114      	movs	r1, #20
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f8ea 	bl	800082a <AIC3254_SendCommand>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <AIC3254_Init+0x92>
 8000660:	2001      	movs	r0, #1
 8000662:	f009 fe87 	bl	800a374 <exit>

	/* Select ADC PRB_R1 */

	status = AIC3254_SendCommand(dev, PBCR, 0x01);
 8000666:	2201      	movs	r2, #1
 8000668:	213d      	movs	r1, #61	; 0x3d
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f8dd 	bl	800082a <AIC3254_SendCommand>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <AIC3254_Init+0xac>
 800067a:	2001      	movs	r0, #1
 800067c:	f009 fe7a 	bl	800a374 <exit>

	/* Select Page 1 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_1);
 8000680:	2201      	movs	r2, #1
 8000682:	2100      	movs	r1, #0
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f8d0 	bl	800082a <AIC3254_SendCommand>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <AIC3254_Init+0xc6>
 8000694:	2001      	movs	r0, #1
 8000696:	f009 fe6d 	bl	800a374 <exit>

	/* Disable Internal Crude AVdd in presence of external AVdd supply or before
	 * powering up internal AVdd LDO
	 */

	status = AIC3254_SendCommand(dev, POW_CONF, 0x08);
 800069a:	2208      	movs	r2, #8
 800069c:	2101      	movs	r1, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f8c3 	bl	800082a <AIC3254_SendCommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <AIC3254_Init+0xe0>
 80006ae:	2001      	movs	r0, #1
 80006b0:	f009 fe60 	bl	800a374 <exit>

	/* Enable Master Analog Power Control */

	status = AIC3254_SendCommand(dev, LDO_CR, 0x00);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2102      	movs	r1, #2
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f8b6 	bl	800082a <AIC3254_SendCommand>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <AIC3254_Init+0xfa>
 80006c8:	2001      	movs	r0, #1
 80006ca:	f009 fe53 	bl	800a374 <exit>

	/* Set the input common mode to 0.9V */

	status = AIC3254_SendCommand(dev, CMM_CR, 0x00);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210a      	movs	r1, #10
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8a9 	bl	800082a <AIC3254_SendCommand>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <AIC3254_Init+0x114>
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fe46 	bl	800a374 <exit>

	/* Select ADC PTM_R4 */

	status = AIC3254_SendCommand(dev, POW_TUN, 0x00);
 80006e8:	2200      	movs	r2, #0
 80006ea:	213d      	movs	r1, #61	; 0x3d
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f89c 	bl	800082a <AIC3254_SendCommand>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <AIC3254_Init+0x12e>
 80006fc:	2001      	movs	r0, #1
 80006fe:	f009 fe39 	bl	800a374 <exit>

	/* Set MicPGA startup delay to 3.1ms */

	status = AIC3254_SendCommand(dev, AIQC_CR, 0x32);
 8000702:	2232      	movs	r2, #50	; 0x32
 8000704:	2147      	movs	r1, #71	; 0x47
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f88f 	bl	800082a <AIC3254_SendCommand>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <AIC3254_Init+0x148>
 8000716:	2001      	movs	r0, #1
 8000718:	f009 fe2c 	bl	800a374 <exit>

	/* Set the REF charging time to 40ms */

	status = AIC3254_SendCommand(dev, REF_POW_CR, 0x01);
 800071c:	2201      	movs	r2, #1
 800071e:	217b      	movs	r1, #123	; 0x7b
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f882 	bl	800082a <AIC3254_SendCommand>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <AIC3254_Init+0x162>
 8000730:	2001      	movs	r0, #1
 8000732:	f009 fe1f 	bl	800a374 <exit>

	/* Route IN1L to LEFT_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, LROUTE_PCR, 0x80);
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	2134      	movs	r1, #52	; 0x34
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f875 	bl	800082a <AIC3254_SendCommand>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <AIC3254_Init+0x17c>
 800074a:	2001      	movs	r0, #1
 800074c:	f009 fe12 	bl	800a374 <exit>

	/* Route Common Mode to LEFT_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, LROUTE_NCR, 0x80);
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	2136      	movs	r1, #54	; 0x36
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f868 	bl	800082a <AIC3254_SendCommand>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <AIC3254_Init+0x196>
 8000764:	2001      	movs	r0, #1
 8000766:	f009 fe05 	bl	800a374 <exit>

	/* Route IN1R to Right_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, RROUTE_PCR, 0x80);
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	2137      	movs	r1, #55	; 0x37
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f85b 	bl	800082a <AIC3254_SendCommand>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <AIC3254_Init+0x1b0>
 800077e:	2001      	movs	r0, #1
 8000780:	f009 fdf8 	bl	800a374 <exit>

	/* Route Common Mode to Right_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, RROUTE_NCR, 0x80);
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	2139      	movs	r1, #57	; 0x39
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f84e 	bl	800082a <AIC3254_SendCommand>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <AIC3254_Init+0x1ca>
 8000798:	2001      	movs	r0, #1
 800079a:	f009 fdeb 	bl	800a374 <exit>

	/* Unmute Left MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, LVOLUME_CR, 0x0c);
 800079e:	220c      	movs	r2, #12
 80007a0:	213b      	movs	r1, #59	; 0x3b
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f841 	bl	800082a <AIC3254_SendCommand>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <AIC3254_Init+0x1e4>
 80007b2:	2001      	movs	r0, #1
 80007b4:	f009 fdde 	bl	800a374 <exit>

	/* Unmute Right MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, RVOLUME_CR, 0x0c);
 80007b8:	220c      	movs	r2, #12
 80007ba:	213c      	movs	r1, #60	; 0x3c
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f834 	bl	800082a <AIC3254_SendCommand>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <AIC3254_Init+0x1fe>
 80007cc:	2001      	movs	r0, #1
 80007ce:	f009 fdd1 	bl	800a374 <exit>

	/* Select Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f827 	bl	800082a <AIC3254_SendCommand>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <AIC3254_Init+0x218>
 80007e6:	2001      	movs	r0, #1
 80007e8:	f009 fdc4 	bl	800a374 <exit>

	/* Power up Left and Right ADC Channels */

	status = AIC3254_SendCommand(dev, CH_SETUP, 0xc0);
 80007ec:	22c0      	movs	r2, #192	; 0xc0
 80007ee:	2151      	movs	r1, #81	; 0x51
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f81a 	bl	800082a <AIC3254_SendCommand>
 80007f6:	4603      	mov	r3, r0
 80007f8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <AIC3254_Init+0x232>
 8000800:	2001      	movs	r0, #1
 8000802:	f009 fdb7 	bl	800a374 <exit>

	/* Unmute Left and Right ADC Digital Volume Control */

	status = AIC3254_SendCommand(dev, CH_GAIN, 0x00);
 8000806:	2200      	movs	r2, #0
 8000808:	2152      	movs	r1, #82	; 0x52
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f80d 	bl	800082a <AIC3254_SendCommand>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <AIC3254_Init+0x24c>
 800081a:	2001      	movs	r0, #1
 800081c:	f009 fdaa 	bl	800a374 <exit>

	return status;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <AIC3254_SendCommand>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef AIC3254_SendCommand(AIC3254_t *dev, uint8_t Register, uint8_t Data) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af04      	add	r7, sp, #16
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	460b      	mov	r3, r1
 8000834:	70fb      	strb	r3, [r7, #3]
 8000836:	4613      	mov	r3, r2
 8000838:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, AIC3254_I2C_ADDR , Register, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	b29a      	uxth	r2, r3
 8000842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	2301      	movs	r3, #1
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	1cbb      	adds	r3, r7, #2
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	2130      	movs	r1, #48	; 0x30
 8000854:	f002 f8a2 	bl	800299c <HAL_I2C_Mem_Write>
 8000858:	4603      	mov	r3, r0

}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0c2      	sub	sp, #264	; 0x108
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 ffad 	bl	80017c8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f887 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f9c1 	bl	8000bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000876:	f000 f981 	bl	8000b7c <MX_DMA_Init>
  MX_I2C1_Init();
 800087a:	f000 f901 	bl	8000a80 <MX_I2C1_Init>
  MX_I2S2_Init();
 800087e:	f000 f92d 	bl	8000adc <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8000882:	f000 f959 	bl	8000b38 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000886:	f006 fc75 	bl	8007174 <MX_FATFS_Init>
  MX_CRC_Init();
 800088a:	f000 f8e5 	bl	8000a58 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize CODEC */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000894:	4833      	ldr	r0, [pc, #204]	; (8000964 <main+0x100>)
 8000896:	f001 ff09 	bl	80026ac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800089a:	2001      	movs	r0, #1
 800089c:	f001 f806 	bl	80018ac <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	482f      	ldr	r0, [pc, #188]	; (8000964 <main+0x100>)
 80008a8:	f001 ff00 	bl	80026ac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fffd 	bl	80018ac <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b8:	482a      	ldr	r0, [pc, #168]	; (8000964 <main+0x100>)
 80008ba:	f001 fef7 	bl	80026ac <HAL_GPIO_WritePin>
  AIC3254_Init(&codec, &hi2c1);
 80008be:	492a      	ldr	r1, [pc, #168]	; (8000968 <main+0x104>)
 80008c0:	482a      	ldr	r0, [pc, #168]	; (800096c <main+0x108>)
 80008c2:	f7ff fe87 	bl	80005d4 <AIC3254_Init>
  FRESULT res;
  char filename[256];

  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	4929      	ldr	r1, [pc, #164]	; (8000970 <main+0x10c>)
 80008ca:	482a      	ldr	r0, [pc, #168]	; (8000974 <main+0x110>)
 80008cc:	f008 fcfc 	bl	80092c8 <f_mount>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
  }
  while( res != FR_OK);
 80008d6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f3      	bne.n	80008c6 <main+0x62>

  do
  {
	  res = Format_SD();
 80008de:	f000 fbb5 	bl	800104c <Format_SD>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
  }
  while (res != FR_OK);
 80008e8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f6      	bne.n	80008de <main+0x7a>


  uint16_t count;
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80008f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f4:	4820      	ldr	r0, [pc, #128]	; (8000978 <main+0x114>)
 80008f6:	f001 fef2 	bl	80026de <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80008fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fe:	f000 ffd5 	bl	80018ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <main+0x114>)
 8000908:	f001 fee9 	bl	80026de <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800090c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000910:	f000 ffcc 	bl	80018ac <HAL_Delay>

	  HAL_Delay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f000 ffc9 	bl	80018ac <HAL_Delay>
	  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 800091a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	f8a7 2106 	strh.w	r2, [r7, #262]	; 0x106
 8000924:	1d38      	adds	r0, r7, #4
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <main+0x10c>)
 8000928:	4914      	ldr	r1, [pc, #80]	; (800097c <main+0x118>)
 800092a:	f009 fe63 	bl	800a5f4 <siprintf>
	  startRecord(filename);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fa7d 	bl	8000e30 <startRecord>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093a:	480f      	ldr	r0, [pc, #60]	; (8000978 <main+0x114>)
 800093c:	f001 fecf 	bl	80026de <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000944:	f000 ffb2 	bl	80018ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <main+0x114>)
 800094e:	f001 fec6 	bl	80026de <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000956:	f000 ffa9 	bl	80018ac <HAL_Delay>

	  HAL_Delay(10000);
 800095a:	f242 7010 	movw	r0, #10000	; 0x2710
 800095e:	f000 ffa5 	bl	80018ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000962:	e7c5      	b.n	80008f0 <main+0x8c>
 8000964:	40020400 	.word	0x40020400
 8000968:	20000098 	.word	0x20000098
 800096c:	200002d8 	.word	0x200002d8
 8000970:	20000b0c 	.word	0x20000b0c
 8000974:	20000b10 	.word	0x20000b10
 8000978:	40020000 	.word	0x40020000
 800097c:	0800ad08 	.word	0x0800ad08

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	; 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2234      	movs	r2, #52	; 0x34
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f009 fd38 	bl	800a404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <SystemClock_Config+0xd0>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <SystemClock_Config+0xd0>)
 80009ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <SystemClock_Config+0xd0>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <SystemClock_Config+0xd4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <SystemClock_Config+0xd4>)
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <SystemClock_Config+0xd4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009f8:	2332      	movs	r3, #50	; 0x32
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a00:	2305      	movs	r3, #5
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 ff81 	bl	8004914 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a18:	f000 fb7e 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2302      	movs	r3, #2
 8000a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	2101      	movs	r1, #1
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fecb 	bl	80037d4 <HAL_RCC_ClockConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a44:	f000 fb68 	bl	8001118 <Error_Handler>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3750      	adds	r7, #80	; 0x50
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40007000 	.word	0x40007000

08000a58 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_CRC_Init+0x20>)
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <MX_CRC_Init+0x24>)
 8000a60:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_CRC_Init+0x20>)
 8000a64:	f001 f857 	bl	8001b16 <HAL_CRC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a6e:	f000 fb53 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000090 	.word	0x20000090
 8000a7c:	40023000 	.word	0x40023000

08000a80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MX_I2C1_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000abe:	f001 fe29 	bl	8002714 <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 fb26 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000098 	.word	0x20000098
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <MX_I2S2_Init+0x58>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000ae8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b00:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000b04:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000b08:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_I2S2_Init+0x54>)
 8000b1e:	f002 fa55 	bl	8002fcc <HAL_I2S_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000b28:	f000 faf6 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000ec 	.word	0x200000ec
 8000b34:	40003800 	.word	0x40003800

08000b38 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <MX_SDIO_SD_Init+0x3c>)
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <MX_SDIO_SD_Init+0x40>)
 8000b40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_SDIO_SD_Init+0x3c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_SDIO_SD_Init+0x3c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_SDIO_SD_Init+0x3c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_SDIO_SD_Init+0x3c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_SDIO_SD_Init+0x3c>)
 8000b5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b60:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <MX_SDIO_SD_Init+0x3c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000194 	.word	0x20000194
 8000b78:	40012c00 	.word	0x40012c00

08000b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_DMA_Init+0x78>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <MX_DMA_Init+0x78>)
 8000b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_DMA_Init+0x78>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_DMA_Init+0x78>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_DMA_Init+0x78>)
 8000ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_DMA_Init+0x78>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	200e      	movs	r0, #14
 8000bc0:	f000 ff73 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bc4:	200e      	movs	r0, #14
 8000bc6:	f000 ff8c 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	203b      	movs	r0, #59	; 0x3b
 8000bd0:	f000 ff6b 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000bd4:	203b      	movs	r0, #59	; 0x3b
 8000bd6:	f000 ff84 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2045      	movs	r0, #69	; 0x45
 8000be0:	f000 ff63 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000be4:	2045      	movs	r0, #69	; 0x45
 8000be6:	f000 ff7c 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a3e      	ldr	r2, [pc, #248]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a37      	ldr	r2, [pc, #220]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a30      	ldr	r2, [pc, #192]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a22      	ldr	r2, [pc, #136]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_GPIO_Init+0x118>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca0:	481c      	ldr	r0, [pc, #112]	; (8000d14 <MX_GPIO_Init+0x11c>)
 8000ca2:	f001 fd03 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000cac:	481a      	ldr	r0, [pc, #104]	; (8000d18 <MX_GPIO_Init+0x120>)
 8000cae:	f001 fcfd 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <MX_GPIO_Init+0x11c>)
 8000ccc:	f001 fb42 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <MX_GPIO_Init+0x11c>)
 8000ce6:	f001 fb35 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_GPIO_Init+0x120>)
 8000d04:	f001 fb26 	bl	8002354 <HAL_GPIO_Init>

}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_I2S_RxCpltCallback>:
	f_close(&fout);
	f_close(&fin);
}


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	uint8_t rcvCplt = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
	uint16_t* rpt, *wpt, *temppt;

	rCount++;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_I2S_RxCpltCallback+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_I2S_RxCpltCallback+0x40>)
 8000d30:	6013      	str	r3, [r2, #0]
	rpt = (rcvBuf)+(rCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_I2S_RxCpltCallback+0x40>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <HAL_I2S_RxCpltCallback+0x44>)
 8000d3c:	8812      	ldrh	r2, [r2, #0]
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_I2S_RxCpltCallback+0x48>)
 8000d46:	4413      	add	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
	HAL_I2S_Receive_DMA(hi2s, rpt, DMA_READ_SIZE);
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f002 fa34 	bl	80031bc <HAL_I2S_Receive_DMA>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000adc 	.word	0x20000adc
 8000d60:	20000000 	.word	0x20000000
 8000d64:	200002dc 	.word	0x200002dc

08000d68 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	; 0x38
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	4608      	mov	r0, r1
 8000d72:	4611      	mov	r1, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	4603      	mov	r3, r0
 8000d78:	807b      	strh	r3, [r7, #2]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	707b      	strb	r3, [r7, #1]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000d82:	2352      	movs	r3, #82	; 0x52
 8000d84:	723b      	strb	r3, [r7, #8]
 8000d86:	2349      	movs	r3, #73	; 0x49
 8000d88:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000d8a:	2346      	movs	r3, #70	; 0x46
 8000d8c:	72bb      	strb	r3, [r7, #10]
 8000d8e:	2346      	movs	r3, #70	; 0x46
 8000d90:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000d96:	2357      	movs	r3, #87	; 0x57
 8000d98:	743b      	strb	r3, [r7, #16]
 8000d9a:	2341      	movs	r3, #65	; 0x41
 8000d9c:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000d9e:	2356      	movs	r3, #86	; 0x56
 8000da0:	74bb      	strb	r3, [r7, #18]
 8000da2:	2345      	movs	r3, #69	; 0x45
 8000da4:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000da6:	2366      	movs	r3, #102	; 0x66
 8000da8:	753b      	strb	r3, [r7, #20]
 8000daa:	236d      	movs	r3, #109	; 0x6d
 8000dac:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000dae:	2374      	movs	r3, #116	; 0x74
 8000db0:	75bb      	strb	r3, [r7, #22]
 8000db2:	2320      	movs	r3, #32
 8000db4:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000db6:	2310      	movs	r3, #16
 8000db8:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000dba:	2301      	movs	r3, #1
 8000dbc:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000dbe:	783b      	ldrb	r3, [r7, #0]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	787a      	ldrb	r2, [r7, #1]
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	783a      	ldrb	r2, [r7, #0]
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	da00      	bge.n	8000ddc <fwrite_wav_header+0x74>
 8000dda:	3307      	adds	r3, #7
 8000ddc:	10db      	asrs	r3, r3, #3
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000de0:	787b      	ldrb	r3, [r7, #1]
 8000de2:	783a      	ldrb	r2, [r7, #0]
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da00      	bge.n	8000dee <fwrite_wav_header+0x86>
 8000dec:	3307      	adds	r3, #7
 8000dee:	10db      	asrs	r3, r3, #3
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000df4:	787b      	ldrb	r3, [r7, #1]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000e00:	2361      	movs	r3, #97	; 0x61
 8000e02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000e06:	2374      	movs	r3, #116	; 0x74
 8000e08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000e0c:	2361      	movs	r3, #97	; 0x61
 8000e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000e16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e1a:	f107 0108 	add.w	r1, r7, #8
 8000e1e:	222c      	movs	r2, #44	; 0x2c
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f008 fc63 	bl	80096ec <f_write>
 8000e26:	4603      	mov	r3, r0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3738      	adds	r7, #56	; 0x38
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <startRecord>:

void startRecord(char *filename) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e3e:	f843 0c54 	str.w	r0, [r3, #-84]
	uint16_t* rpt, *wpt, *temppt;
	UINT bw;
	UINT writeBytes;
	UINT skipCount=125;// skip 0.5 second
 8000e42:	237d      	movs	r3, #125	; 0x7d
 8000e44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000e48:	f102 0210 	add.w	r2, r2, #16
 8000e4c:	6013      	str	r3, [r2, #0]
	FIL fp;
	FRESULT res;

	writeBytes = DMA_TxRx_SIZE*2;
 8000e4e:	4b78      	ldr	r3, [pc, #480]	; (8001030 <startRecord+0x200>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000e58:	f102 020c 	add.w	r2, r2, #12
 8000e5c:	6013      	str	r3, [r2, #0]
	do
	{
		res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000e5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e62:	4619      	mov	r1, r3
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	220a      	movs	r2, #10
 8000e6c:	f851 1c54 	ldr.w	r1, [r1, #-84]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f008 fa6f 	bl	8009354 <f_open>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000e7c:	f102 020b 	add.w	r2, r2, #11
 8000e80:	7013      	strb	r3, [r2, #0]
	}
	while(res != FR_OK);
 8000e82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000e86:	f103 030b 	add.w	r3, r3, #11
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1e6      	bne.n	8000e5e <startRecord+0x2e>
	res = fwrite_wav_header(&fp, 48000, 16, 2);
 8000e90:	f107 0018 	add.w	r0, r7, #24
 8000e94:	3808      	subs	r0, #8
 8000e96:	2302      	movs	r3, #2
 8000e98:	2210      	movs	r2, #16
 8000e9a:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000e9e:	f7ff ff63 	bl	8000d68 <fwrite_wav_header>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000ea8:	f102 020b 	add.w	r2, r2, #11
 8000eac:	7013      	strb	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	485f      	ldr	r0, [pc, #380]	; (8001034 <startRecord+0x204>)
 8000eb6:	f001 fbf9 	bl	80026ac <HAL_GPIO_WritePin>
	audio_state = STATE_RECORDING;
 8000eba:	4b5f      	ldr	r3, [pc, #380]	; (8001038 <startRecord+0x208>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	701a      	strb	r2, [r3, #0]
	rpt = rcvBuf;
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	; (800103c <startRecord+0x20c>)
 8000ec2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000ec6:	f102 0204 	add.w	r2, r2, #4
 8000eca:	6013      	str	r3, [r2, #0]
	wpt = rpt;
 8000ecc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000ed0:	f103 0304 	add.w	r3, r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000eda:	f102 0214 	add.w	r2, r2, #20
 8000ede:	6013      	str	r3, [r2, #0]
	rCount=0; wCount=0;
 8000ee0:	4b57      	ldr	r3, [pc, #348]	; (8001040 <startRecord+0x210>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4b57      	ldr	r3, [pc, #348]	; (8001044 <startRecord+0x214>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	HAL_I2S_Receive_DMA(&hi2s2, rpt, DMA_READ_SIZE);
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000ef2:	f103 0304 	add.w	r3, r3, #4
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	4853      	ldr	r0, [pc, #332]	; (8001048 <startRecord+0x218>)
 8000efa:	f002 f95f 	bl	80031bc <HAL_I2S_Receive_DMA>

	while (1)
	{
		if (wCount < rCount ) {
 8000efe:	4b51      	ldr	r3, [pc, #324]	; (8001044 <startRecord+0x214>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <startRecord+0x210>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d234      	bcs.n	8000f74 <startRecord+0x144>
			if (rCount > skipCount)
 8000f0a:	4b4d      	ldr	r3, [pc, #308]	; (8001040 <startRecord+0x210>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000f12:	f102 0210 	add.w	r2, r2, #16
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d216      	bcs.n	8000f4a <startRecord+0x11a>
			{
				res = f_write(&fp, wpt, writeBytes, &bw);
 8000f1c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000f20:	f107 0018 	add.w	r0, r7, #24
 8000f24:	3808      	subs	r0, #8
 8000f26:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000f2a:	f102 020c 	add.w	r2, r2, #12
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8000f34:	f101 0114 	add.w	r1, r1, #20
 8000f38:	6809      	ldr	r1, [r1, #0]
 8000f3a:	f008 fbd7 	bl	80096ec <f_write>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000f44:	f102 020b 	add.w	r2, r2, #11
 8000f48:	7013      	strb	r3, [r2, #0]
			}
			 wCount++;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <startRecord+0x214>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a3c      	ldr	r2, [pc, #240]	; (8001044 <startRecord+0x214>)
 8000f52:	6013      	str	r3, [r2, #0]
			 wpt = (rcvBuf)+(wCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <startRecord+0x214>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	4a34      	ldr	r2, [pc, #208]	; (8001030 <startRecord+0x200>)
 8000f5e:	8812      	ldrh	r2, [r2, #0]
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4a35      	ldr	r2, [pc, #212]	; (800103c <startRecord+0x20c>)
 8000f68:	4413      	add	r3, r2
 8000f6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000f6e:	f102 0214 	add.w	r2, r2, #20
 8000f72:	6013      	str	r3, [r2, #0]
		  }

		  if (audio_state == STATE_STOP || rCount > MAX_DMA_ACCESS_COUNT)
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <startRecord+0x208>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d004      	beq.n	8000f86 <startRecord+0x156>
 8000f7c:	4b30      	ldr	r3, [pc, #192]	; (8001040 <startRecord+0x210>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000f84:	d9bb      	bls.n	8000efe <startRecord+0xce>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 8000f86:	4830      	ldr	r0, [pc, #192]	; (8001048 <startRecord+0x218>)
 8000f88:	f002 f9d4 	bl	8003334 <HAL_I2S_DMAStop>
			  break;
 8000f8c:	bf00      	nop
		  }
	}
	uint32_t data_len = (wCount-1) * writeBytes;
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <startRecord+0x214>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000f98:	f102 020c 	add.w	r2, r2, #12
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fa6:	f842 3c4c 	str.w	r3, [r2, #-76]
	uint32_t total_len = data_len+36;
 8000faa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fae:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000fb2:	3324      	adds	r3, #36	; 0x24
 8000fb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fb8:	f842 3c50 	str.w	r3, [r2, #-80]
	f_lseek(&fp, 4);
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f008 fdcd 	bl	8009b64 <f_lseek>
	f_write(&fp, (uint8_t*)&total_len, 4, &bw);
 8000fca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000fce:	f107 0118 	add.w	r1, r7, #24
 8000fd2:	3910      	subs	r1, #16
 8000fd4:	f107 0018 	add.w	r0, r7, #24
 8000fd8:	3808      	subs	r0, #8
 8000fda:	2204      	movs	r2, #4
 8000fdc:	f008 fb86 	bl	80096ec <f_write>
	f_lseek(&fp, 40);
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	2128      	movs	r1, #40	; 0x28
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f008 fdbb 	bl	8009b64 <f_lseek>
	f_write(&fp, (uint8_t*)&data_len, 4, &bw);
 8000fee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000ff2:	f107 0118 	add.w	r1, r7, #24
 8000ff6:	390c      	subs	r1, #12
 8000ff8:	f107 0018 	add.w	r0, r7, #24
 8000ffc:	3808      	subs	r0, #8
 8000ffe:	2204      	movs	r2, #4
 8001000:	f008 fb74 	bl	80096ec <f_write>
	f_close(&fp);
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	3b08      	subs	r3, #8
 800100a:	4618      	mov	r0, r3
 800100c:	f008 fd80 	bl	8009b10 <f_close>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <startRecord+0x204>)
 8001018:	f001 fb48 	bl	80026ac <HAL_GPIO_WritePin>
	audio_state = STATE_STOP;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <startRecord+0x208>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000000 	.word	0x20000000
 8001034:	40020000 	.word	0x40020000
 8001038:	20000002 	.word	0x20000002
 800103c:	200002dc 	.word	0x200002dc
 8001040:	20000adc 	.word	0x20000adc
 8001044:	20000ae0 	.word	0x20000ae0
 8001048:	200000ec 	.word	0x200000ec

0800104c <Format_SD>:

FRESULT Format_SD (void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
    DIR dir;
    static FILINFO fno;
    static FRESULT fresult;

    char *path = malloc(20*sizeof (char));
 8001052:	2014      	movs	r0, #20
 8001054:	f009 f9c6 	bl	800a3e4 <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 800105c:	4a28      	ldr	r2, [pc, #160]	; (8001100 <Format_SD+0xb4>)
 800105e:	4929      	ldr	r1, [pc, #164]	; (8001104 <Format_SD+0xb8>)
 8001060:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001062:	f009 fac7 	bl	800a5f4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106a:	4618      	mov	r0, r3
 800106c:	f008 ff9e 	bl	8009fac <f_opendir>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <Format_SD+0xbc>)
 8001076:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <Format_SD+0xbc>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d136      	bne.n	80010ee <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4922      	ldr	r1, [pc, #136]	; (800110c <Format_SD+0xc0>)
 8001084:	4618      	mov	r0, r3
 8001086:	f009 f82a 	bl	800a0de <f_readdir>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <Format_SD+0xbc>)
 8001090:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <Format_SD+0xbc>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d125      	bne.n	80010e6 <Format_SD+0x9a>
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <Format_SD+0xc0>)
 800109c:	7a5b      	ldrb	r3, [r3, #9]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d021      	beq.n	80010e6 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <Format_SD+0xc0>)
 80010a4:	7a1b      	ldrb	r3, [r3, #8]
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d011      	beq.n	80010d2 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80010ae:	4918      	ldr	r1, [pc, #96]	; (8001110 <Format_SD+0xc4>)
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <Format_SD+0xc8>)
 80010b2:	f7ff f8ad 	bl	8000210 <strcmp>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d012      	beq.n	80010e2 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 80010bc:	4814      	ldr	r0, [pc, #80]	; (8001110 <Format_SD+0xc4>)
 80010be:	f009 f84b 	bl	800a158 <f_unlink>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <Format_SD+0xbc>)
 80010c8:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <Format_SD+0xbc>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b07      	cmp	r3, #7
 80010d0:	e7d6      	b.n	8001080 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80010d2:	480f      	ldr	r0, [pc, #60]	; (8001110 <Format_SD+0xc4>)
 80010d4:	f009 f840 	bl	800a158 <f_unlink>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <Format_SD+0xbc>)
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e7ce      	b.n	8001080 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80010e2:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010e4:	e7cc      	b.n	8001080 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4618      	mov	r0, r3
 80010ea:	f008 ffd2 	bl	800a092 <f_closedir>
    }
    free(path);
 80010ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010f0:	f009 f980 	bl	800a3f4 <free>
    return fresult;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <Format_SD+0xbc>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3738      	adds	r7, #56	; 0x38
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800ad20 	.word	0x0800ad20
 8001104:	0800ad24 	.word	0x0800ad24
 8001108:	20000ae4 	.word	0x20000ae4
 800110c:	20000ae8 	.word	0x20000ae8
 8001110:	20000af1 	.word	0x20000af1
 8001114:	0800ad28 	.word	0x0800ad28

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_MspInit+0x4c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_MspInit+0x4c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_MspInit+0x4c>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_CRC_MspInit+0x3c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10d      	bne.n	80011a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_CRC_MspInit+0x40>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_CRC_MspInit+0x40>)
 8001190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_CRC_MspInit+0x40>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023000 	.word	0x40023000
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_I2C_MspInit+0x84>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d12b      	bne.n	8001232 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_I2C_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_I2C_MspInit+0x88>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_I2C_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fa:	2312      	movs	r3, #18
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001206:	2304      	movs	r3, #4
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <HAL_I2C_MspInit+0x8c>)
 8001212:	f001 f89f 	bl	8002354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_I2C_MspInit+0x88>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_I2C_MspInit+0x88>)
 8001220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_I2C_MspInit+0x88>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40005400 	.word	0x40005400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400

08001248 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0a2      	sub	sp, #136	; 0x88
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	225c      	movs	r2, #92	; 0x5c
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f009 f8cb 	bl	800a404 <memset>
  if(hi2s->Instance==SPI2)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	f040 8098 	bne.w	80013aa <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800127e:	2332      	movs	r3, #50	; 0x32
 8001280:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001282:	2302      	movs	r3, #2
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001286:	2308      	movs	r3, #8
 8001288:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001296:	2300      	movs	r3, #0
 8001298:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fb9e 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 80012aa:	f7ff ff35 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a39      	ldr	r2, [pc, #228]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001302:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001306:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001316:	2305      	movs	r3, #5
 8001318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001320:	4619      	mov	r1, r3
 8001322:	4826      	ldr	r0, [pc, #152]	; (80013bc <HAL_I2S_MspInit+0x174>)
 8001324:	f001 f816 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001328:	2340      	movs	r3, #64	; 0x40
 800132a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133a:	2305      	movs	r3, #5
 800133c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001344:	4619      	mov	r1, r3
 8001346:	481e      	ldr	r0, [pc, #120]	; (80013c0 <HAL_I2S_MspInit+0x178>)
 8001348:	f001 f804 	bl	8002354 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 800134e:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <HAL_I2S_MspInit+0x180>)
 8001350:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 8001366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 800136e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001372:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 8001376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 8001390:	f000 fbde 	bl	8001b50 <HAL_DMA_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 800139a:	f7ff febd 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 80013a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_I2S_MspInit+0x17c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3788      	adds	r7, #136	; 0x88
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40003800 	.word	0x40003800
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	20000134 	.word	0x20000134
 80013c8:	40026058 	.word	0x40026058

080013cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0a2      	sub	sp, #136	; 0x88
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	225c      	movs	r2, #92	; 0x5c
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f009 f809 	bl	800a404 <memset>
  if(hsd->Instance==SDIO)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7d      	ldr	r2, [pc, #500]	; (80015ec <HAL_SD_MspInit+0x220>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	f040 80f3 	bne.w	80015e4 <HAL_SD_MspInit+0x218>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001404:	2300      	movs	r3, #0
 8001406:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001408:	2300      	movs	r3, #0
 800140a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fae5 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800141c:	f7ff fe7c 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <HAL_SD_MspInit+0x224>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	4a71      	ldr	r2, [pc, #452]	; (80015f0 <HAL_SD_MspInit+0x224>)
 800142a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800142e:	6453      	str	r3, [r2, #68]	; 0x44
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <HAL_SD_MspInit+0x224>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <HAL_SD_MspInit+0x224>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <HAL_SD_MspInit+0x224>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_SD_MspInit+0x224>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	4b64      	ldr	r3, [pc, #400]	; (80015f0 <HAL_SD_MspInit+0x224>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4a63      	ldr	r2, [pc, #396]	; (80015f0 <HAL_SD_MspInit+0x224>)
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6313      	str	r3, [r2, #48]	; 0x30
 8001468:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <HAL_SD_MspInit+0x224>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001474:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001478:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001488:	230c      	movs	r3, #12
 800148a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001492:	4619      	mov	r1, r3
 8001494:	4857      	ldr	r0, [pc, #348]	; (80015f4 <HAL_SD_MspInit+0x228>)
 8001496:	f000 ff5d 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014ae:	230c      	movs	r3, #12
 80014b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014b8:	4619      	mov	r1, r3
 80014ba:	484e      	ldr	r0, [pc, #312]	; (80015f4 <HAL_SD_MspInit+0x228>)
 80014bc:	f000 ff4a 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014c0:	2304      	movs	r3, #4
 80014c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014d2:	230c      	movs	r3, #12
 80014d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014dc:	4619      	mov	r1, r3
 80014de:	4846      	ldr	r0, [pc, #280]	; (80015f8 <HAL_SD_MspInit+0x22c>)
 80014e0:	f000 ff38 	bl	8002354 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80014e4:	4b45      	ldr	r3, [pc, #276]	; (80015fc <HAL_SD_MspInit+0x230>)
 80014e6:	4a46      	ldr	r2, [pc, #280]	; (8001600 <HAL_SD_MspInit+0x234>)
 80014e8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80014ea:	4b44      	ldr	r3, [pc, #272]	; (80015fc <HAL_SD_MspInit+0x230>)
 80014ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <HAL_SD_MspInit+0x230>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_SD_MspInit+0x230>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001504:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001508:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800150c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001510:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001514:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001516:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001518:	2220      	movs	r2, #32
 800151a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800151c:	4b37      	ldr	r3, [pc, #220]	; (80015fc <HAL_SD_MspInit+0x230>)
 800151e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001522:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001526:	2204      	movs	r2, #4
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_SD_MspInit+0x230>)
 800152c:	2203      	movs	r2, #3
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001532:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_SD_MspInit+0x230>)
 800153a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001540:	482e      	ldr	r0, [pc, #184]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001542:	f000 fb05 	bl	8001b50 <HAL_DMA_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_SD_MspInit+0x184>
    {
      Error_Handler();
 800154c:	f7ff fde4 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
 8001556:	4a29      	ldr	r2, [pc, #164]	; (80015fc <HAL_SD_MspInit+0x230>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_SD_MspInit+0x238>)
 800155e:	4a2a      	ldr	r2, [pc, #168]	; (8001608 <HAL_SD_MspInit+0x23c>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_SD_MspInit+0x238>)
 8001564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001568:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_SD_MspInit+0x238>)
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_SD_MspInit+0x238>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001576:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_SD_MspInit+0x238>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_SD_MspInit+0x238>)
 8001580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001584:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_SD_MspInit+0x238>)
 8001588:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_SD_MspInit+0x238>)
 8001590:	2220      	movs	r2, #32
 8001592:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_SD_MspInit+0x238>)
 8001596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800159a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_SD_MspInit+0x238>)
 800159e:	2204      	movs	r2, #4
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_SD_MspInit+0x238>)
 80015a4:	2203      	movs	r2, #3
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_SD_MspInit+0x238>)
 80015aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_SD_MspInit+0x238>)
 80015b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <HAL_SD_MspInit+0x238>)
 80015ba:	f000 fac9 	bl	8001b50 <HAL_DMA_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_SD_MspInit+0x1fc>
    {
      Error_Handler();
 80015c4:	f7ff fda8 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_SD_MspInit+0x238>)
 80015cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ce:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_SD_MspInit+0x238>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2031      	movs	r0, #49	; 0x31
 80015da:	f000 fa66 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80015de:	2031      	movs	r0, #49	; 0x31
 80015e0:	f000 fa7f 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3788      	adds	r7, #136	; 0x88
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40012c00 	.word	0x40012c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020c00 	.word	0x40020c00
 80015fc:	20000218 	.word	0x20000218
 8001600:	40026458 	.word	0x40026458
 8001604:	20000278 	.word	0x20000278
 8001608:	400264a0 	.word	0x400264a0

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <NMI_Handler+0x4>

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f908 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA1_Stream3_IRQHandler+0x10>)
 8001666:	f000 fc0b 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000134 	.word	0x20000134

08001674 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <SDIO_IRQHandler+0x10>)
 800167a:	f003 fffd 	bl	8005678 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000194 	.word	0x20000194

08001688 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA2_Stream3_IRQHandler+0x10>)
 800168e:	f000 fbf7 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000218 	.word	0x20000218

0800169c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <DMA2_Stream6_IRQHandler+0x10>)
 80016a2:	f000 fbed 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000278 	.word	0x20000278

080016b0 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016ba:	f008 fe55 	bl	800a368 <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	2216      	movs	r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
	return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_exit>:

void _exit (int status)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffe7 	bl	80016b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016e2:	e7fe      	b.n	80016e2 <_exit+0x12>

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f008 fe28 	bl	800a368 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20020000 	.word	0x20020000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000b00 	.word	0x20000b00
 800174c:	20001b88 	.word	0x20001b88

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177a:	490e      	ldr	r1, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001790:	4c0b      	ldr	r4, [pc, #44]	; (80017c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179e:	f7ff ffd7 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f008 fdfb 	bl	800a39c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff f85d 	bl	8000864 <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017b8:	0800ae74 	.word	0x0800ae74
  ldr r2, =_sbss
 80017bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017c0:	20001b88 	.word	0x20001b88

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f94f 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	200f      	movs	r0, #15
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fc92 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f967 	bl	8001afe <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001848:	f000 f92f 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000004 	.word	0x20000004
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000008 	.word	0x20000008

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000b04 	.word	0x20000b04

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000b04 	.word	0x20000b04

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000000c 	.word	0x2000000c

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff3e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff31 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e00e      	b.n	8001b46 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	795b      	ldrb	r3, [r3, #5]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fb1b 	bl	8001174 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff fe9a 	bl	8001894 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e099      	b.n	8001ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8c:	e00f      	b.n	8001bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8e:	f7ff fe81 	bl	8001894 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d908      	bls.n	8001bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e078      	b.n	8001ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e8      	bne.n	8001b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <HAL_DMA_Init+0x158>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4313      	orrs	r3, r2
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f023 0307 	bic.w	r3, r3, #7
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d117      	bne.n	8001c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fb01 	bl	800225c <DMA_CheckFifoParam>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e016      	b.n	8001ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fab8 	bl	80021f0 <DMA_CalcBaseAndBitshift>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	223f      	movs	r2, #63	; 0x3f
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	f010803f 	.word	0xf010803f

08001cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DMA_Start_IT+0x26>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e040      	b.n	8001d54 <HAL_DMA_Start_IT+0xa8>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d12f      	bne.n	8001d46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fa4a 	bl	8002194 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	223f      	movs	r2, #63	; 0x3f
 8001d06:	409a      	lsls	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0216 	orr.w	r2, r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0208 	orr.w	r2, r2, #8
 8001d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e005      	b.n	8001d52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6a:	f7ff fd93 	bl	8001894 <HAL_GetTick>
 8001d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d008      	beq.n	8001d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e052      	b.n	8001e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0216 	bic.w	r2, r2, #22
 8001d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_DMA_Abort+0x62>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dde:	e013      	b.n	8001e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de0:	f7ff fd58 	bl	8001894 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d90c      	bls.n	8001e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e015      	b.n	8001e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1e4      	bne.n	8001de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	223f      	movs	r2, #63	; 0x3f
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d004      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00c      	b.n	8001e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2205      	movs	r2, #5
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e8c:	4b8e      	ldr	r3, [pc, #568]	; (80020c8 <HAL_DMA_IRQHandler+0x248>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a8e      	ldr	r2, [pc, #568]	; (80020cc <HAL_DMA_IRQHandler+0x24c>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0a9b      	lsrs	r3, r3, #10
 8001e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eaa:	2208      	movs	r2, #8
 8001eac:	409a      	lsls	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01a      	beq.n	8001eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0204 	bic.w	r2, r2, #4
 8001ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2208      	movs	r2, #8
 8001eda:	409a      	lsls	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d012      	beq.n	8001f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2201      	movs	r2, #1
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	f043 0202 	orr.w	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	2204      	movs	r2, #4
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d012      	beq.n	8001f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2204      	movs	r2, #4
 8001f46:	409a      	lsls	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d043      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d03c      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d018      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d108      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d024      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
 8001fae:	e01f      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
 8001fc0:	e016      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d107      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0208 	bic.w	r2, r2, #8
 8001fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 808f 	beq.w	8002120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8087 	beq.w	8002120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2220      	movs	r2, #32
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b05      	cmp	r3, #5
 8002028:	d136      	bne.n	8002098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0216 	bic.w	r2, r2, #22
 8002038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <HAL_DMA_IRQHandler+0x1da>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0208 	bic.w	r2, r2, #8
 8002068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	223f      	movs	r2, #63	; 0x3f
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208a:	2b00      	cmp	r3, #0
 800208c:	d07e      	beq.n	800218c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
        }
        return;
 8002096:	e079      	b.n	800218c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01d      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10d      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d031      	beq.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
 80020c4:	e02c      	b.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
 80020c6:	bf00      	nop
 80020c8:	20000004 	.word	0x20000004
 80020cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d023      	beq.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
 80020e0:	e01e      	b.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10f      	bne.n	8002110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0210 	bic.w	r2, r2, #16
 80020fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	2b00      	cmp	r3, #0
 8002126:	d032      	beq.n	800218e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d022      	beq.n	800217a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2205      	movs	r2, #5
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	d307      	bcc.n	8002168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f2      	bne.n	800214c <HAL_DMA_IRQHandler+0x2cc>
 8002166:	e000      	b.n	800216a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
 800218a:	e000      	b.n	800218e <HAL_DMA_IRQHandler+0x30e>
        return;
 800218c:	bf00      	nop
    }
  }
}
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d108      	bne.n	80021d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021d2:	e007      	b.n	80021e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	60da      	str	r2, [r3, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	3b10      	subs	r3, #16
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <DMA_CalcBaseAndBitshift+0x64>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800220a:	4a13      	ldr	r2, [pc, #76]	; (8002258 <DMA_CalcBaseAndBitshift+0x68>)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d909      	bls.n	8002232 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	1d1a      	adds	r2, r3, #4
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	659a      	str	r2, [r3, #88]	; 0x58
 8002230:	e007      	b.n	8002242 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	aaaaaaab 	.word	0xaaaaaaab
 8002258:	0800ad90 	.word	0x0800ad90

0800225c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11f      	bne.n	80022b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d856      	bhi.n	800232a <DMA_CheckFifoParam+0xce>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <DMA_CheckFifoParam+0x28>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	08002295 	.word	0x08002295
 8002288:	080022a7 	.word	0x080022a7
 800228c:	08002295 	.word	0x08002295
 8002290:	0800232b 	.word	0x0800232b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d046      	beq.n	800232e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a4:	e043      	b.n	800232e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ae:	d140      	bne.n	8002332 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e03d      	b.n	8002332 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022be:	d121      	bne.n	8002304 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d837      	bhi.n	8002336 <DMA_CheckFifoParam+0xda>
 80022c6:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <DMA_CheckFifoParam+0x70>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022e3 	.word	0x080022e3
 80022d4:	080022dd 	.word	0x080022dd
 80022d8:	080022f5 	.word	0x080022f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      break;
 80022e0:	e030      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d025      	beq.n	800233a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f2:	e022      	b.n	800233a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022fc:	d11f      	bne.n	800233e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002302:	e01c      	b.n	800233e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d903      	bls.n	8002312 <DMA_CheckFifoParam+0xb6>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d003      	beq.n	8002318 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002310:	e018      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
      break;
 8002316:	e015      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      break;
 8002328:	e00b      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 800232a:	bf00      	nop
 800232c:	e00a      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
      break;
 800232e:	bf00      	nop
 8002330:	e008      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
      break;
 8002332:	bf00      	nop
 8002334:	e006      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
      break;
 8002336:	bf00      	nop
 8002338:	e004      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
      break;
 800233a:	bf00      	nop
 800233c:	e002      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
      break;   
 800233e:	bf00      	nop
 8002340:	e000      	b.n	8002344 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
    }
  } 
  
  return status; 
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e165      	b.n	800263c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	f040 8154 	bne.w	8002636 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d005      	beq.n	80023a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b03      	cmp	r3, #3
 8002412:	d017      	beq.n	8002444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d123      	bne.n	8002498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80ae 	beq.w	8002636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_GPIO_Init+0x300>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <HAL_GPIO_Init+0x300>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_GPIO_Init+0x300>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f6:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_GPIO_Init+0x304>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4f      	ldr	r2, [pc, #316]	; (800265c <HAL_GPIO_Init+0x308>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d025      	beq.n	800256e <HAL_GPIO_Init+0x21a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4e      	ldr	r2, [pc, #312]	; (8002660 <HAL_GPIO_Init+0x30c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_GPIO_Init+0x216>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4d      	ldr	r2, [pc, #308]	; (8002664 <HAL_GPIO_Init+0x310>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x212>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4c      	ldr	r2, [pc, #304]	; (8002668 <HAL_GPIO_Init+0x314>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4b      	ldr	r2, [pc, #300]	; (800266c <HAL_GPIO_Init+0x318>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x20a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_GPIO_Init+0x31c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x206>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a49      	ldr	r2, [pc, #292]	; (8002674 <HAL_GPIO_Init+0x320>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x202>
 8002552:	2306      	movs	r3, #6
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002556:	2307      	movs	r3, #7
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002580:	4935      	ldr	r1, [pc, #212]	; (8002658 <HAL_GPIO_Init+0x304>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_GPIO_Init+0x324>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a31      	ldr	r2, [pc, #196]	; (8002678 <HAL_GPIO_Init+0x324>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_GPIO_Init+0x324>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_GPIO_Init+0x324>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <HAL_GPIO_Init+0x324>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <HAL_GPIO_Init+0x324>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_GPIO_Init+0x324>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002630:	4a11      	ldr	r2, [pc, #68]	; (8002678 <HAL_GPIO_Init+0x324>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f ae96 	bls.w	8002370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40013800 	.word	0x40013800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40021400 	.word	0x40021400
 8002674:	40021800 	.word	0x40021800
 8002678:	40013c00 	.word	0x40013c00

0800267c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e001      	b.n	800269e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c8:	e003      	b.n	80026d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4013      	ands	r3, r2
 80026f6:	041a      	lsls	r2, r3, #16
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	400b      	ands	r3, r1
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e12b      	b.n	800297e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe fd3c 	bl	80011b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	; 0x24
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002778:	f001 f91e 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 800277c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a81      	ldr	r2, [pc, #516]	; (8002988 <HAL_I2C_Init+0x274>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d807      	bhi.n	8002798 <HAL_I2C_Init+0x84>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4a80      	ldr	r2, [pc, #512]	; (800298c <HAL_I2C_Init+0x278>)
 800278c:	4293      	cmp	r3, r2
 800278e:	bf94      	ite	ls
 8002790:	2301      	movls	r3, #1
 8002792:	2300      	movhi	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e006      	b.n	80027a6 <HAL_I2C_Init+0x92>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a7d      	ldr	r2, [pc, #500]	; (8002990 <HAL_I2C_Init+0x27c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0e7      	b.n	800297e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a78      	ldr	r2, [pc, #480]	; (8002994 <HAL_I2C_Init+0x280>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a6a      	ldr	r2, [pc, #424]	; (8002988 <HAL_I2C_Init+0x274>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d802      	bhi.n	80027e8 <HAL_I2C_Init+0xd4>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	e009      	b.n	80027fc <HAL_I2C_Init+0xe8>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	4a69      	ldr	r2, [pc, #420]	; (8002998 <HAL_I2C_Init+0x284>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	3301      	adds	r3, #1
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	430b      	orrs	r3, r1
 8002802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800280e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	495c      	ldr	r1, [pc, #368]	; (8002988 <HAL_I2C_Init+0x274>)
 8002818:	428b      	cmp	r3, r1
 800281a:	d819      	bhi.n	8002850 <HAL_I2C_Init+0x13c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e59      	subs	r1, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fbb1 f3f3 	udiv	r3, r1, r3
 800282a:	1c59      	adds	r1, r3, #1
 800282c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002830:	400b      	ands	r3, r1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_I2C_Init+0x138>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1e59      	subs	r1, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fbb1 f3f3 	udiv	r3, r1, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284a:	e051      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 800284c:	2304      	movs	r3, #4
 800284e:	e04f      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <HAL_I2C_Init+0x168>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1e58      	subs	r0, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e012      	b.n	80028a2 <HAL_I2C_Init+0x18e>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e58      	subs	r0, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	0099      	lsls	r1, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Init+0x196>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e022      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10e      	bne.n	80028d0 <HAL_I2C_Init+0x1bc>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e58      	subs	r0, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	440b      	add	r3, r1
 80028c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	0099      	lsls	r1, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	6809      	ldr	r1, [r1, #0]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800291e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6911      	ldr	r1, [r2, #16]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68d2      	ldr	r2, [r2, #12]
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	000186a0 	.word	0x000186a0
 800298c:	001e847f 	.word	0x001e847f
 8002990:	003d08ff 	.word	0x003d08ff
 8002994:	431bde83 	.word	0x431bde83
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	817b      	strh	r3, [r7, #10]
 80029ae:	460b      	mov	r3, r1
 80029b0:	813b      	strh	r3, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029b6:	f7fe ff6d 	bl	8001894 <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	f040 80d9 	bne.w	8002b7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2319      	movs	r3, #25
 80029d0:	2201      	movs	r2, #1
 80029d2:	496d      	ldr	r1, [pc, #436]	; (8002b88 <HAL_I2C_Mem_Write+0x1ec>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f971 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0cc      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_Mem_Write+0x56>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0c5      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d007      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2221      	movs	r2, #33	; 0x21
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a4d      	ldr	r2, [pc, #308]	; (8002b8c <HAL_I2C_Mem_Write+0x1f0>)
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a5a:	88f8      	ldrh	r0, [r7, #6]
 8002a5c:	893a      	ldrh	r2, [r7, #8]
 8002a5e:	8979      	ldrh	r1, [r7, #10]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4603      	mov	r3, r0
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f890 	bl	8002b90 <I2C_RequestMemoryWrite>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d052      	beq.n	8002b1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e081      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f9f2 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d107      	bne.n	8002aa2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06b      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d11b      	bne.n	8002b1c <HAL_I2C_Mem_Write+0x180>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d017      	beq.n	8002b1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1aa      	bne.n	8002a7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f9de 	bl	8002eea <I2C_WaitOnBTFFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d107      	bne.n	8002b4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e016      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	00100002 	.word	0x00100002
 8002b8c:	ffff0000 	.word	0xffff0000

08002b90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	813b      	strh	r3, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f878 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be0:	d103      	bne.n	8002bea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e05f      	b.n	8002cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bee:	897b      	ldrh	r3, [r7, #10]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	492d      	ldr	r1, [pc, #180]	; (8002cb8 <I2C_RequestMemoryWrite+0x128>)
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f8b0 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e04c      	b.n	8002cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f91a 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d107      	bne.n	8002c52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e02b      	b.n	8002cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	e021      	b.n	8002cac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c68:	893b      	ldrh	r3, [r7, #8]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8f4 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d107      	bne.n	8002c9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e005      	b.n	8002cae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca2:	893b      	ldrh	r3, [r7, #8]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	00010002 	.word	0x00010002

08002cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ccc:	e025      	b.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd4:	d021      	beq.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7fe fddd 	bl	8001894 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d116      	bne.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e023      	b.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10d      	bne.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	e00c      	b.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf0c      	ite	eq
 8002d52:	2301      	moveq	r3, #1
 8002d54:	2300      	movne	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d0b6      	beq.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d78:	e051      	b.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	d123      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e046      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d021      	beq.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7fe fd5b 	bl	8001894 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d116      	bne.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e020      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10c      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e00b      	b.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d18d      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e74:	e02d      	b.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f878 	bl	8002f6c <I2C_IsAcknowledgeFailed>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e02d      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e8c:	d021      	beq.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fd01 	bl	8001894 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d116      	bne.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d1ca      	bne.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef6:	e02d      	b.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f837 	bl	8002f6c <I2C_IsAcknowledgeFailed>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e02d      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f0e:	d021      	beq.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7fe fcc0 	bl	8001894 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e007      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d1ca      	bne.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	d11b      	bne.n	8002fbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0e1      	b.n	80031a2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a6d      	ldr	r2, [pc, #436]	; (80031ac <HAL_I2S_Init+0x1e0>)
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fe f925 	bl	8001248 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003014:	f023 030f 	bic.w	r3, r3, #15
 8003018:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2202      	movs	r2, #2
 8003020:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d06f      	beq.n	800310a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003032:	2310      	movs	r3, #16
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e001      	b.n	800303c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b20      	cmp	r3, #32
 8003042:	d802      	bhi.n	800304a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_I2S_Init+0x1e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_I2S_Init+0x92>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <HAL_I2S_Init+0x1e8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d104      	bne.n	8003068 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800305e:	2001      	movs	r0, #1
 8003060:	f000 ffe8 	bl	8004034 <HAL_RCCEx_GetPeriphCLKFreq>
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	e003      	b.n	8003070 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003068:	2002      	movs	r0, #2
 800306a:	f000 ffe3 	bl	8004034 <HAL_RCCEx_GetPeriphCLKFreq>
 800306e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003078:	d125      	bne.n	80030c6 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	fbb2 f2f3 	udiv	r2, r2, r3
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	3305      	adds	r3, #5
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e01f      	b.n	80030e4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	461a      	mov	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	3305      	adds	r3, #5
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e00e      	b.n	80030e4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	3305      	adds	r3, #5
 80030e2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4a34      	ldr	r2, [pc, #208]	; (80031b8 <HAL_I2S_Init+0x1ec>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	e003      	b.n	8003112 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800310a:	2302      	movs	r3, #2
 800310c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d902      	bls.n	800311e <HAL_I2S_Init+0x152>
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	d907      	bls.n	800312e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f043 0210 	orr.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e039      	b.n	80031a2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	ea42 0103 	orr.w	r1, r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	430a      	orrs	r2, r1
 8003140:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6851      	ldr	r1, [r2, #4]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6992      	ldr	r2, [r2, #24]
 8003164:	430a      	orrs	r2, r1
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003170:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b30      	cmp	r3, #48	; 0x30
 8003178:	d003      	beq.n	8003182 <HAL_I2S_Init+0x1b6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2bb0      	cmp	r3, #176	; 0xb0
 8003180:	d107      	bne.n	8003192 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003190:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	0800364d 	.word	0x0800364d
 80031b0:	40003800 	.word	0x40003800
 80031b4:	40003c00 	.word	0x40003c00
 80031b8:	cccccccd 	.word	0xcccccccd

080031bc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_I2S_Receive_DMA+0x1a>
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0a1      	b.n	800331e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_I2S_Receive_DMA+0x2e>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e099      	b.n	800331e <HAL_I2S_Receive_DMA+0x162>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d005      	beq.n	800320a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	e089      	b.n	800331e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2204      	movs	r2, #4
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d002      	beq.n	8003236 <HAL_I2S_Receive_DMA+0x7a>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d10a      	bne.n	800324c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	865a      	strh	r2, [r3, #50]	; 0x32
 800324a:	e005      	b.n	8003258 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	88fa      	ldrh	r2, [r7, #6]
 8003256:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	4a32      	ldr	r2, [pc, #200]	; (8003328 <HAL_I2S_Receive_DMA+0x16c>)
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_I2S_Receive_DMA+0x170>)
 8003266:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	4a30      	ldr	r2, [pc, #192]	; (8003330 <HAL_I2S_Receive_DMA+0x174>)
 800326e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800327e:	d10a      	bne.n	8003296 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	4619      	mov	r1, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80032ac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80032ae:	f7fe fcfd 	bl	8001cac <HAL_DMA_Start_IT>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00f      	beq.n	80032d8 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	f043 0208 	orr.w	r2, r3, #8
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e022      	b.n	800331e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	0800352b 	.word	0x0800352b
 800332c:	080034e9 	.word	0x080034e9
 8003330:	08003547 	.word	0x08003547

08003334 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003348:	d003      	beq.n	8003352 <HAL_I2S_DMAStop+0x1e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d155      	bne.n	80033fe <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00f      	beq.n	800337a <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fcfc 	bl	8001d5c <HAL_DMA_Abort>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f043 0208 	orr.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800337a:	2364      	movs	r3, #100	; 0x64
 800337c:	2201      	movs	r2, #1
 800337e:	2102      	movs	r1, #2
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9ed 	bl	8003760 <I2S_WaitFlagStateUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80033a4:	2364      	movs	r3, #100	; 0x64
 80033a6:	2200      	movs	r2, #0
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f9d8 	bl	8003760 <I2S_WaitFlagStateUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0202 	bic.w	r2, r2, #2
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	e04d      	b.n	800349a <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003406:	d004      	beq.n	8003412 <HAL_I2S_DMAStop+0xde>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003410:	d143      	bne.n	800349a <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00f      	beq.n	800343a <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fc9c 	bl	8001d5c <HAL_DMA_Abort>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0208 	orr.w	r2, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003448:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003478:	d10c      	bne.n	8003494 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
 8003492:	e002      	b.n	800349a <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10e      	bne.n	800351c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7fd fbfd 	bl	8000d1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff ffc1 	bl	80034c0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0203 	bic.w	r2, r2, #3
 8003562:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0208 	orr.w	r2, r3, #8
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff ffa5 	bl	80034d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c9a      	adds	r2, r3, #2
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10e      	bne.n	80035e6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff63 	bl	80034ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	b292      	uxth	r2, r2
 8003602:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	1c9a      	adds	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10e      	bne.n	8003644 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003634:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fb6c 	bl	8000d1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b04      	cmp	r3, #4
 8003666:	d13a      	bne.n	80036de <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d109      	bne.n	8003686 <I2S_IRQHandler+0x3a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d102      	bne.n	8003686 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ffb4 	bl	80035ee <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d126      	bne.n	80036de <I2S_IRQHandler+0x92>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b20      	cmp	r3, #32
 800369c:	d11f      	bne.n	80036de <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ac:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f043 0202 	orr.w	r2, r3, #2
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff fefb 	bl	80034d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d136      	bne.n	8003758 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d109      	bne.n	8003708 <I2S_IRQHandler+0xbc>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b80      	cmp	r3, #128	; 0x80
 8003700:	d102      	bne.n	8003708 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff45 	bl	8003592 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d122      	bne.n	8003758 <I2S_IRQHandler+0x10c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d11b      	bne.n	8003758 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800372e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f043 0204 	orr.w	r2, r3, #4
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff febe 	bl	80034d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003758:	bf00      	nop
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7fe f890 	bl	8001894 <HAL_GetTick>
 8003774:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003776:	e018      	b.n	80037aa <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377e:	d014      	beq.n	80037aa <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003780:	f7fe f888 	bl	8001894 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d902      	bls.n	8003796 <I2S_WaitFlagStateUntilTimeout+0x36>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e00f      	b.n	80037ca <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1d7      	bne.n	8003778 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0cc      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b68      	ldr	r3, [pc, #416]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d90c      	bls.n	8003810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800384a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d044      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d119      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	2b03      	cmp	r3, #3
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e067      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4934      	ldr	r1, [pc, #208]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fd ffe6 	bl	8001894 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fd ffe2 	bl	8001894 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d20c      	bcs.n	800391c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800395a:	f000 fdad 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd ff46 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023c00 	.word	0x40023c00
 8003990:	40023800 	.word	0x40023800
 8003994:	0800ad78 	.word	0x0800ad78
 8003998:	20000004 	.word	0x20000004
 800399c:	20000008 	.word	0x20000008

080039a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000004 	.word	0x20000004

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039bc:	f7ff fff0 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0a9b      	lsrs	r3, r3, #10
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	0800ad88 	.word	0x0800ad88

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a18:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	496c      	ldr	r1, [pc, #432]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003a36:	2301      	movs	r3, #1
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a46:	4b64      	ldr	r3, [pc, #400]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	4960      	ldr	r1, [pc, #384]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003a64:	2301      	movs	r3, #1
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a74:	4b58      	ldr	r3, [pc, #352]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4955      	ldr	r1, [pc, #340]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a92:	d101      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003a94:	2301      	movs	r3, #1
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ab0:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	4946      	ldr	r1, [pc, #280]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003adc:	2301      	movs	r3, #1
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 808a 	beq.w	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	4a38      	ldr	r2, [pc, #224]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afc:	6413      	str	r3, [r2, #64]	; 0x40
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b0a:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a33      	ldr	r2, [pc, #204]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b16:	f7fd febd 	bl	8001894 <HAL_GetTick>
 8003b1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fd feb9 	bl	8001894 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e278      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b30:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b3c:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b44:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02f      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d028      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b62:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b70:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b76:	4b18      	ldr	r3, [pc, #96]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d114      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fd fe87 	bl	8001894 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd fe83 	bl	8001894 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e240      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb8:	d114      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	4902      	ldr	r1, [pc, #8]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	608b      	str	r3, [r1, #8]
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	42470e40 	.word	0x42470e40
 8003be4:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a49      	ldr	r2, [pc, #292]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	4944      	ldr	r1, [pc, #272]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003c14:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003c16:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c24:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	4937      	ldr	r1, [pc, #220]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c46:	4b32      	ldr	r3, [pc, #200]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c54:	492e      	ldr	r1, [pc, #184]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d011      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c68:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	4926      	ldr	r1, [pc, #152]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c86:	d101      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	491a      	ldr	r1, [pc, #104]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d011      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	4911      	ldr	r1, [pc, #68]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd8:	d101      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cec:	f040 80ff 	bne.w	8003eee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fdcd 	bl	8001894 <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cfc:	e00e      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cfe:	f7fd fdc9 	bl	8001894 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d907      	bls.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e188      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d10:	40023800 	.word	0x40023800
 8003d14:	424711e0 	.word	0x424711e0
 8003d18:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d1c:	4b7e      	ldr	r3, [pc, #504]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ea      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d028      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d124      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d50:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d62:	4b6d      	ldr	r3, [pc, #436]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d68:	0e1b      	lsrs	r3, r3, #24
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	431a      	orrs	r2, r3
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	071b      	lsls	r3, r3, #28
 8003d92:	4961      	ldr	r1, [pc, #388]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d035      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc4:	d130      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003dc6:	4b54      	ldr	r3, [pc, #336]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd8:	4b4f      	ldr	r3, [pc, #316]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dde:	0f1b      	lsrs	r3, r3, #28
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	019b      	lsls	r3, r3, #6
 8003df0:	431a      	orrs	r2, r3
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	085b      	lsrs	r3, r3, #1
 8003df6:	3b01      	subs	r3, #1
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	431a      	orrs	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	071b      	lsls	r3, r3, #28
 8003e08:	4943      	ldr	r1, [pc, #268]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e10:	4b41      	ldr	r3, [pc, #260]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e16:	f023 021f 	bic.w	r2, r3, #31
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	493d      	ldr	r1, [pc, #244]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d029      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3c:	d124      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e3e:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e56:	0f1b      	lsrs	r3, r3, #28
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	019b      	lsls	r3, r3, #6
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	3b01      	subs	r3, #1
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	431a      	orrs	r2, r3
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	071b      	lsls	r3, r3, #28
 8003e80:	4925      	ldr	r1, [pc, #148]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d016      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	061b      	lsls	r3, r3, #24
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	071b      	lsls	r3, r3, #28
 8003eba:	4917      	ldr	r1, [pc, #92]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ec2:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ec8:	f7fd fce4 	bl	8001894 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ed0:	f7fd fce0 	bl	8001894 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e09f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f040 8095 	bne.w	8004020 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003efc:	f7fd fcca 	bl	8001894 <HAL_GetTick>
 8003f00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f02:	e00f      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f04:	f7fd fcc6 	bl	8001894 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d908      	bls.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e085      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	42470068 	.word	0x42470068
 8003f20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f24:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f30:	d0e8      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02b      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d127      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f5a:	4b34      	ldr	r3, [pc, #208]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	431a      	orrs	r2, r3
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	4928      	ldr	r1, [pc, #160]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	4922      	ldr	r1, [pc, #136]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01d      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fbe:	d118      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	0e1b      	lsrs	r3, r3, #24
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	019b      	lsls	r3, r3, #6
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	4910      	ldr	r1, [pc, #64]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff8:	f7fd fc4c 	bl	8001894 <HAL_GetTick>
 8003ffc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004000:	f7fd fc48 	bl	8001894 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e007      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800401a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401e:	d1ef      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3730      	adds	r7, #48	; 0x30
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800
 8004030:	42470070 	.word	0x42470070

08004034 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	2b07      	cmp	r3, #7
 800405a:	f200 8220 	bhi.w	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800405e:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	08004267 	.word	0x08004267
 8004068:	08004389 	.word	0x08004389
 800406c:	0800449f 	.word	0x0800449f
 8004070:	08004085 	.word	0x08004085
 8004074:	0800449f 	.word	0x0800449f
 8004078:	0800449f 	.word	0x0800449f
 800407c:	0800449f 	.word	0x0800449f
 8004080:	08004085 	.word	0x08004085
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004084:	4ba7      	ldr	r3, [pc, #668]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800409a:	f000 80d6 	beq.w	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040a4:	f200 80dd 	bhi.w	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ae:	f000 809f 	beq.w	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b8:	f200 80d3 	bhi.w	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d05b      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ca:	f200 80ca 	bhi.w	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040d4:	f000 80b6 	beq.w	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040de:	f200 80c0 	bhi.w	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040e8:	f000 8082 	beq.w	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f2:	f200 80b6 	bhi.w	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004102:	d03b      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004104:	e0ad      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004106:	4b87      	ldr	r3, [pc, #540]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004112:	4b84      	ldr	r3, [pc, #528]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411c:	4a82      	ldr	r2, [pc, #520]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e008      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004126:	4b7f      	ldr	r3, [pc, #508]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004130:	4a7d      	ldr	r2, [pc, #500]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004138:	4b7a      	ldr	r3, [pc, #488]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	0e1b      	lsrs	r3, r3, #24
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8004146:	4b77      	ldr	r3, [pc, #476]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	099b      	lsrs	r3, r3, #6
 800414e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	fb03 f202 	mul.w	r2, r3, r2
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004160:	4b70      	ldr	r3, [pc, #448]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	3301      	adds	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	61fb      	str	r3, [r7, #28]
          break;
 800417a:	e073      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800417c:	4b69      	ldr	r3, [pc, #420]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004188:	4b66      	ldr	r3, [pc, #408]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800418a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004192:	4a65      	ldr	r2, [pc, #404]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e008      	b.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a6:	4a60      	ldr	r2, [pc, #384]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80041ae:	4b5d      	ldr	r3, [pc, #372]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b4:	0e1b      	lsrs	r3, r3, #24
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80041bc:	4b59      	ldr	r3, [pc, #356]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80041be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	fb03 f202 	mul.w	r2, r3, r2
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80041d6:	4b53      	ldr	r3, [pc, #332]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	3301      	adds	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	61fb      	str	r3, [r7, #28]
          break;
 80041ee:	e039      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80041f0:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d108      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041fc:	4b49      	ldr	r3, [pc, #292]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004204:	4a48      	ldr	r2, [pc, #288]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e007      	b.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800420e:	4b45      	ldr	r3, [pc, #276]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004216:	4a44      	ldr	r2, [pc, #272]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800421e:	4b41      	ldr	r3, [pc, #260]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	0f1b      	lsrs	r3, r3, #28
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800422a:	4b3e      	ldr	r3, [pc, #248]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	099b      	lsrs	r3, r3, #6
 8004230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	fb03 f202 	mul.w	r2, r3, r2
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	61fb      	str	r3, [r7, #28]
          break;
 8004242:	e00f      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004244:	4b39      	ldr	r3, [pc, #228]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004246:	61fb      	str	r3, [r7, #28]
          break;
 8004248:	e00c      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800424a:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8004256:	4b34      	ldr	r3, [pc, #208]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004258:	61fb      	str	r3, [r7, #28]
          break;
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800425c:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800425e:	61fb      	str	r3, [r7, #28]
          break;
 8004260:	e000      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004262:	bf00      	nop
        }
      }
      break;
 8004264:	e11b      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004266:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004278:	d075      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004280:	d87e      	bhi.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004288:	d03c      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004290:	d876      	bhi.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800429e:	d16f      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042a0:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80042a2:	61fb      	str	r3, [r7, #28]
          break;
 80042a4:	e06f      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042a6:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b2:	d109      	bne.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042be:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	e008      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	099b      	lsrs	r3, r3, #6
 80042e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
 80042ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f4:	0f1b      	lsrs	r3, r3, #28
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	61fb      	str	r3, [r7, #28]
          break;
 8004302:	e040      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004310:	d10e      	bne.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431a:	4a03      	ldr	r2, [pc, #12]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e00d      	b.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004324:	40023800 	.word	0x40023800
 8004328:	00f42400 	.word	0x00f42400
 800432c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004330:	4b5e      	ldr	r3, [pc, #376]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004338:	4a5d      	ldr	r2, [pc, #372]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004340:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004352:	4b56      	ldr	r3, [pc, #344]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	0f1b      	lsrs	r3, r3, #28
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	61fb      	str	r3, [r7, #28]
          break;
 8004364:	e00f      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004366:	4b51      	ldr	r3, [pc, #324]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004372:	d102      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          {
            frequency = HSE_VALUE;
 8004374:	4b4e      	ldr	r3, [pc, #312]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004376:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004378:	e005      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = HSI_VALUE;
 800437a:	4b4d      	ldr	r3, [pc, #308]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800437c:	61fb      	str	r3, [r7, #28]
          break;
 800437e:	e002      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
          break;
 8004384:	bf00      	nop
        }
      }
      break;
 8004386:	e08a      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004388:	4b48      	ldr	r3, [pc, #288]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800438a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800439a:	d06f      	beq.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80043a2:	d878      	bhi.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043aa:	d03c      	beq.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b2:	d870      	bhi.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d006      	beq.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c0:	d169      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043c2:	4b3c      	ldr	r3, [pc, #240]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80043c4:	61fb      	str	r3, [r7, #28]
          break;
 80043c6:	e069      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043c8:	4b38      	ldr	r3, [pc, #224]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d4:	d109      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043d6:	4b35      	ldr	r3, [pc, #212]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	4a33      	ldr	r2, [pc, #204]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e008      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043ea:	4b30      	ldr	r3, [pc, #192]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f4:	4a2e      	ldr	r2, [pc, #184]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043fc:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80043fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004416:	0f1b      	lsrs	r3, r3, #28
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	61fb      	str	r3, [r7, #28]
          break;
 8004424:	e03a      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004432:	d108      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800443c:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e007      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444e:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004468:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	0f1b      	lsrs	r3, r3, #28
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	61fb      	str	r3, [r7, #28]
          break;
 800447a:	e00f      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d102      	bne.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          {
            frequency = HSE_VALUE;
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800448c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800448e:	e005      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = HSI_VALUE;
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004492:	61fb      	str	r3, [r7, #28]
          break;
 8004494:	e002      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
          break;
 800449a:	bf00      	nop
        }
      }
      break;
 800449c:	bf00      	nop
    }
  }
  return frequency;
 800449e:	69fb      	ldr	r3, [r7, #28]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3724      	adds	r7, #36	; 0x24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40023800 	.word	0x40023800
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	00bb8000 	.word	0x00bb8000

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b0ae      	sub	sp, #184	; 0xb8
 80044be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044de:	4bcb      	ldr	r3, [pc, #812]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b0c      	cmp	r3, #12
 80044e8:	f200 8204 	bhi.w	80048f4 <HAL_RCC_GetSysClockFreq+0x43c>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004529 	.word	0x08004529
 80044f8:	080048f5 	.word	0x080048f5
 80044fc:	080048f5 	.word	0x080048f5
 8004500:	080048f5 	.word	0x080048f5
 8004504:	08004531 	.word	0x08004531
 8004508:	080048f5 	.word	0x080048f5
 800450c:	080048f5 	.word	0x080048f5
 8004510:	080048f5 	.word	0x080048f5
 8004514:	08004539 	.word	0x08004539
 8004518:	080048f5 	.word	0x080048f5
 800451c:	080048f5 	.word	0x080048f5
 8004520:	080048f5 	.word	0x080048f5
 8004524:	08004729 	.word	0x08004729
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4bb9      	ldr	r3, [pc, #740]	; (8004810 <HAL_RCC_GetSysClockFreq+0x358>)
 800452a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800452e:	e1e5      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004530:	4bb7      	ldr	r3, [pc, #732]	; (8004810 <HAL_RCC_GetSysClockFreq+0x358>)
 8004532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004536:	e1e1      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004538:	4bb4      	ldr	r3, [pc, #720]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004544:	4bb1      	ldr	r3, [pc, #708]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d071      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004550:	4bae      	ldr	r3, [pc, #696]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	099b      	lsrs	r3, r3, #6
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800455c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800456c:	2300      	movs	r3, #0
 800456e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004576:	4622      	mov	r2, r4
 8004578:	462b      	mov	r3, r5
 800457a:	f04f 0000 	mov.w	r0, #0
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	0159      	lsls	r1, r3, #5
 8004584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004588:	0150      	lsls	r0, r2, #5
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4621      	mov	r1, r4
 8004590:	1a51      	subs	r1, r2, r1
 8004592:	6439      	str	r1, [r7, #64]	; 0x40
 8004594:	4629      	mov	r1, r5
 8004596:	eb63 0301 	sbc.w	r3, r3, r1
 800459a:	647b      	str	r3, [r7, #68]	; 0x44
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80045a8:	4649      	mov	r1, r9
 80045aa:	018b      	lsls	r3, r1, #6
 80045ac:	4641      	mov	r1, r8
 80045ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045b2:	4641      	mov	r1, r8
 80045b4:	018a      	lsls	r2, r1, #6
 80045b6:	4641      	mov	r1, r8
 80045b8:	1a51      	subs	r1, r2, r1
 80045ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80045bc:	4649      	mov	r1, r9
 80045be:	eb63 0301 	sbc.w	r3, r3, r1
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80045d0:	4649      	mov	r1, r9
 80045d2:	00cb      	lsls	r3, r1, #3
 80045d4:	4641      	mov	r1, r8
 80045d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045da:	4641      	mov	r1, r8
 80045dc:	00ca      	lsls	r2, r1, #3
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	4622      	mov	r2, r4
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ea:	462b      	mov	r3, r5
 80045ec:	460a      	mov	r2, r1
 80045ee:	eb42 0303 	adc.w	r3, r2, r3
 80045f2:	637b      	str	r3, [r7, #52]	; 0x34
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004600:	4629      	mov	r1, r5
 8004602:	028b      	lsls	r3, r1, #10
 8004604:	4621      	mov	r1, r4
 8004606:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800460a:	4621      	mov	r1, r4
 800460c:	028a      	lsls	r2, r1, #10
 800460e:	4610      	mov	r0, r2
 8004610:	4619      	mov	r1, r3
 8004612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800461c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004620:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004624:	f7fb fe54 	bl	80002d0 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4613      	mov	r3, r2
 800462e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004632:	e067      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004634:	4b75      	ldr	r3, [pc, #468]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004640:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464c:	67bb      	str	r3, [r7, #120]	; 0x78
 800464e:	2300      	movs	r3, #0
 8004650:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004652:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004656:	4622      	mov	r2, r4
 8004658:	462b      	mov	r3, r5
 800465a:	f04f 0000 	mov.w	r0, #0
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	0159      	lsls	r1, r3, #5
 8004664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004668:	0150      	lsls	r0, r2, #5
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4621      	mov	r1, r4
 8004670:	1a51      	subs	r1, r2, r1
 8004672:	62b9      	str	r1, [r7, #40]	; 0x28
 8004674:	4629      	mov	r1, r5
 8004676:	eb63 0301 	sbc.w	r3, r3, r1
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004688:	4649      	mov	r1, r9
 800468a:	018b      	lsls	r3, r1, #6
 800468c:	4641      	mov	r1, r8
 800468e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004692:	4641      	mov	r1, r8
 8004694:	018a      	lsls	r2, r1, #6
 8004696:	4641      	mov	r1, r8
 8004698:	ebb2 0a01 	subs.w	sl, r2, r1
 800469c:	4649      	mov	r1, r9
 800469e:	eb63 0b01 	sbc.w	fp, r3, r1
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b6:	4692      	mov	sl, r2
 80046b8:	469b      	mov	fp, r3
 80046ba:	4623      	mov	r3, r4
 80046bc:	eb1a 0303 	adds.w	r3, sl, r3
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	462b      	mov	r3, r5
 80046c4:	eb4b 0303 	adc.w	r3, fp, r3
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046d6:	4629      	mov	r1, r5
 80046d8:	028b      	lsls	r3, r1, #10
 80046da:	4621      	mov	r1, r4
 80046dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046e0:	4621      	mov	r1, r4
 80046e2:	028a      	lsls	r2, r1, #10
 80046e4:	4610      	mov	r0, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046ec:	2200      	movs	r2, #0
 80046ee:	673b      	str	r3, [r7, #112]	; 0x70
 80046f0:	677a      	str	r2, [r7, #116]	; 0x74
 80046f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80046f6:	f7fb fdeb 	bl	80002d0 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4613      	mov	r3, r2
 8004700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004704:	4b41      	ldr	r3, [pc, #260]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	3301      	adds	r3, #1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004716:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800471a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004726:	e0e9      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004728:	4b38      	ldr	r3, [pc, #224]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004734:	4b35      	ldr	r3, [pc, #212]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d069      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004740:	4b32      	ldr	r3, [pc, #200]	; (800480c <HAL_RCC_GetSysClockFreq+0x354>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	2200      	movs	r2, #0
 8004748:	66bb      	str	r3, [r7, #104]	; 0x68
 800474a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800474c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	663b      	str	r3, [r7, #96]	; 0x60
 8004754:	2300      	movs	r3, #0
 8004756:	667b      	str	r3, [r7, #100]	; 0x64
 8004758:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800475c:	4622      	mov	r2, r4
 800475e:	462b      	mov	r3, r5
 8004760:	f04f 0000 	mov.w	r0, #0
 8004764:	f04f 0100 	mov.w	r1, #0
 8004768:	0159      	lsls	r1, r3, #5
 800476a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476e:	0150      	lsls	r0, r2, #5
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4621      	mov	r1, r4
 8004776:	1a51      	subs	r1, r2, r1
 8004778:	61b9      	str	r1, [r7, #24]
 800477a:	4629      	mov	r1, r5
 800477c:	eb63 0301 	sbc.w	r3, r3, r1
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800478e:	4659      	mov	r1, fp
 8004790:	018b      	lsls	r3, r1, #6
 8004792:	4651      	mov	r1, sl
 8004794:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004798:	4651      	mov	r1, sl
 800479a:	018a      	lsls	r2, r1, #6
 800479c:	4651      	mov	r1, sl
 800479e:	ebb2 0801 	subs.w	r8, r2, r1
 80047a2:	4659      	mov	r1, fp
 80047a4:	eb63 0901 	sbc.w	r9, r3, r1
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047bc:	4690      	mov	r8, r2
 80047be:	4699      	mov	r9, r3
 80047c0:	4623      	mov	r3, r4
 80047c2:	eb18 0303 	adds.w	r3, r8, r3
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	462b      	mov	r3, r5
 80047ca:	eb49 0303 	adc.w	r3, r9, r3
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047dc:	4629      	mov	r1, r5
 80047de:	028b      	lsls	r3, r1, #10
 80047e0:	4621      	mov	r1, r4
 80047e2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e6:	4621      	mov	r1, r4
 80047e8:	028a      	lsls	r2, r1, #10
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f2:	2200      	movs	r2, #0
 80047f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047fc:	f7fb fd68 	bl	80002d0 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4613      	mov	r3, r2
 8004806:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800480a:	e063      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x41c>
 800480c:	40023800 	.word	0x40023800
 8004810:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004814:	4b3d      	ldr	r3, [pc, #244]	; (800490c <HAL_RCC_GetSysClockFreq+0x454>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	2200      	movs	r2, #0
 800481c:	4618      	mov	r0, r3
 800481e:	4611      	mov	r1, r2
 8004820:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004824:	653b      	str	r3, [r7, #80]	; 0x50
 8004826:	2300      	movs	r3, #0
 8004828:	657b      	str	r3, [r7, #84]	; 0x54
 800482a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800482e:	4642      	mov	r2, r8
 8004830:	464b      	mov	r3, r9
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	0159      	lsls	r1, r3, #5
 800483c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004840:	0150      	lsls	r0, r2, #5
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4641      	mov	r1, r8
 8004848:	1a51      	subs	r1, r2, r1
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	4649      	mov	r1, r9
 800484e:	eb63 0301 	sbc.w	r3, r3, r1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004860:	4659      	mov	r1, fp
 8004862:	018b      	lsls	r3, r1, #6
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486a:	4651      	mov	r1, sl
 800486c:	018a      	lsls	r2, r1, #6
 800486e:	4651      	mov	r1, sl
 8004870:	1a54      	subs	r4, r2, r1
 8004872:	4659      	mov	r1, fp
 8004874:	eb63 0501 	sbc.w	r5, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	464b      	mov	r3, r9
 8004894:	eb45 0303 	adc.w	r3, r5, r3
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048a6:	4629      	mov	r1, r5
 80048a8:	028b      	lsls	r3, r1, #10
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b0:	4621      	mov	r1, r4
 80048b2:	028a      	lsls	r2, r1, #10
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048bc:	2200      	movs	r2, #0
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80048c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048c6:	f7fb fd03 	bl	80002d0 <__aeabi_uldivmod>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4613      	mov	r3, r2
 80048d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_RCC_GetSysClockFreq+0x454>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	0f1b      	lsrs	r3, r3, #28
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80048e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048f2:	e003      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetSysClockFreq+0x458>)
 80048f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004900:	4618      	mov	r0, r3
 8004902:	37b8      	adds	r7, #184	; 0xb8
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800
 8004910:	00f42400 	.word	0x00f42400

08004914 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e28d      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8083 	beq.w	8004a3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004934:	4b94      	ldr	r3, [pc, #592]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b04      	cmp	r3, #4
 800493e:	d019      	beq.n	8004974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004940:	4b91      	ldr	r3, [pc, #580]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004948:	2b08      	cmp	r3, #8
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800494c:	4b8e      	ldr	r3, [pc, #568]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004958:	d00c      	beq.n	8004974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495a:	4b8b      	ldr	r3, [pc, #556]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004962:	2b0c      	cmp	r3, #12
 8004964:	d112      	bne.n	800498c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004972:	d10b      	bne.n	800498c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	4b84      	ldr	r3, [pc, #528]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05b      	beq.n	8004a38 <HAL_RCC_OscConfig+0x124>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d157      	bne.n	8004a38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e25a      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_OscConfig+0x90>
 8004996:	4b7c      	ldr	r3, [pc, #496]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7b      	ldr	r2, [pc, #492]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0xcc>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0xb4>
 80049ae:	4b76      	ldr	r3, [pc, #472]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a75      	ldr	r2, [pc, #468]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a72      	ldr	r2, [pc, #456]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xcc>
 80049c8:	4b6f      	ldr	r3, [pc, #444]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6e      	ldr	r2, [pc, #440]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6b      	ldr	r2, [pc, #428]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fc ff54 	bl	8001894 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fc ff50 	bl	8001894 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e21f      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xdc>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fc ff40 	bl	8001894 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fc ff3c 	bl	8001894 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e20b      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x104>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d06f      	beq.n	8004b26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a46:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d017      	beq.n	8004a82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d11c      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a76:	4b44      	ldr	r3, [pc, #272]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d116      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_RCC_OscConfig+0x186>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e1d3      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9a:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4937      	ldr	r1, [pc, #220]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	e03a      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d020      	beq.n	8004afa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab8:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <HAL_RCC_OscConfig+0x278>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fc fee9 	bl	8001894 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac6:	f7fc fee5 	bl	8001894 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e1b4      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae4:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4925      	ldr	r1, [pc, #148]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]
 8004af8:	e015      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <HAL_RCC_OscConfig+0x278>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fc fec8 	bl	8001894 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b08:	f7fc fec4 	bl	8001894 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e193      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d036      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fc fea8 	bl	8001894 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fc fea4 	bl	8001894 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e173      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x234>
 8004b66:	e01b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fc fe91 	bl	8001894 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b74:	e00e      	b.n	8004b94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b76:	f7fc fe8d 	bl	8001894 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d907      	bls.n	8004b94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e15c      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	42470000 	.word	0x42470000
 8004b90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b94:	4b8a      	ldr	r3, [pc, #552]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ea      	bne.n	8004b76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8097 	beq.w	8004cdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb2:	4b83      	ldr	r3, [pc, #524]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	4a7e      	ldr	r2, [pc, #504]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bce:	4b7c      	ldr	r3, [pc, #496]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bde:	4b79      	ldr	r3, [pc, #484]	; (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d118      	bne.n	8004c1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bea:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a75      	ldr	r2, [pc, #468]	; (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf6:	f7fc fe4d 	bl	8001894 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfe:	f7fc fe49 	bl	8001894 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e118      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c10:	4b6c      	ldr	r3, [pc, #432]	; (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d106      	bne.n	8004c32 <HAL_RCC_OscConfig+0x31e>
 8004c24:	4b66      	ldr	r3, [pc, #408]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4a65      	ldr	r2, [pc, #404]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c30:	e01c      	b.n	8004c6c <HAL_RCC_OscConfig+0x358>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x340>
 8004c3a:	4b61      	ldr	r3, [pc, #388]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	4a60      	ldr	r2, [pc, #384]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	6713      	str	r3, [r2, #112]	; 0x70
 8004c46:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a5d      	ldr	r2, [pc, #372]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0x358>
 8004c54:	4b5a      	ldr	r3, [pc, #360]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a59      	ldr	r2, [pc, #356]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c60:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	4a56      	ldr	r2, [pc, #344]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c66:	f023 0304 	bic.w	r3, r3, #4
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fc fe0e 	bl	8001894 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fc fe0a 	bl	8001894 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0d7      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ee      	beq.n	8004c7c <HAL_RCC_OscConfig+0x368>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fc fdf8 	bl	8001894 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fc fdf4 	bl	8001894 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0c1      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbe:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ee      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	4a3a      	ldr	r2, [pc, #232]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80ad 	beq.w	8004e40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d060      	beq.n	8004db4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d145      	bne.n	8004d86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fc fdc8 	bl	8001894 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fc fdc4 	bl	8001894 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e093      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	4b29      	ldr	r3, [pc, #164]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	019b      	lsls	r3, r3, #6
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	071b      	lsls	r3, r3, #28
 8004d52:	491b      	ldr	r1, [pc, #108]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fc fd99 	bl	8001894 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fc fd95 	bl	8001894 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e064      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d78:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x452>
 8004d84:	e05c      	b.n	8004e40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fc fd82 	bl	8001894 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fc fd7e 	bl	8001894 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04d      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x480>
 8004db2:	e045      	b.n	8004e40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d107      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e040      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dcc:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <HAL_RCC_OscConfig+0x538>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d030      	beq.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d129      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d122      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d119      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	3b01      	subs	r3, #1
 8004e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d10f      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800

08004e50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e022      	b.n	8004ea8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7fc faa9 	bl	80013cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f814 	bl	8004eb0 <HAL_SD_InitCard>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e00a      	b.n	8004ea8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b08e      	sub	sp, #56	; 0x38
 8004eb4:	af04      	add	r7, sp, #16
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004ecc:	2376      	movs	r3, #118	; 0x76
 8004ece:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681d      	ldr	r5, [r3, #0]
 8004ed4:	466c      	mov	r4, sp
 8004ed6:	f107 0314 	add.w	r3, r7, #20
 8004eda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ee2:	f107 0308 	add.w	r3, r7, #8
 8004ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f001 fbd0 	bl	800668e <SDIO_Init>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e04f      	b.n	8004fa0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004f00:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <HAL_SD_InitCard+0xf8>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 fc08 	bl	8006720 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004f10:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <HAL_SD_InitCard+0xf8>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004f16:	2002      	movs	r0, #2
 8004f18:	f7fc fcc8 	bl	80018ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f001 f8f1 	bl	8006104 <SD_PowerON>
 8004f22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e02e      	b.n	8004fa0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 f810 	bl	8005f68 <SD_InitCard>
 8004f48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00b      	beq.n	8004f68 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e01b      	b.n	8004fa0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fc67 	bl	8006844 <SDMMC_CmdBlockLength>
 8004f76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00f      	beq.n	8004f9e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <HAL_SD_InitCard+0xfc>)
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3728      	adds	r7, #40	; 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fa8:	422580a0 	.word	0x422580a0
 8004fac:	004005ff 	.word	0x004005ff

08004fb0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b092      	sub	sp, #72	; 0x48
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004fbe:	f7fc fc69 	bl	8001894 <HAL_GetTick>
 8004fc2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d107      	bne.n	8004fe2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e1bd      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	f040 81b0 	bne.w	8005350 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	441a      	add	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005000:	429a      	cmp	r2, r3
 8005002:	d907      	bls.n	8005014 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e1a4      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2203      	movs	r2, #3
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2200      	movs	r2, #0
 8005022:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	2b01      	cmp	r3, #1
 800502a:	d002      	beq.n	8005032 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	025b      	lsls	r3, r3, #9
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005036:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	025b      	lsls	r3, r3, #9
 800503c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800503e:	2390      	movs	r3, #144	; 0x90
 8005040:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005042:	2302      	movs	r3, #2
 8005044:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005046:	2300      	movs	r3, #0
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800504a:	2301      	movs	r3, #1
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f107 0214 	add.w	r2, r7, #20
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f001 fbc7 	bl	80067ec <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d90a      	bls.n	800507a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2202      	movs	r2, #2
 8005068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fc2b 	bl	80068cc <SDMMC_CmdReadMultiBlock>
 8005076:	6478      	str	r0, [r7, #68]	; 0x44
 8005078:	e009      	b.n	800508e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fbfe 	bl	8006888 <SDMMC_CmdReadSingleBlock>
 800508c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800508e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005090:	2b00      	cmp	r3, #0
 8005092:	d012      	beq.n	80050ba <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a7a      	ldr	r2, [pc, #488]	; (8005284 <HAL_SD_ReadBlocks+0x2d4>)
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a2:	431a      	orrs	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e151      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80050be:	e061      	b.n	8005184 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d03c      	beq.n	8005148 <HAL_SD_ReadBlocks+0x198>
 80050ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d039      	beq.n	8005148 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	643b      	str	r3, [r7, #64]	; 0x40
 80050d8:	e033      	b.n	8005142 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fb00 	bl	80066e4 <SDIO_ReadFIFO>
 80050e4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	3301      	adds	r3, #1
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f6:	3b01      	subs	r3, #1
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	3301      	adds	r3, #1
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800510a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510c:	3b01      	subs	r3, #1
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	0c1b      	lsrs	r3, r3, #16
 8005114:	b2da      	uxtb	r2, r3
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005118:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	3301      	adds	r3, #1
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005122:	3b01      	subs	r3, #1
 8005124:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	0e1b      	lsrs	r3, r3, #24
 800512a:	b2da      	uxtb	r2, r3
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005132:	3301      	adds	r3, #1
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005138:	3b01      	subs	r3, #1
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800513c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513e:	3301      	adds	r3, #1
 8005140:	643b      	str	r3, [r7, #64]	; 0x40
 8005142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005144:	2b07      	cmp	r3, #7
 8005146:	d9c8      	bls.n	80050da <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005148:	f7fc fba4 	bl	8001894 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005154:	429a      	cmp	r2, r3
 8005156:	d902      	bls.n	800515e <HAL_SD_ReadBlocks+0x1ae>
 8005158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515a:	2b00      	cmp	r3, #0
 800515c:	d112      	bne.n	8005184 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a48      	ldr	r2, [pc, #288]	; (8005284 <HAL_SD_ReadBlocks+0x2d4>)
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e0ec      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800518e:	2b00      	cmp	r3, #0
 8005190:	d096      	beq.n	80050c0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d022      	beq.n	80051e6 <HAL_SD_ReadBlocks+0x236>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d91f      	bls.n	80051e6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d01b      	beq.n	80051e6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fbf0 	bl	8006998 <SDMMC_CmdStopTransfer>
 80051b8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80051ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d012      	beq.n	80051e6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <HAL_SD_ReadBlocks+0x2d4>)
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e0bb      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d012      	beq.n	800521a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a22      	ldr	r2, [pc, #136]	; (8005284 <HAL_SD_ReadBlocks+0x2d4>)
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	f043 0208 	orr.w	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0a1      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d012      	beq.n	800524e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a15      	ldr	r2, [pc, #84]	; (8005284 <HAL_SD_ReadBlocks+0x2d4>)
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	f043 0202 	orr.w	r2, r3, #2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e087      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d064      	beq.n	8005326 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <HAL_SD_ReadBlocks+0x2d4>)
 8005262:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e06d      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
 8005282:	bf00      	nop
 8005284:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fa29 	bl	80066e4 <SDIO_ReadFIFO>
 8005292:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	3301      	adds	r3, #1
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	3b01      	subs	r3, #1
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	3301      	adds	r3, #1
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80052b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ba:	3b01      	subs	r3, #1
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	3301      	adds	r3, #1
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80052ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d0:	3b01      	subs	r3, #1
 80052d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	0e1b      	lsrs	r3, r3, #24
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80052de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e0:	3301      	adds	r3, #1
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80052e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e6:	3b01      	subs	r3, #1
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80052ea:	f7fc fad3 	bl	8001894 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d902      	bls.n	8005300 <HAL_SD_ReadBlocks+0x350>
 80052fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d112      	bne.n	8005326 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a18      	ldr	r2, [pc, #96]	; (8005368 <HAL_SD_ReadBlocks+0x3b8>)
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e01b      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_SD_ReadBlocks+0x38a>
 8005334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1a6      	bne.n	8005288 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005342:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e006      	b.n	800535e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
  }
}
 800535e:	4618      	mov	r0, r3
 8005360:	3748      	adds	r7, #72	; 0x48
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	004005ff 	.word	0x004005ff

0800536c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b092      	sub	sp, #72	; 0x48
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800537a:	f7fc fa8b 	bl	8001894 <HAL_GetTick>
 800537e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e165      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f040 8158 	bne.w	800565c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	441a      	add	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	429a      	cmp	r2, r3
 80053be:	d907      	bls.n	80053d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e14c      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2203      	movs	r2, #3
 80053d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2200      	movs	r2, #0
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d002      	beq.n	80053ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	025b      	lsls	r3, r3, #9
 80053ec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80053ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053f2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	025b      	lsls	r3, r3, #9
 80053f8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80053fa:	2390      	movs	r3, #144	; 0x90
 80053fc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80053fe:	2300      	movs	r3, #0
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005402:	2300      	movs	r3, #0
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005406:	2301      	movs	r3, #1
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f107 0218 	add.w	r2, r7, #24
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f001 f9e9 	bl	80067ec <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d90a      	bls.n	8005436 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fa91 	bl	8006954 <SDMMC_CmdWriteMultiBlock>
 8005432:	6478      	str	r0, [r7, #68]	; 0x44
 8005434:	e009      	b.n	800544a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2210      	movs	r2, #16
 800543a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005442:	4618      	mov	r0, r3
 8005444:	f001 fa64 	bl	8006910 <SDMMC_CmdWriteSingleBlock>
 8005448:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800544a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544c:	2b00      	cmp	r3, #0
 800544e:	d012      	beq.n	8005476 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a87      	ldr	r2, [pc, #540]	; (8005674 <HAL_SD_WriteBlocks+0x308>)
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800545c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545e:	431a      	orrs	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e0f9      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800547a:	e065      	b.n	8005548 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d040      	beq.n	800550c <HAL_SD_WriteBlocks+0x1a0>
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d03d      	beq.n	800550c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005490:	2300      	movs	r3, #0
 8005492:	643b      	str	r3, [r7, #64]	; 0x40
 8005494:	e037      	b.n	8005506 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	3301      	adds	r3, #1
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a4:	3b01      	subs	r3, #1
 80054a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	021a      	lsls	r2, r3, #8
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80054b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b6:	3301      	adds	r3, #1
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054bc:	3b01      	subs	r3, #1
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	041a      	lsls	r2, r3, #16
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	3301      	adds	r3, #1
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	3b01      	subs	r3, #1
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	061a      	lsls	r2, r3, #24
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	3301      	adds	r3, #1
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ec:	3b01      	subs	r3, #1
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f107 0214 	add.w	r2, r7, #20
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 f8ff 	bl	80066fe <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005502:	3301      	adds	r3, #1
 8005504:	643b      	str	r3, [r7, #64]	; 0x40
 8005506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005508:	2b07      	cmp	r3, #7
 800550a:	d9c4      	bls.n	8005496 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800550c:	f7fc f9c2 	bl	8001894 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005518:	429a      	cmp	r2, r3
 800551a:	d902      	bls.n	8005522 <HAL_SD_WriteBlocks+0x1b6>
 800551c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551e:	2b00      	cmp	r3, #0
 8005520:	d112      	bne.n	8005548 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a53      	ldr	r2, [pc, #332]	; (8005674 <HAL_SD_WriteBlocks+0x308>)
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e090      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005552:	2b00      	cmp	r3, #0
 8005554:	d092      	beq.n	800547c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d022      	beq.n	80055aa <HAL_SD_WriteBlocks+0x23e>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d91f      	bls.n	80055aa <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	2b03      	cmp	r3, #3
 8005570:	d01b      	beq.n	80055aa <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fa0e 	bl	8006998 <SDMMC_CmdStopTransfer>
 800557c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800557e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005580:	2b00      	cmp	r3, #0
 8005582:	d012      	beq.n	80055aa <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3a      	ldr	r2, [pc, #232]	; (8005674 <HAL_SD_WriteBlocks+0x308>)
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005592:	431a      	orrs	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e05f      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d012      	beq.n	80055de <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2d      	ldr	r2, [pc, #180]	; (8005674 <HAL_SD_WriteBlocks+0x308>)
 80055be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	f043 0208 	orr.w	r2, r3, #8
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e045      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d012      	beq.n	8005612 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a20      	ldr	r2, [pc, #128]	; (8005674 <HAL_SD_WriteBlocks+0x308>)
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	f043 0202 	orr.w	r2, r3, #2
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e02b      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d012      	beq.n	8005646 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a13      	ldr	r2, [pc, #76]	; (8005674 <HAL_SD_WriteBlocks+0x308>)
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	f043 0210 	orr.w	r2, r3, #16
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e011      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f240 523a 	movw	r2, #1338	; 0x53a
 800564e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	e006      	b.n	800566a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3748      	adds	r7, #72	; 0x48
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	004005ff 	.word	0x004005ff

08005678 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_SD_IRQHandler+0x2e>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 ff4f 	bl	8006542 <SD_Read_IT>
 80056a4:	e155      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 808f 	beq.w	80057d4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80056ce:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80056d2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d039      	beq.n	8005762 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <HAL_SD_IRQHandler+0x8a>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d011      	beq.n	8005726 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f946 	bl	8006998 <SDMMC_CmdStopTransfer>
 800570c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f91f 	bl	8005964 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f240 523a 	movw	r2, #1338	; 0x53a
 800572e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <HAL_SD_IRQHandler+0xda>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fdbc 	bl	80072d0 <HAL_SD_RxCpltCallback>
 8005758:	e0fb      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 fdae 	bl	80072bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005760:	e0f7      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 80f2 	beq.w	8005952 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d011      	beq.n	800579c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f001 f90b 	bl	8006998 <SDMMC_CmdStopTransfer>
 8005782:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8e4 	bl	8005964 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f040 80d5 	bne.w	8005952 <HAL_SD_IRQHandler+0x2da>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 80cf 	bne.w	8005952 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0208 	bic.w	r2, r2, #8
 80057c2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 fd75 	bl	80072bc <HAL_SD_TxCpltCallback>
}
 80057d2:	e0be      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <HAL_SD_IRQHandler+0x17c>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fef9 	bl	80065e4 <SD_Write_IT>
 80057f2:	e0ae      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 80a7 	beq.w	8005952 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	f043 0202 	orr.w	r2, r3, #2
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	f043 0208 	orr.w	r2, r3, #8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	f043 0210 	orr.w	r2, r3, #16
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f240 523a 	movw	r2, #1338	; 0x53a
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005884:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f001 f884 	bl	8006998 <SDMMC_CmdStopTransfer>
 8005890:	4602      	mov	r2, r0
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f855 	bl	8005964 <HAL_SD_ErrorCallback>
}
 80058ba:	e04a      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d045      	beq.n	8005952 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_SD_IRQHandler+0x262>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d011      	beq.n	80058fe <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	4a1f      	ldr	r2, [pc, #124]	; (800595c <HAL_SD_IRQHandler+0x2e4>)
 80058e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fc faa8 	bl	8001e3c <HAL_DMA_Abort_IT>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d02f      	beq.n	8005952 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fac8 	bl	8005e8c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80058fc:	e029      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <HAL_SD_IRQHandler+0x29a>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d011      	beq.n	8005936 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	4a12      	ldr	r2, [pc, #72]	; (8005960 <HAL_SD_IRQHandler+0x2e8>)
 8005918:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	4618      	mov	r0, r3
 8005920:	f7fc fa8c 	bl	8001e3c <HAL_DMA_Abort_IT>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d013      	beq.n	8005952 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fae3 	bl	8005efa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005934:	e00d      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 fcac 	bl	80072a8 <HAL_SD_AbortCallback>
}
 8005950:	e7ff      	b.n	8005952 <HAL_SD_IRQHandler+0x2da>
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	08005e8d 	.word	0x08005e8d
 8005960:	08005efb 	.word	0x08005efb

08005964 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005986:	0f9b      	lsrs	r3, r3, #30
 8005988:	b2da      	uxtb	r2, r3
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005992:	0e9b      	lsrs	r3, r3, #26
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	b2da      	uxtb	r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a4:	0e1b      	lsrs	r3, r3, #24
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b6:	0c1b      	lsrs	r3, r3, #16
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059d8:	0d1b      	lsrs	r3, r3, #20
 80059da:	b29a      	uxth	r2, r3
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f6:	0bdb      	lsrs	r3, r3, #15
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a08:	0b9b      	lsrs	r3, r3, #14
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a1a:	0b5b      	lsrs	r3, r3, #13
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2c:	0b1b      	lsrs	r3, r3, #12
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d163      	bne.n	8005b10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a4c:	009a      	lsls	r2, r3, #2
 8005a4e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a52:	4013      	ands	r3, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005a58:	0f92      	lsrs	r2, r2, #30
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a64:	0edb      	lsrs	r3, r3, #27
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a76:	0e1b      	lsrs	r3, r3, #24
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a88:	0d5b      	lsrs	r3, r3, #21
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9a:	0c9b      	lsrs	r3, r3, #18
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aac:	0bdb      	lsrs	r3, r3, #15
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	7e1b      	ldrb	r3, [r3, #24]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	3302      	adds	r3, #2
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005ada:	fb03 f202 	mul.w	r2, r3, r2
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	7a1b      	ldrb	r3, [r3, #8]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	2201      	movs	r2, #1
 8005aee:	409a      	lsls	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005afc:	0a52      	lsrs	r2, r2, #9
 8005afe:	fb03 f202 	mul.w	r2, r3, r2
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0c:	661a      	str	r2, [r3, #96]	; 0x60
 8005b0e:	e031      	b.n	8005b74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d11d      	bne.n	8005b54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	3301      	adds	r3, #1
 8005b34:	029a      	lsls	r2, r3, #10
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	661a      	str	r2, [r3, #96]	; 0x60
 8005b52:	e00f      	b.n	8005b74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a58      	ldr	r2, [pc, #352]	; (8005cbc <HAL_SD_GetCardCSD+0x344>)
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e09d      	b.n	8005cb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b78:	0b9b      	lsrs	r3, r3, #14
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b8a:	09db      	lsrs	r3, r3, #7
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	0fdb      	lsrs	r3, r3, #31
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	0f5b      	lsrs	r3, r3, #29
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	0e9b      	lsrs	r3, r3, #26
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	0d9b      	lsrs	r3, r3, #22
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	0d5b      	lsrs	r3, r3, #21
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	0c1b      	lsrs	r3, r3, #16
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	0bdb      	lsrs	r3, r3, #15
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	0b9b      	lsrs	r3, r3, #14
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	0b5b      	lsrs	r3, r3, #13
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	0b1b      	lsrs	r3, r3, #12
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	004005ff 	.word	0x004005ff

08005cc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005d18:	b5b0      	push	{r4, r5, r7, lr}
 8005d1a:	b08e      	sub	sp, #56	; 0x38
 8005d1c:	af04      	add	r7, sp, #16
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d02e      	beq.n	8005d96 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d106      	bne.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8005d4c:	e029      	b.n	8005da2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d54:	d10a      	bne.n	8005d6c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa8a 	bl	8006270 <SD_WideBus_Enable>
 8005d5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
 8005d6a:	e01a      	b.n	8005da2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fac7 	bl	8006306 <SD_WideBus_Disable>
 8005d78:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
 8005d86:	e00c      	b.n	8005da2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38
 8005d94:	e005      	b.n	8005da2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a26      	ldr	r2, [pc, #152]	; (8005e48 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005dc0:	e01f      	b.n	8005e02 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681d      	ldr	r5, [r3, #0]
 8005de8:	466c      	mov	r4, sp
 8005dea:	f107 0314 	add.w	r3, r7, #20
 8005dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f000 fc46 	bl	800668e <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fd1a 	bl	8006844 <SDMMC_CmdBlockLength>
 8005e10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00c      	beq.n	8005e32 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005e1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3728      	adds	r7, #40	; 0x28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bdb0      	pop	{r4, r5, r7, pc}
 8005e46:	bf00      	nop
 8005e48:	004005ff 	.word	0x004005ff

08005e4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005e58:	f107 030c 	add.w	r3, r7, #12
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f9de 	bl	8006220 <SD_SendStatus>
 8005e64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	0a5b      	lsrs	r3, r3, #9
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005e82:	693b      	ldr	r3, [r7, #16]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff ffd1 	bl	8005e4c <HAL_SD_GetCardState>
 8005eaa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b06      	cmp	r3, #6
 8005ebe:	d002      	beq.n	8005ec6 <SD_DMATxAbort+0x3a>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	d10a      	bne.n	8005edc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fd64 	bl	8006998 <SDMMC_CmdStopTransfer>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d103      	bne.n	8005eec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f001 f9df 	bl	80072a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005eea:	e002      	b.n	8005ef2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff fd39 	bl	8005964 <HAL_SD_ErrorCallback>
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff ff9a 	bl	8005e4c <HAL_SD_GetCardState>
 8005f18:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b06      	cmp	r3, #6
 8005f2c:	d002      	beq.n	8005f34 <SD_DMARxAbort+0x3a>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b05      	cmp	r3, #5
 8005f32:	d10a      	bne.n	8005f4a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fd2d 	bl	8006998 <SDMMC_CmdStopTransfer>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f001 f9a8 	bl	80072a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005f58:	e002      	b.n	8005f60 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff fd02 	bl	8005964 <HAL_SD_ErrorCallback>
}
 8005f60:	bf00      	nop
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f68:	b5b0      	push	{r4, r5, r7, lr}
 8005f6a:	b094      	sub	sp, #80	; 0x50
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005f70:	2301      	movs	r3, #1
 8005f72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fbdf 	bl	800673c <SDIO_GetPowerState>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f88:	e0b8      	b.n	80060fc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d02f      	beq.n	8005ff2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fe08 	bl	8006bac <SDMMC_CmdSendCID>
 8005f9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <SD_InitCard+0x40>
    {
      return errorstate;
 8005fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa6:	e0a9      	b.n	80060fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fc09 	bl	80067c6 <SDIO_GetResponse>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2104      	movs	r1, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fc00 	bl	80067c6 <SDIO_GetResponse>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2108      	movs	r1, #8
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fbf7 	bl	80067c6 <SDIO_GetResponse>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	210c      	movs	r1, #12
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fbee 	bl	80067c6 <SDIO_GetResponse>
 8005fea:	4602      	mov	r2, r0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d00d      	beq.n	8006016 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f107 020e 	add.w	r2, r7, #14
 8006002:	4611      	mov	r1, r2
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fe0e 	bl	8006c26 <SDMMC_CmdSetRelAdd>
 800600a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <SD_InitCard+0xae>
    {
      return errorstate;
 8006012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006014:	e072      	b.n	80060fc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	2b03      	cmp	r3, #3
 800601c:	d036      	beq.n	800608c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800601e:	89fb      	ldrh	r3, [r7, #14]
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f000 fdd8 	bl	8006be8 <SDMMC_CmdSendCSD>
 8006038:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800603a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006042:	e05b      	b.n	80060fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fbbb 	bl	80067c6 <SDIO_GetResponse>
 8006050:	4602      	mov	r2, r0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2104      	movs	r1, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fbb2 	bl	80067c6 <SDIO_GetResponse>
 8006062:	4602      	mov	r2, r0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2108      	movs	r1, #8
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fba9 	bl	80067c6 <SDIO_GetResponse>
 8006074:	4602      	mov	r2, r0
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	210c      	movs	r1, #12
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fba0 	bl	80067c6 <SDIO_GetResponse>
 8006086:	4602      	mov	r2, r0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2104      	movs	r1, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fb97 	bl	80067c6 <SDIO_GetResponse>
 8006098:	4603      	mov	r3, r0
 800609a:	0d1a      	lsrs	r2, r3, #20
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fc66 	bl	8005978 <HAL_SD_GetCardCSD>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060b6:	e021      	b.n	80060fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6819      	ldr	r1, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	2200      	movs	r2, #0
 80060c4:	461c      	mov	r4, r3
 80060c6:	4615      	mov	r5, r2
 80060c8:	4622      	mov	r2, r4
 80060ca:	462b      	mov	r3, r5
 80060cc:	4608      	mov	r0, r1
 80060ce:	f000 fc85 	bl	80069dc <SDMMC_CmdSelDesel>
 80060d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80060d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <SD_InitCard+0x176>
  {
    return errorstate;
 80060da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060dc:	e00e      	b.n	80060fc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681d      	ldr	r5, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	466c      	mov	r4, sp
 80060e6:	f103 0210 	add.w	r2, r3, #16
 80060ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80060ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060f0:	3304      	adds	r3, #4
 80060f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060f4:	4628      	mov	r0, r5
 80060f6:	f000 faca 	bl	800668e <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3740      	adds	r7, #64	; 0x40
 8006100:	46bd      	mov	sp, r7
 8006102:	bdb0      	pop	{r4, r5, r7, pc}

08006104 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	2300      	movs	r3, #0
 8006116:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fc80 	bl	8006a22 <SDMMC_CmdGoIdleState>
 8006122:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <SD_PowerON+0x2a>
  {
    return errorstate;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	e072      	b.n	8006214 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fc93 	bl	8006a5e <SDMMC_CmdOperCond>
 8006138:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00d      	beq.n	800615c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fc69 	bl	8006a22 <SDMMC_CmdGoIdleState>
 8006150:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	e05b      	b.n	8006214 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006166:	2b01      	cmp	r3, #1
 8006168:	d137      	bne.n	80061da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fc93 	bl	8006a9c <SDMMC_CmdAppCommand>
 8006176:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02d      	beq.n	80061da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800617e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006182:	e047      	b.n	8006214 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fc86 	bl	8006a9c <SDMMC_CmdAppCommand>
 8006190:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <SD_PowerON+0x98>
    {
      return errorstate;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	e03b      	b.n	8006214 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	491e      	ldr	r1, [pc, #120]	; (800621c <SD_PowerON+0x118>)
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fc9c 	bl	8006ae0 <SDMMC_CmdAppOperCommand>
 80061a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061b4:	e02e      	b.n	8006214 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2100      	movs	r1, #0
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fb02 	bl	80067c6 <SDIO_GetResponse>
 80061c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	0fdb      	lsrs	r3, r3, #31
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <SD_PowerON+0xcc>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <SD_PowerON+0xce>
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]

    count++;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	3301      	adds	r3, #1
 80061d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d802      	bhi.n	80061ea <SD_PowerON+0xe6>
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0cc      	beq.n	8006184 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d902      	bls.n	80061fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80061f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061f8:	e00c      	b.n	8006214 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	645a      	str	r2, [r3, #68]	; 0x44
 800620a:	e002      	b.n	8006212 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	c1100000 	.word	0xc1100000

08006220 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006234:	e018      	b.n	8006268 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f000 fd10 	bl	8006c68 <SDMMC_CmdSendStatus>
 8006248:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	e009      	b.n	8006268 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fab3 	bl	80067c6 <SDIO_GetResponse>
 8006260:	4602      	mov	r2, r0
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fa9d 	bl	80067c6 <SDIO_GetResponse>
 800628c:	4603      	mov	r3, r0
 800628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006296:	d102      	bne.n	800629e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006298:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800629c:	e02f      	b.n	80062fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f879 	bl	800639c <SD_FindSCR>
 80062aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	e023      	b.n	80062fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01c      	beq.n	80062fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c8:	041b      	lsls	r3, r3, #16
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f000 fbe5 	bl	8006a9c <SDMMC_CmdAppCommand>
 80062d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	e00f      	b.n	80062fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2102      	movs	r1, #2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fc1e 	bl	8006b26 <SDMMC_CmdBusWidth>
 80062ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	e003      	b.n	80062fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e001      	b.n	80062fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fa52 	bl	80067c6 <SDIO_GetResponse>
 8006322:	4603      	mov	r3, r0
 8006324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632c:	d102      	bne.n	8006334 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800632e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006332:	e02f      	b.n	8006394 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f82e 	bl	800639c <SD_FindSCR>
 8006340:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	e023      	b.n	8006394 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01c      	beq.n	8006390 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635e:	041b      	lsls	r3, r3, #16
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fb9a 	bl	8006a9c <SDMMC_CmdAppCommand>
 8006368:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	e00f      	b.n	8006394 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fbd3 	bl	8006b26 <SDMMC_CmdBusWidth>
 8006380:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	e003      	b.n	8006394 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800638c:	2300      	movs	r3, #0
 800638e:	e001      	b.n	8006394 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006390:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800639c:	b590      	push	{r4, r7, lr}
 800639e:	b08f      	sub	sp, #60	; 0x3c
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80063a6:	f7fb fa75 	bl	8001894 <HAL_GetTick>
 80063aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80063b0:	2300      	movs	r3, #0
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2108      	movs	r1, #8
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fa3e 	bl	8006844 <SDMMC_CmdBlockLength>
 80063c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	e0b2      	b.n	800653a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f000 fb5b 	bl	8006a9c <SDMMC_CmdAppCommand>
 80063e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	e0a3      	b.n	800653a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80063f8:	2308      	movs	r3, #8
 80063fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80063fc:	2330      	movs	r3, #48	; 0x30
 80063fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006400:	2302      	movs	r3, #2
 8006402:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006404:	2300      	movs	r3, #0
 8006406:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006408:	2301      	movs	r3, #1
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f107 0210 	add.w	r2, r7, #16
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f9e8 	bl	80067ec <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fba2 	bl	8006b6a <SDMMC_CmdSendSCR>
 8006426:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d02a      	beq.n	8006484 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	e083      	b.n	800653a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00f      	beq.n	8006460 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f107 0208 	add.w	r2, r7, #8
 800644c:	18d4      	adds	r4, r2, r3
 800644e:	4608      	mov	r0, r1
 8006450:	f000 f948 	bl	80066e4 <SDIO_ReadFIFO>
 8006454:	4603      	mov	r3, r0
 8006456:	6023      	str	r3, [r4, #0]
      index++;
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645a:	3301      	adds	r3, #1
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
 800645e:	e006      	b.n	800646e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d012      	beq.n	8006494 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800646e:	f7fb fa11 	bl	8001894 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800647c:	d102      	bne.n	8006484 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800647e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006482:	e05a      	b.n	800653a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0cf      	beq.n	8006432 <SD_FindSCR+0x96>
 8006492:	e000      	b.n	8006496 <SD_FindSCR+0xfa>
      break;
 8006494:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2208      	movs	r2, #8
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80064ac:	2308      	movs	r3, #8
 80064ae:	e044      	b.n	800653a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2202      	movs	r2, #2
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80064c6:	2302      	movs	r3, #2
 80064c8:	e037      	b.n	800653a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2220      	movs	r2, #32
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80064e0:	2320      	movs	r3, #32
 80064e2:	e02a      	b.n	800653a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	061a      	lsls	r2, r3, #24
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	021b      	lsls	r3, r3, #8
 80064f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006504:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	0e1b      	lsrs	r3, r3, #24
 800650a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	601a      	str	r2, [r3, #0]
    scr++;
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	3304      	adds	r3, #4
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	061a      	lsls	r2, r3, #24
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006522:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800652c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	0e1b      	lsrs	r3, r3, #24
 8006532:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	373c      	adds	r7, #60	; 0x3c
 800653e:	46bd      	mov	sp, r7
 8006540:	bd90      	pop	{r4, r7, pc}

08006542 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d03f      	beq.n	80065dc <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e033      	b.n	80065ca <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f8bc 	bl	80066e4 <SDIO_ReadFIFO>
 800656c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3301      	adds	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	3b01      	subs	r3, #1
 8006580:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	0a1b      	lsrs	r3, r3, #8
 8006586:	b2da      	uxtb	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3301      	adds	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3b01      	subs	r3, #1
 8006596:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	0c1b      	lsrs	r3, r3, #16
 800659c:	b2da      	uxtb	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	0e1b      	lsrs	r3, r3, #24
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	3301      	adds	r3, #1
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b07      	cmp	r3, #7
 80065ce:	d9c8      	bls.n	8006562 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80065dc:	bf00      	nop
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d043      	beq.n	8006686 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e037      	b.n	8006674 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	60bb      	str	r3, [r7, #8]
      tmp++;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3b01      	subs	r3, #1
 8006614:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	021a      	lsls	r2, r3, #8
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4313      	orrs	r3, r2
 8006620:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	3b01      	subs	r3, #1
 800662c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	041a      	lsls	r2, r3, #16
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
 8006638:	60bb      	str	r3, [r7, #8]
      tmp++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3b01      	subs	r3, #1
 8006644:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	061a      	lsls	r2, r3, #24
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4313      	orrs	r3, r2
 8006650:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	3b01      	subs	r3, #1
 800665c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f107 0208 	add.w	r2, r7, #8
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f848 	bl	80066fe <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	3301      	adds	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b07      	cmp	r3, #7
 8006678:	d9c4      	bls.n	8006604 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800668e:	b084      	sub	sp, #16
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	f107 001c 	add.w	r0, r7, #28
 800669c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80066a4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80066a6:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80066a8:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80066ac:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80066b0:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80066b4:	431a      	orrs	r2, r3
             Init.ClockDiv
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80066b8:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80066c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	b004      	add	sp, #16
 80066e2:	4770      	bx	lr

080066e4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2203      	movs	r2, #3
 800672c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0303 	and.w	r3, r3, #3
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006776:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800677c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006782:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006792:	f023 030f 	bic.w	r3, r3, #15
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	b2db      	uxtb	r3, r3
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3314      	adds	r3, #20
 80067d4:	461a      	mov	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	4413      	add	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
}  
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006812:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006818:	431a      	orrs	r2, r3
                       Data->DPSM);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800681e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006836:	2300      	movs	r3, #0

}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006852:	2310      	movs	r3, #16
 8006854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006856:	2340      	movs	r3, #64	; 0x40
 8006858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800685e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff ff74 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006870:	f241 3288 	movw	r2, #5000	; 0x1388
 8006874:	2110      	movs	r1, #16
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa18 	bl	8006cac <SDMMC_GetCmdResp1>
 800687c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800687e:	69fb      	ldr	r3, [r7, #28]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3720      	adds	r7, #32
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006896:	2311      	movs	r3, #17
 8006898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800689a:	2340      	movs	r3, #64	; 0x40
 800689c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068a8:	f107 0308 	add.w	r3, r7, #8
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff ff52 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80068b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b8:	2111      	movs	r1, #17
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9f6 	bl	8006cac <SDMMC_GetCmdResp1>
 80068c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068c2:	69fb      	ldr	r3, [r7, #28]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80068da:	2312      	movs	r3, #18
 80068dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068ec:	f107 0308 	add.w	r3, r7, #8
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff ff30 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80068f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fc:	2112      	movs	r1, #18
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f9d4 	bl	8006cac <SDMMC_GetCmdResp1>
 8006904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006906:	69fb      	ldr	r3, [r7, #28]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3720      	adds	r7, #32
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800691e:	2318      	movs	r3, #24
 8006920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006922:	2340      	movs	r3, #64	; 0x40
 8006924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800692a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800692e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006930:	f107 0308 	add.w	r3, r7, #8
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ff0e 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800693c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006940:	2118      	movs	r1, #24
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9b2 	bl	8006cac <SDMMC_GetCmdResp1>
 8006948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800694a:	69fb      	ldr	r3, [r7, #28]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006962:	2319      	movs	r3, #25
 8006964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006966:	2340      	movs	r3, #64	; 0x40
 8006968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800696e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006972:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006974:	f107 0308 	add.w	r3, r7, #8
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff feec 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006980:	f241 3288 	movw	r2, #5000	; 0x1388
 8006984:	2119      	movs	r1, #25
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f990 	bl	8006cac <SDMMC_GetCmdResp1>
 800698c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800698e:	69fb      	ldr	r3, [r7, #28]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80069a4:	230c      	movs	r3, #12
 80069a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069a8:	2340      	movs	r3, #64	; 0x40
 80069aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069b6:	f107 0308 	add.w	r3, r7, #8
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff fecb 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80069c2:	4a05      	ldr	r2, [pc, #20]	; (80069d8 <SDMMC_CmdStopTransfer+0x40>)
 80069c4:	210c      	movs	r1, #12
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f970 	bl	8006cac <SDMMC_GetCmdResp1>
 80069cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069ce:	69fb      	ldr	r3, [r7, #28]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3720      	adds	r7, #32
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	05f5e100 	.word	0x05f5e100

080069dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08a      	sub	sp, #40	; 0x28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80069ec:	2307      	movs	r3, #7
 80069ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069f0:	2340      	movs	r3, #64	; 0x40
 80069f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	4619      	mov	r1, r3
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f7ff fea7 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a0e:	2107      	movs	r1, #7
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f94b 	bl	8006cac <SDMMC_GetCmdResp1>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3728      	adds	r7, #40	; 0x28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b088      	sub	sp, #32
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006a32:	2300      	movs	r3, #0
 8006a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a40:	f107 0308 	add.w	r3, r7, #8
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff fe86 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fb65 	bl	800711c <SDMMC_GetCmdError>
 8006a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a54:	69fb      	ldr	r3, [r7, #28]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3720      	adds	r7, #32
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b088      	sub	sp, #32
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006a66:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006a6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a70:	2340      	movs	r3, #64	; 0x40
 8006a72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a7e:	f107 0308 	add.w	r3, r7, #8
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff fe67 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 faf8 	bl	8007080 <SDMMC_GetCmdResp7>
 8006a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a92:	69fb      	ldr	r3, [r7, #28]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006aaa:	2337      	movs	r3, #55	; 0x37
 8006aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006aae:	2340      	movs	r3, #64	; 0x40
 8006ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006abc:	f107 0308 	add.w	r3, r7, #8
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff fe48 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006acc:	2137      	movs	r1, #55	; 0x37
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8ec 	bl	8006cac <SDMMC_GetCmdResp1>
 8006ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006af6:	2329      	movs	r3, #41	; 0x29
 8006af8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b08:	f107 0308 	add.w	r3, r7, #8
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fe22 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f9ff 	bl	8006f18 <SDMMC_GetCmdResp3>
 8006b1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b088      	sub	sp, #32
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006b34:	2306      	movs	r3, #6
 8006b36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b38:	2340      	movs	r3, #64	; 0x40
 8006b3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b46:	f107 0308 	add.w	r3, r7, #8
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fe03 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b56:	2106      	movs	r1, #6
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f8a7 	bl	8006cac <SDMMC_GetCmdResp1>
 8006b5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b60:	69fb      	ldr	r3, [r7, #28]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b088      	sub	sp, #32
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006b76:	2333      	movs	r3, #51	; 0x33
 8006b78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b7a:	2340      	movs	r3, #64	; 0x40
 8006b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b88:	f107 0308 	add.w	r3, r7, #8
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fde2 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b98:	2133      	movs	r1, #51	; 0x33
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f886 	bl	8006cac <SDMMC_GetCmdResp1>
 8006ba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006bbc:	23c0      	movs	r3, #192	; 0xc0
 8006bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bca:	f107 0308 	add.w	r3, r7, #8
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fdc1 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f956 	bl	8006e88 <SDMMC_GetCmdResp2>
 8006bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bde:	69fb      	ldr	r3, [r7, #28]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006bf6:	2309      	movs	r3, #9
 8006bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006bfa:	23c0      	movs	r3, #192	; 0xc0
 8006bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c08:	f107 0308 	add.w	r3, r7, #8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fda2 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f937 	bl	8006e88 <SDMMC_GetCmdResp2>
 8006c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b088      	sub	sp, #32
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006c34:	2303      	movs	r3, #3
 8006c36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c38:	2340      	movs	r3, #64	; 0x40
 8006c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fd83 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	2103      	movs	r1, #3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f99c 	bl	8006f94 <SDMMC_GetCmdResp6>
 8006c5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3720      	adds	r7, #32
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006c76:	230d      	movs	r3, #13
 8006c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fd62 	bl	8006758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c98:	210d      	movs	r1, #13
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f806 	bl	8006cac <SDMMC_GetCmdResp1>
 8006ca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3720      	adds	r7, #32
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006cba:	4b70      	ldr	r3, [pc, #448]	; (8006e7c <SDMMC_GetCmdResp1+0x1d0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a70      	ldr	r2, [pc, #448]	; (8006e80 <SDMMC_GetCmdResp1+0x1d4>)
 8006cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc4:	0a5a      	lsrs	r2, r3, #9
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	fb02 f303 	mul.w	r3, r2, r3
 8006ccc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	1e5a      	subs	r2, r3, #1
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cdc:	e0c9      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0ef      	beq.n	8006cce <SDMMC_GetCmdResp1+0x22>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1ea      	bne.n	8006cce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2204      	movs	r2, #4
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	e0b1      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e0a6      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	22c5      	movs	r2, #197	; 0xc5
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fd3e 	bl	80067ac <SDIO_GetCommandResponse>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d001      	beq.n	8006d3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e099      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff fd40 	bl	80067c6 <SDIO_GetResponse>
 8006d46:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4b4e      	ldr	r3, [pc, #312]	; (8006e84 <SDMMC_GetCmdResp1+0x1d8>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e08d      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da02      	bge.n	8006d62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d60:	e087      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006d6c:	2340      	movs	r3, #64	; 0x40
 8006d6e:	e080      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	e079      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d8c:	e071      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d9c:	e069      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dac:	e061      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006dbc:	e059      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dcc:	e051      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ddc:	e049      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dec:	e041      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfc:	e039      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e0c:	e031      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e1c:	e029      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e2c:	e021      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e3c:	e019      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e4c:	e011      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e5c:	e009      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006e68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006e6c:	e001      	b.n	8006e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000004 	.word	0x20000004
 8006e80:	10624dd3 	.word	0x10624dd3
 8006e84:	fdffe008 	.word	0xfdffe008

08006e88 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e90:	4b1f      	ldr	r3, [pc, #124]	; (8006f10 <SDMMC_GetCmdResp2+0x88>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <SDMMC_GetCmdResp2+0x8c>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	0a5b      	lsrs	r3, r3, #9
 8006e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea0:	fb02 f303 	mul.w	r3, r2, r3
 8006ea4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	60fa      	str	r2, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006eb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006eb4:	e026      	b.n	8006f04 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0ef      	beq.n	8006ea6 <SDMMC_GetCmdResp2+0x1e>
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1ea      	bne.n	8006ea6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ee2:	2304      	movs	r3, #4
 8006ee4:	e00e      	b.n	8006f04 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d004      	beq.n	8006efc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e003      	b.n	8006f04 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	22c5      	movs	r2, #197	; 0xc5
 8006f00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	20000004 	.word	0x20000004
 8006f14:	10624dd3 	.word	0x10624dd3

08006f18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <SDMMC_GetCmdResp3+0x74>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <SDMMC_GetCmdResp3+0x78>)
 8006f26:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2a:	0a5b      	lsrs	r3, r3, #9
 8006f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f30:	fb02 f303 	mul.w	r3, r2, r3
 8006f34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	1e5a      	subs	r2, r3, #1
 8006f3a:	60fa      	str	r2, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d102      	bne.n	8006f46 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f44:	e01b      	b.n	8006f7e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0ef      	beq.n	8006f36 <SDMMC_GetCmdResp3+0x1e>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1ea      	bne.n	8006f36 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f72:	2304      	movs	r3, #4
 8006f74:	e003      	b.n	8006f7e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	22c5      	movs	r2, #197	; 0xc5
 8006f7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20000004 	.word	0x20000004
 8006f90:	10624dd3 	.word	0x10624dd3

08006f94 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fa2:	4b35      	ldr	r3, [pc, #212]	; (8007078 <SDMMC_GetCmdResp6+0xe4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a35      	ldr	r2, [pc, #212]	; (800707c <SDMMC_GetCmdResp6+0xe8>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	0a5b      	lsrs	r3, r3, #9
 8006fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
 8006fb6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	1e5a      	subs	r2, r3, #1
 8006fbc:	61fa      	str	r2, [r7, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d102      	bne.n	8006fc8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fc6:	e052      	b.n	800706e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0ef      	beq.n	8006fb8 <SDMMC_GetCmdResp6+0x24>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1ea      	bne.n	8006fb8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d004      	beq.n	8006ff8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	e03a      	b.n	800706e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d004      	beq.n	800700e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800700a:	2301      	movs	r3, #1
 800700c:	e02f      	b.n	800706e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff fbcc 	bl	80067ac <SDIO_GetCommandResponse>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	4293      	cmp	r3, r2
 800701c:	d001      	beq.n	8007022 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800701e:	2301      	movs	r3, #1
 8007020:	e025      	b.n	800706e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	22c5      	movs	r2, #197	; 0xc5
 8007026:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007028:	2100      	movs	r1, #0
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7ff fbcb 	bl	80067c6 <SDIO_GetResponse>
 8007030:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d106      	bne.n	800704a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	b29a      	uxth	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007046:	2300      	movs	r3, #0
 8007048:	e011      	b.n	800706e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007058:	e009      	b.n	800706e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007068:	e001      	b.n	800706e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800706a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800706e:	4618      	mov	r0, r3
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000004 	.word	0x20000004
 800707c:	10624dd3 	.word	0x10624dd3

08007080 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007088:	4b22      	ldr	r3, [pc, #136]	; (8007114 <SDMMC_GetCmdResp7+0x94>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a22      	ldr	r2, [pc, #136]	; (8007118 <SDMMC_GetCmdResp7+0x98>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	0a5b      	lsrs	r3, r3, #9
 8007094:	f241 3288 	movw	r2, #5000	; 0x1388
 8007098:	fb02 f303 	mul.w	r3, r2, r3
 800709c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1e5a      	subs	r2, r3, #1
 80070a2:	60fa      	str	r2, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070ac:	e02c      	b.n	8007108 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0ef      	beq.n	800709e <SDMMC_GetCmdResp7+0x1e>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1ea      	bne.n	800709e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d004      	beq.n	80070de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2204      	movs	r2, #4
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070da:	2304      	movs	r3, #4
 80070dc:	e014      	b.n	8007108 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e009      	b.n	8007108 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2240      	movs	r2, #64	; 0x40
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007106:	2300      	movs	r3, #0
  
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20000004 	.word	0x20000004
 8007118:	10624dd3 	.word	0x10624dd3

0800711c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007124:	4b11      	ldr	r3, [pc, #68]	; (800716c <SDMMC_GetCmdError+0x50>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a11      	ldr	r2, [pc, #68]	; (8007170 <SDMMC_GetCmdError+0x54>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	0a5b      	lsrs	r3, r3, #9
 8007130:	f241 3288 	movw	r2, #5000	; 0x1388
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1e5a      	subs	r2, r3, #1
 800713e:	60fa      	str	r2, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007144:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007148:	e009      	b.n	800715e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f1      	beq.n	800713a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	22c5      	movs	r2, #197	; 0xc5
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000004 	.word	0x20000004
 8007170:	10624dd3 	.word	0x10624dd3

08007174 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007178:	4904      	ldr	r1, [pc, #16]	; (800718c <MX_FATFS_Init+0x18>)
 800717a:	4805      	ldr	r0, [pc, #20]	; (8007190 <MX_FATFS_Init+0x1c>)
 800717c:	f003 f8e4 	bl	800a348 <FATFS_LinkDriver>
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	4b03      	ldr	r3, [pc, #12]	; (8007194 <MX_FATFS_Init+0x20>)
 8007186:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007188:	bf00      	nop
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000b0c 	.word	0x20000b0c
 8007190:	0800ad98 	.word	0x0800ad98
 8007194:	20000b08 	.word	0x20000b08

08007198 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800719c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800719e:	4618      	mov	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80071b2:	f000 f8ac 	bl	800730e <BSP_SD_IsDetected>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d001      	beq.n	80071c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e012      	b.n	80071e6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80071c0:	480b      	ldr	r0, [pc, #44]	; (80071f0 <BSP_SD_Init+0x48>)
 80071c2:	f7fd fe45 	bl	8004e50 <HAL_SD_Init>
 80071c6:	4603      	mov	r3, r0
 80071c8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80071d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071d4:	4806      	ldr	r0, [pc, #24]	; (80071f0 <BSP_SD_Init+0x48>)
 80071d6:	f7fe fd9f 	bl	8005d18 <HAL_SD_ConfigWideBusOperation>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80071e4:	79fb      	ldrb	r3, [r7, #7]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000194 	.word	0x20000194

080071f4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	4806      	ldr	r0, [pc, #24]	; (800722c <BSP_SD_ReadBlocks+0x38>)
 8007212:	f7fd fecd 	bl	8004fb0 <HAL_SD_ReadBlocks>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000194 	.word	0x20000194

08007230 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	4806      	ldr	r0, [pc, #24]	; (8007268 <BSP_SD_WriteBlocks+0x38>)
 800724e:	f7fe f88d 	bl	800536c <HAL_SD_WriteBlocks>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000194 	.word	0x20000194

0800726c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007270:	4805      	ldr	r0, [pc, #20]	; (8007288 <BSP_SD_GetCardState+0x1c>)
 8007272:	f7fe fdeb 	bl	8005e4c <HAL_SD_GetCardState>
 8007276:	4603      	mov	r3, r0
 8007278:	2b04      	cmp	r3, #4
 800727a:	bf14      	ite	ne
 800727c:	2301      	movne	r3, #1
 800727e:	2300      	moveq	r3, #0
 8007280:	b2db      	uxtb	r3, r3
}
 8007282:	4618      	mov	r0, r3
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000194 	.word	0x20000194

0800728c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4803      	ldr	r0, [pc, #12]	; (80072a4 <BSP_SD_GetCardInfo+0x18>)
 8007298:	f7fe fd12 	bl	8005cc0 <HAL_SD_GetCardInfo>
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000194 	.word	0x20000194

080072a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80072b0:	f000 f818 	bl	80072e4 <BSP_SD_AbortCallback>
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80072c4:	f000 f815 	bl	80072f2 <BSP_SD_WriteCpltCallback>
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80072d8:	f000 f812 	bl	8007300 <BSP_SD_ReadCpltCallback>
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0

}
 80072e8:	bf00      	nop
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80072f2:	b480      	push	{r7}
 80072f4:	af00      	add	r7, sp, #0

}
 80072f6:	bf00      	nop
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0

}
 8007304:	bf00      	nop
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007314:	2301      	movs	r3, #1
 8007316:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007318:	f000 f80c 	bl	8007334 <BSP_PlatformIsDetected>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007322:	2300      	movs	r3, #0
 8007324:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	b2db      	uxtb	r3, r3
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800733a:	2301      	movs	r3, #1
 800733c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800733e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007342:	4806      	ldr	r0, [pc, #24]	; (800735c <BSP_PlatformIsDetected+0x28>)
 8007344:	f7fb f99a 	bl	800267c <HAL_GPIO_ReadPin>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800734e:	2300      	movs	r3, #0
 8007350:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007352:	79fb      	ldrb	r3, [r7, #7]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40020400 	.word	0x40020400

08007360 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800736a:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <SD_CheckStatus+0x38>)
 800736c:	2201      	movs	r2, #1
 800736e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007370:	f7ff ff7c 	bl	800726c <BSP_SD_GetCardState>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <SD_CheckStatus+0x38>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	b2da      	uxtb	r2, r3
 8007386:	4b04      	ldr	r3, [pc, #16]	; (8007398 <SD_CheckStatus+0x38>)
 8007388:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800738a:	4b03      	ldr	r3, [pc, #12]	; (8007398 <SD_CheckStatus+0x38>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	2000000d 	.word	0x2000000d

0800739c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <SD_initialize+0x38>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80073ac:	f7ff fefc 	bl	80071a8 <BSP_SD_Init>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d107      	bne.n	80073c6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff ffd1 	bl	8007360 <SD_CheckStatus>
 80073be:	4603      	mov	r3, r0
 80073c0:	461a      	mov	r2, r3
 80073c2:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <SD_initialize+0x38>)
 80073c4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80073c6:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <SD_initialize+0x38>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	b2db      	uxtb	r3, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	2000000d 	.word	0x2000000d

080073d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff ffbb 	bl	8007360 <SD_CheckStatus>
 80073ea:	4603      	mov	r3, r0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	68b8      	ldr	r0, [r7, #8]
 8007412:	f7ff feef 	bl	80071f4 <BSP_SD_ReadBlocks>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d107      	bne.n	800742c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800741c:	bf00      	nop
 800741e:	f7ff ff25 	bl	800726c <BSP_SD_GetCardState>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1fa      	bne.n	800741e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800744a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	68b8      	ldr	r0, [r7, #8]
 8007454:	f7ff feec 	bl	8007230 <BSP_SD_WriteBlocks>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d107      	bne.n	800746e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800745e:	bf00      	nop
 8007460:	f7ff ff04 	bl	800726c <BSP_SD_GetCardState>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1fa      	bne.n	8007460 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08c      	sub	sp, #48	; 0x30
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	603a      	str	r2, [r7, #0]
 8007482:	71fb      	strb	r3, [r7, #7]
 8007484:	460b      	mov	r3, r1
 8007486:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800748e:	4b25      	ldr	r3, [pc, #148]	; (8007524 <SD_ioctl+0xac>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <SD_ioctl+0x28>
 800749c:	2303      	movs	r3, #3
 800749e:	e03c      	b.n	800751a <SD_ioctl+0xa2>

  switch (cmd)
 80074a0:	79bb      	ldrb	r3, [r7, #6]
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d834      	bhi.n	8007510 <SD_ioctl+0x98>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <SD_ioctl+0x34>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074bd 	.word	0x080074bd
 80074b0:	080074c5 	.word	0x080074c5
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074f7 	.word	0x080074f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074c2:	e028      	b.n	8007516 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80074c4:	f107 030c 	add.w	r3, r7, #12
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fedf 	bl	800728c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80074ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074da:	e01c      	b.n	8007516 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80074dc:	f107 030c 	add.w	r3, r7, #12
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fed3 	bl	800728c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074f4:	e00f      	b.n	8007516 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80074f6:	f107 030c 	add.w	r3, r7, #12
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff fec6 	bl	800728c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	0a5a      	lsrs	r2, r3, #9
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800750e:	e002      	b.n	8007516 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007510:	2304      	movs	r3, #4
 8007512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800751a:	4618      	mov	r0, r3
 800751c:	3730      	adds	r7, #48	; 0x30
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	2000000d 	.word	0x2000000d

08007528 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	4a08      	ldr	r2, [pc, #32]	; (8007558 <disk_status+0x30>)
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	79fa      	ldrb	r2, [r7, #7]
 8007540:	4905      	ldr	r1, [pc, #20]	; (8007558 <disk_status+0x30>)
 8007542:	440a      	add	r2, r1
 8007544:	7a12      	ldrb	r2, [r2, #8]
 8007546:	4610      	mov	r0, r2
 8007548:	4798      	blx	r3
 800754a:	4603      	mov	r3, r0
 800754c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20001b6c 	.word	0x20001b6c

0800755c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	4a0d      	ldr	r2, [pc, #52]	; (80075a4 <disk_initialize+0x48>)
 800756e:	5cd3      	ldrb	r3, [r2, r3]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d111      	bne.n	8007598 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	4a0b      	ldr	r2, [pc, #44]	; (80075a4 <disk_initialize+0x48>)
 8007578:	2101      	movs	r1, #1
 800757a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <disk_initialize+0x48>)
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	79fa      	ldrb	r2, [r7, #7]
 800758a:	4906      	ldr	r1, [pc, #24]	; (80075a4 <disk_initialize+0x48>)
 800758c:	440a      	add	r2, r1
 800758e:	7a12      	ldrb	r2, [r2, #8]
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20001b6c 	.word	0x20001b6c

080075a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	607a      	str	r2, [r7, #4]
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <disk_read+0x3c>)
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	689c      	ldr	r4, [r3, #8]
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	4a07      	ldr	r2, [pc, #28]	; (80075e4 <disk_read+0x3c>)
 80075c8:	4413      	add	r3, r2
 80075ca:	7a18      	ldrb	r0, [r3, #8]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	47a0      	blx	r4
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd90      	pop	{r4, r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20001b6c 	.word	0x20001b6c

080075e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80075e8:	b590      	push	{r4, r7, lr}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <disk_write+0x3c>)
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	68dc      	ldr	r4, [r3, #12]
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4a07      	ldr	r2, [pc, #28]	; (8007624 <disk_write+0x3c>)
 8007608:	4413      	add	r3, r2
 800760a:	7a18      	ldrb	r0, [r3, #8]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	47a0      	blx	r4
 8007614:	4603      	mov	r3, r0
 8007616:	75fb      	strb	r3, [r7, #23]
  return res;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	bd90      	pop	{r4, r7, pc}
 8007622:	bf00      	nop
 8007624:	20001b6c 	.word	0x20001b6c

08007628 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	603a      	str	r2, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
 8007634:	460b      	mov	r3, r1
 8007636:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	4a09      	ldr	r2, [pc, #36]	; (8007660 <disk_ioctl+0x38>)
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	79fa      	ldrb	r2, [r7, #7]
 8007646:	4906      	ldr	r1, [pc, #24]	; (8007660 <disk_ioctl+0x38>)
 8007648:	440a      	add	r2, r1
 800764a:	7a10      	ldrb	r0, [r2, #8]
 800764c:	79b9      	ldrb	r1, [r7, #6]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	4798      	blx	r3
 8007652:	4603      	mov	r3, r0
 8007654:	73fb      	strb	r3, [r7, #15]
  return res;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20001b6c 	.word	0x20001b6c

08007664 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3301      	adds	r3, #1
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007674:	89fb      	ldrh	r3, [r7, #14]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	b21a      	sxth	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	b21b      	sxth	r3, r3
 8007680:	4313      	orrs	r3, r2
 8007682:	b21b      	sxth	r3, r3
 8007684:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007686:	89fb      	ldrh	r3, [r7, #14]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3303      	adds	r3, #3
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	3202      	adds	r2, #2
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	3201      	adds	r2, #1
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7812      	ldrb	r2, [r2, #0]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
	return rv;
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	887a      	ldrh	r2, [r7, #2]
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	887b      	ldrh	r3, [r7, #2]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	607a      	str	r2, [r7, #4]
 80076fe:	887a      	ldrh	r2, [r7, #2]
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	0a1b      	lsrs	r3, r3, #8
 800772a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	607a      	str	r2, [r7, #4]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	0a1b      	lsrs	r3, r3, #8
 800774e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	607a      	str	r2, [r7, #4]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00d      	beq.n	800779e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	1c53      	adds	r3, r2, #1
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	1c59      	adds	r1, r3, #1
 800778c:	6179      	str	r1, [r7, #20]
 800778e:	7812      	ldrb	r2, [r2, #0]
 8007790:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3b01      	subs	r3, #1
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f1      	bne.n	8007782 <mem_cpy+0x1a>
	}
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80077aa:	b480      	push	{r7}
 80077ac:	b087      	sub	sp, #28
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	617a      	str	r2, [r7, #20]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1f3      	bne.n	80077ba <mem_set+0x10>
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80077e0:	b480      	push	{r7}
 80077e2:	b089      	sub	sp, #36	; 0x24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	61fa      	str	r2, [r7, #28]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	4619      	mov	r1, r3
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	61ba      	str	r2, [r7, #24]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	1acb      	subs	r3, r1, r3
 800780c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <mem_cmp+0x40>
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0eb      	beq.n	80077f8 <mem_cmp+0x18>

	return r;
 8007820:	697b      	ldr	r3, [r7, #20]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3724      	adds	r7, #36	; 0x24
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007838:	e002      	b.n	8007840 <chk_chr+0x12>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3301      	adds	r3, #1
 800783e:	607b      	str	r3, [r7, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <chk_chr+0x26>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	4293      	cmp	r3, r2
 8007852:	d1f2      	bne.n	800783a <chk_chr+0xc>
	return *str;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	781b      	ldrb	r3, [r3, #0]
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	e029      	b.n	80078cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007878:	4a27      	ldr	r2, [pc, #156]	; (8007918 <chk_lock+0xb4>)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	4413      	add	r3, r2
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01d      	beq.n	80078c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007886:	4a24      	ldr	r2, [pc, #144]	; (8007918 <chk_lock+0xb4>)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	4413      	add	r3, r2
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d116      	bne.n	80078c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007898:	4a1f      	ldr	r2, [pc, #124]	; (8007918 <chk_lock+0xb4>)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	4413      	add	r3, r2
 80078a0:	3304      	adds	r3, #4
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d10c      	bne.n	80078c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078ac:	4a1a      	ldr	r2, [pc, #104]	; (8007918 <chk_lock+0xb4>)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	4413      	add	r3, r2
 80078b4:	3308      	adds	r3, #8
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80078bc:	429a      	cmp	r2, r3
 80078be:	d102      	bne.n	80078c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078c0:	e007      	b.n	80078d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80078c2:	2301      	movs	r3, #1
 80078c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3301      	adds	r3, #1
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d9d2      	bls.n	8007878 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d109      	bne.n	80078ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <chk_lock+0x80>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d101      	bne.n	80078e8 <chk_lock+0x84>
 80078e4:	2300      	movs	r3, #0
 80078e6:	e010      	b.n	800790a <chk_lock+0xa6>
 80078e8:	2312      	movs	r3, #18
 80078ea:	e00e      	b.n	800790a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d108      	bne.n	8007904 <chk_lock+0xa0>
 80078f2:	4a09      	ldr	r2, [pc, #36]	; (8007918 <chk_lock+0xb4>)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	4413      	add	r3, r2
 80078fa:	330c      	adds	r3, #12
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007902:	d101      	bne.n	8007908 <chk_lock+0xa4>
 8007904:	2310      	movs	r3, #16
 8007906:	e000      	b.n	800790a <chk_lock+0xa6>
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20001b4c 	.word	0x20001b4c

0800791c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007922:	2300      	movs	r3, #0
 8007924:	607b      	str	r3, [r7, #4]
 8007926:	e002      	b.n	800792e <enq_lock+0x12>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3301      	adds	r3, #1
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d806      	bhi.n	8007942 <enq_lock+0x26>
 8007934:	4a09      	ldr	r2, [pc, #36]	; (800795c <enq_lock+0x40>)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	4413      	add	r3, r2
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f2      	bne.n	8007928 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b02      	cmp	r3, #2
 8007946:	bf14      	ite	ne
 8007948:	2301      	movne	r3, #1
 800794a:	2300      	moveq	r3, #0
 800794c:	b2db      	uxtb	r3, r3
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20001b4c 	.word	0x20001b4c

08007960 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e01f      	b.n	80079b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007970:	4a41      	ldr	r2, [pc, #260]	; (8007a78 <inc_lock+0x118>)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	4413      	add	r3, r2
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d113      	bne.n	80079aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007982:	4a3d      	ldr	r2, [pc, #244]	; (8007a78 <inc_lock+0x118>)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4413      	add	r3, r2
 800798a:	3304      	adds	r3, #4
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007992:	429a      	cmp	r2, r3
 8007994:	d109      	bne.n	80079aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007996:	4a38      	ldr	r2, [pc, #224]	; (8007a78 <inc_lock+0x118>)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	4413      	add	r3, r2
 800799e:	3308      	adds	r3, #8
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d006      	beq.n	80079b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d9dc      	bls.n	8007970 <inc_lock+0x10>
 80079b6:	e000      	b.n	80079ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80079b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d132      	bne.n	8007a26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e002      	b.n	80079cc <inc_lock+0x6c>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3301      	adds	r3, #1
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d806      	bhi.n	80079e0 <inc_lock+0x80>
 80079d2:	4a29      	ldr	r2, [pc, #164]	; (8007a78 <inc_lock+0x118>)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	4413      	add	r3, r2
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f2      	bne.n	80079c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d101      	bne.n	80079ea <inc_lock+0x8a>
 80079e6:	2300      	movs	r3, #0
 80079e8:	e040      	b.n	8007a6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4922      	ldr	r1, [pc, #136]	; (8007a78 <inc_lock+0x118>)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	440b      	add	r3, r1
 80079f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	491e      	ldr	r1, [pc, #120]	; (8007a78 <inc_lock+0x118>)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	440b      	add	r3, r1
 8007a04:	3304      	adds	r3, #4
 8007a06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	491a      	ldr	r1, [pc, #104]	; (8007a78 <inc_lock+0x118>)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	440b      	add	r3, r1
 8007a14:	3308      	adds	r3, #8
 8007a16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a18:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <inc_lock+0x118>)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	4413      	add	r3, r2
 8007a20:	330c      	adds	r3, #12
 8007a22:	2200      	movs	r2, #0
 8007a24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <inc_lock+0xe0>
 8007a2c:	4a12      	ldr	r2, [pc, #72]	; (8007a78 <inc_lock+0x118>)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	4413      	add	r3, r2
 8007a34:	330c      	adds	r3, #12
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <inc_lock+0xe0>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e015      	b.n	8007a6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d108      	bne.n	8007a58 <inc_lock+0xf8>
 8007a46:	4a0c      	ldr	r2, [pc, #48]	; (8007a78 <inc_lock+0x118>)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	4413      	add	r3, r2
 8007a4e:	330c      	adds	r3, #12
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	e001      	b.n	8007a5c <inc_lock+0xfc>
 8007a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a5c:	4906      	ldr	r1, [pc, #24]	; (8007a78 <inc_lock+0x118>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	440b      	add	r3, r1
 8007a64:	330c      	adds	r3, #12
 8007a66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	20001b4c 	.word	0x20001b4c

08007a7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	607b      	str	r3, [r7, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d825      	bhi.n	8007adc <dec_lock+0x60>
		n = Files[i].ctr;
 8007a90:	4a17      	ldr	r2, [pc, #92]	; (8007af0 <dec_lock+0x74>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	4413      	add	r3, r2
 8007a98:	330c      	adds	r3, #12
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007a9e:	89fb      	ldrh	r3, [r7, #14]
 8007aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa4:	d101      	bne.n	8007aaa <dec_lock+0x2e>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007aaa:	89fb      	ldrh	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <dec_lock+0x3a>
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007ab6:	4a0e      	ldr	r2, [pc, #56]	; (8007af0 <dec_lock+0x74>)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	4413      	add	r3, r2
 8007abe:	330c      	adds	r3, #12
 8007ac0:	89fa      	ldrh	r2, [r7, #14]
 8007ac2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007ac4:	89fb      	ldrh	r3, [r7, #14]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <dec_lock+0x5a>
 8007aca:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <dec_lock+0x74>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	4413      	add	r3, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	737b      	strb	r3, [r7, #13]
 8007ada:	e001      	b.n	8007ae0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007adc:	2302      	movs	r3, #2
 8007ade:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ae0:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20001b4c 	.word	0x20001b4c

08007af4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	e010      	b.n	8007b24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b02:	4a0d      	ldr	r2, [pc, #52]	; (8007b38 <clear_lock+0x44>)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	4413      	add	r3, r2
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d105      	bne.n	8007b1e <clear_lock+0x2a>
 8007b12:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <clear_lock+0x44>)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	4413      	add	r3, r2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3301      	adds	r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d9eb      	bls.n	8007b02 <clear_lock+0xe>
	}
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20001b4c 	.word	0x20001b4c

08007b3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	78db      	ldrb	r3, [r3, #3]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d034      	beq.n	8007bba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	7858      	ldrb	r0, [r3, #1]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b60:	2301      	movs	r3, #1
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	f7ff fd40 	bl	80075e8 <disk_write>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	73fb      	strb	r3, [r7, #15]
 8007b72:	e022      	b.n	8007bba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	1ad2      	subs	r2, r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d217      	bcs.n	8007bba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	789b      	ldrb	r3, [r3, #2]
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	e010      	b.n	8007bb4 <sync_window+0x78>
					wsect += fs->fsize;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	7858      	ldrb	r0, [r3, #1]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	f7ff fd1d 	bl	80075e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d8eb      	bhi.n	8007b92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d01b      	beq.n	8007c14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ffad 	bl	8007b3c <sync_window>
 8007be2:	4603      	mov	r3, r0
 8007be4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d113      	bne.n	8007c14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	7858      	ldrb	r0, [r3, #1]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	f7ff fcd5 	bl	80075a8 <disk_read>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff ff87 	bl	8007b3c <sync_window>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d159      	bne.n	8007cec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d149      	bne.n	8007cd4 <sync_fs+0xb4>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	791b      	ldrb	r3, [r3, #4]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d145      	bne.n	8007cd4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	899b      	ldrh	r3, [r3, #12]
 8007c52:	461a      	mov	r2, r3
 8007c54:	2100      	movs	r1, #0
 8007c56:	f7ff fda8 	bl	80077aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3334      	adds	r3, #52	; 0x34
 8007c5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c62:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fd37 	bl	80076da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3334      	adds	r3, #52	; 0x34
 8007c70:	4921      	ldr	r1, [pc, #132]	; (8007cf8 <sync_fs+0xd8>)
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fd4c 	bl	8007710 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3334      	adds	r3, #52	; 0x34
 8007c7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c80:	491e      	ldr	r1, [pc, #120]	; (8007cfc <sync_fs+0xdc>)
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fd44 	bl	8007710 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3334      	adds	r3, #52	; 0x34
 8007c8c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f7ff fd3a 	bl	8007710 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3334      	adds	r3, #52	; 0x34
 8007ca0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f7ff fd30 	bl	8007710 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	7858      	ldrb	r0, [r3, #1]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f7ff fc8d 	bl	80075e8 <disk_write>
			fs->fsi_flag = 0;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff fca3 	bl	8007628 <disk_ioctl>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <sync_fs+0xcc>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	41615252 	.word	0x41615252
 8007cfc:	61417272 	.word	0x61417272

08007d00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	3b02      	subs	r3, #2
 8007d0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	3b02      	subs	r3, #2
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d301      	bcc.n	8007d20 <clust2sect+0x20>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e008      	b.n	8007d32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	895b      	ldrh	r3, [r3, #10]
 8007d24:	461a      	mov	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	fb03 f202 	mul.w	r2, r3, r2
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	4413      	add	r3, r2
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b086      	sub	sp, #24
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d904      	bls.n	8007d5e <get_fat+0x20>
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d302      	bcc.n	8007d64 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d5e:	2301      	movs	r3, #1
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e0bb      	b.n	8007edc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	f000 8083 	beq.w	8007e7a <get_fat+0x13c>
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	f300 80a7 	bgt.w	8007ec8 <get_fat+0x18a>
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d002      	beq.n	8007d84 <get_fat+0x46>
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d056      	beq.n	8007e30 <get_fat+0xf2>
 8007d82:	e0a1      	b.n	8007ec8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	085b      	lsrs	r3, r3, #1
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	899b      	ldrh	r3, [r3, #12]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007da2:	4413      	add	r3, r2
 8007da4:	4619      	mov	r1, r3
 8007da6:	6938      	ldr	r0, [r7, #16]
 8007da8:	f7ff ff0c 	bl	8007bc4 <move_window>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f040 808d 	bne.w	8007ece <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	60fa      	str	r2, [r7, #12]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	8992      	ldrh	r2, [r2, #12]
 8007dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc2:	fb01 f202 	mul.w	r2, r1, r2
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	899b      	ldrh	r3, [r3, #12]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8007de2:	4413      	add	r3, r2
 8007de4:	4619      	mov	r1, r3
 8007de6:	6938      	ldr	r0, [r7, #16]
 8007de8:	f7ff feec 	bl	8007bc4 <move_window>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d16f      	bne.n	8007ed2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	899b      	ldrh	r3, [r3, #12]
 8007df6:	461a      	mov	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dfe:	fb01 f202 	mul.w	r2, r1, r2
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	461a      	mov	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <get_fat+0xe8>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	e002      	b.n	8007e2c <get_fat+0xee>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e2c:	617b      	str	r3, [r7, #20]
			break;
 8007e2e:	e055      	b.n	8007edc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	899b      	ldrh	r3, [r3, #12]
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e44:	4413      	add	r3, r2
 8007e46:	4619      	mov	r1, r3
 8007e48:	6938      	ldr	r0, [r7, #16]
 8007e4a:	f7ff febb 	bl	8007bc4 <move_window>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d140      	bne.n	8007ed6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	8992      	ldrh	r2, [r2, #12]
 8007e62:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e66:	fb00 f202 	mul.w	r2, r0, r2
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fbf8 	bl	8007664 <ld_word>
 8007e74:	4603      	mov	r3, r0
 8007e76:	617b      	str	r3, [r7, #20]
			break;
 8007e78:	e030      	b.n	8007edc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	899b      	ldrh	r3, [r3, #12]
 8007e82:	089b      	lsrs	r3, r3, #2
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4619      	mov	r1, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e8e:	4413      	add	r3, r2
 8007e90:	4619      	mov	r1, r3
 8007e92:	6938      	ldr	r0, [r7, #16]
 8007e94:	f7ff fe96 	bl	8007bc4 <move_window>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d11d      	bne.n	8007eda <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	8992      	ldrh	r2, [r2, #12]
 8007eac:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eb0:	fb00 f202 	mul.w	r2, r0, r2
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff fbeb 	bl	8007694 <ld_dword>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ec4:	617b      	str	r3, [r7, #20]
			break;
 8007ec6:	e009      	b.n	8007edc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ec8:	2301      	movs	r3, #1
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e006      	b.n	8007edc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ece:	bf00      	nop
 8007ed0:	e004      	b.n	8007edc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ed2:	bf00      	nop
 8007ed4:	e002      	b.n	8007edc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ed6:	bf00      	nop
 8007ed8:	e000      	b.n	8007edc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007eda:	bf00      	nop
		}
	}

	return val;
 8007edc:	697b      	ldr	r3, [r7, #20]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007ee6:	b590      	push	{r4, r7, lr}
 8007ee8:	b089      	sub	sp, #36	; 0x24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	f240 8102 	bls.w	8008102 <put_fat+0x21c>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	f080 80fc 	bcs.w	8008102 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	f000 80b6 	beq.w	8008080 <put_fat+0x19a>
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	f300 80fd 	bgt.w	8008114 <put_fat+0x22e>
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d003      	beq.n	8007f26 <put_fat+0x40>
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	f000 8083 	beq.w	800802a <put_fat+0x144>
 8007f24:	e0f6      	b.n	8008114 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	4413      	add	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	899b      	ldrh	r3, [r3, #12]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f44:	4413      	add	r3, r2
 8007f46:	4619      	mov	r1, r3
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fe3b 	bl	8007bc4 <move_window>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f52:	7ffb      	ldrb	r3, [r7, #31]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 80d6 	bne.w	8008106 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	61ba      	str	r2, [r7, #24]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	8992      	ldrh	r2, [r2, #12]
 8007f6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f6e:	fb00 f202 	mul.w	r2, r0, r2
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	440b      	add	r3, r1
 8007f76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00d      	beq.n	8007f9e <put_fat+0xb8>
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b25b      	sxtb	r3, r3
 8007f88:	f003 030f 	and.w	r3, r3, #15
 8007f8c:	b25a      	sxtb	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	b25b      	sxtb	r3, r3
 8007f96:	4313      	orrs	r3, r2
 8007f98:	b25b      	sxtb	r3, r3
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	e001      	b.n	8007fa2 <put_fat+0xbc>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	899b      	ldrh	r3, [r3, #12]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fbc:	4413      	add	r3, r2
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7ff fdff 	bl	8007bc4 <move_window>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fca:	7ffb      	ldrb	r3, [r7, #31]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 809c 	bne.w	800810a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	899b      	ldrh	r3, [r3, #12]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fe4:	fb00 f202 	mul.w	r2, r0, r2
 8007fe8:	1a9b      	subs	r3, r3, r2
 8007fea:	440b      	add	r3, r1
 8007fec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <put_fat+0x11a>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	091b      	lsrs	r3, r3, #4
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	e00e      	b.n	800801e <put_fat+0x138>
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b25b      	sxtb	r3, r3
 8008006:	f023 030f 	bic.w	r3, r3, #15
 800800a:	b25a      	sxtb	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	0a1b      	lsrs	r3, r3, #8
 8008010:	b25b      	sxtb	r3, r3
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	b25b      	sxtb	r3, r3
 8008018:	4313      	orrs	r3, r2
 800801a:	b25b      	sxtb	r3, r3
 800801c:	b2db      	uxtb	r3, r3
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	70da      	strb	r2, [r3, #3]
			break;
 8008028:	e074      	b.n	8008114 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	899b      	ldrh	r3, [r3, #12]
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	b29b      	uxth	r3, r3
 8008036:	4619      	mov	r1, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	fbb3 f3f1 	udiv	r3, r3, r1
 800803e:	4413      	add	r3, r2
 8008040:	4619      	mov	r1, r3
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff fdbe 	bl	8007bc4 <move_window>
 8008048:	4603      	mov	r3, r0
 800804a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800804c:	7ffb      	ldrb	r3, [r7, #31]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d15d      	bne.n	800810e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	8992      	ldrh	r2, [r2, #12]
 8008060:	fbb3 f0f2 	udiv	r0, r3, r2
 8008064:	fb00 f202 	mul.w	r2, r0, r2
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	440b      	add	r3, r1
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	b292      	uxth	r2, r2
 8008070:	4611      	mov	r1, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fb31 	bl	80076da <st_word>
			fs->wflag = 1;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	70da      	strb	r2, [r3, #3]
			break;
 800807e:	e049      	b.n	8008114 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	899b      	ldrh	r3, [r3, #12]
 8008088:	089b      	lsrs	r3, r3, #2
 800808a:	b29b      	uxth	r3, r3
 800808c:	4619      	mov	r1, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	fbb3 f3f1 	udiv	r3, r3, r1
 8008094:	4413      	add	r3, r2
 8008096:	4619      	mov	r1, r3
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff fd93 	bl	8007bc4 <move_window>
 800809e:	4603      	mov	r3, r0
 80080a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080a2:	7ffb      	ldrb	r3, [r7, #31]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d134      	bne.n	8008112 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	8992      	ldrh	r2, [r2, #12]
 80080bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80080c0:	fb00 f202 	mul.w	r2, r0, r2
 80080c4:	1a9b      	subs	r3, r3, r2
 80080c6:	440b      	add	r3, r1
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fae3 	bl	8007694 <ld_dword>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080d4:	4323      	orrs	r3, r4
 80080d6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	8992      	ldrh	r2, [r2, #12]
 80080e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80080ea:	fb00 f202 	mul.w	r2, r0, r2
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	440b      	add	r3, r1
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff fb0b 	bl	8007710 <st_dword>
			fs->wflag = 1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	70da      	strb	r2, [r3, #3]
			break;
 8008100:	e008      	b.n	8008114 <put_fat+0x22e>
		}
	}
 8008102:	bf00      	nop
 8008104:	e006      	b.n	8008114 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008106:	bf00      	nop
 8008108:	e004      	b.n	8008114 <put_fat+0x22e>
			if (res != FR_OK) break;
 800810a:	bf00      	nop
 800810c:	e002      	b.n	8008114 <put_fat+0x22e>
			if (res != FR_OK) break;
 800810e:	bf00      	nop
 8008110:	e000      	b.n	8008114 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008112:	bf00      	nop
	return res;
 8008114:	7ffb      	ldrb	r3, [r7, #31]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3724      	adds	r7, #36	; 0x24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd90      	pop	{r4, r7, pc}

0800811e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b088      	sub	sp, #32
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d904      	bls.n	8008144 <remove_chain+0x26>
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	429a      	cmp	r2, r3
 8008142:	d301      	bcc.n	8008148 <remove_chain+0x2a>
 8008144:	2302      	movs	r3, #2
 8008146:	e04b      	b.n	80081e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00c      	beq.n	8008168 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800814e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	69b8      	ldr	r0, [r7, #24]
 8008156:	f7ff fec6 	bl	8007ee6 <put_fat>
 800815a:	4603      	mov	r3, r0
 800815c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800815e:	7ffb      	ldrb	r3, [r7, #31]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <remove_chain+0x4a>
 8008164:	7ffb      	ldrb	r3, [r7, #31]
 8008166:	e03b      	b.n	80081e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff fde7 	bl	8007d3e <get_fat>
 8008170:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d031      	beq.n	80081dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d101      	bne.n	8008182 <remove_chain+0x64>
 800817e:	2302      	movs	r3, #2
 8008180:	e02e      	b.n	80081e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008188:	d101      	bne.n	800818e <remove_chain+0x70>
 800818a:	2301      	movs	r3, #1
 800818c:	e028      	b.n	80081e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800818e:	2200      	movs	r2, #0
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	69b8      	ldr	r0, [r7, #24]
 8008194:	f7ff fea7 	bl	8007ee6 <put_fat>
 8008198:	4603      	mov	r3, r0
 800819a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800819c:	7ffb      	ldrb	r3, [r7, #31]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <remove_chain+0x88>
 80081a2:	7ffb      	ldrb	r3, [r7, #31]
 80081a4:	e01c      	b.n	80081e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	695a      	ldr	r2, [r3, #20]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	3b02      	subs	r3, #2
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d20b      	bcs.n	80081cc <remove_chain+0xae>
			fs->free_clst++;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	791b      	ldrb	r3, [r3, #4]
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d3c6      	bcc.n	8008168 <remove_chain+0x4a>
 80081da:	e000      	b.n	80081de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80081dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3720      	adds	r7, #32
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10d      	bne.n	800821a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <create_chain+0x2c>
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	429a      	cmp	r2, r3
 8008212:	d31b      	bcc.n	800824c <create_chain+0x64>
 8008214:	2301      	movs	r3, #1
 8008216:	61bb      	str	r3, [r7, #24]
 8008218:	e018      	b.n	800824c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff fd8e 	bl	8007d3e <get_fat>
 8008222:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d801      	bhi.n	800822e <create_chain+0x46>
 800822a:	2301      	movs	r3, #1
 800822c:	e070      	b.n	8008310 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008234:	d101      	bne.n	800823a <create_chain+0x52>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	e06a      	b.n	8008310 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	429a      	cmp	r2, r3
 8008242:	d201      	bcs.n	8008248 <create_chain+0x60>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	e063      	b.n	8008310 <create_chain+0x128>
		scl = clst;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	3301      	adds	r3, #1
 8008254:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	429a      	cmp	r2, r3
 800825e:	d307      	bcc.n	8008270 <create_chain+0x88>
				ncl = 2;
 8008260:	2302      	movs	r3, #2
 8008262:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	429a      	cmp	r2, r3
 800826a:	d901      	bls.n	8008270 <create_chain+0x88>
 800826c:	2300      	movs	r3, #0
 800826e:	e04f      	b.n	8008310 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008270:	69f9      	ldr	r1, [r7, #28]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fd63 	bl	8007d3e <get_fat>
 8008278:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00e      	beq.n	800829e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d003      	beq.n	800828e <create_chain+0xa6>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800828c:	d101      	bne.n	8008292 <create_chain+0xaa>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	e03e      	b.n	8008310 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	429a      	cmp	r2, r3
 8008298:	d1da      	bne.n	8008250 <create_chain+0x68>
 800829a:	2300      	movs	r3, #0
 800829c:	e038      	b.n	8008310 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800829e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80082a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082a4:	69f9      	ldr	r1, [r7, #28]
 80082a6:	6938      	ldr	r0, [r7, #16]
 80082a8:	f7ff fe1d 	bl	8007ee6 <put_fat>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <create_chain+0xe2>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d006      	beq.n	80082ca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6938      	ldr	r0, [r7, #16]
 80082c2:	f7ff fe10 	bl	8007ee6 <put_fat>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d116      	bne.n	80082fe <create_chain+0x116>
		fs->last_clst = ncl;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	695a      	ldr	r2, [r3, #20]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	3b02      	subs	r3, #2
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d804      	bhi.n	80082ee <create_chain+0x106>
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	1e5a      	subs	r2, r3, #1
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	791b      	ldrb	r3, [r3, #4]
 80082f2:	f043 0301 	orr.w	r3, r3, #1
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	711a      	strb	r2, [r3, #4]
 80082fc:	e007      	b.n	800830e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d102      	bne.n	800830a <create_chain+0x122>
 8008304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008308:	e000      	b.n	800830c <create_chain+0x124>
 800830a:	2301      	movs	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800830e:	69fb      	ldr	r3, [r7, #28]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3720      	adds	r7, #32
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	3304      	adds	r3, #4
 800832e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	899b      	ldrh	r3, [r3, #12]
 8008334:	461a      	mov	r2, r3
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	fbb3 f3f2 	udiv	r3, r3, r2
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	8952      	ldrh	r2, [r2, #10]
 8008340:	fbb3 f3f2 	udiv	r3, r3, r2
 8008344:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	613a      	str	r2, [r7, #16]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <clmt_clust+0x42>
 8008356:	2300      	movs	r3, #0
 8008358:	e010      	b.n	800837c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	429a      	cmp	r2, r3
 8008360:	d307      	bcc.n	8008372 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	3304      	adds	r3, #4
 800836e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008370:	e7e9      	b.n	8008346 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008372:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	4413      	add	r3, r2
}
 800837c:	4618      	mov	r0, r3
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800839e:	d204      	bcs.n	80083aa <dir_sdi+0x22>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	f003 031f 	and.w	r3, r3, #31
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <dir_sdi+0x26>
		return FR_INT_ERR;
 80083aa:	2302      	movs	r3, #2
 80083ac:	e071      	b.n	8008492 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <dir_sdi+0x46>
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d902      	bls.n	80083ce <dir_sdi+0x46>
		clst = fs->dirbase;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10c      	bne.n	80083ee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	8912      	ldrh	r2, [r2, #8]
 80083dc:	4293      	cmp	r3, r2
 80083de:	d301      	bcc.n	80083e4 <dir_sdi+0x5c>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e056      	b.n	8008492 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	61da      	str	r2, [r3, #28]
 80083ec:	e02d      	b.n	800844a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	895b      	ldrh	r3, [r3, #10]
 80083f2:	461a      	mov	r2, r3
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	899b      	ldrh	r3, [r3, #12]
 80083f8:	fb02 f303 	mul.w	r3, r2, r3
 80083fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80083fe:	e019      	b.n	8008434 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6979      	ldr	r1, [r7, #20]
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff fc9a 	bl	8007d3e <get_fat>
 800840a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008412:	d101      	bne.n	8008418 <dir_sdi+0x90>
 8008414:	2301      	movs	r3, #1
 8008416:	e03c      	b.n	8008492 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d904      	bls.n	8008428 <dir_sdi+0xa0>
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	429a      	cmp	r2, r3
 8008426:	d301      	bcc.n	800842c <dir_sdi+0xa4>
 8008428:	2302      	movs	r3, #2
 800842a:	e032      	b.n	8008492 <dir_sdi+0x10a>
			ofs -= csz;
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	429a      	cmp	r2, r3
 800843a:	d2e1      	bcs.n	8008400 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800843c:	6979      	ldr	r1, [r7, #20]
 800843e:	6938      	ldr	r0, [r7, #16]
 8008440:	f7ff fc5e 	bl	8007d00 <clust2sect>
 8008444:	4602      	mov	r2, r0
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <dir_sdi+0xd4>
 8008458:	2302      	movs	r3, #2
 800845a:	e01a      	b.n	8008492 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	69da      	ldr	r2, [r3, #28]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	899b      	ldrh	r3, [r3, #12]
 8008464:	4619      	mov	r1, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	fbb3 f3f1 	udiv	r3, r3, r1
 800846c:	441a      	add	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	899b      	ldrh	r3, [r3, #12]
 800847c:	461a      	mov	r2, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	fbb3 f0f2 	udiv	r0, r3, r2
 8008484:	fb00 f202 	mul.w	r2, r0, r2
 8008488:	1a9b      	subs	r3, r3, r2
 800848a:	18ca      	adds	r2, r1, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b086      	sub	sp, #24
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	3320      	adds	r3, #32
 80084b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <dir_next+0x28>
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084c0:	d301      	bcc.n	80084c6 <dir_next+0x2c>
 80084c2:	2304      	movs	r3, #4
 80084c4:	e0bb      	b.n	800863e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	899b      	ldrh	r3, [r3, #12]
 80084ca:	461a      	mov	r2, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80084d2:	fb01 f202 	mul.w	r2, r1, r2
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 809d 	bne.w	8008618 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10b      	bne.n	8008508 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	8912      	ldrh	r2, [r2, #8]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	f0c0 808d 	bcc.w	8008618 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	61da      	str	r2, [r3, #28]
 8008504:	2304      	movs	r3, #4
 8008506:	e09a      	b.n	800863e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	899b      	ldrh	r3, [r3, #12]
 800850c:	461a      	mov	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	fbb3 f3f2 	udiv	r3, r3, r2
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	8952      	ldrh	r2, [r2, #10]
 8008518:	3a01      	subs	r2, #1
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d17b      	bne.n	8008618 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7ff fc08 	bl	8007d3e <get_fat>
 800852e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d801      	bhi.n	800853a <dir_next+0xa0>
 8008536:	2302      	movs	r3, #2
 8008538:	e081      	b.n	800863e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008540:	d101      	bne.n	8008546 <dir_next+0xac>
 8008542:	2301      	movs	r3, #1
 8008544:	e07b      	b.n	800863e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	429a      	cmp	r2, r3
 800854e:	d359      	bcc.n	8008604 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d104      	bne.n	8008560 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	61da      	str	r2, [r3, #28]
 800855c:	2304      	movs	r3, #4
 800855e:	e06e      	b.n	800863e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f7ff fe3d 	bl	80081e8 <create_chain>
 800856e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <dir_next+0xe0>
 8008576:	2307      	movs	r3, #7
 8008578:	e061      	b.n	800863e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <dir_next+0xea>
 8008580:	2302      	movs	r3, #2
 8008582:	e05c      	b.n	800863e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800858a:	d101      	bne.n	8008590 <dir_next+0xf6>
 800858c:	2301      	movs	r3, #1
 800858e:	e056      	b.n	800863e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f7ff fad3 	bl	8007b3c <sync_window>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <dir_next+0x106>
 800859c:	2301      	movs	r3, #1
 800859e:	e04e      	b.n	800863e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	899b      	ldrh	r3, [r3, #12]
 80085aa:	461a      	mov	r2, r3
 80085ac:	2100      	movs	r1, #0
 80085ae:	f7ff f8fc 	bl	80077aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085b2:	2300      	movs	r3, #0
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	6979      	ldr	r1, [r7, #20]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff fba1 	bl	8007d00 <clust2sect>
 80085be:	4602      	mov	r2, r0
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30
 80085c4:	e012      	b.n	80085ec <dir_next+0x152>
						fs->wflag = 1;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7ff fab5 	bl	8007b3c <sync_window>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <dir_next+0x142>
 80085d8:	2301      	movs	r3, #1
 80085da:	e030      	b.n	800863e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3301      	adds	r3, #1
 80085e0:	613b      	str	r3, [r7, #16]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	631a      	str	r2, [r3, #48]	; 0x30
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	895b      	ldrh	r3, [r3, #10]
 80085f0:	461a      	mov	r2, r3
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d3e6      	bcc.n	80085c6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800860a:	6979      	ldr	r1, [r7, #20]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff fb77 	bl	8007d00 <clust2sect>
 8008612:	4602      	mov	r2, r0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	899b      	ldrh	r3, [r3, #12]
 8008628:	461a      	mov	r2, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008630:	fb00 f202 	mul.w	r2, r0, r2
 8008634:	1a9b      	subs	r3, r3, r2
 8008636:	18ca      	adds	r2, r1, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b086      	sub	sp, #24
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008656:	2100      	movs	r1, #0
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fe95 	bl	8008388 <dir_sdi>
 800865e:	4603      	mov	r3, r0
 8008660:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d12b      	bne.n	80086c0 <dir_alloc+0x7a>
		n = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	4619      	mov	r1, r3
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f7ff faa6 	bl	8007bc4 <move_window>
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d11d      	bne.n	80086be <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2be5      	cmp	r3, #229	; 0xe5
 800868a:	d004      	beq.n	8008696 <dir_alloc+0x50>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d107      	bne.n	80086a6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	3301      	adds	r3, #1
 800869a:	613b      	str	r3, [r7, #16]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d102      	bne.n	80086aa <dir_alloc+0x64>
 80086a4:	e00c      	b.n	80086c0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80086a6:	2300      	movs	r3, #0
 80086a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80086aa:	2101      	movs	r1, #1
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff fef4 	bl	800849a <dir_next>
 80086b2:	4603      	mov	r3, r0
 80086b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0d7      	beq.n	800866c <dir_alloc+0x26>
 80086bc:	e000      	b.n	80086c0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d101      	bne.n	80086ca <dir_alloc+0x84>
 80086c6:	2307      	movs	r3, #7
 80086c8:	75fb      	strb	r3, [r7, #23]
	return res;
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	331a      	adds	r3, #26
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe ffbe 	bl	8007664 <ld_word>
 80086e8:	4603      	mov	r3, r0
 80086ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d109      	bne.n	8008708 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	3314      	adds	r3, #20
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe ffb3 	bl	8007664 <ld_word>
 80086fe:	4603      	mov	r3, r0
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008708:	68fb      	ldr	r3, [r7, #12]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	331a      	adds	r3, #26
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	b292      	uxth	r2, r2
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe ffd6 	bl	80076da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d109      	bne.n	800874a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f103 0214 	add.w	r2, r3, #20
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	0c1b      	lsrs	r3, r3, #16
 8008740:	b29b      	uxth	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f7fe ffc8 	bl	80076da <st_word>
	}
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800875c:	2304      	movs	r3, #4
 800875e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008766:	e03c      	b.n	80087e2 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	4619      	mov	r1, r3
 800876e:	6938      	ldr	r0, [r7, #16]
 8008770:	f7ff fa28 	bl	8007bc4 <move_window>
 8008774:	4603      	mov	r3, r0
 8008776:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d136      	bne.n	80087ec <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800878c:	2304      	movs	r3, #4
 800878e:	75fb      	strb	r3, [r7, #23]
 8008790:	e031      	b.n	80087f6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	330b      	adds	r3, #11
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800879e:	73bb      	strb	r3, [r7, #14]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7bba      	ldrb	r2, [r7, #14]
 80087a4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	2be5      	cmp	r3, #229	; 0xe5
 80087aa:	d011      	beq.n	80087d0 <dir_read+0x7e>
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2b2e      	cmp	r3, #46	; 0x2e
 80087b0:	d00e      	beq.n	80087d0 <dir_read+0x7e>
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	2b0f      	cmp	r3, #15
 80087b6:	d00b      	beq.n	80087d0 <dir_read+0x7e>
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	f023 0320 	bic.w	r3, r3, #32
 80087be:	2b08      	cmp	r3, #8
 80087c0:	bf0c      	ite	eq
 80087c2:	2301      	moveq	r3, #1
 80087c4:	2300      	movne	r3, #0
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	461a      	mov	r2, r3
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00f      	beq.n	80087f0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fe61 	bl	800849a <dir_next>
 80087d8:	4603      	mov	r3, r0
 80087da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d108      	bne.n	80087f4 <dir_read+0xa2>
	while (dp->sect) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1be      	bne.n	8008768 <dir_read+0x16>
 80087ea:	e004      	b.n	80087f6 <dir_read+0xa4>
		if (res != FR_OK) break;
 80087ec:	bf00      	nop
 80087ee:	e002      	b.n	80087f6 <dir_read+0xa4>
				break;
 80087f0:	bf00      	nop
 80087f2:	e000      	b.n	80087f6 <dir_read+0xa4>
		if (res != FR_OK) break;
 80087f4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <dir_read+0xb0>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	61da      	str	r2, [r3, #28]
	return res;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800881a:	2100      	movs	r1, #0
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff fdb3 	bl	8008388 <dir_sdi>
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <dir_find+0x24>
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	e03e      	b.n	80088ae <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	4619      	mov	r1, r3
 8008836:	6938      	ldr	r0, [r7, #16]
 8008838:	f7ff f9c4 	bl	8007bc4 <move_window>
 800883c:	4603      	mov	r3, r0
 800883e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d12f      	bne.n	80088a6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <dir_find+0x4e>
 8008854:	2304      	movs	r3, #4
 8008856:	75fb      	strb	r3, [r7, #23]
 8008858:	e028      	b.n	80088ac <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	330b      	adds	r3, #11
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008866:	b2da      	uxtb	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	330b      	adds	r3, #11
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f003 0308 	and.w	r3, r3, #8
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <dir_find+0x86>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a18      	ldr	r0, [r3, #32]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3324      	adds	r3, #36	; 0x24
 8008884:	220b      	movs	r2, #11
 8008886:	4619      	mov	r1, r3
 8008888:	f7fe ffaa 	bl	80077e0 <mem_cmp>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008892:	2100      	movs	r1, #0
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff fe00 	bl	800849a <dir_next>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800889e:	7dfb      	ldrb	r3, [r7, #23]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0c5      	beq.n	8008830 <dir_find+0x24>
 80088a4:	e002      	b.n	80088ac <dir_find+0xa0>
		if (res != FR_OK) break;
 80088a6:	bf00      	nop
 80088a8:	e000      	b.n	80088ac <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80088aa:	bf00      	nop

	return res;
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80088c4:	2101      	movs	r1, #1
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff febd 	bl	8008646 <dir_alloc>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d11c      	bne.n	8008910 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	4619      	mov	r1, r3
 80088dc:	68b8      	ldr	r0, [r7, #8]
 80088de:	f7ff f971 	bl	8007bc4 <move_window>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d111      	bne.n	8008910 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	2220      	movs	r2, #32
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe ff58 	bl	80077aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a18      	ldr	r0, [r3, #32]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3324      	adds	r3, #36	; 0x24
 8008902:	220b      	movs	r2, #11
 8008904:	4619      	mov	r1, r3
 8008906:	f7fe ff2f 	bl	8007768 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2201      	movs	r2, #1
 800890e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	4619      	mov	r1, r3
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7ff f948 	bl	8007bc4 <move_window>
 8008934:	4603      	mov	r3, r0
 8008936:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	22e5      	movs	r2, #229	; 0xe5
 8008944:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800894c:	7afb      	ldrb	r3, [r7, #11]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b086      	sub	sp, #24
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2200      	movs	r2, #0
 8008964:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d04e      	beq.n	8008a0c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	613b      	str	r3, [r7, #16]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008976:	e021      	b.n	80089bc <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a1a      	ldr	r2, [r3, #32]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	1c59      	adds	r1, r3, #1
 8008980:	6179      	str	r1, [r7, #20]
 8008982:	4413      	add	r3, r2
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	2b20      	cmp	r3, #32
 800898c:	d100      	bne.n	8008990 <get_fileinfo+0x3a>
 800898e:	e015      	b.n	80089bc <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b05      	cmp	r3, #5
 8008994:	d101      	bne.n	800899a <get_fileinfo+0x44>
 8008996:	23e5      	movs	r3, #229	; 0xe5
 8008998:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b09      	cmp	r3, #9
 800899e:	d106      	bne.n	80089ae <get_fileinfo+0x58>
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	613a      	str	r2, [r7, #16]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	4413      	add	r3, r2
 80089aa:	222e      	movs	r2, #46	; 0x2e
 80089ac:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	613a      	str	r2, [r7, #16]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	4413      	add	r3, r2
 80089b8:	7bfa      	ldrb	r2, [r7, #15]
 80089ba:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b0a      	cmp	r3, #10
 80089c0:	d9da      	bls.n	8008978 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	4413      	add	r3, r2
 80089c8:	3309      	adds	r3, #9
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	7ada      	ldrb	r2, [r3, #11]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	331c      	adds	r3, #28
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fe58 	bl	8007694 <ld_dword>
 80089e4:	4602      	mov	r2, r0
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	3316      	adds	r3, #22
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fe4f 	bl	8007694 <ld_dword>
 80089f6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	80da      	strh	r2, [r3, #6]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	0c1b      	lsrs	r3, r3, #16
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	809a      	strh	r2, [r3, #4]
 8008a0a:	e000      	b.n	8008a0e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008a0c:	bf00      	nop
}
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3324      	adds	r3, #36	; 0x24
 8008a28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008a2a:	220b      	movs	r2, #11
 8008a2c:	2120      	movs	r1, #32
 8008a2e:	68b8      	ldr	r0, [r7, #8]
 8008a30:	f7fe febb 	bl	80077aa <mem_set>
	si = i = 0; ni = 8;
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	61fa      	str	r2, [r7, #28]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008a4e:	7efb      	ldrb	r3, [r7, #27]
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d94e      	bls.n	8008af2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008a54:	7efb      	ldrb	r3, [r7, #27]
 8008a56:	2b2f      	cmp	r3, #47	; 0x2f
 8008a58:	d006      	beq.n	8008a68 <create_name+0x54>
 8008a5a:	7efb      	ldrb	r3, [r7, #27]
 8008a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8008a5e:	d110      	bne.n	8008a82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008a60:	e002      	b.n	8008a68 <create_name+0x54>
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	3301      	adds	r3, #1
 8008a66:	61fb      	str	r3, [r7, #28]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b2f      	cmp	r3, #47	; 0x2f
 8008a72:	d0f6      	beq.n	8008a62 <create_name+0x4e>
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b5c      	cmp	r3, #92	; 0x5c
 8008a7e:	d0f0      	beq.n	8008a62 <create_name+0x4e>
			break;
 8008a80:	e038      	b.n	8008af4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008a82:	7efb      	ldrb	r3, [r7, #27]
 8008a84:	2b2e      	cmp	r3, #46	; 0x2e
 8008a86:	d003      	beq.n	8008a90 <create_name+0x7c>
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d30c      	bcc.n	8008aaa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b0b      	cmp	r3, #11
 8008a94:	d002      	beq.n	8008a9c <create_name+0x88>
 8008a96:	7efb      	ldrb	r3, [r7, #27]
 8008a98:	2b2e      	cmp	r3, #46	; 0x2e
 8008a9a:	d001      	beq.n	8008aa0 <create_name+0x8c>
 8008a9c:	2306      	movs	r3, #6
 8008a9e:	e044      	b.n	8008b2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	613b      	str	r3, [r7, #16]
 8008aa4:	230b      	movs	r3, #11
 8008aa6:	617b      	str	r3, [r7, #20]
			continue;
 8008aa8:	e022      	b.n	8008af0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008aaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	da04      	bge.n	8008abc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008ab2:	7efb      	ldrb	r3, [r7, #27]
 8008ab4:	3b80      	subs	r3, #128	; 0x80
 8008ab6:	4a1f      	ldr	r2, [pc, #124]	; (8008b34 <create_name+0x120>)
 8008ab8:	5cd3      	ldrb	r3, [r2, r3]
 8008aba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008abc:	7efb      	ldrb	r3, [r7, #27]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	481d      	ldr	r0, [pc, #116]	; (8008b38 <create_name+0x124>)
 8008ac2:	f7fe feb4 	bl	800782e <chk_chr>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <create_name+0xbc>
 8008acc:	2306      	movs	r3, #6
 8008ace:	e02c      	b.n	8008b2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008ad0:	7efb      	ldrb	r3, [r7, #27]
 8008ad2:	2b60      	cmp	r3, #96	; 0x60
 8008ad4:	d905      	bls.n	8008ae2 <create_name+0xce>
 8008ad6:	7efb      	ldrb	r3, [r7, #27]
 8008ad8:	2b7a      	cmp	r3, #122	; 0x7a
 8008ada:	d802      	bhi.n	8008ae2 <create_name+0xce>
 8008adc:	7efb      	ldrb	r3, [r7, #27]
 8008ade:	3b20      	subs	r3, #32
 8008ae0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	613a      	str	r2, [r7, #16]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	4413      	add	r3, r2
 8008aec:	7efa      	ldrb	r2, [r7, #27]
 8008aee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008af0:	e7a6      	b.n	8008a40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008af2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	441a      	add	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <create_name+0xf4>
 8008b04:	2306      	movs	r3, #6
 8008b06:	e010      	b.n	8008b2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2be5      	cmp	r3, #229	; 0xe5
 8008b0e:	d102      	bne.n	8008b16 <create_name+0x102>
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2205      	movs	r2, #5
 8008b14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008b16:	7efb      	ldrb	r3, [r7, #27]
 8008b18:	2b20      	cmp	r3, #32
 8008b1a:	d801      	bhi.n	8008b20 <create_name+0x10c>
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	e000      	b.n	8008b22 <create_name+0x10e>
 8008b20:	2200      	movs	r2, #0
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	330b      	adds	r3, #11
 8008b26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008b28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	0800adac 	.word	0x0800adac
 8008b38:	0800ad34 	.word	0x0800ad34

08008b3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008b50:	e002      	b.n	8008b58 <follow_path+0x1c>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b2f      	cmp	r3, #47	; 0x2f
 8008b5e:	d0f8      	beq.n	8008b52 <follow_path+0x16>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b5c      	cmp	r3, #92	; 0x5c
 8008b66:	d0f4      	beq.n	8008b52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b1f      	cmp	r3, #31
 8008b74:	d80a      	bhi.n	8008b8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2280      	movs	r2, #128	; 0x80
 8008b7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008b7e:	2100      	movs	r1, #0
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fc01 	bl	8008388 <dir_sdi>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75fb      	strb	r3, [r7, #23]
 8008b8a:	e048      	b.n	8008c1e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff ff3f 	bl	8008a14 <create_name>
 8008b96:	4603      	mov	r3, r0
 8008b98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d139      	bne.n	8008c14 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff fe33 	bl	800880c <dir_find>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008bb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00a      	beq.n	8008bce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	d12c      	bne.n	8008c18 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008bbe:	7afb      	ldrb	r3, [r7, #11]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d127      	bne.n	8008c18 <follow_path+0xdc>
 8008bc8:	2305      	movs	r3, #5
 8008bca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008bcc:	e024      	b.n	8008c18 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d121      	bne.n	8008c1c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	799b      	ldrb	r3, [r3, #6]
 8008bdc:	f003 0310 	and.w	r3, r3, #16
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008be4:	2305      	movs	r3, #5
 8008be6:	75fb      	strb	r3, [r7, #23]
 8008be8:	e019      	b.n	8008c1e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	8992      	ldrh	r2, [r2, #12]
 8008bf8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bfc:	fb00 f202 	mul.w	r2, r0, r2
 8008c00:	1a9b      	subs	r3, r3, r2
 8008c02:	440b      	add	r3, r1
 8008c04:	4619      	mov	r1, r3
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff fd64 	bl	80086d4 <ld_clust>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c12:	e7bb      	b.n	8008b8c <follow_path+0x50>
			if (res != FR_OK) break;
 8008c14:	bf00      	nop
 8008c16:	e002      	b.n	8008c1e <follow_path+0xe2>
				break;
 8008c18:	bf00      	nop
 8008c1a:	e000      	b.n	8008c1e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c1c:	bf00      	nop
			}
		}
	}

	return res;
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c34:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d031      	beq.n	8008ca2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e002      	b.n	8008c4c <get_ldnumber+0x24>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	d903      	bls.n	8008c5c <get_ldnumber+0x34>
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b3a      	cmp	r3, #58	; 0x3a
 8008c5a:	d1f4      	bne.n	8008c46 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b3a      	cmp	r3, #58	; 0x3a
 8008c62:	d11c      	bne.n	8008c9e <get_ldnumber+0x76>
			tp = *path;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	60fa      	str	r2, [r7, #12]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	3b30      	subs	r3, #48	; 0x30
 8008c74:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d80e      	bhi.n	8008c9a <get_ldnumber+0x72>
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d10a      	bne.n	8008c9a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d107      	bne.n	8008c9a <get_ldnumber+0x72>
					vol = (int)i;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	3301      	adds	r3, #1
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	e002      	b.n	8008ca4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008ca2:	693b      	ldr	r3, [r7, #16]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	70da      	strb	r2, [r3, #3]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cc6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fe ff7a 	bl	8007bc4 <move_window>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <check_fs+0x2a>
 8008cd6:	2304      	movs	r3, #4
 8008cd8:	e038      	b.n	8008d4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3334      	adds	r3, #52	; 0x34
 8008cde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fcbe 	bl	8007664 <ld_word>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	461a      	mov	r2, r3
 8008cec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d001      	beq.n	8008cf8 <check_fs+0x48>
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e029      	b.n	8008d4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cfe:	2be9      	cmp	r3, #233	; 0xe9
 8008d00:	d009      	beq.n	8008d16 <check_fs+0x66>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d08:	2beb      	cmp	r3, #235	; 0xeb
 8008d0a:	d11e      	bne.n	8008d4a <check_fs+0x9a>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008d12:	2b90      	cmp	r3, #144	; 0x90
 8008d14:	d119      	bne.n	8008d4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3334      	adds	r3, #52	; 0x34
 8008d1a:	3336      	adds	r3, #54	; 0x36
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe fcb9 	bl	8007694 <ld_dword>
 8008d22:	4603      	mov	r3, r0
 8008d24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d28:	4a0a      	ldr	r2, [pc, #40]	; (8008d54 <check_fs+0xa4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d101      	bne.n	8008d32 <check_fs+0x82>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e00c      	b.n	8008d4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3334      	adds	r3, #52	; 0x34
 8008d36:	3352      	adds	r3, #82	; 0x52
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe fcab 	bl	8007694 <ld_dword>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4a05      	ldr	r2, [pc, #20]	; (8008d58 <check_fs+0xa8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d101      	bne.n	8008d4a <check_fs+0x9a>
 8008d46:	2300      	movs	r3, #0
 8008d48:	e000      	b.n	8008d4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008d4a:	2302      	movs	r3, #2
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	00544146 	.word	0x00544146
 8008d58:	33544146 	.word	0x33544146

08008d5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b096      	sub	sp, #88	; 0x58
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7ff ff59 	bl	8008c28 <get_ldnumber>
 8008d76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da01      	bge.n	8008d82 <find_volume+0x26>
 8008d7e:	230b      	movs	r3, #11
 8008d80:	e262      	b.n	8009248 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008d82:	4a9f      	ldr	r2, [pc, #636]	; (8009000 <find_volume+0x2a4>)
 8008d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <find_volume+0x3a>
 8008d92:	230c      	movs	r3, #12
 8008d94:	e258      	b.n	8009248 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	f023 0301 	bic.w	r3, r3, #1
 8008da2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01a      	beq.n	8008de2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fe fbb9 	bl	8007528 <disk_status>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10c      	bne.n	8008de2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <find_volume+0x82>
 8008dce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008dda:	230a      	movs	r3, #10
 8008ddc:	e234      	b.n	8009248 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008dde:	2300      	movs	r3, #0
 8008de0:	e232      	b.n	8009248 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	2200      	movs	r2, #0
 8008de6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fe fbb1 	bl	800755c <disk_initialize>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008e00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e21b      	b.n	8009248 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d007      	beq.n	8008e26 <find_volume+0xca>
 8008e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008e22:	230a      	movs	r3, #10
 8008e24:	e210      	b.n	8009248 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	7858      	ldrb	r0, [r3, #1]
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	461a      	mov	r2, r3
 8008e30:	2102      	movs	r1, #2
 8008e32:	f7fe fbf9 	bl	8007628 <disk_ioctl>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <find_volume+0xe4>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e203      	b.n	8009248 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	899b      	ldrh	r3, [r3, #12]
 8008e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e48:	d80d      	bhi.n	8008e66 <find_volume+0x10a>
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	899b      	ldrh	r3, [r3, #12]
 8008e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e52:	d308      	bcc.n	8008e66 <find_volume+0x10a>
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	899b      	ldrh	r3, [r3, #12]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	899b      	ldrh	r3, [r3, #12]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	4013      	ands	r3, r2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <find_volume+0x10e>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e1ee      	b.n	8009248 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e72:	f7ff ff1d 	bl	8008cb0 <check_fs>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d149      	bne.n	8008f18 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e84:	2300      	movs	r3, #0
 8008e86:	643b      	str	r3, [r7, #64]	; 0x40
 8008e88:	e01e      	b.n	8008ec8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008e98:	4413      	add	r3, r2
 8008e9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d006      	beq.n	8008eb4 <find_volume+0x158>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fbf2 	bl	8007694 <ld_dword>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	e000      	b.n	8008eb6 <find_volume+0x15a>
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	3358      	adds	r3, #88	; 0x58
 8008ebc:	443b      	add	r3, r7
 8008ebe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d9dd      	bls.n	8008e8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008ece:	2300      	movs	r3, #0
 8008ed0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <find_volume+0x182>
 8008ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eda:	3b01      	subs	r3, #1
 8008edc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	3358      	adds	r3, #88	; 0x58
 8008ee4:	443b      	add	r3, r7
 8008ee6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008eea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d005      	beq.n	8008efe <find_volume+0x1a2>
 8008ef2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ef6:	f7ff fedb 	bl	8008cb0 <check_fs>
 8008efa:	4603      	mov	r3, r0
 8008efc:	e000      	b.n	8008f00 <find_volume+0x1a4>
 8008efe:	2303      	movs	r3, #3
 8008f00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008f04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d905      	bls.n	8008f18 <find_volume+0x1bc>
 8008f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f0e:	3301      	adds	r3, #1
 8008f10:	643b      	str	r3, [r7, #64]	; 0x40
 8008f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d9e2      	bls.n	8008ede <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d101      	bne.n	8008f24 <find_volume+0x1c8>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e191      	b.n	8009248 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d901      	bls.n	8008f30 <find_volume+0x1d4>
 8008f2c:	230d      	movs	r3, #13
 8008f2e:	e18b      	b.n	8009248 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	3334      	adds	r3, #52	; 0x34
 8008f34:	330b      	adds	r3, #11
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fb94 	bl	8007664 <ld_word>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	899b      	ldrh	r3, [r3, #12]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d001      	beq.n	8008f4c <find_volume+0x1f0>
 8008f48:	230d      	movs	r3, #13
 8008f4a:	e17d      	b.n	8009248 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	3334      	adds	r3, #52	; 0x34
 8008f50:	3316      	adds	r3, #22
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fb86 	bl	8007664 <ld_word>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d106      	bne.n	8008f70 <find_volume+0x214>
 8008f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f64:	3334      	adds	r3, #52	; 0x34
 8008f66:	3324      	adds	r3, #36	; 0x24
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fb93 	bl	8007694 <ld_dword>
 8008f6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f78:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	789b      	ldrb	r3, [r3, #2]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d005      	beq.n	8008f94 <find_volume+0x238>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	789b      	ldrb	r3, [r3, #2]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d001      	beq.n	8008f94 <find_volume+0x238>
 8008f90:	230d      	movs	r3, #13
 8008f92:	e159      	b.n	8009248 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	789b      	ldrb	r3, [r3, #2]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9c:	fb02 f303 	mul.w	r3, r2, r3
 8008fa0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	895b      	ldrh	r3, [r3, #10]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d008      	beq.n	8008fc8 <find_volume+0x26c>
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	895b      	ldrh	r3, [r3, #10]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	895b      	ldrh	r3, [r3, #10]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <find_volume+0x270>
 8008fc8:	230d      	movs	r3, #13
 8008fca:	e13d      	b.n	8009248 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	3334      	adds	r3, #52	; 0x34
 8008fd0:	3311      	adds	r3, #17
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fb46 	bl	8007664 <ld_word>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	461a      	mov	r2, r3
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	891b      	ldrh	r3, [r3, #8]
 8008fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fe6:	8992      	ldrh	r2, [r2, #12]
 8008fe8:	0952      	lsrs	r2, r2, #5
 8008fea:	b292      	uxth	r2, r2
 8008fec:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ff0:	fb01 f202 	mul.w	r2, r1, r2
 8008ff4:	1a9b      	subs	r3, r3, r2
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <find_volume+0x2a8>
 8008ffc:	230d      	movs	r3, #13
 8008ffe:	e123      	b.n	8009248 <find_volume+0x4ec>
 8009000:	20001b44 	.word	0x20001b44

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	3334      	adds	r3, #52	; 0x34
 8009008:	3313      	adds	r3, #19
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fb2a 	bl	8007664 <ld_word>
 8009010:	4603      	mov	r3, r0
 8009012:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <find_volume+0x2cc>
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	3334      	adds	r3, #52	; 0x34
 800901e:	3320      	adds	r3, #32
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fb37 	bl	8007694 <ld_dword>
 8009026:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	3334      	adds	r3, #52	; 0x34
 800902c:	330e      	adds	r3, #14
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fb18 	bl	8007664 <ld_word>
 8009034:	4603      	mov	r3, r0
 8009036:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009038:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <find_volume+0x2e6>
 800903e:	230d      	movs	r3, #13
 8009040:	e102      	b.n	8009248 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009042:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009046:	4413      	add	r3, r2
 8009048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800904a:	8911      	ldrh	r1, [r2, #8]
 800904c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800904e:	8992      	ldrh	r2, [r2, #12]
 8009050:	0952      	lsrs	r2, r2, #5
 8009052:	b292      	uxth	r2, r2
 8009054:	fbb1 f2f2 	udiv	r2, r1, r2
 8009058:	b292      	uxth	r2, r2
 800905a:	4413      	add	r3, r2
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800905e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	429a      	cmp	r2, r3
 8009064:	d201      	bcs.n	800906a <find_volume+0x30e>
 8009066:	230d      	movs	r3, #13
 8009068:	e0ee      	b.n	8009248 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800906a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009072:	8952      	ldrh	r2, [r2, #10]
 8009074:	fbb3 f3f2 	udiv	r3, r3, r2
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	d101      	bne.n	8009084 <find_volume+0x328>
 8009080:	230d      	movs	r3, #13
 8009082:	e0e1      	b.n	8009248 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009084:	2303      	movs	r3, #3
 8009086:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009090:	4293      	cmp	r3, r2
 8009092:	d802      	bhi.n	800909a <find_volume+0x33e>
 8009094:	2302      	movs	r3, #2
 8009096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d802      	bhi.n	80090aa <find_volume+0x34e>
 80090a4:	2301      	movs	r3, #1
 80090a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	1c9a      	adds	r2, r3, #2
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80090b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090b6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80090b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090bc:	441a      	add	r2, r3
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80090c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	441a      	add	r2, r3
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80090cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d11e      	bne.n	8009112 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	3334      	adds	r3, #52	; 0x34
 80090d8:	332a      	adds	r3, #42	; 0x2a
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fac2 	bl	8007664 <ld_word>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <find_volume+0x38e>
 80090e6:	230d      	movs	r3, #13
 80090e8:	e0ae      	b.n	8009248 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	891b      	ldrh	r3, [r3, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <find_volume+0x39a>
 80090f2:	230d      	movs	r3, #13
 80090f4:	e0a8      	b.n	8009248 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80090f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f8:	3334      	adds	r3, #52	; 0x34
 80090fa:	332c      	adds	r3, #44	; 0x2c
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fac9 	bl	8007694 <ld_dword>
 8009102:	4602      	mov	r2, r0
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	647b      	str	r3, [r7, #68]	; 0x44
 8009110:	e01f      	b.n	8009152 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	891b      	ldrh	r3, [r3, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <find_volume+0x3c2>
 800911a:	230d      	movs	r3, #13
 800911c:	e094      	b.n	8009248 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009124:	441a      	add	r2, r3
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800912a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800912e:	2b02      	cmp	r3, #2
 8009130:	d103      	bne.n	800913a <find_volume+0x3de>
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	e00a      	b.n	8009150 <find_volume+0x3f4>
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	4613      	mov	r3, r2
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	4413      	add	r3, r2
 8009144:	085a      	lsrs	r2, r3, #1
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009150:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	69da      	ldr	r2, [r3, #28]
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	899b      	ldrh	r3, [r3, #12]
 800915a:	4619      	mov	r1, r3
 800915c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800915e:	440b      	add	r3, r1
 8009160:	3b01      	subs	r3, #1
 8009162:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009164:	8989      	ldrh	r1, [r1, #12]
 8009166:	fbb3 f3f1 	udiv	r3, r3, r1
 800916a:	429a      	cmp	r2, r3
 800916c:	d201      	bcs.n	8009172 <find_volume+0x416>
 800916e:	230d      	movs	r3, #13
 8009170:	e06a      	b.n	8009248 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009178:	615a      	str	r2, [r3, #20]
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	695a      	ldr	r2, [r3, #20]
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	2280      	movs	r2, #128	; 0x80
 8009186:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800918c:	2b03      	cmp	r3, #3
 800918e:	d149      	bne.n	8009224 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	3334      	adds	r3, #52	; 0x34
 8009194:	3330      	adds	r3, #48	; 0x30
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe fa64 	bl	8007664 <ld_word>
 800919c:	4603      	mov	r3, r0
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d140      	bne.n	8009224 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80091a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a4:	3301      	adds	r3, #1
 80091a6:	4619      	mov	r1, r3
 80091a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091aa:	f7fe fd0b 	bl	8007bc4 <move_window>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d137      	bne.n	8009224 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	2200      	movs	r2, #0
 80091b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	3334      	adds	r3, #52	; 0x34
 80091be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fa4e 	bl	8007664 <ld_word>
 80091c8:	4603      	mov	r3, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d127      	bne.n	8009224 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	3334      	adds	r3, #52	; 0x34
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe fa5b 	bl	8007694 <ld_dword>
 80091de:	4603      	mov	r3, r0
 80091e0:	4a1b      	ldr	r2, [pc, #108]	; (8009250 <find_volume+0x4f4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d11e      	bne.n	8009224 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	3334      	adds	r3, #52	; 0x34
 80091ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fa50 	bl	8007694 <ld_dword>
 80091f4:	4603      	mov	r3, r0
 80091f6:	4a17      	ldr	r2, [pc, #92]	; (8009254 <find_volume+0x4f8>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d113      	bne.n	8009224 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	3334      	adds	r3, #52	; 0x34
 8009200:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe fa45 	bl	8007694 <ld_dword>
 800920a:	4602      	mov	r2, r0
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	3334      	adds	r3, #52	; 0x34
 8009214:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009218:	4618      	mov	r0, r3
 800921a:	f7fe fa3b 	bl	8007694 <ld_dword>
 800921e:	4602      	mov	r2, r0
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009226:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800922a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800922c:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <find_volume+0x4fc>)
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	b29a      	uxth	r2, r3
 8009234:	4b08      	ldr	r3, [pc, #32]	; (8009258 <find_volume+0x4fc>)
 8009236:	801a      	strh	r2, [r3, #0]
 8009238:	4b07      	ldr	r3, [pc, #28]	; (8009258 <find_volume+0x4fc>)
 800923a:	881a      	ldrh	r2, [r3, #0]
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009240:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009242:	f7fe fc57 	bl	8007af4 <clear_lock>
#endif
	return FR_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3758      	adds	r7, #88	; 0x58
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	41615252 	.word	0x41615252
 8009254:	61417272 	.word	0x61417272
 8009258:	20001b48 	.word	0x20001b48

0800925c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009266:	2309      	movs	r3, #9
 8009268:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01c      	beq.n	80092aa <validate+0x4e>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d018      	beq.n	80092aa <validate+0x4e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d013      	beq.n	80092aa <validate+0x4e>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	889a      	ldrh	r2, [r3, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	88db      	ldrh	r3, [r3, #6]
 800928c:	429a      	cmp	r2, r3
 800928e:	d10c      	bne.n	80092aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	785b      	ldrb	r3, [r3, #1]
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe f946 	bl	8007528 <disk_status>
 800929c:	4603      	mov	r3, r0
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <validate+0x4e>
			res = FR_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <validate+0x5a>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	e000      	b.n	80092b8 <validate+0x5c>
 80092b6:	2300      	movs	r3, #0
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	6013      	str	r3, [r2, #0]
	return res;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80092da:	f107 0310 	add.w	r3, r7, #16
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff fca2 	bl	8008c28 <get_ldnumber>
 80092e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da01      	bge.n	80092f0 <f_mount+0x28>
 80092ec:	230b      	movs	r3, #11
 80092ee:	e02b      	b.n	8009348 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80092f0:	4a17      	ldr	r2, [pc, #92]	; (8009350 <f_mount+0x88>)
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009300:	69b8      	ldr	r0, [r7, #24]
 8009302:	f7fe fbf7 	bl	8007af4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	2200      	movs	r2, #0
 800930a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	490d      	ldr	r1, [pc, #52]	; (8009350 <f_mount+0x88>)
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <f_mount+0x66>
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d001      	beq.n	8009332 <f_mount+0x6a>
 800932e:	2300      	movs	r3, #0
 8009330:	e00a      	b.n	8009348 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009332:	f107 010c 	add.w	r1, r7, #12
 8009336:	f107 0308 	add.w	r3, r7, #8
 800933a:	2200      	movs	r2, #0
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff fd0d 	bl	8008d5c <find_volume>
 8009342:	4603      	mov	r3, r0
 8009344:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009346:	7dfb      	ldrb	r3, [r7, #23]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3720      	adds	r7, #32
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20001b44 	.word	0x20001b44

08009354 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b098      	sub	sp, #96	; 0x60
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <f_open+0x18>
 8009368:	2309      	movs	r3, #9
 800936a:	e1bb      	b.n	80096e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009372:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009374:	79fa      	ldrb	r2, [r7, #7]
 8009376:	f107 0110 	add.w	r1, r7, #16
 800937a:	f107 0308 	add.w	r3, r7, #8
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff fcec 	bl	8008d5c <find_volume>
 8009384:	4603      	mov	r3, r0
 8009386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800938a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 819f 	bne.w	80096d2 <f_open+0x37e>
		dj.obj.fs = fs;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	f107 0314 	add.w	r3, r7, #20
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7ff fbcb 	bl	8008b3c <follow_path>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80093ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d11a      	bne.n	80093ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80093b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093b8:	b25b      	sxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da03      	bge.n	80093c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80093be:	2306      	movs	r3, #6
 80093c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80093c4:	e011      	b.n	80093ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	f023 0301 	bic.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bf14      	ite	ne
 80093d0:	2301      	movne	r3, #1
 80093d2:	2300      	moveq	r3, #0
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	f107 0314 	add.w	r3, r7, #20
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fa40 	bl	8007864 <chk_lock>
 80093e4:	4603      	mov	r3, r0
 80093e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	f003 031c 	and.w	r3, r3, #28
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d07f      	beq.n	80094f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80093f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d017      	beq.n	800942c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80093fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009400:	2b04      	cmp	r3, #4
 8009402:	d10e      	bne.n	8009422 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009404:	f7fe fa8a 	bl	800791c <enq_lock>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d006      	beq.n	800941c <f_open+0xc8>
 800940e:	f107 0314 	add.w	r3, r7, #20
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff fa4f 	bl	80088b6 <dir_register>
 8009418:	4603      	mov	r3, r0
 800941a:	e000      	b.n	800941e <f_open+0xca>
 800941c:	2312      	movs	r3, #18
 800941e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	f043 0308 	orr.w	r3, r3, #8
 8009428:	71fb      	strb	r3, [r7, #7]
 800942a:	e010      	b.n	800944e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800942c:	7ebb      	ldrb	r3, [r7, #26]
 800942e:	f003 0311 	and.w	r3, r3, #17
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <f_open+0xea>
					res = FR_DENIED;
 8009436:	2307      	movs	r3, #7
 8009438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800943c:	e007      	b.n	800944e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <f_open+0xfa>
 8009448:	2308      	movs	r3, #8
 800944a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800944e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009452:	2b00      	cmp	r3, #0
 8009454:	d168      	bne.n	8009528 <f_open+0x1d4>
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	f003 0308 	and.w	r3, r3, #8
 800945c:	2b00      	cmp	r3, #0
 800945e:	d063      	beq.n	8009528 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009460:	f7fd fe9a 	bl	8007198 <get_fattime>
 8009464:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009468:	330e      	adds	r3, #14
 800946a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe f94f 	bl	8007710 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009474:	3316      	adds	r3, #22
 8009476:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe f949 	bl	8007710 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800947e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009480:	330b      	adds	r3, #11
 8009482:	2220      	movs	r2, #32
 8009484:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800948a:	4611      	mov	r1, r2
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff f921 	bl	80086d4 <ld_clust>
 8009492:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009498:	2200      	movs	r2, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff f939 	bl	8008712 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80094a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a2:	331c      	adds	r3, #28
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe f932 	bl	8007710 <st_dword>
					fs->wflag = 1;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	2201      	movs	r2, #1
 80094b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80094b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d037      	beq.n	8009528 <f_open+0x1d4>
						dw = fs->winsect;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094bc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	2200      	movs	r2, #0
 80094c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fe29 	bl	800811e <remove_chain>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80094d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d126      	bne.n	8009528 <f_open+0x1d4>
							res = move_window(fs, dw);
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fb70 	bl	8007bc4 <move_window>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094ee:	3a01      	subs	r2, #1
 80094f0:	611a      	str	r2, [r3, #16]
 80094f2:	e019      	b.n	8009528 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80094f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d115      	bne.n	8009528 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80094fc:	7ebb      	ldrb	r3, [r7, #26]
 80094fe:	f003 0310 	and.w	r3, r3, #16
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009506:	2304      	movs	r3, #4
 8009508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800950c:	e00c      	b.n	8009528 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d007      	beq.n	8009528 <f_open+0x1d4>
 8009518:	7ebb      	ldrb	r3, [r7, #26]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <f_open+0x1d4>
						res = FR_DENIED;
 8009522:	2307      	movs	r3, #7
 8009524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800952c:	2b00      	cmp	r3, #0
 800952e:	d128      	bne.n	8009582 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	f003 0308 	and.w	r3, r3, #8
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009540:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800954a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009550:	79fb      	ldrb	r3, [r7, #7]
 8009552:	f023 0301 	bic.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	bf14      	ite	ne
 800955a:	2301      	movne	r3, #1
 800955c:	2300      	moveq	r3, #0
 800955e:	b2db      	uxtb	r3, r3
 8009560:	461a      	mov	r2, r3
 8009562:	f107 0314 	add.w	r3, r7, #20
 8009566:	4611      	mov	r1, r2
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe f9f9 	bl	8007960 <inc_lock>
 800956e:	4602      	mov	r2, r0
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <f_open+0x22e>
 800957c:	2302      	movs	r3, #2
 800957e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009586:	2b00      	cmp	r3, #0
 8009588:	f040 80a3 	bne.w	80096d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7ff f89e 	bl	80086d4 <ld_clust>
 8009598:	4602      	mov	r2, r0
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800959e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a0:	331c      	adds	r3, #28
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe f876 	bl	8007694 <ld_dword>
 80095a8:	4602      	mov	r2, r0
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	88da      	ldrh	r2, [r3, #6]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	79fa      	ldrb	r2, [r7, #7]
 80095c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3330      	adds	r3, #48	; 0x30
 80095de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe f8e0 	bl	80077aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d06e      	beq.n	80096d2 <f_open+0x37e>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d06a      	beq.n	80096d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	895b      	ldrh	r3, [r3, #10]
 8009608:	461a      	mov	r2, r3
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	899b      	ldrh	r3, [r3, #12]
 800960e:	fb02 f303 	mul.w	r3, r2, r3
 8009612:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	657b      	str	r3, [r7, #84]	; 0x54
 8009620:	e016      	b.n	8009650 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fb89 	bl	8007d3e <get_fat>
 800962c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800962e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009630:	2b01      	cmp	r3, #1
 8009632:	d802      	bhi.n	800963a <f_open+0x2e6>
 8009634:	2302      	movs	r3, #2
 8009636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800963a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800963c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009640:	d102      	bne.n	8009648 <f_open+0x2f4>
 8009642:	2301      	movs	r3, #1
 8009644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800964a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	657b      	str	r3, [r7, #84]	; 0x54
 8009650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009654:	2b00      	cmp	r3, #0
 8009656:	d103      	bne.n	8009660 <f_open+0x30c>
 8009658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800965a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800965c:	429a      	cmp	r2, r3
 800965e:	d8e0      	bhi.n	8009622 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009664:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800966a:	2b00      	cmp	r3, #0
 800966c:	d131      	bne.n	80096d2 <f_open+0x37e>
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	899b      	ldrh	r3, [r3, #12]
 8009672:	461a      	mov	r2, r3
 8009674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009676:	fbb3 f1f2 	udiv	r1, r3, r2
 800967a:	fb01 f202 	mul.w	r2, r1, r2
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d026      	beq.n	80096d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe fb39 	bl	8007d00 <clust2sect>
 800968e:	6478      	str	r0, [r7, #68]	; 0x44
 8009690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009692:	2b00      	cmp	r3, #0
 8009694:	d103      	bne.n	800969e <f_open+0x34a>
						res = FR_INT_ERR;
 8009696:	2302      	movs	r3, #2
 8009698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800969c:	e019      	b.n	80096d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	899b      	ldrh	r3, [r3, #12]
 80096a2:	461a      	mov	r2, r3
 80096a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80096aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ac:	441a      	add	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	7858      	ldrb	r0, [r3, #1]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a1a      	ldr	r2, [r3, #32]
 80096c0:	2301      	movs	r3, #1
 80096c2:	f7fd ff71 	bl	80075a8 <disk_read>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <f_open+0x37e>
 80096cc:	2301      	movs	r3, #1
 80096ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80096d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <f_open+0x38c>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80096e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3760      	adds	r7, #96	; 0x60
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08c      	sub	sp, #48	; 0x30
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f107 0210 	add.w	r2, r7, #16
 800970a:	4611      	mov	r1, r2
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff fda5 	bl	800925c <validate>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800971c:	2b00      	cmp	r3, #0
 800971e:	d107      	bne.n	8009730 <f_write+0x44>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	7d5b      	ldrb	r3, [r3, #21]
 8009724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <f_write+0x4a>
 8009730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009734:	e16a      	b.n	8009a0c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	7d1b      	ldrb	r3, [r3, #20]
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <f_write+0x5a>
 8009742:	2307      	movs	r3, #7
 8009744:	e162      	b.n	8009a0c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	699a      	ldr	r2, [r3, #24]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	441a      	add	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	429a      	cmp	r2, r3
 8009754:	f080 814c 	bcs.w	80099f0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	43db      	mvns	r3, r3
 800975e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009760:	e146      	b.n	80099f0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	8992      	ldrh	r2, [r2, #12]
 800976a:	fbb3 f1f2 	udiv	r1, r3, r2
 800976e:	fb01 f202 	mul.w	r2, r1, r2
 8009772:	1a9b      	subs	r3, r3, r2
 8009774:	2b00      	cmp	r3, #0
 8009776:	f040 80f1 	bne.w	800995c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	8992      	ldrh	r2, [r2, #12]
 8009782:	fbb3 f3f2 	udiv	r3, r3, r2
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	8952      	ldrh	r2, [r2, #10]
 800978a:	3a01      	subs	r2, #1
 800978c:	4013      	ands	r3, r2
 800978e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d143      	bne.n	800981e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10c      	bne.n	80097b8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d11a      	bne.n	80097e0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2100      	movs	r1, #0
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fd1a 	bl	80081e8 <create_chain>
 80097b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80097b6:	e013      	b.n	80097e0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	4619      	mov	r1, r3
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7fe fda6 	bl	8008318 <clmt_clust>
 80097cc:	62b8      	str	r0, [r7, #40]	; 0x28
 80097ce:	e007      	b.n	80097e0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f7fe fd05 	bl	80081e8 <create_chain>
 80097de:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8109 	beq.w	80099fa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d104      	bne.n	80097f8 <f_write+0x10c>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2202      	movs	r2, #2
 80097f2:	755a      	strb	r2, [r3, #21]
 80097f4:	2302      	movs	r3, #2
 80097f6:	e109      	b.n	8009a0c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097fe:	d104      	bne.n	800980a <f_write+0x11e>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2201      	movs	r2, #1
 8009804:	755a      	strb	r2, [r3, #21]
 8009806:	2301      	movs	r3, #1
 8009808:	e100      	b.n	8009a0c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800980e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d102      	bne.n	800981e <f_write+0x132>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800981c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	7d1b      	ldrb	r3, [r3, #20]
 8009822:	b25b      	sxtb	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	da18      	bge.n	800985a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	7858      	ldrb	r0, [r3, #1]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a1a      	ldr	r2, [r3, #32]
 8009836:	2301      	movs	r3, #1
 8009838:	f7fd fed6 	bl	80075e8 <disk_write>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d004      	beq.n	800984c <f_write+0x160>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2201      	movs	r2, #1
 8009846:	755a      	strb	r2, [r3, #21]
 8009848:	2301      	movs	r3, #1
 800984a:	e0df      	b.n	8009a0c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	7d1b      	ldrb	r3, [r3, #20]
 8009850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009854:	b2da      	uxtb	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	4619      	mov	r1, r3
 8009862:	4610      	mov	r0, r2
 8009864:	f7fe fa4c 	bl	8007d00 <clust2sect>
 8009868:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <f_write+0x18e>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2202      	movs	r2, #2
 8009874:	755a      	strb	r2, [r3, #21]
 8009876:	2302      	movs	r3, #2
 8009878:	e0c8      	b.n	8009a0c <f_write+0x320>
			sect += csect;
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	4413      	add	r3, r2
 8009880:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	899b      	ldrh	r3, [r3, #12]
 8009886:	461a      	mov	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	fbb3 f3f2 	udiv	r3, r3, r2
 800988e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d043      	beq.n	800991e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	4413      	add	r3, r2
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	8952      	ldrh	r2, [r2, #10]
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d905      	bls.n	80098b0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	895b      	ldrh	r3, [r3, #10]
 80098a8:	461a      	mov	r2, r3
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	7858      	ldrb	r0, [r3, #1]
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	69f9      	ldr	r1, [r7, #28]
 80098ba:	f7fd fe95 	bl	80075e8 <disk_write>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d004      	beq.n	80098ce <f_write+0x1e2>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	755a      	strb	r2, [r3, #21]
 80098ca:	2301      	movs	r3, #1
 80098cc:	e09e      	b.n	8009a0c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6a1a      	ldr	r2, [r3, #32]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	6a3a      	ldr	r2, [r7, #32]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d918      	bls.n	800990e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6a1a      	ldr	r2, [r3, #32]
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	8992      	ldrh	r2, [r2, #12]
 80098ee:	fb02 f303 	mul.w	r3, r2, r3
 80098f2:	69fa      	ldr	r2, [r7, #28]
 80098f4:	18d1      	adds	r1, r2, r3
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	899b      	ldrh	r3, [r3, #12]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f7fd ff34 	bl	8007768 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	7d1b      	ldrb	r3, [r3, #20]
 8009904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009908:	b2da      	uxtb	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	899b      	ldrh	r3, [r3, #12]
 8009912:	461a      	mov	r2, r3
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	fb02 f303 	mul.w	r3, r2, r3
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800991c:	e04b      	b.n	80099b6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	429a      	cmp	r2, r3
 8009926:	d016      	beq.n	8009956 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	699a      	ldr	r2, [r3, #24]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009930:	429a      	cmp	r2, r3
 8009932:	d210      	bcs.n	8009956 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	7858      	ldrb	r0, [r3, #1]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800993e:	2301      	movs	r3, #1
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	f7fd fe31 	bl	80075a8 <disk_read>
 8009946:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	755a      	strb	r2, [r3, #21]
 8009952:	2301      	movs	r3, #1
 8009954:	e05a      	b.n	8009a0c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	899b      	ldrh	r3, [r3, #12]
 8009960:	4618      	mov	r0, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	8992      	ldrh	r2, [r2, #12]
 800996a:	fbb3 f1f2 	udiv	r1, r3, r2
 800996e:	fb01 f202 	mul.w	r2, r1, r2
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	1ac3      	subs	r3, r0, r3
 8009976:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d901      	bls.n	8009984 <f_write+0x298>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	8992      	ldrh	r2, [r2, #12]
 8009992:	fbb3 f0f2 	udiv	r0, r3, r2
 8009996:	fb00 f202 	mul.w	r2, r0, r2
 800999a:	1a9b      	subs	r3, r3, r2
 800999c:	440b      	add	r3, r1
 800999e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a0:	69f9      	ldr	r1, [r7, #28]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fd fee0 	bl	8007768 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	7d1b      	ldrb	r3, [r3, #20]
 80099ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	4413      	add	r3, r2
 80099bc:	61fb      	str	r3, [r7, #28]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	699a      	ldr	r2, [r3, #24]
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	441a      	add	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	619a      	str	r2, [r3, #24]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	bf38      	it	cc
 80099d6:	461a      	movcc	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	60da      	str	r2, [r3, #12]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	441a      	add	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f47f aeb5 	bne.w	8009762 <f_write+0x76>
 80099f8:	e000      	b.n	80099fc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80099fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	7d1b      	ldrb	r3, [r3, #20]
 8009a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3730      	adds	r7, #48	; 0x30
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f107 0208 	add.w	r2, r7, #8
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff fc19 	bl	800925c <validate>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d168      	bne.n	8009b06 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	7d1b      	ldrb	r3, [r3, #20]
 8009a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d062      	beq.n	8009b06 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	7d1b      	ldrb	r3, [r3, #20]
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	da15      	bge.n	8009a76 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	7858      	ldrb	r0, [r3, #1]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1a      	ldr	r2, [r3, #32]
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f7fd fdc5 	bl	80075e8 <disk_write>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <f_sync+0x54>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e04f      	b.n	8009b08 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7d1b      	ldrb	r3, [r3, #20]
 8009a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a76:	f7fd fb8f 	bl	8007198 <get_fattime>
 8009a7a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f7fe f89d 	bl	8007bc4 <move_window>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d138      	bne.n	8009b06 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a98:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	330b      	adds	r3, #11
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	330b      	adds	r3, #11
 8009aa4:	f042 0220 	orr.w	r2, r2, #32
 8009aa8:	b2d2      	uxtb	r2, r2
 8009aaa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	68f9      	ldr	r1, [r7, #12]
 8009ab8:	f7fe fe2b 	bl	8008712 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f103 021c 	add.w	r2, r3, #28
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f7fd fe21 	bl	8007710 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3316      	adds	r3, #22
 8009ad2:	6939      	ldr	r1, [r7, #16]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fd fe1b 	bl	8007710 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3312      	adds	r3, #18
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fd fdfa 	bl	80076da <st_word>
					fs->wflag = 1;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe f896 	bl	8007c20 <sync_fs>
 8009af4:	4603      	mov	r3, r0
 8009af6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	7d1b      	ldrb	r3, [r3, #20]
 8009afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff ff7b 	bl	8009a14 <f_sync>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d118      	bne.n	8009b5a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f107 0208 	add.w	r2, r7, #8
 8009b2e:	4611      	mov	r1, r2
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff fb93 	bl	800925c <validate>
 8009b36:	4603      	mov	r3, r0
 8009b38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10c      	bne.n	8009b5a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fd ff99 	bl	8007a7c <dec_lock>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b090      	sub	sp, #64	; 0x40
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f107 0208 	add.w	r2, r7, #8
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff fb70 	bl	800925c <validate>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009b82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d103      	bne.n	8009b92 <f_lseek+0x2e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	7d5b      	ldrb	r3, [r3, #21]
 8009b8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009b92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <f_lseek+0x3c>
 8009b9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b9e:	e201      	b.n	8009fa4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 80d9 	beq.w	8009d5c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb0:	d15a      	bne.n	8009c68 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	1d1a      	adds	r2, r3, #4
 8009bbc:	627a      	str	r2, [r7, #36]	; 0x24
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	617b      	str	r3, [r7, #20]
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d03a      	beq.n	8009c48 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	613b      	str	r3, [r7, #16]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bdc:	3302      	adds	r3, #2
 8009bde:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	3301      	adds	r3, #1
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe f8a5 	bl	8007d3e <get_fat>
 8009bf4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d804      	bhi.n	8009c06 <f_lseek+0xa2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	755a      	strb	r2, [r3, #21]
 8009c02:	2302      	movs	r3, #2
 8009c04:	e1ce      	b.n	8009fa4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c0c:	d104      	bne.n	8009c18 <f_lseek+0xb4>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	755a      	strb	r2, [r3, #21]
 8009c14:	2301      	movs	r3, #1
 8009c16:	e1c5      	b.n	8009fa4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d0de      	beq.n	8009be0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d809      	bhi.n	8009c3e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	1d1a      	adds	r2, r3, #4
 8009c2e:	627a      	str	r2, [r7, #36]	; 0x24
 8009c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	627a      	str	r2, [r7, #36]	; 0x24
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d3c4      	bcc.n	8009bd2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c4e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d803      	bhi.n	8009c60 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	e19f      	b.n	8009fa0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009c60:	2311      	movs	r3, #17
 8009c62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009c66:	e19b      	b.n	8009fa0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d902      	bls.n	8009c78 <f_lseek+0x114>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 818d 	beq.w	8009fa0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7fe fb43 	bl	8008318 <clmt_clust>
 8009c92:	4602      	mov	r2, r0
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f7fe f82d 	bl	8007d00 <clust2sect>
 8009ca6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d104      	bne.n	8009cb8 <f_lseek+0x154>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	755a      	strb	r2, [r3, #21]
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e175      	b.n	8009fa4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	8992      	ldrh	r2, [r2, #12]
 8009cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	8952      	ldrh	r2, [r2, #10]
 8009cc8:	3a01      	subs	r2, #1
 8009cca:	4013      	ands	r3, r2
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	4413      	add	r3, r2
 8009cd0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	8992      	ldrh	r2, [r2, #12]
 8009cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cde:	fb01 f202 	mul.w	r2, r1, r2
 8009ce2:	1a9b      	subs	r3, r3, r2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 815b 	beq.w	8009fa0 <f_lseek+0x43c>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	f000 8155 	beq.w	8009fa0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	7d1b      	ldrb	r3, [r3, #20]
 8009cfa:	b25b      	sxtb	r3, r3
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	da18      	bge.n	8009d32 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	7858      	ldrb	r0, [r3, #1]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1a      	ldr	r2, [r3, #32]
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f7fd fc6a 	bl	80075e8 <disk_write>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <f_lseek+0x1c0>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	755a      	strb	r2, [r3, #21]
 8009d20:	2301      	movs	r3, #1
 8009d22:	e13f      	b.n	8009fa4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	7d1b      	ldrb	r3, [r3, #20]
 8009d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	7858      	ldrb	r0, [r3, #1]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	f7fd fc32 	bl	80075a8 <disk_read>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d004      	beq.n	8009d54 <f_lseek+0x1f0>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	755a      	strb	r2, [r3, #21]
 8009d50:	2301      	movs	r3, #1
 8009d52:	e127      	b.n	8009fa4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	621a      	str	r2, [r3, #32]
 8009d5a:	e121      	b.n	8009fa0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d908      	bls.n	8009d78 <f_lseek+0x214>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	7d1b      	ldrb	r3, [r3, #20]
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	637b      	str	r3, [r7, #52]	; 0x34
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d86:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 80b5 	beq.w	8009efa <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	895b      	ldrh	r3, [r3, #10]
 8009d94:	461a      	mov	r2, r3
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	899b      	ldrh	r3, [r3, #12]
 8009d9a:	fb02 f303 	mul.w	r3, r2, r3
 8009d9e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01b      	beq.n	8009dde <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	1e5a      	subs	r2, r3, #1
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	1e59      	subs	r1, r3, #1
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d30f      	bcc.n	8009dde <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	1e5a      	subs	r2, r3, #1
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	425b      	negs	r3, r3
 8009dc6:	401a      	ands	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ddc:	e022      	b.n	8009e24 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d119      	bne.n	8009e1e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2100      	movs	r1, #0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe f9fa 	bl	80081e8 <create_chain>
 8009df4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d104      	bne.n	8009e06 <f_lseek+0x2a2>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	755a      	strb	r2, [r3, #21]
 8009e02:	2302      	movs	r3, #2
 8009e04:	e0ce      	b.n	8009fa4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e0c:	d104      	bne.n	8009e18 <f_lseek+0x2b4>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	755a      	strb	r2, [r3, #21]
 8009e14:	2301      	movs	r3, #1
 8009e16:	e0c5      	b.n	8009fa4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e1c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e22:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d067      	beq.n	8009efa <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009e2a:	e03a      	b.n	8009ea2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	699a      	ldr	r2, [r3, #24]
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	441a      	add	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	7d1b      	ldrb	r3, [r3, #20]
 8009e44:	f003 0302 	and.w	r3, r3, #2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00b      	beq.n	8009e64 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe f9c9 	bl	80081e8 <create_chain>
 8009e56:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d108      	bne.n	8009e70 <f_lseek+0x30c>
							ofs = 0; break;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	603b      	str	r3, [r7, #0]
 8009e62:	e022      	b.n	8009eaa <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fd ff68 	bl	8007d3e <get_fat>
 8009e6e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e76:	d104      	bne.n	8009e82 <f_lseek+0x31e>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	755a      	strb	r2, [r3, #21]
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e090      	b.n	8009fa4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d904      	bls.n	8009e92 <f_lseek+0x32e>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d304      	bcc.n	8009e9c <f_lseek+0x338>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2202      	movs	r2, #2
 8009e96:	755a      	strb	r2, [r3, #21]
 8009e98:	2302      	movs	r3, #2
 8009e9a:	e083      	b.n	8009fa4 <f_lseek+0x440>
					fp->clust = clst;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ea0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d8c0      	bhi.n	8009e2c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	441a      	add	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	899b      	ldrh	r3, [r3, #12]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ec2:	fb01 f202 	mul.w	r2, r1, r2
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d016      	beq.n	8009efa <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fd ff15 	bl	8007d00 <clust2sect>
 8009ed6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d104      	bne.n	8009ee8 <f_lseek+0x384>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	755a      	strb	r2, [r3, #21]
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e05d      	b.n	8009fa4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	899b      	ldrh	r3, [r3, #12]
 8009eec:	461a      	mov	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ef6:	4413      	add	r3, r2
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	699a      	ldr	r2, [r3, #24]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d90a      	bls.n	8009f1c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699a      	ldr	r2, [r3, #24]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	7d1b      	ldrb	r3, [r3, #20]
 8009f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	8992      	ldrh	r2, [r2, #12]
 8009f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f28:	fb01 f202 	mul.w	r2, r1, r2
 8009f2c:	1a9b      	subs	r3, r3, r2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d036      	beq.n	8009fa0 <f_lseek+0x43c>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d031      	beq.n	8009fa0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7d1b      	ldrb	r3, [r3, #20]
 8009f40:	b25b      	sxtb	r3, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	da18      	bge.n	8009f78 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	7858      	ldrb	r0, [r3, #1]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1a      	ldr	r2, [r3, #32]
 8009f54:	2301      	movs	r3, #1
 8009f56:	f7fd fb47 	bl	80075e8 <disk_write>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d004      	beq.n	8009f6a <f_lseek+0x406>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	755a      	strb	r2, [r3, #21]
 8009f66:	2301      	movs	r3, #1
 8009f68:	e01c      	b.n	8009fa4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	7d1b      	ldrb	r3, [r3, #20]
 8009f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	7858      	ldrb	r0, [r3, #1]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f82:	2301      	movs	r3, #1
 8009f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f86:	f7fd fb0f 	bl	80075a8 <disk_read>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d004      	beq.n	8009f9a <f_lseek+0x436>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	755a      	strb	r2, [r3, #21]
 8009f96:	2301      	movs	r3, #1
 8009f98:	e004      	b.n	8009fa4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f9e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009fa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3740      	adds	r7, #64	; 0x40
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <f_opendir+0x14>
 8009fbc:	2309      	movs	r3, #9
 8009fbe:	e064      	b.n	800a08a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8009fc4:	f107 010c 	add.w	r1, r7, #12
 8009fc8:	463b      	mov	r3, r7
 8009fca:	2200      	movs	r2, #0
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fe fec5 	bl	8008d5c <find_volume>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d14f      	bne.n	800a07c <f_opendir+0xd0>
		obj->fs = fs;
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7fe fda8 	bl	8008b3c <follow_path>
 8009fec:	4603      	mov	r3, r0
 8009fee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d13d      	bne.n	800a072 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ffc:	b25b      	sxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	db12      	blt.n	800a028 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	799b      	ldrb	r3, [r3, #6]
 800a006:	f003 0310 	and.w	r3, r3, #16
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f7fe fb5c 	bl	80086d4 <ld_clust>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	609a      	str	r2, [r3, #8]
 800a022:	e001      	b.n	800a028 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a024:	2305      	movs	r3, #5
 800a026:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d121      	bne.n	800a072 <f_opendir+0xc6>
				obj->id = fs->id;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	88da      	ldrh	r2, [r3, #6]
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a036:	2100      	movs	r1, #0
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7fe f9a5 	bl	8008388 <dir_sdi>
 800a03e:	4603      	mov	r3, r0
 800a040:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d114      	bne.n	800a072 <f_opendir+0xc6>
					if (obj->sclust) {
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00d      	beq.n	800a06c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a050:	2100      	movs	r1, #0
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7fd fc84 	bl	8007960 <inc_lock>
 800a058:	4602      	mov	r2, r0
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d105      	bne.n	800a072 <f_opendir+0xc6>
 800a066:	2312      	movs	r3, #18
 800a068:	75fb      	strb	r3, [r7, #23]
 800a06a:	e002      	b.n	800a072 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2200      	movs	r2, #0
 800a070:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	2b04      	cmp	r3, #4
 800a076:	d101      	bne.n	800a07c <f_opendir+0xd0>
 800a078:	2305      	movs	r3, #5
 800a07a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <f_opendir+0xdc>
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a088:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f107 0208 	add.w	r2, r7, #8
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff f8da 	bl	800925c <validate>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d110      	bne.n	800a0d4 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d006      	beq.n	800a0c8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fd fcdc 	bl	8007a7c <dec_lock>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d102      	bne.n	800a0d4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f107 0208 	add.w	r2, r7, #8
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff f8b3 	bl	800925c <validate>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d126      	bne.n	800a14e <f_readdir+0x70>
		if (!fno) {
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d106      	bne.n	800a114 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a106:	2100      	movs	r1, #0
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7fe f93d 	bl	8008388 <dir_sdi>
 800a10e:	4603      	mov	r3, r0
 800a110:	73fb      	strb	r3, [r7, #15]
 800a112:	e01c      	b.n	800a14e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a114:	2100      	movs	r1, #0
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7fe fb1b 	bl	8008752 <dir_read>
 800a11c:	4603      	mov	r3, r0
 800a11e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	2b04      	cmp	r3, #4
 800a124:	d101      	bne.n	800a12a <f_readdir+0x4c>
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10e      	bne.n	800a14e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7fe fc0f 	bl	8008956 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a138:	2100      	movs	r1, #0
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fe f9ad 	bl	800849a <dir_next>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	2b04      	cmp	r3, #4
 800a148:	d101      	bne.n	800a14e <f_readdir+0x70>
 800a14a:	2300      	movs	r3, #0
 800a14c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b09e      	sub	sp, #120	; 0x78
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a164:	f107 010c 	add.w	r1, r7, #12
 800a168:	1d3b      	adds	r3, r7, #4
 800a16a:	2202      	movs	r2, #2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe fdf5 	bl	8008d5c <find_volume>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800a17c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a180:	2b00      	cmp	r3, #0
 800a182:	f040 808e 	bne.w	800a2a2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fcd4 	bl	8008b3c <follow_path>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a19a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d108      	bne.n	800a1b4 <f_unlink+0x5c>
 800a1a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a1a6:	2102      	movs	r1, #2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fd fb5b 	bl	8007864 <chk_lock>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a1b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d172      	bne.n	800a2a2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a1bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a1c0:	b25b      	sxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	da03      	bge.n	800a1ce <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a1c6:	2306      	movs	r3, #6
 800a1c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800a1cc:	e008      	b.n	800a1e0 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a1ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a1da:	2307      	movs	r3, #7
 800a1dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800a1e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d134      	bne.n	800a252 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fa70 	bl	80086d4 <ld_clust>
 800a1f4:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a1f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a1fa:	f003 0310 	and.w	r3, r3, #16
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d027      	beq.n	800a252 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a208:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a20a:	f107 0310 	add.w	r3, r7, #16
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe f8b9 	bl	8008388 <dir_sdi>
 800a216:	4603      	mov	r3, r0
 800a218:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800a21c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a220:	2b00      	cmp	r3, #0
 800a222:	d116      	bne.n	800a252 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a224:	f107 0310 	add.w	r3, r7, #16
 800a228:	2100      	movs	r1, #0
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fa91 	bl	8008752 <dir_read>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a236:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d102      	bne.n	800a244 <f_unlink+0xec>
 800a23e:	2307      	movs	r3, #7
 800a240:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a244:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a248:	2b04      	cmp	r3, #4
 800a24a:	d102      	bne.n	800a252 <f_unlink+0xfa>
 800a24c:	2300      	movs	r3, #0
 800a24e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800a252:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a256:	2b00      	cmp	r3, #0
 800a258:	d123      	bne.n	800a2a2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a25a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fe fb5b 	bl	800891a <dir_remove>
 800a264:	4603      	mov	r3, r0
 800a266:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a26a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10c      	bne.n	800a28c <f_unlink+0x134>
 800a272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a274:	2b00      	cmp	r3, #0
 800a276:	d009      	beq.n	800a28c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a278:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a27c:	2200      	movs	r2, #0
 800a27e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a280:	4618      	mov	r0, r3
 800a282:	f7fd ff4c 	bl	800811e <remove_chain>
 800a286:	4603      	mov	r3, r0
 800a288:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a28c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a290:	2b00      	cmp	r3, #0
 800a292:	d106      	bne.n	800a2a2 <f_unlink+0x14a>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	4618      	mov	r0, r3
 800a298:	f7fd fcc2 	bl	8007c20 <sync_fs>
 800a29c:	4603      	mov	r3, r0
 800a29e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a2a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3778      	adds	r7, #120	; 0x78
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a2c6:	4b1f      	ldr	r3, [pc, #124]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a2c8:	7a5b      	ldrb	r3, [r3, #9]
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d131      	bne.n	800a334 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2d0:	4b1c      	ldr	r3, [pc, #112]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a2d2:	7a5b      	ldrb	r3, [r3, #9]
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a2da:	2100      	movs	r1, #0
 800a2dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a2de:	4b19      	ldr	r3, [pc, #100]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a2e0:	7a5b      	ldrb	r3, [r3, #9]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	4a17      	ldr	r2, [pc, #92]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a2ee:	4b15      	ldr	r3, [pc, #84]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a2f0:	7a5b      	ldrb	r3, [r3, #9]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4b13      	ldr	r3, [pc, #76]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a2f8:	4413      	add	r3, r2
 800a2fa:	79fa      	ldrb	r2, [r7, #7]
 800a2fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2fe:	4b11      	ldr	r3, [pc, #68]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a300:	7a5b      	ldrb	r3, [r3, #9]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	b2d1      	uxtb	r1, r2
 800a308:	4a0e      	ldr	r2, [pc, #56]	; (800a344 <FATFS_LinkDriverEx+0x94>)
 800a30a:	7251      	strb	r1, [r2, #9]
 800a30c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a30e:	7dbb      	ldrb	r3, [r7, #22]
 800a310:	3330      	adds	r3, #48	; 0x30
 800a312:	b2da      	uxtb	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	3301      	adds	r3, #1
 800a31c:	223a      	movs	r2, #58	; 0x3a
 800a31e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	3302      	adds	r3, #2
 800a324:	222f      	movs	r2, #47	; 0x2f
 800a326:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	3303      	adds	r3, #3
 800a32c:	2200      	movs	r2, #0
 800a32e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
}
 800a336:	4618      	mov	r0, r3
 800a338:	371c      	adds	r7, #28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20001b6c 	.word	0x20001b6c

0800a348 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a352:	2200      	movs	r2, #0
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7ff ffaa 	bl	800a2b0 <FATFS_LinkDriverEx>
 800a35c:	4603      	mov	r3, r0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <__errno>:
 800a368:	4b01      	ldr	r3, [pc, #4]	; (800a370 <__errno+0x8>)
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	20000010 	.word	0x20000010

0800a374 <exit>:
 800a374:	b508      	push	{r3, lr}
 800a376:	4b07      	ldr	r3, [pc, #28]	; (800a394 <exit+0x20>)
 800a378:	4604      	mov	r4, r0
 800a37a:	b113      	cbz	r3, 800a382 <exit+0xe>
 800a37c:	2100      	movs	r1, #0
 800a37e:	f3af 8000 	nop.w
 800a382:	4b05      	ldr	r3, [pc, #20]	; (800a398 <exit+0x24>)
 800a384:	6818      	ldr	r0, [r3, #0]
 800a386:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a388:	b103      	cbz	r3, 800a38c <exit+0x18>
 800a38a:	4798      	blx	r3
 800a38c:	4620      	mov	r0, r4
 800a38e:	f7f7 f99f 	bl	80016d0 <_exit>
 800a392:	bf00      	nop
 800a394:	00000000 	.word	0x00000000
 800a398:	0800ae2c 	.word	0x0800ae2c

0800a39c <__libc_init_array>:
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	4d0d      	ldr	r5, [pc, #52]	; (800a3d4 <__libc_init_array+0x38>)
 800a3a0:	4c0d      	ldr	r4, [pc, #52]	; (800a3d8 <__libc_init_array+0x3c>)
 800a3a2:	1b64      	subs	r4, r4, r5
 800a3a4:	10a4      	asrs	r4, r4, #2
 800a3a6:	2600      	movs	r6, #0
 800a3a8:	42a6      	cmp	r6, r4
 800a3aa:	d109      	bne.n	800a3c0 <__libc_init_array+0x24>
 800a3ac:	4d0b      	ldr	r5, [pc, #44]	; (800a3dc <__libc_init_array+0x40>)
 800a3ae:	4c0c      	ldr	r4, [pc, #48]	; (800a3e0 <__libc_init_array+0x44>)
 800a3b0:	f000 fc9e 	bl	800acf0 <_init>
 800a3b4:	1b64      	subs	r4, r4, r5
 800a3b6:	10a4      	asrs	r4, r4, #2
 800a3b8:	2600      	movs	r6, #0
 800a3ba:	42a6      	cmp	r6, r4
 800a3bc:	d105      	bne.n	800a3ca <__libc_init_array+0x2e>
 800a3be:	bd70      	pop	{r4, r5, r6, pc}
 800a3c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c4:	4798      	blx	r3
 800a3c6:	3601      	adds	r6, #1
 800a3c8:	e7ee      	b.n	800a3a8 <__libc_init_array+0xc>
 800a3ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ce:	4798      	blx	r3
 800a3d0:	3601      	adds	r6, #1
 800a3d2:	e7f2      	b.n	800a3ba <__libc_init_array+0x1e>
 800a3d4:	0800ae6c 	.word	0x0800ae6c
 800a3d8:	0800ae6c 	.word	0x0800ae6c
 800a3dc:	0800ae6c 	.word	0x0800ae6c
 800a3e0:	0800ae70 	.word	0x0800ae70

0800a3e4 <malloc>:
 800a3e4:	4b02      	ldr	r3, [pc, #8]	; (800a3f0 <malloc+0xc>)
 800a3e6:	4601      	mov	r1, r0
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	f000 b87f 	b.w	800a4ec <_malloc_r>
 800a3ee:	bf00      	nop
 800a3f0:	20000010 	.word	0x20000010

0800a3f4 <free>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <free+0xc>)
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	f000 b80b 	b.w	800a414 <_free_r>
 800a3fe:	bf00      	nop
 800a400:	20000010 	.word	0x20000010

0800a404 <memset>:
 800a404:	4402      	add	r2, r0
 800a406:	4603      	mov	r3, r0
 800a408:	4293      	cmp	r3, r2
 800a40a:	d100      	bne.n	800a40e <memset+0xa>
 800a40c:	4770      	bx	lr
 800a40e:	f803 1b01 	strb.w	r1, [r3], #1
 800a412:	e7f9      	b.n	800a408 <memset+0x4>

0800a414 <_free_r>:
 800a414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a416:	2900      	cmp	r1, #0
 800a418:	d044      	beq.n	800a4a4 <_free_r+0x90>
 800a41a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a41e:	9001      	str	r0, [sp, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f1a1 0404 	sub.w	r4, r1, #4
 800a426:	bfb8      	it	lt
 800a428:	18e4      	addlt	r4, r4, r3
 800a42a:	f000 f903 	bl	800a634 <__malloc_lock>
 800a42e:	4a1e      	ldr	r2, [pc, #120]	; (800a4a8 <_free_r+0x94>)
 800a430:	9801      	ldr	r0, [sp, #4]
 800a432:	6813      	ldr	r3, [r2, #0]
 800a434:	b933      	cbnz	r3, 800a444 <_free_r+0x30>
 800a436:	6063      	str	r3, [r4, #4]
 800a438:	6014      	str	r4, [r2, #0]
 800a43a:	b003      	add	sp, #12
 800a43c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a440:	f000 b8fe 	b.w	800a640 <__malloc_unlock>
 800a444:	42a3      	cmp	r3, r4
 800a446:	d908      	bls.n	800a45a <_free_r+0x46>
 800a448:	6825      	ldr	r5, [r4, #0]
 800a44a:	1961      	adds	r1, r4, r5
 800a44c:	428b      	cmp	r3, r1
 800a44e:	bf01      	itttt	eq
 800a450:	6819      	ldreq	r1, [r3, #0]
 800a452:	685b      	ldreq	r3, [r3, #4]
 800a454:	1949      	addeq	r1, r1, r5
 800a456:	6021      	streq	r1, [r4, #0]
 800a458:	e7ed      	b.n	800a436 <_free_r+0x22>
 800a45a:	461a      	mov	r2, r3
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	b10b      	cbz	r3, 800a464 <_free_r+0x50>
 800a460:	42a3      	cmp	r3, r4
 800a462:	d9fa      	bls.n	800a45a <_free_r+0x46>
 800a464:	6811      	ldr	r1, [r2, #0]
 800a466:	1855      	adds	r5, r2, r1
 800a468:	42a5      	cmp	r5, r4
 800a46a:	d10b      	bne.n	800a484 <_free_r+0x70>
 800a46c:	6824      	ldr	r4, [r4, #0]
 800a46e:	4421      	add	r1, r4
 800a470:	1854      	adds	r4, r2, r1
 800a472:	42a3      	cmp	r3, r4
 800a474:	6011      	str	r1, [r2, #0]
 800a476:	d1e0      	bne.n	800a43a <_free_r+0x26>
 800a478:	681c      	ldr	r4, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	6053      	str	r3, [r2, #4]
 800a47e:	4421      	add	r1, r4
 800a480:	6011      	str	r1, [r2, #0]
 800a482:	e7da      	b.n	800a43a <_free_r+0x26>
 800a484:	d902      	bls.n	800a48c <_free_r+0x78>
 800a486:	230c      	movs	r3, #12
 800a488:	6003      	str	r3, [r0, #0]
 800a48a:	e7d6      	b.n	800a43a <_free_r+0x26>
 800a48c:	6825      	ldr	r5, [r4, #0]
 800a48e:	1961      	adds	r1, r4, r5
 800a490:	428b      	cmp	r3, r1
 800a492:	bf04      	itt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	6063      	str	r3, [r4, #4]
 800a49a:	bf04      	itt	eq
 800a49c:	1949      	addeq	r1, r1, r5
 800a49e:	6021      	streq	r1, [r4, #0]
 800a4a0:	6054      	str	r4, [r2, #4]
 800a4a2:	e7ca      	b.n	800a43a <_free_r+0x26>
 800a4a4:	b003      	add	sp, #12
 800a4a6:	bd30      	pop	{r4, r5, pc}
 800a4a8:	20001b78 	.word	0x20001b78

0800a4ac <sbrk_aligned>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	4e0e      	ldr	r6, [pc, #56]	; (800a4e8 <sbrk_aligned+0x3c>)
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	6831      	ldr	r1, [r6, #0]
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	b911      	cbnz	r1, 800a4be <sbrk_aligned+0x12>
 800a4b8:	f000 f88c 	bl	800a5d4 <_sbrk_r>
 800a4bc:	6030      	str	r0, [r6, #0]
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f000 f887 	bl	800a5d4 <_sbrk_r>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d00a      	beq.n	800a4e0 <sbrk_aligned+0x34>
 800a4ca:	1cc4      	adds	r4, r0, #3
 800a4cc:	f024 0403 	bic.w	r4, r4, #3
 800a4d0:	42a0      	cmp	r0, r4
 800a4d2:	d007      	beq.n	800a4e4 <sbrk_aligned+0x38>
 800a4d4:	1a21      	subs	r1, r4, r0
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f000 f87c 	bl	800a5d4 <_sbrk_r>
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d101      	bne.n	800a4e4 <sbrk_aligned+0x38>
 800a4e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	20001b7c 	.word	0x20001b7c

0800a4ec <_malloc_r>:
 800a4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f0:	1ccd      	adds	r5, r1, #3
 800a4f2:	f025 0503 	bic.w	r5, r5, #3
 800a4f6:	3508      	adds	r5, #8
 800a4f8:	2d0c      	cmp	r5, #12
 800a4fa:	bf38      	it	cc
 800a4fc:	250c      	movcc	r5, #12
 800a4fe:	2d00      	cmp	r5, #0
 800a500:	4607      	mov	r7, r0
 800a502:	db01      	blt.n	800a508 <_malloc_r+0x1c>
 800a504:	42a9      	cmp	r1, r5
 800a506:	d905      	bls.n	800a514 <_malloc_r+0x28>
 800a508:	230c      	movs	r3, #12
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	2600      	movs	r6, #0
 800a50e:	4630      	mov	r0, r6
 800a510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a514:	4e2e      	ldr	r6, [pc, #184]	; (800a5d0 <_malloc_r+0xe4>)
 800a516:	f000 f88d 	bl	800a634 <__malloc_lock>
 800a51a:	6833      	ldr	r3, [r6, #0]
 800a51c:	461c      	mov	r4, r3
 800a51e:	bb34      	cbnz	r4, 800a56e <_malloc_r+0x82>
 800a520:	4629      	mov	r1, r5
 800a522:	4638      	mov	r0, r7
 800a524:	f7ff ffc2 	bl	800a4ac <sbrk_aligned>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	4604      	mov	r4, r0
 800a52c:	d14d      	bne.n	800a5ca <_malloc_r+0xde>
 800a52e:	6834      	ldr	r4, [r6, #0]
 800a530:	4626      	mov	r6, r4
 800a532:	2e00      	cmp	r6, #0
 800a534:	d140      	bne.n	800a5b8 <_malloc_r+0xcc>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	4631      	mov	r1, r6
 800a53a:	4638      	mov	r0, r7
 800a53c:	eb04 0803 	add.w	r8, r4, r3
 800a540:	f000 f848 	bl	800a5d4 <_sbrk_r>
 800a544:	4580      	cmp	r8, r0
 800a546:	d13a      	bne.n	800a5be <_malloc_r+0xd2>
 800a548:	6821      	ldr	r1, [r4, #0]
 800a54a:	3503      	adds	r5, #3
 800a54c:	1a6d      	subs	r5, r5, r1
 800a54e:	f025 0503 	bic.w	r5, r5, #3
 800a552:	3508      	adds	r5, #8
 800a554:	2d0c      	cmp	r5, #12
 800a556:	bf38      	it	cc
 800a558:	250c      	movcc	r5, #12
 800a55a:	4629      	mov	r1, r5
 800a55c:	4638      	mov	r0, r7
 800a55e:	f7ff ffa5 	bl	800a4ac <sbrk_aligned>
 800a562:	3001      	adds	r0, #1
 800a564:	d02b      	beq.n	800a5be <_malloc_r+0xd2>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	442b      	add	r3, r5
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	e00e      	b.n	800a58c <_malloc_r+0xa0>
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	1b52      	subs	r2, r2, r5
 800a572:	d41e      	bmi.n	800a5b2 <_malloc_r+0xc6>
 800a574:	2a0b      	cmp	r2, #11
 800a576:	d916      	bls.n	800a5a6 <_malloc_r+0xba>
 800a578:	1961      	adds	r1, r4, r5
 800a57a:	42a3      	cmp	r3, r4
 800a57c:	6025      	str	r5, [r4, #0]
 800a57e:	bf18      	it	ne
 800a580:	6059      	strne	r1, [r3, #4]
 800a582:	6863      	ldr	r3, [r4, #4]
 800a584:	bf08      	it	eq
 800a586:	6031      	streq	r1, [r6, #0]
 800a588:	5162      	str	r2, [r4, r5]
 800a58a:	604b      	str	r3, [r1, #4]
 800a58c:	4638      	mov	r0, r7
 800a58e:	f104 060b 	add.w	r6, r4, #11
 800a592:	f000 f855 	bl	800a640 <__malloc_unlock>
 800a596:	f026 0607 	bic.w	r6, r6, #7
 800a59a:	1d23      	adds	r3, r4, #4
 800a59c:	1af2      	subs	r2, r6, r3
 800a59e:	d0b6      	beq.n	800a50e <_malloc_r+0x22>
 800a5a0:	1b9b      	subs	r3, r3, r6
 800a5a2:	50a3      	str	r3, [r4, r2]
 800a5a4:	e7b3      	b.n	800a50e <_malloc_r+0x22>
 800a5a6:	6862      	ldr	r2, [r4, #4]
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	bf0c      	ite	eq
 800a5ac:	6032      	streq	r2, [r6, #0]
 800a5ae:	605a      	strne	r2, [r3, #4]
 800a5b0:	e7ec      	b.n	800a58c <_malloc_r+0xa0>
 800a5b2:	4623      	mov	r3, r4
 800a5b4:	6864      	ldr	r4, [r4, #4]
 800a5b6:	e7b2      	b.n	800a51e <_malloc_r+0x32>
 800a5b8:	4634      	mov	r4, r6
 800a5ba:	6876      	ldr	r6, [r6, #4]
 800a5bc:	e7b9      	b.n	800a532 <_malloc_r+0x46>
 800a5be:	230c      	movs	r3, #12
 800a5c0:	603b      	str	r3, [r7, #0]
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	f000 f83c 	bl	800a640 <__malloc_unlock>
 800a5c8:	e7a1      	b.n	800a50e <_malloc_r+0x22>
 800a5ca:	6025      	str	r5, [r4, #0]
 800a5cc:	e7de      	b.n	800a58c <_malloc_r+0xa0>
 800a5ce:	bf00      	nop
 800a5d0:	20001b78 	.word	0x20001b78

0800a5d4 <_sbrk_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d06      	ldr	r5, [pc, #24]	; (800a5f0 <_sbrk_r+0x1c>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	602b      	str	r3, [r5, #0]
 800a5e0:	f7f7 f880 	bl	80016e4 <_sbrk>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_sbrk_r+0x1a>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_sbrk_r+0x1a>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20001b80 	.word	0x20001b80

0800a5f4 <siprintf>:
 800a5f4:	b40e      	push	{r1, r2, r3}
 800a5f6:	b500      	push	{lr}
 800a5f8:	b09c      	sub	sp, #112	; 0x70
 800a5fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a5fc:	9002      	str	r0, [sp, #8]
 800a5fe:	9006      	str	r0, [sp, #24]
 800a600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a604:	4809      	ldr	r0, [pc, #36]	; (800a62c <siprintf+0x38>)
 800a606:	9107      	str	r1, [sp, #28]
 800a608:	9104      	str	r1, [sp, #16]
 800a60a:	4909      	ldr	r1, [pc, #36]	; (800a630 <siprintf+0x3c>)
 800a60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a610:	9105      	str	r1, [sp, #20]
 800a612:	6800      	ldr	r0, [r0, #0]
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	a902      	add	r1, sp, #8
 800a618:	f000 f874 	bl	800a704 <_svfiprintf_r>
 800a61c:	9b02      	ldr	r3, [sp, #8]
 800a61e:	2200      	movs	r2, #0
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	b01c      	add	sp, #112	; 0x70
 800a624:	f85d eb04 	ldr.w	lr, [sp], #4
 800a628:	b003      	add	sp, #12
 800a62a:	4770      	bx	lr
 800a62c:	20000010 	.word	0x20000010
 800a630:	ffff0208 	.word	0xffff0208

0800a634 <__malloc_lock>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__malloc_lock+0x8>)
 800a636:	f000 baf9 	b.w	800ac2c <__retarget_lock_acquire_recursive>
 800a63a:	bf00      	nop
 800a63c:	20001b84 	.word	0x20001b84

0800a640 <__malloc_unlock>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__malloc_unlock+0x8>)
 800a642:	f000 baf4 	b.w	800ac2e <__retarget_lock_release_recursive>
 800a646:	bf00      	nop
 800a648:	20001b84 	.word	0x20001b84

0800a64c <__ssputs_r>:
 800a64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a650:	688e      	ldr	r6, [r1, #8]
 800a652:	429e      	cmp	r6, r3
 800a654:	4682      	mov	sl, r0
 800a656:	460c      	mov	r4, r1
 800a658:	4690      	mov	r8, r2
 800a65a:	461f      	mov	r7, r3
 800a65c:	d838      	bhi.n	800a6d0 <__ssputs_r+0x84>
 800a65e:	898a      	ldrh	r2, [r1, #12]
 800a660:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a664:	d032      	beq.n	800a6cc <__ssputs_r+0x80>
 800a666:	6825      	ldr	r5, [r4, #0]
 800a668:	6909      	ldr	r1, [r1, #16]
 800a66a:	eba5 0901 	sub.w	r9, r5, r1
 800a66e:	6965      	ldr	r5, [r4, #20]
 800a670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a678:	3301      	adds	r3, #1
 800a67a:	444b      	add	r3, r9
 800a67c:	106d      	asrs	r5, r5, #1
 800a67e:	429d      	cmp	r5, r3
 800a680:	bf38      	it	cc
 800a682:	461d      	movcc	r5, r3
 800a684:	0553      	lsls	r3, r2, #21
 800a686:	d531      	bpl.n	800a6ec <__ssputs_r+0xa0>
 800a688:	4629      	mov	r1, r5
 800a68a:	f7ff ff2f 	bl	800a4ec <_malloc_r>
 800a68e:	4606      	mov	r6, r0
 800a690:	b950      	cbnz	r0, 800a6a8 <__ssputs_r+0x5c>
 800a692:	230c      	movs	r3, #12
 800a694:	f8ca 3000 	str.w	r3, [sl]
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69e:	81a3      	strh	r3, [r4, #12]
 800a6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a8:	6921      	ldr	r1, [r4, #16]
 800a6aa:	464a      	mov	r2, r9
 800a6ac:	f000 fac0 	bl	800ac30 <memcpy>
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	6126      	str	r6, [r4, #16]
 800a6be:	6165      	str	r5, [r4, #20]
 800a6c0:	444e      	add	r6, r9
 800a6c2:	eba5 0509 	sub.w	r5, r5, r9
 800a6c6:	6026      	str	r6, [r4, #0]
 800a6c8:	60a5      	str	r5, [r4, #8]
 800a6ca:	463e      	mov	r6, r7
 800a6cc:	42be      	cmp	r6, r7
 800a6ce:	d900      	bls.n	800a6d2 <__ssputs_r+0x86>
 800a6d0:	463e      	mov	r6, r7
 800a6d2:	6820      	ldr	r0, [r4, #0]
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	4641      	mov	r1, r8
 800a6d8:	f000 fab8 	bl	800ac4c <memmove>
 800a6dc:	68a3      	ldr	r3, [r4, #8]
 800a6de:	1b9b      	subs	r3, r3, r6
 800a6e0:	60a3      	str	r3, [r4, #8]
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	4433      	add	r3, r6
 800a6e6:	6023      	str	r3, [r4, #0]
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	e7db      	b.n	800a6a4 <__ssputs_r+0x58>
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	f000 fac7 	bl	800ac80 <_realloc_r>
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1e1      	bne.n	800a6bc <__ssputs_r+0x70>
 800a6f8:	6921      	ldr	r1, [r4, #16]
 800a6fa:	4650      	mov	r0, sl
 800a6fc:	f7ff fe8a 	bl	800a414 <_free_r>
 800a700:	e7c7      	b.n	800a692 <__ssputs_r+0x46>
	...

0800a704 <_svfiprintf_r>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	4698      	mov	r8, r3
 800a70a:	898b      	ldrh	r3, [r1, #12]
 800a70c:	061b      	lsls	r3, r3, #24
 800a70e:	b09d      	sub	sp, #116	; 0x74
 800a710:	4607      	mov	r7, r0
 800a712:	460d      	mov	r5, r1
 800a714:	4614      	mov	r4, r2
 800a716:	d50e      	bpl.n	800a736 <_svfiprintf_r+0x32>
 800a718:	690b      	ldr	r3, [r1, #16]
 800a71a:	b963      	cbnz	r3, 800a736 <_svfiprintf_r+0x32>
 800a71c:	2140      	movs	r1, #64	; 0x40
 800a71e:	f7ff fee5 	bl	800a4ec <_malloc_r>
 800a722:	6028      	str	r0, [r5, #0]
 800a724:	6128      	str	r0, [r5, #16]
 800a726:	b920      	cbnz	r0, 800a732 <_svfiprintf_r+0x2e>
 800a728:	230c      	movs	r3, #12
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a730:	e0d1      	b.n	800a8d6 <_svfiprintf_r+0x1d2>
 800a732:	2340      	movs	r3, #64	; 0x40
 800a734:	616b      	str	r3, [r5, #20]
 800a736:	2300      	movs	r3, #0
 800a738:	9309      	str	r3, [sp, #36]	; 0x24
 800a73a:	2320      	movs	r3, #32
 800a73c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a740:	f8cd 800c 	str.w	r8, [sp, #12]
 800a744:	2330      	movs	r3, #48	; 0x30
 800a746:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8f0 <_svfiprintf_r+0x1ec>
 800a74a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a74e:	f04f 0901 	mov.w	r9, #1
 800a752:	4623      	mov	r3, r4
 800a754:	469a      	mov	sl, r3
 800a756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75a:	b10a      	cbz	r2, 800a760 <_svfiprintf_r+0x5c>
 800a75c:	2a25      	cmp	r2, #37	; 0x25
 800a75e:	d1f9      	bne.n	800a754 <_svfiprintf_r+0x50>
 800a760:	ebba 0b04 	subs.w	fp, sl, r4
 800a764:	d00b      	beq.n	800a77e <_svfiprintf_r+0x7a>
 800a766:	465b      	mov	r3, fp
 800a768:	4622      	mov	r2, r4
 800a76a:	4629      	mov	r1, r5
 800a76c:	4638      	mov	r0, r7
 800a76e:	f7ff ff6d 	bl	800a64c <__ssputs_r>
 800a772:	3001      	adds	r0, #1
 800a774:	f000 80aa 	beq.w	800a8cc <_svfiprintf_r+0x1c8>
 800a778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77a:	445a      	add	r2, fp
 800a77c:	9209      	str	r2, [sp, #36]	; 0x24
 800a77e:	f89a 3000 	ldrb.w	r3, [sl]
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 80a2 	beq.w	800a8cc <_svfiprintf_r+0x1c8>
 800a788:	2300      	movs	r3, #0
 800a78a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a78e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a792:	f10a 0a01 	add.w	sl, sl, #1
 800a796:	9304      	str	r3, [sp, #16]
 800a798:	9307      	str	r3, [sp, #28]
 800a79a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a79e:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a0:	4654      	mov	r4, sl
 800a7a2:	2205      	movs	r2, #5
 800a7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a8:	4851      	ldr	r0, [pc, #324]	; (800a8f0 <_svfiprintf_r+0x1ec>)
 800a7aa:	f7f5 fd41 	bl	8000230 <memchr>
 800a7ae:	9a04      	ldr	r2, [sp, #16]
 800a7b0:	b9d8      	cbnz	r0, 800a7ea <_svfiprintf_r+0xe6>
 800a7b2:	06d0      	lsls	r0, r2, #27
 800a7b4:	bf44      	itt	mi
 800a7b6:	2320      	movmi	r3, #32
 800a7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7bc:	0711      	lsls	r1, r2, #28
 800a7be:	bf44      	itt	mi
 800a7c0:	232b      	movmi	r3, #43	; 0x2b
 800a7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a7cc:	d015      	beq.n	800a7fa <_svfiprintf_r+0xf6>
 800a7ce:	9a07      	ldr	r2, [sp, #28]
 800a7d0:	4654      	mov	r4, sl
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	f04f 0c0a 	mov.w	ip, #10
 800a7d8:	4621      	mov	r1, r4
 800a7da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7de:	3b30      	subs	r3, #48	; 0x30
 800a7e0:	2b09      	cmp	r3, #9
 800a7e2:	d94e      	bls.n	800a882 <_svfiprintf_r+0x17e>
 800a7e4:	b1b0      	cbz	r0, 800a814 <_svfiprintf_r+0x110>
 800a7e6:	9207      	str	r2, [sp, #28]
 800a7e8:	e014      	b.n	800a814 <_svfiprintf_r+0x110>
 800a7ea:	eba0 0308 	sub.w	r3, r0, r8
 800a7ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	46a2      	mov	sl, r4
 800a7f8:	e7d2      	b.n	800a7a0 <_svfiprintf_r+0x9c>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	1d19      	adds	r1, r3, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	9103      	str	r1, [sp, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfbb      	ittet	lt
 800a806:	425b      	neglt	r3, r3
 800a808:	f042 0202 	orrlt.w	r2, r2, #2
 800a80c:	9307      	strge	r3, [sp, #28]
 800a80e:	9307      	strlt	r3, [sp, #28]
 800a810:	bfb8      	it	lt
 800a812:	9204      	strlt	r2, [sp, #16]
 800a814:	7823      	ldrb	r3, [r4, #0]
 800a816:	2b2e      	cmp	r3, #46	; 0x2e
 800a818:	d10c      	bne.n	800a834 <_svfiprintf_r+0x130>
 800a81a:	7863      	ldrb	r3, [r4, #1]
 800a81c:	2b2a      	cmp	r3, #42	; 0x2a
 800a81e:	d135      	bne.n	800a88c <_svfiprintf_r+0x188>
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	1d1a      	adds	r2, r3, #4
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	9203      	str	r2, [sp, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bfb8      	it	lt
 800a82c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a830:	3402      	adds	r4, #2
 800a832:	9305      	str	r3, [sp, #20]
 800a834:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a900 <_svfiprintf_r+0x1fc>
 800a838:	7821      	ldrb	r1, [r4, #0]
 800a83a:	2203      	movs	r2, #3
 800a83c:	4650      	mov	r0, sl
 800a83e:	f7f5 fcf7 	bl	8000230 <memchr>
 800a842:	b140      	cbz	r0, 800a856 <_svfiprintf_r+0x152>
 800a844:	2340      	movs	r3, #64	; 0x40
 800a846:	eba0 000a 	sub.w	r0, r0, sl
 800a84a:	fa03 f000 	lsl.w	r0, r3, r0
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	4303      	orrs	r3, r0
 800a852:	3401      	adds	r4, #1
 800a854:	9304      	str	r3, [sp, #16]
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	4826      	ldr	r0, [pc, #152]	; (800a8f4 <_svfiprintf_r+0x1f0>)
 800a85c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a860:	2206      	movs	r2, #6
 800a862:	f7f5 fce5 	bl	8000230 <memchr>
 800a866:	2800      	cmp	r0, #0
 800a868:	d038      	beq.n	800a8dc <_svfiprintf_r+0x1d8>
 800a86a:	4b23      	ldr	r3, [pc, #140]	; (800a8f8 <_svfiprintf_r+0x1f4>)
 800a86c:	bb1b      	cbnz	r3, 800a8b6 <_svfiprintf_r+0x1b2>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	3307      	adds	r3, #7
 800a872:	f023 0307 	bic.w	r3, r3, #7
 800a876:	3308      	adds	r3, #8
 800a878:	9303      	str	r3, [sp, #12]
 800a87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87c:	4433      	add	r3, r6
 800a87e:	9309      	str	r3, [sp, #36]	; 0x24
 800a880:	e767      	b.n	800a752 <_svfiprintf_r+0x4e>
 800a882:	fb0c 3202 	mla	r2, ip, r2, r3
 800a886:	460c      	mov	r4, r1
 800a888:	2001      	movs	r0, #1
 800a88a:	e7a5      	b.n	800a7d8 <_svfiprintf_r+0xd4>
 800a88c:	2300      	movs	r3, #0
 800a88e:	3401      	adds	r4, #1
 800a890:	9305      	str	r3, [sp, #20]
 800a892:	4619      	mov	r1, r3
 800a894:	f04f 0c0a 	mov.w	ip, #10
 800a898:	4620      	mov	r0, r4
 800a89a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89e:	3a30      	subs	r2, #48	; 0x30
 800a8a0:	2a09      	cmp	r2, #9
 800a8a2:	d903      	bls.n	800a8ac <_svfiprintf_r+0x1a8>
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0c5      	beq.n	800a834 <_svfiprintf_r+0x130>
 800a8a8:	9105      	str	r1, [sp, #20]
 800a8aa:	e7c3      	b.n	800a834 <_svfiprintf_r+0x130>
 800a8ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e7f0      	b.n	800a898 <_svfiprintf_r+0x194>
 800a8b6:	ab03      	add	r3, sp, #12
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <_svfiprintf_r+0x1f8>)
 800a8be:	a904      	add	r1, sp, #16
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	f3af 8000 	nop.w
 800a8c6:	1c42      	adds	r2, r0, #1
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	d1d6      	bne.n	800a87a <_svfiprintf_r+0x176>
 800a8cc:	89ab      	ldrh	r3, [r5, #12]
 800a8ce:	065b      	lsls	r3, r3, #25
 800a8d0:	f53f af2c 	bmi.w	800a72c <_svfiprintf_r+0x28>
 800a8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d6:	b01d      	add	sp, #116	; 0x74
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	ab03      	add	r3, sp, #12
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	462a      	mov	r2, r5
 800a8e2:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <_svfiprintf_r+0x1f8>)
 800a8e4:	a904      	add	r1, sp, #16
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	f000 f87a 	bl	800a9e0 <_printf_i>
 800a8ec:	e7eb      	b.n	800a8c6 <_svfiprintf_r+0x1c2>
 800a8ee:	bf00      	nop
 800a8f0:	0800ae30 	.word	0x0800ae30
 800a8f4:	0800ae3a 	.word	0x0800ae3a
 800a8f8:	00000000 	.word	0x00000000
 800a8fc:	0800a64d 	.word	0x0800a64d
 800a900:	0800ae36 	.word	0x0800ae36

0800a904 <_printf_common>:
 800a904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a908:	4616      	mov	r6, r2
 800a90a:	4699      	mov	r9, r3
 800a90c:	688a      	ldr	r2, [r1, #8]
 800a90e:	690b      	ldr	r3, [r1, #16]
 800a910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a914:	4293      	cmp	r3, r2
 800a916:	bfb8      	it	lt
 800a918:	4613      	movlt	r3, r2
 800a91a:	6033      	str	r3, [r6, #0]
 800a91c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a920:	4607      	mov	r7, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b10a      	cbz	r2, 800a92a <_printf_common+0x26>
 800a926:	3301      	adds	r3, #1
 800a928:	6033      	str	r3, [r6, #0]
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	0699      	lsls	r1, r3, #26
 800a92e:	bf42      	ittt	mi
 800a930:	6833      	ldrmi	r3, [r6, #0]
 800a932:	3302      	addmi	r3, #2
 800a934:	6033      	strmi	r3, [r6, #0]
 800a936:	6825      	ldr	r5, [r4, #0]
 800a938:	f015 0506 	ands.w	r5, r5, #6
 800a93c:	d106      	bne.n	800a94c <_printf_common+0x48>
 800a93e:	f104 0a19 	add.w	sl, r4, #25
 800a942:	68e3      	ldr	r3, [r4, #12]
 800a944:	6832      	ldr	r2, [r6, #0]
 800a946:	1a9b      	subs	r3, r3, r2
 800a948:	42ab      	cmp	r3, r5
 800a94a:	dc26      	bgt.n	800a99a <_printf_common+0x96>
 800a94c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a950:	1e13      	subs	r3, r2, #0
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	bf18      	it	ne
 800a956:	2301      	movne	r3, #1
 800a958:	0692      	lsls	r2, r2, #26
 800a95a:	d42b      	bmi.n	800a9b4 <_printf_common+0xb0>
 800a95c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a960:	4649      	mov	r1, r9
 800a962:	4638      	mov	r0, r7
 800a964:	47c0      	blx	r8
 800a966:	3001      	adds	r0, #1
 800a968:	d01e      	beq.n	800a9a8 <_printf_common+0xa4>
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	68e5      	ldr	r5, [r4, #12]
 800a96e:	6832      	ldr	r2, [r6, #0]
 800a970:	f003 0306 	and.w	r3, r3, #6
 800a974:	2b04      	cmp	r3, #4
 800a976:	bf08      	it	eq
 800a978:	1aad      	subeq	r5, r5, r2
 800a97a:	68a3      	ldr	r3, [r4, #8]
 800a97c:	6922      	ldr	r2, [r4, #16]
 800a97e:	bf0c      	ite	eq
 800a980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a984:	2500      	movne	r5, #0
 800a986:	4293      	cmp	r3, r2
 800a988:	bfc4      	itt	gt
 800a98a:	1a9b      	subgt	r3, r3, r2
 800a98c:	18ed      	addgt	r5, r5, r3
 800a98e:	2600      	movs	r6, #0
 800a990:	341a      	adds	r4, #26
 800a992:	42b5      	cmp	r5, r6
 800a994:	d11a      	bne.n	800a9cc <_printf_common+0xc8>
 800a996:	2000      	movs	r0, #0
 800a998:	e008      	b.n	800a9ac <_printf_common+0xa8>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4652      	mov	r2, sl
 800a99e:	4649      	mov	r1, r9
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	47c0      	blx	r8
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d103      	bne.n	800a9b0 <_printf_common+0xac>
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	e7c6      	b.n	800a942 <_printf_common+0x3e>
 800a9b4:	18e1      	adds	r1, r4, r3
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	2030      	movs	r0, #48	; 0x30
 800a9ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9be:	4422      	add	r2, r4
 800a9c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9c8:	3302      	adds	r3, #2
 800a9ca:	e7c7      	b.n	800a95c <_printf_common+0x58>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	47c0      	blx	r8
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d0e6      	beq.n	800a9a8 <_printf_common+0xa4>
 800a9da:	3601      	adds	r6, #1
 800a9dc:	e7d9      	b.n	800a992 <_printf_common+0x8e>
	...

0800a9e0 <_printf_i>:
 800a9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	7e0f      	ldrb	r7, [r1, #24]
 800a9e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9e8:	2f78      	cmp	r7, #120	; 0x78
 800a9ea:	4691      	mov	r9, r2
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	469a      	mov	sl, r3
 800a9f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9f6:	d807      	bhi.n	800aa08 <_printf_i+0x28>
 800a9f8:	2f62      	cmp	r7, #98	; 0x62
 800a9fa:	d80a      	bhi.n	800aa12 <_printf_i+0x32>
 800a9fc:	2f00      	cmp	r7, #0
 800a9fe:	f000 80d8 	beq.w	800abb2 <_printf_i+0x1d2>
 800aa02:	2f58      	cmp	r7, #88	; 0x58
 800aa04:	f000 80a3 	beq.w	800ab4e <_printf_i+0x16e>
 800aa08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa10:	e03a      	b.n	800aa88 <_printf_i+0xa8>
 800aa12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa16:	2b15      	cmp	r3, #21
 800aa18:	d8f6      	bhi.n	800aa08 <_printf_i+0x28>
 800aa1a:	a101      	add	r1, pc, #4	; (adr r1, 800aa20 <_printf_i+0x40>)
 800aa1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa20:	0800aa79 	.word	0x0800aa79
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa09 	.word	0x0800aa09
 800aa2c:	0800aa09 	.word	0x0800aa09
 800aa30:	0800aa09 	.word	0x0800aa09
 800aa34:	0800aa09 	.word	0x0800aa09
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aa09 	.word	0x0800aa09
 800aa40:	0800aa09 	.word	0x0800aa09
 800aa44:	0800aa09 	.word	0x0800aa09
 800aa48:	0800aa09 	.word	0x0800aa09
 800aa4c:	0800ab99 	.word	0x0800ab99
 800aa50:	0800aabd 	.word	0x0800aabd
 800aa54:	0800ab7b 	.word	0x0800ab7b
 800aa58:	0800aa09 	.word	0x0800aa09
 800aa5c:	0800aa09 	.word	0x0800aa09
 800aa60:	0800abbb 	.word	0x0800abbb
 800aa64:	0800aa09 	.word	0x0800aa09
 800aa68:	0800aabd 	.word	0x0800aabd
 800aa6c:	0800aa09 	.word	0x0800aa09
 800aa70:	0800aa09 	.word	0x0800aa09
 800aa74:	0800ab83 	.word	0x0800ab83
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	602a      	str	r2, [r5, #0]
 800aa80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e0a3      	b.n	800abd4 <_printf_i+0x1f4>
 800aa8c:	6820      	ldr	r0, [r4, #0]
 800aa8e:	6829      	ldr	r1, [r5, #0]
 800aa90:	0606      	lsls	r6, r0, #24
 800aa92:	f101 0304 	add.w	r3, r1, #4
 800aa96:	d50a      	bpl.n	800aaae <_printf_i+0xce>
 800aa98:	680e      	ldr	r6, [r1, #0]
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	2e00      	cmp	r6, #0
 800aa9e:	da03      	bge.n	800aaa8 <_printf_i+0xc8>
 800aaa0:	232d      	movs	r3, #45	; 0x2d
 800aaa2:	4276      	negs	r6, r6
 800aaa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa8:	485e      	ldr	r0, [pc, #376]	; (800ac24 <_printf_i+0x244>)
 800aaaa:	230a      	movs	r3, #10
 800aaac:	e019      	b.n	800aae2 <_printf_i+0x102>
 800aaae:	680e      	ldr	r6, [r1, #0]
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aab6:	bf18      	it	ne
 800aab8:	b236      	sxthne	r6, r6
 800aaba:	e7ef      	b.n	800aa9c <_printf_i+0xbc>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	6820      	ldr	r0, [r4, #0]
 800aac0:	1d19      	adds	r1, r3, #4
 800aac2:	6029      	str	r1, [r5, #0]
 800aac4:	0601      	lsls	r1, r0, #24
 800aac6:	d501      	bpl.n	800aacc <_printf_i+0xec>
 800aac8:	681e      	ldr	r6, [r3, #0]
 800aaca:	e002      	b.n	800aad2 <_printf_i+0xf2>
 800aacc:	0646      	lsls	r6, r0, #25
 800aace:	d5fb      	bpl.n	800aac8 <_printf_i+0xe8>
 800aad0:	881e      	ldrh	r6, [r3, #0]
 800aad2:	4854      	ldr	r0, [pc, #336]	; (800ac24 <_printf_i+0x244>)
 800aad4:	2f6f      	cmp	r7, #111	; 0x6f
 800aad6:	bf0c      	ite	eq
 800aad8:	2308      	moveq	r3, #8
 800aada:	230a      	movne	r3, #10
 800aadc:	2100      	movs	r1, #0
 800aade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aae2:	6865      	ldr	r5, [r4, #4]
 800aae4:	60a5      	str	r5, [r4, #8]
 800aae6:	2d00      	cmp	r5, #0
 800aae8:	bfa2      	ittt	ge
 800aaea:	6821      	ldrge	r1, [r4, #0]
 800aaec:	f021 0104 	bicge.w	r1, r1, #4
 800aaf0:	6021      	strge	r1, [r4, #0]
 800aaf2:	b90e      	cbnz	r6, 800aaf8 <_printf_i+0x118>
 800aaf4:	2d00      	cmp	r5, #0
 800aaf6:	d04d      	beq.n	800ab94 <_printf_i+0x1b4>
 800aaf8:	4615      	mov	r5, r2
 800aafa:	fbb6 f1f3 	udiv	r1, r6, r3
 800aafe:	fb03 6711 	mls	r7, r3, r1, r6
 800ab02:	5dc7      	ldrb	r7, [r0, r7]
 800ab04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab08:	4637      	mov	r7, r6
 800ab0a:	42bb      	cmp	r3, r7
 800ab0c:	460e      	mov	r6, r1
 800ab0e:	d9f4      	bls.n	800aafa <_printf_i+0x11a>
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d10b      	bne.n	800ab2c <_printf_i+0x14c>
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	07de      	lsls	r6, r3, #31
 800ab18:	d508      	bpl.n	800ab2c <_printf_i+0x14c>
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	6861      	ldr	r1, [r4, #4]
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	bfde      	ittt	le
 800ab22:	2330      	movle	r3, #48	; 0x30
 800ab24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ab2c:	1b52      	subs	r2, r2, r5
 800ab2e:	6122      	str	r2, [r4, #16]
 800ab30:	f8cd a000 	str.w	sl, [sp]
 800ab34:	464b      	mov	r3, r9
 800ab36:	aa03      	add	r2, sp, #12
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	f7ff fee2 	bl	800a904 <_printf_common>
 800ab40:	3001      	adds	r0, #1
 800ab42:	d14c      	bne.n	800abde <_printf_i+0x1fe>
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab48:	b004      	add	sp, #16
 800ab4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4e:	4835      	ldr	r0, [pc, #212]	; (800ac24 <_printf_i+0x244>)
 800ab50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab54:	6829      	ldr	r1, [r5, #0]
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab5c:	6029      	str	r1, [r5, #0]
 800ab5e:	061d      	lsls	r5, r3, #24
 800ab60:	d514      	bpl.n	800ab8c <_printf_i+0x1ac>
 800ab62:	07df      	lsls	r7, r3, #31
 800ab64:	bf44      	itt	mi
 800ab66:	f043 0320 	orrmi.w	r3, r3, #32
 800ab6a:	6023      	strmi	r3, [r4, #0]
 800ab6c:	b91e      	cbnz	r6, 800ab76 <_printf_i+0x196>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	f023 0320 	bic.w	r3, r3, #32
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	2310      	movs	r3, #16
 800ab78:	e7b0      	b.n	800aadc <_printf_i+0xfc>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	f043 0320 	orr.w	r3, r3, #32
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	2378      	movs	r3, #120	; 0x78
 800ab84:	4828      	ldr	r0, [pc, #160]	; (800ac28 <_printf_i+0x248>)
 800ab86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab8a:	e7e3      	b.n	800ab54 <_printf_i+0x174>
 800ab8c:	0659      	lsls	r1, r3, #25
 800ab8e:	bf48      	it	mi
 800ab90:	b2b6      	uxthmi	r6, r6
 800ab92:	e7e6      	b.n	800ab62 <_printf_i+0x182>
 800ab94:	4615      	mov	r5, r2
 800ab96:	e7bb      	b.n	800ab10 <_printf_i+0x130>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	6826      	ldr	r6, [r4, #0]
 800ab9c:	6961      	ldr	r1, [r4, #20]
 800ab9e:	1d18      	adds	r0, r3, #4
 800aba0:	6028      	str	r0, [r5, #0]
 800aba2:	0635      	lsls	r5, r6, #24
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	d501      	bpl.n	800abac <_printf_i+0x1cc>
 800aba8:	6019      	str	r1, [r3, #0]
 800abaa:	e002      	b.n	800abb2 <_printf_i+0x1d2>
 800abac:	0670      	lsls	r0, r6, #25
 800abae:	d5fb      	bpl.n	800aba8 <_printf_i+0x1c8>
 800abb0:	8019      	strh	r1, [r3, #0]
 800abb2:	2300      	movs	r3, #0
 800abb4:	6123      	str	r3, [r4, #16]
 800abb6:	4615      	mov	r5, r2
 800abb8:	e7ba      	b.n	800ab30 <_printf_i+0x150>
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	1d1a      	adds	r2, r3, #4
 800abbe:	602a      	str	r2, [r5, #0]
 800abc0:	681d      	ldr	r5, [r3, #0]
 800abc2:	6862      	ldr	r2, [r4, #4]
 800abc4:	2100      	movs	r1, #0
 800abc6:	4628      	mov	r0, r5
 800abc8:	f7f5 fb32 	bl	8000230 <memchr>
 800abcc:	b108      	cbz	r0, 800abd2 <_printf_i+0x1f2>
 800abce:	1b40      	subs	r0, r0, r5
 800abd0:	6060      	str	r0, [r4, #4]
 800abd2:	6863      	ldr	r3, [r4, #4]
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	2300      	movs	r3, #0
 800abd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abdc:	e7a8      	b.n	800ab30 <_printf_i+0x150>
 800abde:	6923      	ldr	r3, [r4, #16]
 800abe0:	462a      	mov	r2, r5
 800abe2:	4649      	mov	r1, r9
 800abe4:	4640      	mov	r0, r8
 800abe6:	47d0      	blx	sl
 800abe8:	3001      	adds	r0, #1
 800abea:	d0ab      	beq.n	800ab44 <_printf_i+0x164>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	079b      	lsls	r3, r3, #30
 800abf0:	d413      	bmi.n	800ac1a <_printf_i+0x23a>
 800abf2:	68e0      	ldr	r0, [r4, #12]
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	4298      	cmp	r0, r3
 800abf8:	bfb8      	it	lt
 800abfa:	4618      	movlt	r0, r3
 800abfc:	e7a4      	b.n	800ab48 <_printf_i+0x168>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4632      	mov	r2, r6
 800ac02:	4649      	mov	r1, r9
 800ac04:	4640      	mov	r0, r8
 800ac06:	47d0      	blx	sl
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d09b      	beq.n	800ab44 <_printf_i+0x164>
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	68e3      	ldr	r3, [r4, #12]
 800ac10:	9903      	ldr	r1, [sp, #12]
 800ac12:	1a5b      	subs	r3, r3, r1
 800ac14:	42ab      	cmp	r3, r5
 800ac16:	dcf2      	bgt.n	800abfe <_printf_i+0x21e>
 800ac18:	e7eb      	b.n	800abf2 <_printf_i+0x212>
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	f104 0619 	add.w	r6, r4, #25
 800ac20:	e7f5      	b.n	800ac0e <_printf_i+0x22e>
 800ac22:	bf00      	nop
 800ac24:	0800ae41 	.word	0x0800ae41
 800ac28:	0800ae52 	.word	0x0800ae52

0800ac2c <__retarget_lock_acquire_recursive>:
 800ac2c:	4770      	bx	lr

0800ac2e <__retarget_lock_release_recursive>:
 800ac2e:	4770      	bx	lr

0800ac30 <memcpy>:
 800ac30:	440a      	add	r2, r1
 800ac32:	4291      	cmp	r1, r2
 800ac34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac38:	d100      	bne.n	800ac3c <memcpy+0xc>
 800ac3a:	4770      	bx	lr
 800ac3c:	b510      	push	{r4, lr}
 800ac3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac46:	4291      	cmp	r1, r2
 800ac48:	d1f9      	bne.n	800ac3e <memcpy+0xe>
 800ac4a:	bd10      	pop	{r4, pc}

0800ac4c <memmove>:
 800ac4c:	4288      	cmp	r0, r1
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	eb01 0402 	add.w	r4, r1, r2
 800ac54:	d902      	bls.n	800ac5c <memmove+0x10>
 800ac56:	4284      	cmp	r4, r0
 800ac58:	4623      	mov	r3, r4
 800ac5a:	d807      	bhi.n	800ac6c <memmove+0x20>
 800ac5c:	1e43      	subs	r3, r0, #1
 800ac5e:	42a1      	cmp	r1, r4
 800ac60:	d008      	beq.n	800ac74 <memmove+0x28>
 800ac62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac6a:	e7f8      	b.n	800ac5e <memmove+0x12>
 800ac6c:	4402      	add	r2, r0
 800ac6e:	4601      	mov	r1, r0
 800ac70:	428a      	cmp	r2, r1
 800ac72:	d100      	bne.n	800ac76 <memmove+0x2a>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac7e:	e7f7      	b.n	800ac70 <memmove+0x24>

0800ac80 <_realloc_r>:
 800ac80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac84:	4680      	mov	r8, r0
 800ac86:	4614      	mov	r4, r2
 800ac88:	460e      	mov	r6, r1
 800ac8a:	b921      	cbnz	r1, 800ac96 <_realloc_r+0x16>
 800ac8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac90:	4611      	mov	r1, r2
 800ac92:	f7ff bc2b 	b.w	800a4ec <_malloc_r>
 800ac96:	b92a      	cbnz	r2, 800aca4 <_realloc_r+0x24>
 800ac98:	f7ff fbbc 	bl	800a414 <_free_r>
 800ac9c:	4625      	mov	r5, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	f000 f81b 	bl	800acde <_malloc_usable_size_r>
 800aca8:	4284      	cmp	r4, r0
 800acaa:	4607      	mov	r7, r0
 800acac:	d802      	bhi.n	800acb4 <_realloc_r+0x34>
 800acae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acb2:	d812      	bhi.n	800acda <_realloc_r+0x5a>
 800acb4:	4621      	mov	r1, r4
 800acb6:	4640      	mov	r0, r8
 800acb8:	f7ff fc18 	bl	800a4ec <_malloc_r>
 800acbc:	4605      	mov	r5, r0
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d0ed      	beq.n	800ac9e <_realloc_r+0x1e>
 800acc2:	42bc      	cmp	r4, r7
 800acc4:	4622      	mov	r2, r4
 800acc6:	4631      	mov	r1, r6
 800acc8:	bf28      	it	cs
 800acca:	463a      	movcs	r2, r7
 800accc:	f7ff ffb0 	bl	800ac30 <memcpy>
 800acd0:	4631      	mov	r1, r6
 800acd2:	4640      	mov	r0, r8
 800acd4:	f7ff fb9e 	bl	800a414 <_free_r>
 800acd8:	e7e1      	b.n	800ac9e <_realloc_r+0x1e>
 800acda:	4635      	mov	r5, r6
 800acdc:	e7df      	b.n	800ac9e <_realloc_r+0x1e>

0800acde <_malloc_usable_size_r>:
 800acde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace2:	1f18      	subs	r0, r3, #4
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	bfbc      	itt	lt
 800ace8:	580b      	ldrlt	r3, [r1, r0]
 800acea:	18c0      	addlt	r0, r0, r3
 800acec:	4770      	bx	lr
	...

0800acf0 <_init>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	bf00      	nop
 800acf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf6:	bc08      	pop	{r3}
 800acf8:	469e      	mov	lr, r3
 800acfa:	4770      	bx	lr

0800acfc <_fini>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr
