
F446RE_NODO_GRABA_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800bb7c  0800bb7c  0001bb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcd8  0800bcd8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcd8  0800bcd8  0001bcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bce0  0800bce0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bce0  0800bce0  0001bce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bce4  0800bce4  0001bce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000074  0800bd5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800bd5c  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ad6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003486  00000000  00000000  00037b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b22  00000000  00000000  0003d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aab4  00000000  00000000  000630d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4ed7  00000000  00000000  0007db86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152a5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  00152ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb64 	.word	0x0800bb64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800bb64 	.word	0x0800bb64

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AIC3254_Init>:

/*
 * INIZIALIZE
 */

uint8_t AIC3254_Init(AIC3254_t *dev, I2C_HandleTypeDef *i2cHandle) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev->i2cHandle = i2cHandle;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	601a      	str	r2, [r3, #0]
	 * Set Stereo ADC with 48ksps Sample Rate and High Performance
	 */

	/* Initialize to Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f91e 	bl	800082a <AIC3254_SendCommand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <AIC3254_Init+0x2a>
 80005f8:	2001      	movs	r0, #1
 80005fa:	f00a fdf5 	bl	800b1e8 <exit>

	/* S/W Reset to initialize all registers */

	status = AIC3254_SendCommand(dev, SW_RESET, 0x01);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f911 	bl	800082a <AIC3254_SendCommand>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <AIC3254_Init+0x44>
 8000612:	2001      	movs	r0, #1
 8000614:	f00a fde8 	bl	800b1e8 <exit>

	/* Power up NADC divider with value 1 */

	status = AIC3254_SendCommand(dev, CSR_8, 0x81);
 8000618:	2281      	movs	r2, #129	; 0x81
 800061a:	2112      	movs	r1, #18
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f904 	bl	800082a <AIC3254_SendCommand>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <AIC3254_Init+0x5e>
 800062c:	2001      	movs	r0, #1
 800062e:	f00a fddb 	bl	800b1e8 <exit>

	/* Power up MADC divider with value 2 */

	status = AIC3254_SendCommand(dev, CSR_9, 0x82);
 8000632:	2282      	movs	r2, #130	; 0x82
 8000634:	2113      	movs	r1, #19
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f8f7 	bl	800082a <AIC3254_SendCommand>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <AIC3254_Init+0x78>
 8000646:	2001      	movs	r0, #1
 8000648:	f00a fdce 	bl	800b1e8 <exit>

	/* Program OSR for ADC to 128 */

	status = AIC3254_SendCommand(dev, AOSR, 0x80);
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	2114      	movs	r1, #20
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f8ea 	bl	800082a <AIC3254_SendCommand>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <AIC3254_Init+0x92>
 8000660:	2001      	movs	r0, #1
 8000662:	f00a fdc1 	bl	800b1e8 <exit>

	/* Select ADC PRB_R1 */

	status = AIC3254_SendCommand(dev, PBCR, 0x01);
 8000666:	2201      	movs	r2, #1
 8000668:	213d      	movs	r1, #61	; 0x3d
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f8dd 	bl	800082a <AIC3254_SendCommand>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <AIC3254_Init+0xac>
 800067a:	2001      	movs	r0, #1
 800067c:	f00a fdb4 	bl	800b1e8 <exit>

	/* Select Page 1 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_1);
 8000680:	2201      	movs	r2, #1
 8000682:	2100      	movs	r1, #0
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f8d0 	bl	800082a <AIC3254_SendCommand>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <AIC3254_Init+0xc6>
 8000694:	2001      	movs	r0, #1
 8000696:	f00a fda7 	bl	800b1e8 <exit>

	/* Disable Internal Crude AVdd in presence of external AVdd supply or before
	 * powering up internal AVdd LDO
	 */

	status = AIC3254_SendCommand(dev, POW_CONF, 0x08);
 800069a:	2208      	movs	r2, #8
 800069c:	2101      	movs	r1, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f8c3 	bl	800082a <AIC3254_SendCommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <AIC3254_Init+0xe0>
 80006ae:	2001      	movs	r0, #1
 80006b0:	f00a fd9a 	bl	800b1e8 <exit>

	/* Enable Master Analog Power Control */

	status = AIC3254_SendCommand(dev, LDO_CR, 0x00);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2102      	movs	r1, #2
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f8b6 	bl	800082a <AIC3254_SendCommand>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <AIC3254_Init+0xfa>
 80006c8:	2001      	movs	r0, #1
 80006ca:	f00a fd8d 	bl	800b1e8 <exit>

	/* Set the input common mode to 0.9V */

	status = AIC3254_SendCommand(dev, CMM_CR, 0x00);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210a      	movs	r1, #10
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8a9 	bl	800082a <AIC3254_SendCommand>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <AIC3254_Init+0x114>
 80006e2:	2001      	movs	r0, #1
 80006e4:	f00a fd80 	bl	800b1e8 <exit>

	/* Select ADC PTM_R4 */

	status = AIC3254_SendCommand(dev, POW_TUN, 0x00);
 80006e8:	2200      	movs	r2, #0
 80006ea:	213d      	movs	r1, #61	; 0x3d
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f89c 	bl	800082a <AIC3254_SendCommand>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <AIC3254_Init+0x12e>
 80006fc:	2001      	movs	r0, #1
 80006fe:	f00a fd73 	bl	800b1e8 <exit>

	/* Set MicPGA startup delay to 3.1ms */

	status = AIC3254_SendCommand(dev, AIQC_CR, 0x32);
 8000702:	2232      	movs	r2, #50	; 0x32
 8000704:	2147      	movs	r1, #71	; 0x47
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f88f 	bl	800082a <AIC3254_SendCommand>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <AIC3254_Init+0x148>
 8000716:	2001      	movs	r0, #1
 8000718:	f00a fd66 	bl	800b1e8 <exit>

	/* Set the REF charging time to 40ms */

	status = AIC3254_SendCommand(dev, REF_POW_CR, 0x01);
 800071c:	2201      	movs	r2, #1
 800071e:	217b      	movs	r1, #123	; 0x7b
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f882 	bl	800082a <AIC3254_SendCommand>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <AIC3254_Init+0x162>
 8000730:	2001      	movs	r0, #1
 8000732:	f00a fd59 	bl	800b1e8 <exit>

	/* Route IN1L to LEFT_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, LROUTE_PCR, 0x80);
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	2134      	movs	r1, #52	; 0x34
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f875 	bl	800082a <AIC3254_SendCommand>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <AIC3254_Init+0x17c>
 800074a:	2001      	movs	r0, #1
 800074c:	f00a fd4c 	bl	800b1e8 <exit>

	/* Route Common Mode to LEFT_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, LROUTE_NCR, 0x80);
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	2136      	movs	r1, #54	; 0x36
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f868 	bl	800082a <AIC3254_SendCommand>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <AIC3254_Init+0x196>
 8000764:	2001      	movs	r0, #1
 8000766:	f00a fd3f 	bl	800b1e8 <exit>

	/* Route IN1R to Right_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, RROUTE_PCR, 0x80);
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	2137      	movs	r1, #55	; 0x37
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f85b 	bl	800082a <AIC3254_SendCommand>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <AIC3254_Init+0x1b0>
 800077e:	2001      	movs	r0, #1
 8000780:	f00a fd32 	bl	800b1e8 <exit>

	/* Route Common Mode to Right_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, RROUTE_NCR, 0x80);
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	2139      	movs	r1, #57	; 0x39
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f84e 	bl	800082a <AIC3254_SendCommand>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <AIC3254_Init+0x1ca>
 8000798:	2001      	movs	r0, #1
 800079a:	f00a fd25 	bl	800b1e8 <exit>

	/* Unmute Left MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, LVOLUME_CR, 0x0c);
 800079e:	220c      	movs	r2, #12
 80007a0:	213b      	movs	r1, #59	; 0x3b
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f841 	bl	800082a <AIC3254_SendCommand>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <AIC3254_Init+0x1e4>
 80007b2:	2001      	movs	r0, #1
 80007b4:	f00a fd18 	bl	800b1e8 <exit>

	/* Unmute Right MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, RVOLUME_CR, 0x0c);
 80007b8:	220c      	movs	r2, #12
 80007ba:	213c      	movs	r1, #60	; 0x3c
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f834 	bl	800082a <AIC3254_SendCommand>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <AIC3254_Init+0x1fe>
 80007cc:	2001      	movs	r0, #1
 80007ce:	f00a fd0b 	bl	800b1e8 <exit>

	/* Select Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f827 	bl	800082a <AIC3254_SendCommand>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <AIC3254_Init+0x218>
 80007e6:	2001      	movs	r0, #1
 80007e8:	f00a fcfe 	bl	800b1e8 <exit>

	/* Power up Left and Right ADC Channels */

	status = AIC3254_SendCommand(dev, CH_SETUP, 0xc0);
 80007ec:	22c0      	movs	r2, #192	; 0xc0
 80007ee:	2151      	movs	r1, #81	; 0x51
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f81a 	bl	800082a <AIC3254_SendCommand>
 80007f6:	4603      	mov	r3, r0
 80007f8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <AIC3254_Init+0x232>
 8000800:	2001      	movs	r0, #1
 8000802:	f00a fcf1 	bl	800b1e8 <exit>

	/* Unmute Left and Right ADC Digital Volume Control */

	status = AIC3254_SendCommand(dev, CH_GAIN, 0x00);
 8000806:	2200      	movs	r2, #0
 8000808:	2152      	movs	r1, #82	; 0x52
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f80d 	bl	800082a <AIC3254_SendCommand>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <AIC3254_Init+0x24c>
 800081a:	2001      	movs	r0, #1
 800081c:	f00a fce4 	bl	800b1e8 <exit>

	return status;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <AIC3254_SendCommand>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef AIC3254_SendCommand(AIC3254_t *dev, uint8_t Register, uint8_t Data) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af04      	add	r7, sp, #16
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	460b      	mov	r3, r1
 8000834:	70fb      	strb	r3, [r7, #3]
 8000836:	4613      	mov	r3, r2
 8000838:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, AIC3254_I2C_ADDR , Register, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	b29a      	uxth	r2, r3
 8000842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	2301      	movs	r3, #1
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	1cbb      	adds	r3, r7, #2
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	2130      	movs	r1, #48	; 0x30
 8000854:	f002 f950 	bl	8002af8 <HAL_I2C_Mem_Write>
 8000858:	4603      	mov	r3, r0

}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0c2      	sub	sp, #264	; 0x108
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f001 f85b 	bl	8001924 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f8b9 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 fa1d 	bl	8000cb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000876:	f000 f9dd 	bl	8000c34 <MX_DMA_Init>
  MX_I2C1_Init();
 800087a:	f000 f933 	bl	8000ae4 <MX_I2C1_Init>
  MX_I2S2_Init();
 800087e:	f000 f95f 	bl	8000b40 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8000882:	f000 f98b 	bl	8000b9c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000886:	f007 fcaf 	bl	80081e8 <MX_FATFS_Init>
  MX_CRC_Init();
 800088a:	f000 f917 	bl	8000abc <MX_CRC_Init>
  MX_USART2_UART_Init();
 800088e:	f000 f9a7 	bl	8000be0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize CODEC */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000898:	4847      	ldr	r0, [pc, #284]	; (80009b8 <main+0x154>)
 800089a:	f001 ffb5 	bl	8002808 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f001 f8b2 	bl	8001a08 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008aa:	4843      	ldr	r0, [pc, #268]	; (80009b8 <main+0x154>)
 80008ac:	f001 ffac 	bl	8002808 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 f8a9 	bl	8001a08 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008bc:	483e      	ldr	r0, [pc, #248]	; (80009b8 <main+0x154>)
 80008be:	f001 ffa3 	bl	8002808 <HAL_GPIO_WritePin>
  AIC3254_Init(&codec, &hi2c1);
 80008c2:	493e      	ldr	r1, [pc, #248]	; (80009bc <main+0x158>)
 80008c4:	483e      	ldr	r0, [pc, #248]	; (80009c0 <main+0x15c>)
 80008c6:	f7ff fe85 	bl	80005d4 <AIC3254_Init>
  /* USER CODE BEGIN WHILE */
  char filename[256];

  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 80008ca:	2201      	movs	r2, #1
 80008cc:	493d      	ldr	r1, [pc, #244]	; (80009c4 <main+0x160>)
 80008ce:	483e      	ldr	r0, [pc, #248]	; (80009c8 <main+0x164>)
 80008d0:	f009 fc7c 	bl	800a1cc <f_mount>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <main+0x168>)
 80008da:	701a      	strb	r2, [r3, #0]
  }
  while( res != FR_OK);
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <main+0x168>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1f2      	bne.n	80008ca <main+0x66>

  do
  {
	  res = Format_SD();
 80008e4:	f000 fbd8 	bl	8001098 <Format_SD>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <main+0x168>)
 80008ee:	701a      	strb	r2, [r3, #0]
  }
  while (res != FR_OK);
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <main+0x168>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f5      	bne.n	80008e4 <main+0x80>

  HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	4935      	ldr	r1, [pc, #212]	; (80009d0 <main+0x16c>)
 80008fc:	4835      	ldr	r0, [pc, #212]	; (80009d4 <main+0x170>)
 80008fe:	f005 ffd5 	bl	80068ac <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	4833      	ldr	r0, [pc, #204]	; (80009d8 <main+0x174>)
 800090a:	f001 ff7d 	bl	8002808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000914:	4830      	ldr	r0, [pc, #192]	; (80009d8 <main+0x174>)
 8000916:	f001 ff77 	bl	8002808 <HAL_GPIO_WritePin>
  do
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800091a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091e:	482e      	ldr	r0, [pc, #184]	; (80009d8 <main+0x174>)
 8000920:	f001 ff8b 	bl	800283a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	482b      	ldr	r0, [pc, #172]	; (80009d8 <main+0x174>)
 800092a:	f001 ff86 	bl	800283a <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 800092e:	2096      	movs	r0, #150	; 0x96
 8000930:	f001 f86a 	bl	8001a08 <HAL_Delay>
  }
  while(audio_state == CONNECTING);
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <main+0x178>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d0ee      	beq.n	800091a <main+0xb6>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <main+0x174>)
 8000944:	f001 ff60 	bl	8002808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094e:	4822      	ldr	r0, [pc, #136]	; (80009d8 <main+0x174>)
 8000950:	f001 ff5a 	bl	8002808 <HAL_GPIO_WritePin>

  for (int i = 0; i < 4; i++)
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800095a:	e012      	b.n	8000982 <main+0x11e>
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800095c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000960:	481d      	ldr	r0, [pc, #116]	; (80009d8 <main+0x174>)
 8000962:	f001 ff6a 	bl	800283a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096a:	481b      	ldr	r0, [pc, #108]	; (80009d8 <main+0x174>)
 800096c:	f001 ff65 	bl	800283a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000970:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000974:	f001 f848 	bl	8001a08 <HAL_Delay>
  for (int i = 0; i < 4; i++)
 8000978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800097c:	3301      	adds	r3, #1
 800097e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000986:	2b03      	cmp	r3, #3
 8000988:	dde8      	ble.n	800095c <main+0xf8>


  uint16_t count;
  while (1)
  {
	  if(audio_state == STATE_START_RECORDING)
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <main+0x178>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d1fb      	bne.n	800098a <main+0x126>
	  {
		  HAL_Delay(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f001 f838 	bl	8001a08 <HAL_Delay>
		  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 8000998:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	f8a7 2102 	strh.w	r2, [r7, #258]	; 0x102
 80009a2:	4638      	mov	r0, r7
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <main+0x160>)
 80009a6:	490e      	ldr	r1, [pc, #56]	; (80009e0 <main+0x17c>)
 80009a8:	f00a fd5e 	bl	800b468 <siprintf>
		  startRecord(filename);
 80009ac:	463b      	mov	r3, r7
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fa9a 	bl	8000ee8 <startRecord>
	  if(audio_state == STATE_START_RECORDING)
 80009b4:	e7e9      	b.n	800098a <main+0x126>
 80009b6:	bf00      	nop
 80009b8:	40020400 	.word	0x40020400
 80009bc:	20000098 	.word	0x20000098
 80009c0:	2000031c 	.word	0x2000031c
 80009c4:	20000b54 	.word	0x20000b54
 80009c8:	20000b58 	.word	0x20000b58
 80009cc:	20000b28 	.word	0x20000b28
 80009d0:	20000b2c 	.word	0x20000b2c
 80009d4:	200002d8 	.word	0x200002d8
 80009d8:	40020000 	.word	0x40020000
 80009dc:	20000002 	.word	0x20000002
 80009e0:	0800bb7c 	.word	0x0800bb7c

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2234      	movs	r2, #52	; 0x34
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00a fc40 	bl	800b278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a54:	2308      	movs	r3, #8
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a58:	23a8      	movs	r3, #168	; 0xa8
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a60:	2307      	movs	r3, #7
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 f813 	bl	8004a98 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a78:	f000 fba2 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2302      	movs	r3, #2
 8000a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2105      	movs	r1, #5
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 ff48 	bl	8003930 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aa6:	f000 fb8b 	bl	80011c0 <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	; 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_CRC_Init+0x20>)
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <MX_CRC_Init+0x24>)
 8000ac4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_CRC_Init+0x20>)
 8000ac8:	f001 f8d3 	bl	8001c72 <HAL_CRC_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ad2:	f000 fb75 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000090 	.word	0x20000090
 8000ae0:	40023000 	.word	0x40023000

08000ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b22:	f001 fea5 	bl	8002870 <HAL_I2C_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f000 fb48 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000098 	.word	0x20000098
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b46:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <MX_I2S2_Init+0x58>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b50:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b64:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b68:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000b6c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_I2S2_Init+0x54>)
 8000b82:	f002 fad1 	bl	8003128 <HAL_I2S_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000b8c:	f000 fb18 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000ec 	.word	0x200000ec
 8000b98:	40003800 	.word	0x40003800

08000b9c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MX_SDIO_SD_Init+0x3c>)
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <MX_SDIO_SD_Init+0x40>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_SDIO_SD_Init+0x3c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_SDIO_SD_Init+0x3c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_SDIO_SD_Init+0x3c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_SDIO_SD_Init+0x3c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_SDIO_SD_Init+0x3c>)
 8000bc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <MX_SDIO_SD_Init+0x3c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000194 	.word	0x20000194
 8000bdc:	40012c00 	.word	0x40012c00

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_USART2_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c18:	f005 fdfb 	bl	8006812 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c22:	f000 facd 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200002d8 	.word	0x200002d8
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_DMA_Init+0x78>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <MX_DMA_Init+0x78>)
 8000c44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_DMA_Init+0x78>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_DMA_Init+0x78>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <MX_DMA_Init+0x78>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_DMA_Init+0x78>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200e      	movs	r0, #14
 8000c78:	f000 ffc5 	bl	8001c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c7c:	200e      	movs	r0, #14
 8000c7e:	f000 ffde 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	203b      	movs	r0, #59	; 0x3b
 8000c88:	f000 ffbd 	bl	8001c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c8c:	203b      	movs	r0, #59	; 0x3b
 8000c8e:	f000 ffd6 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2045      	movs	r0, #69	; 0x45
 8000c98:	f000 ffb5 	bl	8001c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c9c:	2045      	movs	r0, #69	; 0x45
 8000c9e:	f000 ffce 	bl	8001c3e <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a3e      	ldr	r2, [pc, #248]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a37      	ldr	r2, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d5a:	f001 fd55 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d64:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d66:	f001 fd4f 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d84:	f001 fb94 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_SDIO_API_Pin */
  GPIO_InitStruct.Pin = BSP_SDIO_API_Pin;
 8000d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_SDIO_API_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d9e:	f001 fb87 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000dbc:	f001 fb78 	bl	80024b0 <HAL_GPIO_Init>

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_I2S_RxCpltCallback>:
	f_close(&fout);
	f_close(&fin);
}


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint8_t rcvCplt = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
	uint16_t* rpt, *wpt, *temppt;

	rCount++;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_I2S_RxCpltCallback+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_I2S_RxCpltCallback+0x40>)
 8000de8:	6013      	str	r3, [r2, #0]
	rpt = (rcvBuf)+(rCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_I2S_RxCpltCallback+0x40>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <HAL_I2S_RxCpltCallback+0x44>)
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_I2S_RxCpltCallback+0x48>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	60bb      	str	r3, [r7, #8]
	HAL_I2S_Receive_DMA(hi2s, rpt, DMA_READ_SIZE);
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f002 fa86 	bl	8003318 <HAL_I2S_Receive_DMA>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000b20 	.word	0x20000b20
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000320 	.word	0x20000320

08000e20 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	; 0x38
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	807b      	strh	r3, [r7, #2]
 8000e32:	460b      	mov	r3, r1
 8000e34:	707b      	strb	r3, [r7, #1]
 8000e36:	4613      	mov	r3, r2
 8000e38:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000e3a:	2352      	movs	r3, #82	; 0x52
 8000e3c:	723b      	strb	r3, [r7, #8]
 8000e3e:	2349      	movs	r3, #73	; 0x49
 8000e40:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000e42:	2346      	movs	r3, #70	; 0x46
 8000e44:	72bb      	strb	r3, [r7, #10]
 8000e46:	2346      	movs	r3, #70	; 0x46
 8000e48:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000e4e:	2357      	movs	r3, #87	; 0x57
 8000e50:	743b      	strb	r3, [r7, #16]
 8000e52:	2341      	movs	r3, #65	; 0x41
 8000e54:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000e56:	2356      	movs	r3, #86	; 0x56
 8000e58:	74bb      	strb	r3, [r7, #18]
 8000e5a:	2345      	movs	r3, #69	; 0x45
 8000e5c:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000e5e:	2366      	movs	r3, #102	; 0x66
 8000e60:	753b      	strb	r3, [r7, #20]
 8000e62:	236d      	movs	r3, #109	; 0x6d
 8000e64:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000e66:	2374      	movs	r3, #116	; 0x74
 8000e68:	75bb      	strb	r3, [r7, #22]
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000e72:	2301      	movs	r3, #1
 8000e74:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000e76:	783b      	ldrb	r3, [r7, #0]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	787a      	ldrb	r2, [r7, #1]
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	783a      	ldrb	r2, [r7, #0]
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da00      	bge.n	8000e94 <fwrite_wav_header+0x74>
 8000e92:	3307      	adds	r3, #7
 8000e94:	10db      	asrs	r3, r3, #3
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000e98:	787b      	ldrb	r3, [r7, #1]
 8000e9a:	783a      	ldrb	r2, [r7, #0]
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	da00      	bge.n	8000ea6 <fwrite_wav_header+0x86>
 8000ea4:	3307      	adds	r3, #7
 8000ea6:	10db      	asrs	r3, r3, #3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000eb8:	2361      	movs	r3, #97	; 0x61
 8000eba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000ebe:	2374      	movs	r3, #116	; 0x74
 8000ec0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000ec4:	2361      	movs	r3, #97	; 0x61
 8000ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ed2:	f107 0108 	add.w	r1, r7, #8
 8000ed6:	222c      	movs	r2, #44	; 0x2c
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f009 fb7b 	bl	800a5d4 <f_write>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3738      	adds	r7, #56	; 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <startRecord>:

void startRecord(char *filename) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000ef4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000ef8:	6018      	str	r0, [r3, #0]
	uint16_t* rpt, *wpt, *temppt;
	UINT bw;
	UINT writeBytes;
	UINT skipCount=125;// skip 0.5 second
 8000efa:	237d      	movs	r3, #125	; 0x7d
 8000efc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	FIL fp;
	FRESULT res;

	writeBytes = DMA_TxRx_SIZE*2;
 8000f00:	4b5e      	ldr	r3, [pc, #376]	; (800107c <startRecord+0x194>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	do
	{
		res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000f0a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000f0e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000f12:	f107 0010 	add.w	r0, r7, #16
 8000f16:	220a      	movs	r2, #10
 8000f18:	6819      	ldr	r1, [r3, #0]
 8000f1a:	f009 f99d 	bl	800a258 <f_open>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
	}
	while(res != FR_OK);
 8000f24:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ee      	bne.n	8000f0a <startRecord+0x22>
	res = fwrite_wav_header(&fp, 48000, 32, 2);
 8000f2c:	f107 0010 	add.w	r0, r7, #16
 8000f30:	2302      	movs	r3, #2
 8000f32:	2220      	movs	r2, #32
 8000f34:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000f38:	f7ff ff72 	bl	8000e20 <fwrite_wav_header>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f48:	484d      	ldr	r0, [pc, #308]	; (8001080 <startRecord+0x198>)
 8000f4a:	f001 fc5d 	bl	8002808 <HAL_GPIO_WritePin>
	audio_state = STATE_RECORDING;
 8000f4e:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <startRecord+0x19c>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
	rpt = rcvBuf;
 8000f54:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <startRecord+0x1a0>)
 8000f56:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	wpt = rpt;
 8000f5a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000f5e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	rCount=0; wCount=0;
 8000f62:	4b4a      	ldr	r3, [pc, #296]	; (800108c <startRecord+0x1a4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <startRecord+0x1a8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
	HAL_I2S_Receive_DMA(&hi2s2, rpt, DMA_READ_SIZE);
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000f74:	4847      	ldr	r0, [pc, #284]	; (8001094 <startRecord+0x1ac>)
 8000f76:	f002 f9cf 	bl	8003318 <HAL_I2S_Receive_DMA>

	while (1)
	{
		if (wCount < rCount ) {
 8000f7a:	4b45      	ldr	r3, [pc, #276]	; (8001090 <startRecord+0x1a8>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b43      	ldr	r3, [pc, #268]	; (800108c <startRecord+0x1a4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d224      	bcs.n	8000fd0 <startRecord+0xe8>
			if (rCount > skipCount)
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <startRecord+0x1a4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d20c      	bcs.n	8000fac <startRecord+0xc4>
			{
				res = f_write(&fp, wpt, writeBytes, &bw);
 8000f92:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f96:	f107 0010 	add.w	r0, r7, #16
 8000f9a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000f9e:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000fa2:	f009 fb17 	bl	800a5d4 <f_write>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
			}
			 wCount++;
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <startRecord+0x1a8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a37      	ldr	r2, [pc, #220]	; (8001090 <startRecord+0x1a8>)
 8000fb4:	6013      	str	r3, [r2, #0]
			 wpt = (rcvBuf)+(wCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <startRecord+0x1a8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <startRecord+0x194>)
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <startRecord+0x1a0>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		  }

		  if (audio_state == STATE_STOP || rCount > MAX_DMA_ACCESS_COUNT)
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <startRecord+0x19c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d004      	beq.n	8000fe2 <startRecord+0xfa>
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <startRecord+0x1a4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000fe0:	d9cb      	bls.n	8000f7a <startRecord+0x92>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 8000fe2:	482c      	ldr	r0, [pc, #176]	; (8001094 <startRecord+0x1ac>)
 8000fe4:	f002 fa54 	bl	8003490 <HAL_I2S_DMAStop>
			  break;
 8000fe8:	bf00      	nop
		  }
	}
	uint32_t data_len = (wCount-1) * writeBytes;
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <startRecord+0x1a8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000ff4:	fb03 f202 	mul.w	r2, r3, r2
 8000ff8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000ffc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001000:	601a      	str	r2, [r3, #0]
	uint32_t total_len = data_len+36;
 8001002:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001006:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001010:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001014:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001018:	601a      	str	r2, [r3, #0]
	f_lseek(&fp, 4);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	2104      	movs	r1, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f009 fcf4 	bl	800aa0e <f_lseek>
	f_write(&fp, (uint8_t*)&total_len, 4, &bw);
 8001026:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800102a:	f107 0108 	add.w	r1, r7, #8
 800102e:	f107 0010 	add.w	r0, r7, #16
 8001032:	2204      	movs	r2, #4
 8001034:	f009 face 	bl	800a5d4 <f_write>
	f_lseek(&fp, 40);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2128      	movs	r1, #40	; 0x28
 800103e:	4618      	mov	r0, r3
 8001040:	f009 fce5 	bl	800aa0e <f_lseek>
	f_write(&fp, (uint8_t*)&data_len, 4, &bw);
 8001044:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001048:	f107 010c 	add.w	r1, r7, #12
 800104c:	f107 0010 	add.w	r0, r7, #16
 8001050:	2204      	movs	r2, #4
 8001052:	f009 fabf 	bl	800a5d4 <f_write>
	f_close(&fp);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4618      	mov	r0, r3
 800105c:	f009 fcad 	bl	800a9ba <f_close>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <startRecord+0x198>)
 8001068:	f001 fbce 	bl	8002808 <HAL_GPIO_WritePin>
	audio_state = STATE_STOP;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <startRecord+0x19c>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	40020000 	.word	0x40020000
 8001084:	20000002 	.word	0x20000002
 8001088:	20000320 	.word	0x20000320
 800108c:	20000b20 	.word	0x20000b20
 8001090:	20000b24 	.word	0x20000b24
 8001094:	200000ec 	.word	0x200000ec

08001098 <Format_SD>:

FRESULT Format_SD (void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08e      	sub	sp, #56	; 0x38
 800109c:	af00      	add	r7, sp, #0
    DIR dir;
    static FILINFO fno;
    static FRESULT fresult;

    char *path = malloc(20*sizeof (char));
 800109e:	2014      	movs	r0, #20
 80010a0:	f00a f8da 	bl	800b258 <malloc>
 80010a4:	4603      	mov	r3, r0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010a8:	4a28      	ldr	r2, [pc, #160]	; (800114c <Format_SD+0xb4>)
 80010aa:	4929      	ldr	r1, [pc, #164]	; (8001150 <Format_SD+0xb8>)
 80010ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010ae:	f00a f9db 	bl	800b468 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	4618      	mov	r0, r3
 80010b8:	f009 feb2 	bl	800ae20 <f_opendir>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <Format_SD+0xbc>)
 80010c2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <Format_SD+0xbc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d136      	bne.n	800113a <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4922      	ldr	r1, [pc, #136]	; (8001158 <Format_SD+0xc0>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 ff3e 	bl	800af52 <f_readdir>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <Format_SD+0xbc>)
 80010dc:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <Format_SD+0xbc>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d125      	bne.n	8001132 <Format_SD+0x9a>
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <Format_SD+0xc0>)
 80010e8:	7a5b      	ldrb	r3, [r3, #9]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d021      	beq.n	8001132 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <Format_SD+0xc0>)
 80010f0:	7a1b      	ldrb	r3, [r3, #8]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d011      	beq.n	800111e <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80010fa:	4918      	ldr	r1, [pc, #96]	; (800115c <Format_SD+0xc4>)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <Format_SD+0xc8>)
 80010fe:	f7ff f887 	bl	8000210 <strcmp>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d012      	beq.n	800112e <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8001108:	4814      	ldr	r0, [pc, #80]	; (800115c <Format_SD+0xc4>)
 800110a:	f009 ff5f 	bl	800afcc <f_unlink>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Format_SD+0xbc>)
 8001114:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <Format_SD+0xbc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b07      	cmp	r3, #7
 800111c:	e7d6      	b.n	80010cc <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <Format_SD+0xc4>)
 8001120:	f009 ff54 	bl	800afcc <f_unlink>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <Format_SD+0xbc>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e7ce      	b.n	80010cc <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800112e:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001130:	e7cc      	b.n	80010cc <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f009 fee6 	bl	800af06 <f_closedir>
    }
    free(path);
 800113a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800113c:	f00a f894 	bl	800b268 <free>
    return fresult;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <Format_SD+0xbc>)
 8001142:	781b      	ldrb	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3738      	adds	r7, #56	; 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	0800bb94 	.word	0x0800bb94
 8001150:	0800bb98 	.word	0x0800bb98
 8001154:	20000b2d 	.word	0x20000b2d
 8001158:	20000b30 	.word	0x20000b30
 800115c:	20000b39 	.word	0x20000b39
 8001160:	0800bb9c 	.word	0x0800bb9c

08001164 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

	switch (RX_data[0])
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_UART_RxCpltCallback+0x50>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b50      	cmp	r3, #80	; 0x50
 8001172:	d009      	beq.n	8001188 <HAL_UART_RxCpltCallback+0x24>
 8001174:	2b50      	cmp	r3, #80	; 0x50
 8001176:	dc0f      	bgt.n	8001198 <HAL_UART_RxCpltCallback+0x34>
 8001178:	2b2e      	cmp	r3, #46	; 0x2e
 800117a:	d009      	beq.n	8001190 <HAL_UART_RxCpltCallback+0x2c>
 800117c:	2b47      	cmp	r3, #71	; 0x47
 800117e:	d10b      	bne.n	8001198 <HAL_UART_RxCpltCallback+0x34>
	{
	case 'G':
		audio_state = STATE_START_RECORDING;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_UART_RxCpltCallback+0x54>)
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
		break;
 8001186:	e00b      	b.n	80011a0 <HAL_UART_RxCpltCallback+0x3c>
	case 'P':
		audio_state = STATE_STOP;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_UART_RxCpltCallback+0x54>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
		break;
 800118e:	e007      	b.n	80011a0 <HAL_UART_RxCpltCallback+0x3c>
	case '.':
		audio_state = CONNECTING;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_UART_RxCpltCallback+0x54>)
 8001192:	2204      	movs	r2, #4
 8001194:	701a      	strb	r2, [r3, #0]
		break;
 8001196:	e003      	b.n	80011a0 <HAL_UART_RxCpltCallback+0x3c>
	default:
		audio_state = STATE_STOP;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_UART_RxCpltCallback+0x54>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
		break;
 800119e:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	4904      	ldr	r1, [pc, #16]	; (80011b4 <HAL_UART_RxCpltCallback+0x50>)
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_UART_RxCpltCallback+0x58>)
 80011a6:	f005 fb81 	bl	80068ac <HAL_UART_Receive_IT>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000b2c 	.word	0x20000b2c
 80011b8:	20000002 	.word	0x20000002
 80011bc:	200002d8 	.word	0x200002d8

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_CRC_MspInit+0x3c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10d      	bne.n	800124a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_CRC_MspInit+0x40>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_CRC_MspInit+0x40>)
 8001238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_CRC_MspInit+0x40>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023000 	.word	0x40023000
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_I2C_MspInit+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12b      	bne.n	80012da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129e:	23c0      	movs	r3, #192	; 0xc0
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a2:	2312      	movs	r3, #18
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ae:	2304      	movs	r3, #4
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <HAL_I2C_MspInit+0x8c>)
 80012ba:	f001 f8f9 	bl	80024b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 80012c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40005400 	.word	0x40005400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400

080012f0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0a2      	sub	sp, #136	; 0x88
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	225c      	movs	r2, #92	; 0x5c
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f009 ffb1 	bl	800b278 <memset>
  if(hi2s->Instance==SPI2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a50      	ldr	r2, [pc, #320]	; (800145c <HAL_I2S_MspInit+0x16c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	f040 8098 	bne.w	8001452 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8001322:	2301      	movs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001326:	2332      	movs	r3, #50	; 0x32
 8001328:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800132a:	2302      	movs	r3, #2
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 800132e:	2308      	movs	r3, #8
 8001330:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001332:	2302      	movs	r3, #2
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800133e:	2300      	movs	r3, #0
 8001340:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fc0c 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8001352:	f7ff ff35 	bl	80011c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_I2S_MspInit+0x170>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a40      	ldr	r2, [pc, #256]	; (8001460 <HAL_I2S_MspInit+0x170>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <HAL_I2S_MspInit+0x170>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_I2S_MspInit+0x170>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a39      	ldr	r2, [pc, #228]	; (8001460 <HAL_I2S_MspInit+0x170>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_I2S_MspInit+0x170>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_I2S_MspInit+0x170>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_I2S_MspInit+0x170>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_I2S_MspInit+0x170>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80013aa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80013ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013be:	2305      	movs	r3, #5
 80013c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013c8:	4619      	mov	r1, r3
 80013ca:	4826      	ldr	r0, [pc, #152]	; (8001464 <HAL_I2S_MspInit+0x174>)
 80013cc:	f001 f870 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013e2:	2305      	movs	r3, #5
 80013e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013ec:	4619      	mov	r1, r3
 80013ee:	481e      	ldr	r0, [pc, #120]	; (8001468 <HAL_I2S_MspInit+0x178>)
 80013f0:	f001 f85e 	bl	80024b0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_I2S_MspInit+0x17c>)
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_I2S_MspInit+0x180>)
 80013f8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <HAL_I2S_MspInit+0x17c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <HAL_I2S_MspInit+0x17c>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_I2S_MspInit+0x17c>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <HAL_I2S_MspInit+0x17c>)
 800140e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001412:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_I2S_MspInit+0x17c>)
 8001416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800141a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_I2S_MspInit+0x17c>)
 800141e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001422:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_I2S_MspInit+0x17c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_I2S_MspInit+0x17c>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_I2S_MspInit+0x17c>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <HAL_I2S_MspInit+0x17c>)
 8001438:	f000 fc38 	bl	8001cac <HAL_DMA_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001442:	f7ff febd 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_I2S_MspInit+0x17c>)
 800144a:	63da      	str	r2, [r3, #60]	; 0x3c
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_I2S_MspInit+0x17c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3788      	adds	r7, #136	; 0x88
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40003800 	.word	0x40003800
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	20000134 	.word	0x20000134
 8001470:	40026058 	.word	0x40026058

08001474 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0a2      	sub	sp, #136	; 0x88
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	225c      	movs	r2, #92	; 0x5c
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f009 feef 	bl	800b278 <memset>
  if(hsd->Instance==SDIO)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7d      	ldr	r2, [pc, #500]	; (8001694 <HAL_SD_MspInit+0x220>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f040 80f3 	bne.w	800168c <HAL_SD_MspInit+0x218>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80014a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80014ac:	2300      	movs	r3, #0
 80014ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80014b0:	2300      	movs	r3, #0
 80014b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fb53 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80014c4:	f7ff fe7c 	bl	80011c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	4b72      	ldr	r3, [pc, #456]	; (8001698 <HAL_SD_MspInit+0x224>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	4a71      	ldr	r2, [pc, #452]	; (8001698 <HAL_SD_MspInit+0x224>)
 80014d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d6:	6453      	str	r3, [r2, #68]	; 0x44
 80014d8:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <HAL_SD_MspInit+0x224>)
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <HAL_SD_MspInit+0x224>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4a6a      	ldr	r2, [pc, #424]	; (8001698 <HAL_SD_MspInit+0x224>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6313      	str	r3, [r2, #48]	; 0x30
 80014f4:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_SD_MspInit+0x224>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_SD_MspInit+0x224>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a63      	ldr	r2, [pc, #396]	; (8001698 <HAL_SD_MspInit+0x224>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b61      	ldr	r3, [pc, #388]	; (8001698 <HAL_SD_MspInit+0x224>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800151c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001520:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001530:	230c      	movs	r3, #12
 8001532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001536:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800153a:	4619      	mov	r1, r3
 800153c:	4857      	ldr	r0, [pc, #348]	; (800169c <HAL_SD_MspInit+0x228>)
 800153e:	f000 ffb7 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001546:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154c:	2301      	movs	r3, #1
 800154e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001556:	230c      	movs	r3, #12
 8001558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001560:	4619      	mov	r1, r3
 8001562:	484e      	ldr	r0, [pc, #312]	; (800169c <HAL_SD_MspInit+0x228>)
 8001564:	f000 ffa4 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001568:	2304      	movs	r3, #4
 800156a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800157a:	230c      	movs	r3, #12
 800157c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001584:	4619      	mov	r1, r3
 8001586:	4846      	ldr	r0, [pc, #280]	; (80016a0 <HAL_SD_MspInit+0x22c>)
 8001588:	f000 ff92 	bl	80024b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800158c:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <HAL_SD_MspInit+0x230>)
 800158e:	4a46      	ldr	r2, [pc, #280]	; (80016a8 <HAL_SD_MspInit+0x234>)
 8001590:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001592:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <HAL_SD_MspInit+0x230>)
 8001594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001598:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <HAL_SD_MspInit+0x230>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a0:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015c0:	2220      	movs	r2, #32
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015ce:	2204      	movs	r2, #4
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015d4:	2203      	movs	r2, #3
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80015e8:	482e      	ldr	r0, [pc, #184]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015ea:	f000 fb5f 	bl	8001cac <HAL_DMA_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_SD_MspInit+0x184>
    {
      Error_Handler();
 80015f4:	f7ff fde4 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <HAL_SD_MspInit+0x230>)
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <HAL_SD_MspInit+0x230>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_SD_MspInit+0x23c>)
 8001608:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <HAL_SD_MspInit+0x238>)
 800160c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001610:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001614:	2240      	movs	r2, #64	; 0x40
 8001616:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_SD_MspInit+0x238>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001624:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800162c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001630:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001634:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001638:	2220      	movs	r2, #32
 800163a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_SD_MspInit+0x238>)
 800163e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001642:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001646:	2204      	movs	r2, #4
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_SD_MspInit+0x238>)
 800164c:	2203      	movs	r2, #3
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001652:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_SD_MspInit+0x238>)
 800165a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001662:	f000 fb23 	bl	8001cac <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_SD_MspInit+0x1fc>
    {
      Error_Handler();
 800166c:	f7ff fda8 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
 8001676:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_SD_MspInit+0x238>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2031      	movs	r0, #49	; 0x31
 8001682:	f000 fac0 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001686:	2031      	movs	r0, #49	; 0x31
 8001688:	f000 fad9 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	3788      	adds	r7, #136	; 0x88
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	20000218 	.word	0x20000218
 80016a8:	40026458 	.word	0x40026458
 80016ac:	20000278 	.word	0x20000278
 80016b0:	400264a0 	.word	0x400264a0

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_UART_MspInit+0x94>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d133      	bne.n	800173e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_UART_MspInit+0x98>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_UART_MspInit+0x98>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_UART_MspInit+0x98>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_UART_MspInit+0x98>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_UART_MspInit+0x98>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_UART_MspInit+0x98>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800170e:	230c      	movs	r3, #12
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171e:	2307      	movs	r3, #7
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <HAL_UART_MspInit+0x9c>)
 800172a:	f000 fec1 	bl	80024b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2026      	movs	r0, #38	; 0x26
 8001734:	f000 fa67 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001738:	2026      	movs	r0, #38	; 0x26
 800173a:	f000 fa80 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40004400 	.word	0x40004400
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f912 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA1_Stream3_IRQHandler+0x10>)
 80017ae:	f000 fc15 	bl	8001fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000134 	.word	0x20000134

080017bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART2_IRQHandler+0x10>)
 80017c2:	f005 f8a3 	bl	800690c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200002d8 	.word	0x200002d8

080017d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <SDIO_IRQHandler+0x10>)
 80017d6:	f004 f811 	bl	80057fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000194 	.word	0x20000194

080017e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <DMA2_Stream3_IRQHandler+0x10>)
 80017ea:	f000 fbf7 	bl	8001fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000218 	.word	0x20000218

080017f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <DMA2_Stream6_IRQHandler+0x10>)
 80017fe:	f000 fbed 	bl	8001fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000278 	.word	0x20000278

0800180c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001816:	f009 fce1 	bl	800b1dc <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
	return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
	while (1) {}		/* Make sure we hang here */
 800183e:	e7fe      	b.n	800183e <_exit+0x12>

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f009 fcb4 	bl	800b1dc <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000b48 	.word	0x20000b48
 80018a8:	20000dd0 	.word	0x20000dd0

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ffd7 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f009 fc87 	bl	800b210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7fe ffaf 	bl	8000864 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001914:	0800bce8 	.word	0x0800bce8
  ldr r2, =_sbss
 8001918:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800191c:	20000dcc 	.word	0x20000dcc

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f94f 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fc38 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f967 	bl	8001c5a <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a4:	f000 f92f 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000004 	.word	0x20000004
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	20000008 	.word	0x20000008

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	20000b4c 	.word	0x20000b4c

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000b4c 	.word	0x20000b4c

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e00e      	b.n	8001ca2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	795b      	ldrb	r3, [r3, #5]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fac1 	bl	800121c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff fe9a 	bl	80019f0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e099      	b.n	8001dfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce8:	e00f      	b.n	8001d0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cea:	f7ff fe81 	bl	80019f0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d908      	bls.n	8001d0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2203      	movs	r2, #3
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e078      	b.n	8001dfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e8      	bne.n	8001cea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <HAL_DMA_Init+0x158>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d107      	bne.n	8001d74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f023 0307 	bic.w	r3, r3, #7
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d117      	bne.n	8001dce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00e      	beq.n	8001dce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fb01 	bl	80023b8 <DMA_CheckFifoParam>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e016      	b.n	8001dfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fab8 	bl	800234c <DMA_CalcBaseAndBitshift>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	223f      	movs	r2, #63	; 0x3f
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	f010803f 	.word	0xf010803f

08001e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_DMA_Start_IT+0x26>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e040      	b.n	8001eb0 <HAL_DMA_Start_IT+0xa8>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d12f      	bne.n	8001ea2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fa4a 	bl	80022f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	223f      	movs	r2, #63	; 0x3f
 8001e62:	409a      	lsls	r2, r3
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0216 	orr.w	r2, r2, #22
 8001e76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0208 	orr.w	r2, r2, #8
 8001e8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e005      	b.n	8001eae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ec6:	f7ff fd93 	bl	80019f0 <HAL_GetTick>
 8001eca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d008      	beq.n	8001eea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e052      	b.n	8001f90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0216 	bic.w	r2, r2, #22
 8001ef8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <HAL_DMA_Abort+0x62>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0208 	bic.w	r2, r2, #8
 8001f28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3a:	e013      	b.n	8001f64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3c:	f7ff fd58 	bl	80019f0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	d90c      	bls.n	8001f64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2203      	movs	r2, #3
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e015      	b.n	8001f90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1e4      	bne.n	8001f3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	223f      	movs	r2, #63	; 0x3f
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d004      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00c      	b.n	8001fd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2205      	movs	r2, #5
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fe8:	4b8e      	ldr	r3, [pc, #568]	; (8002224 <HAL_DMA_IRQHandler+0x248>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a8e      	ldr	r2, [pc, #568]	; (8002228 <HAL_DMA_IRQHandler+0x24c>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	2208      	movs	r2, #8
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01a      	beq.n	8002048 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2208      	movs	r2, #8
 8002036:	409a      	lsls	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2201      	movs	r2, #1
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d012      	beq.n	800207e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	2201      	movs	r2, #1
 800206c:	409a      	lsls	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0202 	orr.w	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2204      	movs	r2, #4
 8002084:	409a      	lsls	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2204      	movs	r2, #4
 80020a2:	409a      	lsls	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f043 0204 	orr.w	r2, r3, #4
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2210      	movs	r2, #16
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d043      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d03c      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2210      	movs	r2, #16
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d018      	beq.n	800211e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d108      	bne.n	800210c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d024      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
 800210a:	e01f      	b.n	800214c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e016      	b.n	800214c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0208 	bic.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	2220      	movs	r2, #32
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 808f 	beq.w	800227c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8087 	beq.w	800227c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2220      	movs	r2, #32
 8002174:	409a      	lsls	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b05      	cmp	r3, #5
 8002184:	d136      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0216 	bic.w	r2, r2, #22
 8002194:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <HAL_DMA_IRQHandler+0x1da>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0208 	bic.w	r2, r2, #8
 80021c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	223f      	movs	r2, #63	; 0x3f
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d07e      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
        }
        return;
 80021f2:	e079      	b.n	80022e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01d      	beq.n	800223e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	2b00      	cmp	r3, #0
 8002216:	d031      	beq.n	800227c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
 8002220:	e02c      	b.n	800227c <HAL_DMA_IRQHandler+0x2a0>
 8002222:	bf00      	nop
 8002224:	20000004 	.word	0x20000004
 8002228:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d023      	beq.n	800227c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e01e      	b.n	800227c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10f      	bne.n	800226c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0210 	bic.w	r2, r2, #16
 800225a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	2b00      	cmp	r3, #0
 8002282:	d032      	beq.n	80022ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d022      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2205      	movs	r2, #5
 8002294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3301      	adds	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d307      	bcc.n	80022c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f2      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x2cc>
 80022c2:	e000      	b.n	80022c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
 80022e6:	e000      	b.n	80022ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80022e8:	bf00      	nop
    }
  }
}
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800230c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d108      	bne.n	8002330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800232e:	e007      	b.n	8002340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3b10      	subs	r3, #16
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <DMA_CalcBaseAndBitshift+0x64>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d909      	bls.n	800238e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	1d1a      	adds	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	; 0x58
 800238c:	e007      	b.n	800239e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	aaaaaaab 	.word	0xaaaaaaab
 80023b4:	0800bc04 	.word	0x0800bc04

080023b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11f      	bne.n	8002412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d856      	bhi.n	8002486 <DMA_CheckFifoParam+0xce>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <DMA_CheckFifoParam+0x28>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	080023f1 	.word	0x080023f1
 80023e4:	08002403 	.word	0x08002403
 80023e8:	080023f1 	.word	0x080023f1
 80023ec:	08002487 	.word	0x08002487
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d046      	beq.n	800248a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e043      	b.n	800248a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240a:	d140      	bne.n	800248e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002410:	e03d      	b.n	800248e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	d121      	bne.n	8002460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d837      	bhi.n	8002492 <DMA_CheckFifoParam+0xda>
 8002422:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <DMA_CheckFifoParam+0x70>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	08002439 	.word	0x08002439
 800242c:	0800243f 	.word	0x0800243f
 8002430:	08002439 	.word	0x08002439
 8002434:	08002451 	.word	0x08002451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      break;
 800243c:	e030      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d025      	beq.n	8002496 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244e:	e022      	b.n	8002496 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002458:	d11f      	bne.n	800249a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800245e:	e01c      	b.n	800249a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d903      	bls.n	800246e <DMA_CheckFifoParam+0xb6>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d003      	beq.n	8002474 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800246c:	e018      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      break;
 8002472:	e015      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00e      	beq.n	800249e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e00b      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      break;
 8002486:	bf00      	nop
 8002488:	e00a      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 800248a:	bf00      	nop
 800248c:	e008      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
 8002490:	e006      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e004      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e002      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800249a:	bf00      	nop
 800249c:	e000      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
    }
  } 
  
  return status; 
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e165      	b.n	8002798 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8154 	bne.w	8002792 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d005      	beq.n	8002502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d130      	bne.n	8002564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0201 	and.w	r2, r3, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b03      	cmp	r3, #3
 800256e:	d017      	beq.n	80025a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d123      	bne.n	80025f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80ae 	beq.w	8002792 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_GPIO_Init+0x300>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a5c      	ldr	r2, [pc, #368]	; (80027b0 <HAL_GPIO_Init+0x300>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b5a      	ldr	r3, [pc, #360]	; (80027b0 <HAL_GPIO_Init+0x300>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_GPIO_Init+0x304>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4f      	ldr	r2, [pc, #316]	; (80027b8 <HAL_GPIO_Init+0x308>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d025      	beq.n	80026ca <HAL_GPIO_Init+0x21a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4e      	ldr	r2, [pc, #312]	; (80027bc <HAL_GPIO_Init+0x30c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <HAL_GPIO_Init+0x216>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4d      	ldr	r2, [pc, #308]	; (80027c0 <HAL_GPIO_Init+0x310>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x212>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4c      	ldr	r2, [pc, #304]	; (80027c4 <HAL_GPIO_Init+0x314>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x20e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4b      	ldr	r2, [pc, #300]	; (80027c8 <HAL_GPIO_Init+0x318>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x20a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4a      	ldr	r2, [pc, #296]	; (80027cc <HAL_GPIO_Init+0x31c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x206>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a49      	ldr	r2, [pc, #292]	; (80027d0 <HAL_GPIO_Init+0x320>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x202>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	; (80027b4 <HAL_GPIO_Init+0x304>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_GPIO_Init+0x324>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_GPIO_Init+0x324>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_GPIO_Init+0x324>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <HAL_GPIO_Init+0x324>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_GPIO_Init+0x324>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002762:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_GPIO_Init+0x324>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <HAL_GPIO_Init+0x324>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278c:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_GPIO_Init+0x324>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae96 	bls.w	80024cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e001      	b.n	80027fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002824:	e003      	b.n	800282e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800284c:	887a      	ldrh	r2, [r7, #2]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	041a      	lsls	r2, r3, #16
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43d9      	mvns	r1, r3
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	400b      	ands	r3, r1
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	619a      	str	r2, [r3, #24]
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e12b      	b.n	8002ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fce2 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2224      	movs	r2, #36	; 0x24
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d4:	f001 f91e 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 80028d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a81      	ldr	r2, [pc, #516]	; (8002ae4 <HAL_I2C_Init+0x274>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d807      	bhi.n	80028f4 <HAL_I2C_Init+0x84>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a80      	ldr	r2, [pc, #512]	; (8002ae8 <HAL_I2C_Init+0x278>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e006      	b.n	8002902 <HAL_I2C_Init+0x92>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a7d      	ldr	r2, [pc, #500]	; (8002aec <HAL_I2C_Init+0x27c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	bf94      	ite	ls
 80028fc:	2301      	movls	r3, #1
 80028fe:	2300      	movhi	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0e7      	b.n	8002ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4a78      	ldr	r2, [pc, #480]	; (8002af0 <HAL_I2C_Init+0x280>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0c9b      	lsrs	r3, r3, #18
 8002914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a6a      	ldr	r2, [pc, #424]	; (8002ae4 <HAL_I2C_Init+0x274>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d802      	bhi.n	8002944 <HAL_I2C_Init+0xd4>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3301      	adds	r3, #1
 8002942:	e009      	b.n	8002958 <HAL_I2C_Init+0xe8>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	4a69      	ldr	r2, [pc, #420]	; (8002af4 <HAL_I2C_Init+0x284>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	3301      	adds	r3, #1
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800296a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	495c      	ldr	r1, [pc, #368]	; (8002ae4 <HAL_I2C_Init+0x274>)
 8002974:	428b      	cmp	r3, r1
 8002976:	d819      	bhi.n	80029ac <HAL_I2C_Init+0x13c>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e59      	subs	r1, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fbb1 f3f3 	udiv	r3, r1, r3
 8002986:	1c59      	adds	r1, r3, #1
 8002988:	f640 73fc 	movw	r3, #4092	; 0xffc
 800298c:	400b      	ands	r3, r1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_I2C_Init+0x138>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e59      	subs	r1, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a6:	e051      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 80029a8:	2304      	movs	r3, #4
 80029aa:	e04f      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d111      	bne.n	80029d8 <HAL_I2C_Init+0x168>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e58      	subs	r0, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	440b      	add	r3, r1
 80029c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e012      	b.n	80029fe <HAL_I2C_Init+0x18e>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	0099      	lsls	r1, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Init+0x196>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e022      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10e      	bne.n	8002a2c <HAL_I2C_Init+0x1bc>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e58      	subs	r0, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	440b      	add	r3, r1
 8002a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a2a:	e00f      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	6809      	ldr	r1, [r1, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6911      	ldr	r1, [r2, #16]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68d2      	ldr	r2, [r2, #12]
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	000186a0 	.word	0x000186a0
 8002ae8:	001e847f 	.word	0x001e847f
 8002aec:	003d08ff 	.word	0x003d08ff
 8002af0:	431bde83 	.word	0x431bde83
 8002af4:	10624dd3 	.word	0x10624dd3

08002af8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b12:	f7fe ff6d 	bl	80019f0 <HAL_GetTick>
 8002b16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	f040 80d9 	bne.w	8002cd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2319      	movs	r3, #25
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	496d      	ldr	r1, [pc, #436]	; (8002ce4 <HAL_I2C_Mem_Write+0x1ec>)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f971 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e0cc      	b.n	8002cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Mem_Write+0x56>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0c5      	b.n	8002cda <HAL_I2C_Mem_Write+0x1e2>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d007      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2221      	movs	r2, #33	; 0x21
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a3a      	ldr	r2, [r7, #32]
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_I2C_Mem_Write+0x1f0>)
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb6:	88f8      	ldrh	r0, [r7, #6]
 8002bb8:	893a      	ldrh	r2, [r7, #8]
 8002bba:	8979      	ldrh	r1, [r7, #10]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f890 	bl	8002cec <I2C_RequestMemoryWrite>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d052      	beq.n	8002c78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e081      	b.n	8002cda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f9f2 	bl	8002fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d107      	bne.n	8002bfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06b      	b.n	8002cda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d11b      	bne.n	8002c78 <HAL_I2C_Mem_Write+0x180>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d017      	beq.n	8002c78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1aa      	bne.n	8002bd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f9de 	bl	8003046 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d107      	bne.n	8002ca8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e016      	b.n	8002cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	00100002 	.word	0x00100002
 8002ce8:	ffff0000 	.word	0xffff0000

08002cec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f878 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3c:	d103      	bne.n	8002d46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e05f      	b.n	8002e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d4a:	897b      	ldrh	r3, [r7, #10]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	492d      	ldr	r1, [pc, #180]	; (8002e14 <I2C_RequestMemoryWrite+0x128>)
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f8b0 	bl	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e04c      	b.n	8002e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	6a39      	ldr	r1, [r7, #32]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f91a 	bl	8002fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d107      	bne.n	8002dae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e02b      	b.n	8002e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002db8:	893b      	ldrh	r3, [r7, #8]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	611a      	str	r2, [r3, #16]
 8002dc2:	e021      	b.n	8002e08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dc4:	893b      	ldrh	r3, [r7, #8]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd4:	6a39      	ldr	r1, [r7, #32]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f8f4 	bl	8002fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d107      	bne.n	8002dfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e005      	b.n	8002e0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dfe:	893b      	ldrh	r3, [r7, #8]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	00010002 	.word	0x00010002

08002e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	e025      	b.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e30:	d021      	beq.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fe fddd 	bl	80019f0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d116      	bne.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e023      	b.n	8002ebe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10d      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	e00c      	b.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d0b6      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed4:	e051      	b.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d123      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002efe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e046      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f34:	d021      	beq.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7fe fd5b 	bl	80019f0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e020      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10c      	bne.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e00b      	b.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d18d      	bne.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd0:	e02d      	b.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f878 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e02d      	b.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe8:	d021      	beq.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7fe fd01 	bl	80019f0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d1ca      	bne.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003052:	e02d      	b.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f837 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e02d      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800306a:	d021      	beq.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7fe fcc0 	bl	80019f0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d1ca      	bne.n	8003054 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d11b      	bne.n	8003118 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0e1      	b.n	80032fe <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a6d      	ldr	r2, [pc, #436]	; (8003308 <HAL_I2S_Init+0x1e0>)
 8003152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fe f8cb 	bl	80012f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003170:	f023 030f 	bic.w	r3, r3, #15
 8003174:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2202      	movs	r2, #2
 800317c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d06f      	beq.n	8003266 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800318e:	2310      	movs	r3, #16
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e001      	b.n	8003198 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b20      	cmp	r3, #32
 800319e:	d802      	bhi.n	80031a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_I2S_Init+0x1e4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_I2S_Init+0x92>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a56      	ldr	r2, [pc, #344]	; (8003310 <HAL_I2S_Init+0x1e8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d104      	bne.n	80031c4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f000 fffc 	bl	80041b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	e003      	b.n	80031cc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80031c4:	2002      	movs	r0, #2
 80031c6:	f000 fff7 	bl	80041b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80031ca:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d4:	d125      	bne.n	8003222 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	461a      	mov	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	3305      	adds	r3, #5
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	e01f      	b.n	8003240 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	fbb2 f2f3 	udiv	r2, r2, r3
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	461a      	mov	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	3305      	adds	r3, #5
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	e00e      	b.n	8003240 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fbb2 f2f3 	udiv	r2, r2, r3
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	461a      	mov	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	3305      	adds	r3, #5
 800323e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4a34      	ldr	r2, [pc, #208]	; (8003314 <HAL_I2S_Init+0x1ec>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	08db      	lsrs	r3, r3, #3
 800324a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e003      	b.n	800326e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003266:	2302      	movs	r3, #2
 8003268:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d902      	bls.n	800327a <HAL_I2S_Init+0x152>
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2bff      	cmp	r3, #255	; 0xff
 8003278:	d907      	bls.n	800328a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e039      	b.n	80032fe <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	ea42 0103 	orr.w	r1, r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	430a      	orrs	r2, r1
 800329c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032a8:	f023 030f 	bic.w	r3, r3, #15
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6851      	ldr	r1, [r2, #4]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6892      	ldr	r2, [r2, #8]
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68d2      	ldr	r2, [r2, #12]
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6992      	ldr	r2, [r2, #24]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032cc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b30      	cmp	r3, #48	; 0x30
 80032d4:	d003      	beq.n	80032de <HAL_I2S_Init+0x1b6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2bb0      	cmp	r3, #176	; 0xb0
 80032dc:	d107      	bne.n	80032ee <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032ec:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	080037a9 	.word	0x080037a9
 800330c:	40003800 	.word	0x40003800
 8003310:	40003c00 	.word	0x40003c00
 8003314:	cccccccd 	.word	0xcccccccd

08003318 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_I2S_Receive_DMA+0x1a>
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0a1      	b.n	800347a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_I2S_Receive_DMA+0x2e>
 8003342:	2302      	movs	r3, #2
 8003344:	e099      	b.n	800347a <HAL_I2S_Receive_DMA+0x162>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d005      	beq.n	8003366 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
 8003364:	e089      	b.n	800347a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2204      	movs	r2, #4
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d002      	beq.n	8003392 <HAL_I2S_Receive_DMA+0x7a>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b05      	cmp	r3, #5
 8003390:	d10a      	bne.n	80033a8 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	865a      	strh	r2, [r3, #50]	; 0x32
 80033a6:	e005      	b.n	80033b4 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	88fa      	ldrh	r2, [r7, #6]
 80033ac:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	4a32      	ldr	r2, [pc, #200]	; (8003484 <HAL_I2S_Receive_DMA+0x16c>)
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	4a31      	ldr	r2, [pc, #196]	; (8003488 <HAL_I2S_Receive_DMA+0x170>)
 80033c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c8:	4a30      	ldr	r2, [pc, #192]	; (800348c <HAL_I2S_Receive_DMA+0x174>)
 80033ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033da:	d10a      	bne.n	80033f2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	4619      	mov	r1, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003408:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800340a:	f7fe fcfd 	bl	8001e08 <HAL_DMA_Start_IT>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00f      	beq.n	8003434 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0208 	orr.w	r2, r3, #8
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e022      	b.n	800347a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003450:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	08003687 	.word	0x08003687
 8003488:	08003645 	.word	0x08003645
 800348c:	080036a3 	.word	0x080036a3

08003490 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a4:	d003      	beq.n	80034ae <HAL_I2S_DMAStop+0x1e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d155      	bne.n	800355a <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00f      	beq.n	80034d6 <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fcfc 	bl	8001eb8 <HAL_DMA_Abort>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f043 0208 	orr.w	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80034d6:	2364      	movs	r3, #100	; 0x64
 80034d8:	2201      	movs	r2, #1
 80034da:	2102      	movs	r1, #2
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f9ed 	bl	80038bc <I2S_WaitFlagStateUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003500:	2364      	movs	r3, #100	; 0x64
 8003502:	2200      	movs	r2, #0
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9d8 	bl	80038bc <I2S_WaitFlagStateUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003538:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0202 	bic.w	r2, r2, #2
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	e04d      	b.n	80035f6 <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003562:	d004      	beq.n	800356e <HAL_I2S_DMAStop+0xde>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356c:	d143      	bne.n	80035f6 <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fc9c 	bl	8001eb8 <HAL_DMA_Abort>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0208 	orr.w	r2, r3, #8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d4:	d10c      	bne.n	80035f0 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
 80035ee:	e002      	b.n	80035f6 <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10e      	bne.n	8003678 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7fd fbab 	bl	8000dd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ffc1 	bl	800361c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0203 	bic.w	r2, r2, #3
 80036be:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f043 0208 	orr.w	r2, r3, #8
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff ffa5 	bl	8003630 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	881a      	ldrh	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	1c9a      	adds	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10e      	bne.n	8003742 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003732:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff63 	bl	8003608 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	b292      	uxth	r2, r2
 800375e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	1c9a      	adds	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10e      	bne.n	80037a0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003790:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fb1a 	bl	8000dd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d13a      	bne.n	800383a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d109      	bne.n	80037e2 <I2S_IRQHandler+0x3a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d102      	bne.n	80037e2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ffb4 	bl	800374a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d126      	bne.n	800383a <I2S_IRQHandler+0x92>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d11f      	bne.n	800383a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003808:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f043 0202 	orr.w	r2, r3, #2
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff fefb 	bl	8003630 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b03      	cmp	r3, #3
 8003844:	d136      	bne.n	80038b4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d109      	bne.n	8003864 <I2S_IRQHandler+0xbc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	2b80      	cmp	r3, #128	; 0x80
 800385c:	d102      	bne.n	8003864 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ff45 	bl	80036ee <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d122      	bne.n	80038b4 <I2S_IRQHandler+0x10c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b20      	cmp	r3, #32
 800387a:	d11b      	bne.n	80038b4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800388a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff febe 	bl	8003630 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b4:	bf00      	nop
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80038cc:	f7fe f890 	bl	80019f0 <HAL_GetTick>
 80038d0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80038d2:	e018      	b.n	8003906 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038da:	d014      	beq.n	8003906 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80038dc:	f7fe f888 	bl	80019f0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d902      	bls.n	80038f2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e00f      	b.n	8003926 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d1d7      	bne.n	80038d4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0cc      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b68      	ldr	r3, [pc, #416]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d90c      	bls.n	800396c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b65      	ldr	r3, [pc, #404]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0b8      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a58      	ldr	r2, [pc, #352]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800398e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800399c:	4b53      	ldr	r3, [pc, #332]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a52      	ldr	r2, [pc, #328]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	494d      	ldr	r1, [pc, #308]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d044      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d119      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e06f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e067      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4934      	ldr	r1, [pc, #208]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a20:	f7fd ffe6 	bl	80019f0 <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fd ffe2 	bl	80019f0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e04f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 020c 	and.w	r2, r3, #12
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d1eb      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d20c      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e032      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4916      	ldr	r1, [pc, #88]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	490e      	ldr	r1, [pc, #56]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ab6:	f000 fdc1 	bl	800463c <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490a      	ldr	r1, [pc, #40]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd ff46 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023c00 	.word	0x40023c00
 8003aec:	40023800 	.word	0x40023800
 8003af0:	0800bbec 	.word	0x0800bbec
 8003af4:	20000004 	.word	0x20000004
 8003af8:	20000008 	.word	0x20000008

08003afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000004 	.word	0x20000004

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b18:	f7ff fff0 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0a9b      	lsrs	r3, r3, #10
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	0800bbfc 	.word	0x0800bbfc

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b40:	f7ff ffdc 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	0b5b      	lsrs	r3, r3, #13
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4903      	ldr	r1, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	0800bbfc 	.word	0x0800bbfc

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003b9c:	4b6f      	ldr	r3, [pc, #444]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	496c      	ldr	r1, [pc, #432]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003bca:	4b64      	ldr	r3, [pc, #400]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	4960      	ldr	r1, [pc, #384]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003be8:	2301      	movs	r3, #1
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d017      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf8:	4b58      	ldr	r3, [pc, #352]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4955      	ldr	r1, [pc, #340]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c16:	d101      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003c24:	2301      	movs	r3, #1
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d017      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c34:	4b49      	ldr	r3, [pc, #292]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	4946      	ldr	r1, [pc, #280]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c52:	d101      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003c54:	2301      	movs	r3, #1
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003c60:	2301      	movs	r3, #1
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 808a 	beq.w	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a38      	ldr	r2, [pc, #224]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a33      	ldr	r2, [pc, #204]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9a:	f7fd fea9 	bl	80019f0 <HAL_GetTick>
 8003c9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ca2:	f7fd fea5 	bl	80019f0 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e278      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02f      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d028      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cde:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cee:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d114      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fd fe73 	bl	80019f0 <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fd fe6f 	bl	80019f0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e240      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ee      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d3c:	d114      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d52:	4902      	ldr	r1, [pc, #8]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]
 8003d58:	e00c      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42470e40 	.word	0x42470e40
 8003d68:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d72:	6093      	str	r3, [r2, #8]
 8003d74:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	4944      	ldr	r1, [pc, #272]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003d98:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d9a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003da8:	4b3a      	ldr	r3, [pc, #232]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	4937      	ldr	r1, [pc, #220]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dca:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd8:	492e      	ldr	r1, [pc, #184]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d011      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	4926      	ldr	r1, [pc, #152]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	491a      	ldr	r1, [pc, #104]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e44:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4c:	4911      	ldr	r1, [pc, #68]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d005      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e70:	f040 80ff 	bne.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e7a:	f7fd fdb9 	bl	80019f0 <HAL_GetTick>
 8003e7e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e80:	e00e      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e82:	f7fd fdb5 	bl	80019f0 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d907      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e188      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e94:	40023800 	.word	0x40023800
 8003e98:	424711e0 	.word	0x424711e0
 8003e9c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea0:	4b7e      	ldr	r3, [pc, #504]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ea      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d028      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d124      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ed4:	4b71      	ldr	r3, [pc, #452]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ee6:	4b6d      	ldr	r3, [pc, #436]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eec:	0e1b      	lsrs	r3, r3, #24
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	431a      	orrs	r2, r3
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	3b01      	subs	r3, #1
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	071b      	lsls	r3, r3, #28
 8003f16:	4961      	ldr	r1, [pc, #388]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d035      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f48:	d130      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f4a:	4b54      	ldr	r3, [pc, #336]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	3301      	adds	r3, #1
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f5c:	4b4f      	ldr	r3, [pc, #316]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f62:	0f1b      	lsrs	r3, r3, #28
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	019b      	lsls	r3, r3, #6
 8003f74:	431a      	orrs	r2, r3
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	431a      	orrs	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	071b      	lsls	r3, r3, #28
 8003f8c:	4943      	ldr	r1, [pc, #268]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9a:	f023 021f 	bic.w	r2, r3, #31
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	493d      	ldr	r1, [pc, #244]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d029      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc0:	d124      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fc2:	4b36      	ldr	r3, [pc, #216]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fd4:	4b31      	ldr	r3, [pc, #196]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fda:	0f1b      	lsrs	r3, r3, #28
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	019b      	lsls	r3, r3, #6
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	431a      	orrs	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	071b      	lsls	r3, r3, #28
 8004004:	4925      	ldr	r1, [pc, #148]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004014:	2b00      	cmp	r3, #0
 8004016:	d016      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	019b      	lsls	r3, r3, #6
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	3b01      	subs	r3, #1
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	4917      	ldr	r1, [pc, #92]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004046:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800404c:	f7fd fcd0 	bl	80019f0 <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004054:	f7fd fccc 	bl	80019f0 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e09f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	2b01      	cmp	r3, #1
 8004076:	f040 8095 	bne.w	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004080:	f7fd fcb6 	bl	80019f0 <HAL_GetTick>
 8004084:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004086:	e00f      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004088:	f7fd fcb2 	bl	80019f0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d908      	bls.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e085      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	42470068 	.word	0x42470068
 80040a4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040a8:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b4:	d0e8      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x566>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d127      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80040de:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	3301      	adds	r3, #1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	431a      	orrs	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	3b01      	subs	r3, #1
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	4928      	ldr	r1, [pc, #160]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004114:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	3b01      	subs	r3, #1
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	4922      	ldr	r1, [pc, #136]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01d      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004142:	d118      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	0e1b      	lsrs	r3, r3, #24
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	019b      	lsls	r3, r3, #6
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	3b01      	subs	r3, #1
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	431a      	orrs	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4910      	ldr	r1, [pc, #64]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800417c:	f7fd fc38 	bl	80019f0 <HAL_GetTick>
 8004180:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004184:	f7fd fc34 	bl	80019f0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e007      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800419e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a2:	d1ef      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3730      	adds	r7, #48	; 0x30
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	42470070 	.word	0x42470070

080041b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3b01      	subs	r3, #1
 80041dc:	2b07      	cmp	r3, #7
 80041de:	f200 8220 	bhi.w	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	080043eb 	.word	0x080043eb
 80041ec:	0800450d 	.word	0x0800450d
 80041f0:	08004623 	.word	0x08004623
 80041f4:	08004209 	.word	0x08004209
 80041f8:	08004623 	.word	0x08004623
 80041fc:	08004623 	.word	0x08004623
 8004200:	08004623 	.word	0x08004623
 8004204:	08004209 	.word	0x08004209
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004208:	4ba7      	ldr	r3, [pc, #668]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800420a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800421e:	f000 80d6 	beq.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004228:	f200 80dd 	bhi.w	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004232:	f000 809f 	beq.w	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800423c:	f200 80d3 	bhi.w	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004246:	d05b      	beq.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	f200 80ca 	bhi.w	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004258:	f000 80b6 	beq.w	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004262:	f200 80c0 	bhi.w	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426c:	f000 8082 	beq.w	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004276:	f200 80b6 	bhi.w	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004286:	d03b      	beq.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004288:	e0ad      	b.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800428a:	4b87      	ldr	r3, [pc, #540]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004296:	4b84      	ldr	r3, [pc, #528]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a0:	4a82      	ldr	r2, [pc, #520]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	e008      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80042aa:	4b7f      	ldr	r3, [pc, #508]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b4:	4a7d      	ldr	r2, [pc, #500]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80042bc:	4b7a      	ldr	r3, [pc, #488]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	0e1b      	lsrs	r3, r3, #24
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80042ca:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	fb03 f202 	mul.w	r2, r3, r2
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80042e4:	4b70      	ldr	r3, [pc, #448]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	3301      	adds	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	61fb      	str	r3, [r7, #28]
          break;
 80042fe:	e073      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004300:	4b69      	ldr	r3, [pc, #420]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800430c:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800430e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004316:	4a65      	ldr	r2, [pc, #404]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e008      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8004320:	4b61      	ldr	r3, [pc, #388]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432a:	4a60      	ldr	r2, [pc, #384]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8004332:	4b5d      	ldr	r3, [pc, #372]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	fb03 f202 	mul.w	r2, r3, r2
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800435a:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800435c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	3301      	adds	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	61fb      	str	r3, [r7, #28]
          break;
 8004372:	e039      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004374:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d108      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004380:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004388:	4a48      	ldr	r2, [pc, #288]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	e007      	b.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004392:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439a:	4a44      	ldr	r2, [pc, #272]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80043a2:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	0f1b      	lsrs	r3, r3, #28
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80043ae:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	fb03 f202 	mul.w	r2, r3, r2
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	61fb      	str	r3, [r7, #28]
          break;
 80043c6:	e00f      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80043c8:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80043ca:	61fb      	str	r3, [r7, #28]
          break;
 80043cc:	e00c      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80043da:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043dc:	61fb      	str	r3, [r7, #28]
          break;
 80043de:	e003      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80043e0:	4b32      	ldr	r3, [pc, #200]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043e2:	61fb      	str	r3, [r7, #28]
          break;
 80043e4:	e000      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80043e6:	bf00      	nop
        }
      }
      break;
 80043e8:	e11b      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80043fc:	d075      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004404:	d87e      	bhi.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800440c:	d03c      	beq.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004414:	d876      	bhi.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d006      	beq.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004422:	d16f      	bne.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004424:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004426:	61fb      	str	r3, [r7, #28]
          break;
 8004428:	e06f      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004436:	d109      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004442:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e008      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800444c:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800444e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004464:	099b      	lsrs	r3, r3, #6
 8004466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004478:	0f1b      	lsrs	r3, r3, #28
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	61fb      	str	r3, [r7, #28]
          break;
 8004486:	e040      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004494:	d10e      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004496:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449e:	4a03      	ldr	r2, [pc, #12]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	e00d      	b.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	00f42400 	.word	0x00f42400
 80044b0:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044b4:	4b5e      	ldr	r3, [pc, #376]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044bc:	4a5d      	ldr	r2, [pc, #372]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80044c4:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	fb02 f303 	mul.w	r3, r2, r3
 80044d4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80044d6:	4b56      	ldr	r3, [pc, #344]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	0f1b      	lsrs	r3, r3, #28
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	61fb      	str	r3, [r7, #28]
          break;
 80044e8:	e00f      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ea:	4b51      	ldr	r3, [pc, #324]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f6:	d102      	bne.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          {
            frequency = HSE_VALUE;
 80044f8:	4b4e      	ldr	r3, [pc, #312]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80044fa:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80044fc:	e005      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = HSI_VALUE;
 80044fe:	4b4d      	ldr	r3, [pc, #308]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004500:	61fb      	str	r3, [r7, #28]
          break;
 8004502:	e002      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
          break;
 8004508:	bf00      	nop
        }
      }
      break;
 800450a:	e08a      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800450c:	4b48      	ldr	r3, [pc, #288]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800450e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004512:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800451e:	d06f      	beq.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004526:	d878      	bhi.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800452e:	d03c      	beq.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004536:	d870      	bhi.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004544:	d169      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004546:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004548:	61fb      	str	r3, [r7, #28]
          break;
 800454a:	e069      	b.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800454c:	4b38      	ldr	r3, [pc, #224]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004558:	d109      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800455a:	4b35      	ldr	r3, [pc, #212]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800455c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004564:	4a33      	ldr	r2, [pc, #204]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004566:	fbb2 f3f3 	udiv	r3, r2, r3
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e008      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004578:	4a2e      	ldr	r2, [pc, #184]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004594:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459a:	0f1b      	lsrs	r3, r3, #28
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	61fb      	str	r3, [r7, #28]
          break;
 80045a8:	e03a      	b.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b6:	d108      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c0:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	e007      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x422>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045ca:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d2:	4a18      	ldr	r2, [pc, #96]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0f1b      	lsrs	r3, r3, #28
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	61fb      	str	r3, [r7, #28]
          break;
 80045fe:	e00f      	b.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460c:	d102      	bne.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          {
            frequency = HSE_VALUE;
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004610:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004612:	e005      	b.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = HSI_VALUE;
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004616:	61fb      	str	r3, [r7, #28]
          break;
 8004618:	e002      	b.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
          break;
 800461e:	bf00      	nop
        }
      }
      break;
 8004620:	bf00      	nop
    }
  }
  return frequency;
 8004622:	69fb      	ldr	r3, [r7, #28]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3724      	adds	r7, #36	; 0x24
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40023800 	.word	0x40023800
 8004634:	00f42400 	.word	0x00f42400
 8004638:	00bb8000 	.word	0x00bb8000

0800463c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004640:	b0ae      	sub	sp, #184	; 0xb8
 8004642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004662:	4bcb      	ldr	r3, [pc, #812]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b0c      	cmp	r3, #12
 800466c:	f200 8204 	bhi.w	8004a78 <HAL_RCC_GetSysClockFreq+0x43c>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	080046ad 	.word	0x080046ad
 800467c:	08004a79 	.word	0x08004a79
 8004680:	08004a79 	.word	0x08004a79
 8004684:	08004a79 	.word	0x08004a79
 8004688:	080046b5 	.word	0x080046b5
 800468c:	08004a79 	.word	0x08004a79
 8004690:	08004a79 	.word	0x08004a79
 8004694:	08004a79 	.word	0x08004a79
 8004698:	080046bd 	.word	0x080046bd
 800469c:	08004a79 	.word	0x08004a79
 80046a0:	08004a79 	.word	0x08004a79
 80046a4:	08004a79 	.word	0x08004a79
 80046a8:	080048ad 	.word	0x080048ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4bb9      	ldr	r3, [pc, #740]	; (8004994 <HAL_RCC_GetSysClockFreq+0x358>)
 80046ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80046b2:	e1e5      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b4:	4bb7      	ldr	r3, [pc, #732]	; (8004994 <HAL_RCC_GetSysClockFreq+0x358>)
 80046b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046ba:	e1e1      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046bc:	4bb4      	ldr	r3, [pc, #720]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046c8:	4bb1      	ldr	r3, [pc, #708]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d071      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d4:	4bae      	ldr	r3, [pc, #696]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80046e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046fa:	4622      	mov	r2, r4
 80046fc:	462b      	mov	r3, r5
 80046fe:	f04f 0000 	mov.w	r0, #0
 8004702:	f04f 0100 	mov.w	r1, #0
 8004706:	0159      	lsls	r1, r3, #5
 8004708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800470c:	0150      	lsls	r0, r2, #5
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4621      	mov	r1, r4
 8004714:	1a51      	subs	r1, r2, r1
 8004716:	6439      	str	r1, [r7, #64]	; 0x40
 8004718:	4629      	mov	r1, r5
 800471a:	eb63 0301 	sbc.w	r3, r3, r1
 800471e:	647b      	str	r3, [r7, #68]	; 0x44
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800472c:	4649      	mov	r1, r9
 800472e:	018b      	lsls	r3, r1, #6
 8004730:	4641      	mov	r1, r8
 8004732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004736:	4641      	mov	r1, r8
 8004738:	018a      	lsls	r2, r1, #6
 800473a:	4641      	mov	r1, r8
 800473c:	1a51      	subs	r1, r2, r1
 800473e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004740:	4649      	mov	r1, r9
 8004742:	eb63 0301 	sbc.w	r3, r3, r1
 8004746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004754:	4649      	mov	r1, r9
 8004756:	00cb      	lsls	r3, r1, #3
 8004758:	4641      	mov	r1, r8
 800475a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475e:	4641      	mov	r1, r8
 8004760:	00ca      	lsls	r2, r1, #3
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	4603      	mov	r3, r0
 8004768:	4622      	mov	r2, r4
 800476a:	189b      	adds	r3, r3, r2
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	462b      	mov	r3, r5
 8004770:	460a      	mov	r2, r1
 8004772:	eb42 0303 	adc.w	r3, r2, r3
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004784:	4629      	mov	r1, r5
 8004786:	028b      	lsls	r3, r1, #10
 8004788:	4621      	mov	r1, r4
 800478a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800478e:	4621      	mov	r1, r4
 8004790:	028a      	lsls	r2, r1, #10
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800479a:	2200      	movs	r2, #0
 800479c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80047a8:	f7fb fd92 	bl	80002d0 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4613      	mov	r3, r2
 80047b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047b6:	e067      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b8:	4b75      	ldr	r3, [pc, #468]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	099b      	lsrs	r3, r3, #6
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80047c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80047d2:	2300      	movs	r3, #0
 80047d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80047da:	4622      	mov	r2, r4
 80047dc:	462b      	mov	r3, r5
 80047de:	f04f 0000 	mov.w	r0, #0
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	0159      	lsls	r1, r3, #5
 80047e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ec:	0150      	lsls	r0, r2, #5
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4621      	mov	r1, r4
 80047f4:	1a51      	subs	r1, r2, r1
 80047f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80047f8:	4629      	mov	r1, r5
 80047fa:	eb63 0301 	sbc.w	r3, r3, r1
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800480c:	4649      	mov	r1, r9
 800480e:	018b      	lsls	r3, r1, #6
 8004810:	4641      	mov	r1, r8
 8004812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004816:	4641      	mov	r1, r8
 8004818:	018a      	lsls	r2, r1, #6
 800481a:	4641      	mov	r1, r8
 800481c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004820:	4649      	mov	r1, r9
 8004822:	eb63 0b01 	sbc.w	fp, r3, r1
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004832:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004836:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800483a:	4692      	mov	sl, r2
 800483c:	469b      	mov	fp, r3
 800483e:	4623      	mov	r3, r4
 8004840:	eb1a 0303 	adds.w	r3, sl, r3
 8004844:	623b      	str	r3, [r7, #32]
 8004846:	462b      	mov	r3, r5
 8004848:	eb4b 0303 	adc.w	r3, fp, r3
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800485a:	4629      	mov	r1, r5
 800485c:	028b      	lsls	r3, r1, #10
 800485e:	4621      	mov	r1, r4
 8004860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004864:	4621      	mov	r1, r4
 8004866:	028a      	lsls	r2, r1, #10
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004870:	2200      	movs	r2, #0
 8004872:	673b      	str	r3, [r7, #112]	; 0x70
 8004874:	677a      	str	r2, [r7, #116]	; 0x74
 8004876:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800487a:	f7fb fd29 	bl	80002d0 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4613      	mov	r3, r2
 8004884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004888:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	3301      	adds	r3, #1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800489a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800489e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048aa:	e0e9      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048ac:	4b38      	ldr	r3, [pc, #224]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048b8:	4b35      	ldr	r3, [pc, #212]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d069      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c4:	4b32      	ldr	r3, [pc, #200]	; (8004990 <HAL_RCC_GetSysClockFreq+0x354>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	099b      	lsrs	r3, r3, #6
 80048ca:	2200      	movs	r2, #0
 80048cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	663b      	str	r3, [r7, #96]	; 0x60
 80048d8:	2300      	movs	r3, #0
 80048da:	667b      	str	r3, [r7, #100]	; 0x64
 80048dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80048e0:	4622      	mov	r2, r4
 80048e2:	462b      	mov	r3, r5
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f04f 0100 	mov.w	r1, #0
 80048ec:	0159      	lsls	r1, r3, #5
 80048ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f2:	0150      	lsls	r0, r2, #5
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4621      	mov	r1, r4
 80048fa:	1a51      	subs	r1, r2, r1
 80048fc:	61b9      	str	r1, [r7, #24]
 80048fe:	4629      	mov	r1, r5
 8004900:	eb63 0301 	sbc.w	r3, r3, r1
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004912:	4659      	mov	r1, fp
 8004914:	018b      	lsls	r3, r1, #6
 8004916:	4651      	mov	r1, sl
 8004918:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800491c:	4651      	mov	r1, sl
 800491e:	018a      	lsls	r2, r1, #6
 8004920:	4651      	mov	r1, sl
 8004922:	ebb2 0801 	subs.w	r8, r2, r1
 8004926:	4659      	mov	r1, fp
 8004928:	eb63 0901 	sbc.w	r9, r3, r1
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004938:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800493c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004940:	4690      	mov	r8, r2
 8004942:	4699      	mov	r9, r3
 8004944:	4623      	mov	r3, r4
 8004946:	eb18 0303 	adds.w	r3, r8, r3
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	462b      	mov	r3, r5
 800494e:	eb49 0303 	adc.w	r3, r9, r3
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004960:	4629      	mov	r1, r5
 8004962:	028b      	lsls	r3, r1, #10
 8004964:	4621      	mov	r1, r4
 8004966:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800496a:	4621      	mov	r1, r4
 800496c:	028a      	lsls	r2, r1, #10
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004976:	2200      	movs	r2, #0
 8004978:	65bb      	str	r3, [r7, #88]	; 0x58
 800497a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800497c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004980:	f7fb fca6 	bl	80002d0 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4613      	mov	r3, r2
 800498a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800498e:	e063      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x41c>
 8004990:	40023800 	.word	0x40023800
 8004994:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004998:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x454>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	2200      	movs	r2, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	4611      	mov	r1, r2
 80049a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049a8:	653b      	str	r3, [r7, #80]	; 0x50
 80049aa:	2300      	movs	r3, #0
 80049ac:	657b      	str	r3, [r7, #84]	; 0x54
 80049ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80049b2:	4642      	mov	r2, r8
 80049b4:	464b      	mov	r3, r9
 80049b6:	f04f 0000 	mov.w	r0, #0
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	0159      	lsls	r1, r3, #5
 80049c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c4:	0150      	lsls	r0, r2, #5
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4641      	mov	r1, r8
 80049cc:	1a51      	subs	r1, r2, r1
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	4649      	mov	r1, r9
 80049d2:	eb63 0301 	sbc.w	r3, r3, r1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80049e4:	4659      	mov	r1, fp
 80049e6:	018b      	lsls	r3, r1, #6
 80049e8:	4651      	mov	r1, sl
 80049ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ee:	4651      	mov	r1, sl
 80049f0:	018a      	lsls	r2, r1, #6
 80049f2:	4651      	mov	r1, sl
 80049f4:	1a54      	subs	r4, r2, r1
 80049f6:	4659      	mov	r1, fp
 80049f8:	eb63 0501 	sbc.w	r5, r3, r1
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	00eb      	lsls	r3, r5, #3
 8004a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0a:	00e2      	lsls	r2, r4, #3
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	18e3      	adds	r3, r4, r3
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	464b      	mov	r3, r9
 8004a18:	eb45 0303 	adc.w	r3, r5, r3
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	028b      	lsls	r3, r1, #10
 8004a2e:	4621      	mov	r1, r4
 8004a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a34:	4621      	mov	r1, r4
 8004a36:	028a      	lsls	r2, r1, #10
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a40:	2200      	movs	r2, #0
 8004a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a44:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a4a:	f7fb fc41 	bl	80002d0 <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4613      	mov	r3, r2
 8004a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x454>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	0f1b      	lsrs	r3, r3, #28
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a76:	e003      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	37b8      	adds	r7, #184	; 0xb8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800
 8004a94:	00f42400 	.word	0x00f42400

08004a98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e28d      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8083 	beq.w	8004bbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ab8:	4b94      	ldr	r3, [pc, #592]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d019      	beq.n	8004af8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ac4:	4b91      	ldr	r3, [pc, #580]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d106      	bne.n	8004ade <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ad0:	4b8e      	ldr	r3, [pc, #568]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004adc:	d00c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ade:	4b8b      	ldr	r3, [pc, #556]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d112      	bne.n	8004b10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aea:	4b88      	ldr	r3, [pc, #544]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af8:	4b84      	ldr	r3, [pc, #528]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05b      	beq.n	8004bbc <HAL_RCC_OscConfig+0x124>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d157      	bne.n	8004bbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e25a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d106      	bne.n	8004b28 <HAL_RCC_OscConfig+0x90>
 8004b1a:	4b7c      	ldr	r3, [pc, #496]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7b      	ldr	r2, [pc, #492]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e01d      	b.n	8004b64 <HAL_RCC_OscConfig+0xcc>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0xb4>
 8004b32:	4b76      	ldr	r3, [pc, #472]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a75      	ldr	r2, [pc, #468]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b73      	ldr	r3, [pc, #460]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a72      	ldr	r2, [pc, #456]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0xcc>
 8004b4c:	4b6f      	ldr	r3, [pc, #444]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a6e      	ldr	r2, [pc, #440]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b6c      	ldr	r3, [pc, #432]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a6b      	ldr	r2, [pc, #428]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d013      	beq.n	8004b94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fc ff40 	bl	80019f0 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b74:	f7fc ff3c 	bl	80019f0 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e21f      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b61      	ldr	r3, [pc, #388]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0xdc>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fc ff2c 	bl	80019f0 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fc ff28 	bl	80019f0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e20b      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	4b57      	ldr	r3, [pc, #348]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x104>
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d06f      	beq.n	8004caa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bca:	4b50      	ldr	r3, [pc, #320]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d017      	beq.n	8004c06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bd6:	4b4d      	ldr	r3, [pc, #308]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d105      	bne.n	8004bee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004be2:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bee:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bf6:	2b0c      	cmp	r3, #12
 8004bf8:	d11c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfa:	4b44      	ldr	r3, [pc, #272]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x186>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1d3      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4937      	ldr	r1, [pc, #220]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	e03a      	b.n	8004caa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3c:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <HAL_RCC_OscConfig+0x278>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fc fed5 	bl	80019f0 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fc fed1 	bl	80019f0 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1b4      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4925      	ldr	r1, [pc, #148]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]
 8004c7c:	e015      	b.n	8004caa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_OscConfig+0x278>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fc feb4 	bl	80019f0 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fc feb0 	bl	80019f0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e193      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d036      	beq.n	8004d24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fc fe94 	bl	80019f0 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fc fe90 	bl	80019f0 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e173      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x234>
 8004cea:	e01b      	b.n	8004d24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <HAL_RCC_OscConfig+0x27c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf2:	f7fc fe7d 	bl	80019f0 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf8:	e00e      	b.n	8004d18 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7fc fe79 	bl	80019f0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d907      	bls.n	8004d18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e15c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	42470000 	.word	0x42470000
 8004d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	4b8a      	ldr	r3, [pc, #552]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ea      	bne.n	8004cfa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8097 	beq.w	8004e60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d36:	4b83      	ldr	r3, [pc, #524]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	4b7f      	ldr	r3, [pc, #508]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a7e      	ldr	r2, [pc, #504]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b7c      	ldr	r3, [pc, #496]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b79      	ldr	r3, [pc, #484]	; (8004f48 <HAL_RCC_OscConfig+0x4b0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6e:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <HAL_RCC_OscConfig+0x4b0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a75      	ldr	r2, [pc, #468]	; (8004f48 <HAL_RCC_OscConfig+0x4b0>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fc fe39 	bl	80019f0 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fc fe35 	bl	80019f0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e118      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b6c      	ldr	r3, [pc, #432]	; (8004f48 <HAL_RCC_OscConfig+0x4b0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x31e>
 8004da8:	4b66      	ldr	r3, [pc, #408]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a65      	ldr	r2, [pc, #404]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	e01c      	b.n	8004df0 <HAL_RCC_OscConfig+0x358>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x340>
 8004dbe:	4b61      	ldr	r3, [pc, #388]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	4a60      	ldr	r2, [pc, #384]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dca:	4b5e      	ldr	r3, [pc, #376]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4a5d      	ldr	r2, [pc, #372]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0x358>
 8004dd8:	4b5a      	ldr	r3, [pc, #360]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	4a59      	ldr	r2, [pc, #356]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	; 0x70
 8004de4:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4a56      	ldr	r2, [pc, #344]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dea:	f023 0304 	bic.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fc fdfa 	bl	80019f0 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fc fdf6 	bl	80019f0 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0d7      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	4b4b      	ldr	r3, [pc, #300]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCC_OscConfig+0x368>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fc fde4 	bl	80019f0 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fc fde0 	bl	80019f0 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0c1      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	4a3a      	ldr	r2, [pc, #232]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80ad 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6a:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d060      	beq.n	8004f38 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d145      	bne.n	8004f0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b33      	ldr	r3, [pc, #204]	; (8004f4c <HAL_RCC_OscConfig+0x4b4>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fc fdb4 	bl	80019f0 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fc fdb0 	bl	80019f0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e093      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	071b      	lsls	r3, r3, #28
 8004ed6:	491b      	ldr	r1, [pc, #108]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x4b4>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fc fd85 	bl	80019f0 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eea:	f7fc fd81 	bl	80019f0 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e064      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x452>
 8004f08:	e05c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0a:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <HAL_RCC_OscConfig+0x4b4>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc fd6e 	bl	80019f0 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fc fd6a 	bl	80019f0 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e04d      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x480>
 8004f36:	e045      	b.n	8004fc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e040      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f50:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <HAL_RCC_OscConfig+0x538>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d030      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d129      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d122      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d119      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d10f      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800

08004fd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e022      	b.n	800502c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fc fa3b 	bl	8001474 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2203      	movs	r2, #3
 8005002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f814 	bl	8005034 <HAL_SD_InitCard>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e00a      	b.n	800502c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005034:	b5b0      	push	{r4, r5, r7, lr}
 8005036:	b08e      	sub	sp, #56	; 0x38
 8005038:	af04      	add	r7, sp, #16
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800504c:	2300      	movs	r3, #0
 800504e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005050:	2376      	movs	r3, #118	; 0x76
 8005052:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681d      	ldr	r5, [r3, #0]
 8005058:	466c      	mov	r4, sp
 800505a:	f107 0314 	add.w	r3, r7, #20
 800505e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005062:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005066:	f107 0308 	add.w	r3, r7, #8
 800506a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800506c:	4628      	mov	r0, r5
 800506e:	f002 fb47 	bl	8007700 <SDIO_Init>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e04f      	b.n	8005124 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005084:	4b29      	ldr	r3, [pc, #164]	; (800512c <HAL_SD_InitCard+0xf8>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f002 fb7f 	bl	8007792 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005094:	4b25      	ldr	r3, [pc, #148]	; (800512c <HAL_SD_InitCard+0xf8>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800509a:	2002      	movs	r0, #2
 800509c:	f7fc fcb4 	bl	8001a08 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f001 f8f1 	bl	8006288 <SD_PowerON>
 80050a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e02e      	b.n	8005124 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 f810 	bl	80060ec <SD_InitCard>
 80050cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00b      	beq.n	80050ec <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e01b      	b.n	8005124 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050f4:	4618      	mov	r0, r3
 80050f6:	f002 fbde 	bl	80078b6 <SDMMC_CmdBlockLength>
 80050fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00f      	beq.n	8005122 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <HAL_SD_InitCard+0xfc>)
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3728      	adds	r7, #40	; 0x28
 8005128:	46bd      	mov	sp, r7
 800512a:	bdb0      	pop	{r4, r5, r7, pc}
 800512c:	422580a0 	.word	0x422580a0
 8005130:	004005ff 	.word	0x004005ff

08005134 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b092      	sub	sp, #72	; 0x48
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005142:	f7fc fc55 	bl	80019f0 <HAL_GetTick>
 8005146:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e1bd      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 81b0 	bne.w	80054d4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800517a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	441a      	add	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	429a      	cmp	r2, r3
 8005186:	d907      	bls.n	8005198 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e1a4      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2203      	movs	r2, #3
 800519c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2200      	movs	r2, #0
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d002      	beq.n	80051b6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	025b      	lsls	r3, r3, #9
 80051b4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	025b      	lsls	r3, r3, #9
 80051c0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80051c2:	2390      	movs	r3, #144	; 0x90
 80051c4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80051c6:	2302      	movs	r3, #2
 80051c8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f107 0214 	add.w	r2, r7, #20
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 fb3e 	bl	800785e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d90a      	bls.n	80051fe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2202      	movs	r2, #2
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f4:	4618      	mov	r0, r3
 80051f6:	f002 fba2 	bl	800793e <SDMMC_CmdReadMultiBlock>
 80051fa:	6478      	str	r0, [r7, #68]	; 0x44
 80051fc:	e009      	b.n	8005212 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800520a:	4618      	mov	r0, r3
 800520c:	f002 fb75 	bl	80078fa <SDMMC_CmdReadSingleBlock>
 8005210:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005214:	2b00      	cmp	r3, #0
 8005216:	d012      	beq.n	800523e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a7a      	ldr	r2, [pc, #488]	; (8005408 <HAL_SD_ReadBlocks+0x2d4>)
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005226:	431a      	orrs	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e151      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005242:	e061      	b.n	8005308 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d03c      	beq.n	80052cc <HAL_SD_ReadBlocks+0x198>
 8005252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d039      	beq.n	80052cc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005258:	2300      	movs	r3, #0
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
 800525c:	e033      	b.n	80052c6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f002 fa77 	bl	8007756 <SDIO_ReadFIFO>
 8005268:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	b2da      	uxtb	r2, r3
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	3301      	adds	r3, #1
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527a:	3b01      	subs	r3, #1
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	b2da      	uxtb	r2, r3
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	3301      	adds	r3, #1
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800528e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005290:	3b01      	subs	r3, #1
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	b2da      	uxtb	r2, r3
 800529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	3301      	adds	r3, #1
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a6:	3b01      	subs	r3, #1
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	0e1b      	lsrs	r3, r3, #24
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b6:	3301      	adds	r3, #1
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052bc:	3b01      	subs	r3, #1
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80052c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c2:	3301      	adds	r3, #1
 80052c4:	643b      	str	r3, [r7, #64]	; 0x40
 80052c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c8:	2b07      	cmp	r3, #7
 80052ca:	d9c8      	bls.n	800525e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80052cc:	f7fc fb90 	bl	80019f0 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052d8:	429a      	cmp	r2, r3
 80052da:	d902      	bls.n	80052e2 <HAL_SD_ReadBlocks+0x1ae>
 80052dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d112      	bne.n	8005308 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a48      	ldr	r2, [pc, #288]	; (8005408 <HAL_SD_ReadBlocks+0x2d4>)
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0ec      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005312:	2b00      	cmp	r3, #0
 8005314:	d096      	beq.n	8005244 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d022      	beq.n	800536a <HAL_SD_ReadBlocks+0x236>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d91f      	bls.n	800536a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	2b03      	cmp	r3, #3
 8005330:	d01b      	beq.n	800536a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f002 fb68 	bl	8007a0c <SDMMC_CmdStopTransfer>
 800533c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800533e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005340:	2b00      	cmp	r3, #0
 8005342:	d012      	beq.n	800536a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a2f      	ldr	r2, [pc, #188]	; (8005408 <HAL_SD_ReadBlocks+0x2d4>)
 800534a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005352:	431a      	orrs	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e0bb      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d012      	beq.n	800539e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a22      	ldr	r2, [pc, #136]	; (8005408 <HAL_SD_ReadBlocks+0x2d4>)
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	f043 0208 	orr.w	r2, r3, #8
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e0a1      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a15      	ldr	r2, [pc, #84]	; (8005408 <HAL_SD_ReadBlocks+0x2d4>)
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	f043 0202 	orr.w	r2, r3, #2
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e087      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d064      	beq.n	80054aa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a08      	ldr	r2, [pc, #32]	; (8005408 <HAL_SD_ReadBlocks+0x2d4>)
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f043 0220 	orr.w	r2, r3, #32
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e06d      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
 8005406:	bf00      	nop
 8005408:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f002 f9a0 	bl	8007756 <SDIO_ReadFIFO>
 8005416:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	b2da      	uxtb	r2, r3
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	3301      	adds	r3, #1
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005428:	3b01      	subs	r3, #1
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	b2da      	uxtb	r2, r3
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	3301      	adds	r3, #1
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800543c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543e:	3b01      	subs	r3, #1
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	b2da      	uxtb	r2, r3
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544e:	3301      	adds	r3, #1
 8005450:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005454:	3b01      	subs	r3, #1
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	0e1b      	lsrs	r3, r3, #24
 800545c:	b2da      	uxtb	r2, r3
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005464:	3301      	adds	r3, #1
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546a:	3b01      	subs	r3, #1
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800546e:	f7fc fabf 	bl	80019f0 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800547a:	429a      	cmp	r2, r3
 800547c:	d902      	bls.n	8005484 <HAL_SD_ReadBlocks+0x350>
 800547e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005480:	2b00      	cmp	r3, #0
 8005482:	d112      	bne.n	80054aa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a18      	ldr	r2, [pc, #96]	; (80054ec <HAL_SD_ReadBlocks+0x3b8>)
 800548a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e01b      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SD_ReadBlocks+0x38a>
 80054b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1a6      	bne.n	800540c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e006      	b.n	80054e2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3748      	adds	r7, #72	; 0x48
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	004005ff 	.word	0x004005ff

080054f0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b092      	sub	sp, #72	; 0x48
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80054fe:	f7fc fa77 	bl	80019f0 <HAL_GetTick>
 8005502:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e165      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	f040 8158 	bne.w	80057e0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	441a      	add	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005540:	429a      	cmp	r2, r3
 8005542:	d907      	bls.n	8005554 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e14c      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2203      	movs	r2, #3
 8005558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2200      	movs	r2, #0
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	2b01      	cmp	r3, #1
 800556a:	d002      	beq.n	8005572 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	025b      	lsls	r3, r3, #9
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005576:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	025b      	lsls	r3, r3, #9
 800557c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800557e:	2390      	movs	r3, #144	; 0x90
 8005580:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005582:	2300      	movs	r3, #0
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005586:	2300      	movs	r3, #0
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800558a:	2301      	movs	r3, #1
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f107 0218 	add.w	r2, r7, #24
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f002 f960 	bl	800785e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d90a      	bls.n	80055ba <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055b0:	4618      	mov	r0, r3
 80055b2:	f002 fa08 	bl	80079c6 <SDMMC_CmdWriteMultiBlock>
 80055b6:	6478      	str	r0, [r7, #68]	; 0x44
 80055b8:	e009      	b.n	80055ce <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2210      	movs	r2, #16
 80055be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055c6:	4618      	mov	r0, r3
 80055c8:	f002 f9db 	bl	8007982 <SDMMC_CmdWriteSingleBlock>
 80055cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d012      	beq.n	80055fa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a87      	ldr	r2, [pc, #540]	; (80057f8 <HAL_SD_WriteBlocks+0x308>)
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0f9      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80055fe:	e065      	b.n	80056cc <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d040      	beq.n	8005690 <HAL_SD_WriteBlocks+0x1a0>
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d03d      	beq.n	8005690 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005614:	2300      	movs	r3, #0
 8005616:	643b      	str	r3, [r7, #64]	; 0x40
 8005618:	e037      	b.n	800568a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	3301      	adds	r3, #1
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005628:	3b01      	subs	r3, #1
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800562c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	021a      	lsls	r2, r3, #8
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	3301      	adds	r3, #1
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	3b01      	subs	r3, #1
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	041a      	lsls	r2, r3, #16
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	3301      	adds	r3, #1
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	3b01      	subs	r3, #1
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	061a      	lsls	r2, r3, #24
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	3301      	adds	r3, #1
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	3b01      	subs	r3, #1
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f107 0214 	add.w	r2, r7, #20
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f002 f876 	bl	8007770 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005686:	3301      	adds	r3, #1
 8005688:	643b      	str	r3, [r7, #64]	; 0x40
 800568a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568c:	2b07      	cmp	r3, #7
 800568e:	d9c4      	bls.n	800561a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005690:	f7fc f9ae 	bl	80019f0 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800569c:	429a      	cmp	r2, r3
 800569e:	d902      	bls.n	80056a6 <HAL_SD_WriteBlocks+0x1b6>
 80056a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d112      	bne.n	80056cc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a53      	ldr	r2, [pc, #332]	; (80057f8 <HAL_SD_WriteBlocks+0x308>)
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e090      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d092      	beq.n	8005600 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d022      	beq.n	800572e <HAL_SD_WriteBlocks+0x23e>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d91f      	bls.n	800572e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d01b      	beq.n	800572e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f002 f986 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8005700:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005704:	2b00      	cmp	r3, #0
 8005706:	d012      	beq.n	800572e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3a      	ldr	r2, [pc, #232]	; (80057f8 <HAL_SD_WriteBlocks+0x308>)
 800570e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005716:	431a      	orrs	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e05f      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <HAL_SD_WriteBlocks+0x308>)
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f043 0208 	orr.w	r2, r3, #8
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e045      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d012      	beq.n	8005796 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <HAL_SD_WriteBlocks+0x308>)
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	f043 0202 	orr.w	r2, r3, #2
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e02b      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d012      	beq.n	80057ca <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <HAL_SD_WriteBlocks+0x308>)
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	f043 0210 	orr.w	r2, r3, #16
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e011      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e006      	b.n	80057ee <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3748      	adds	r7, #72	; 0x48
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	004005ff 	.word	0x004005ff

080057fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_SD_IRQHandler+0x2e>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 ff4f 	bl	80066c6 <SD_Read_IT>
 8005828:	e155      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 808f 	beq.w	8005958 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005852:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005856:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d039      	beq.n	80058e6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <HAL_SD_IRQHandler+0x8a>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d011      	beq.n	80058aa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f002 f8be 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8005890:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f91f 	bl	8005ae8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <HAL_SD_IRQHandler+0xda>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f002 fd34 	bl	8008344 <HAL_SD_RxCpltCallback>
 80058dc:	e0fb      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f002 fd26 	bl	8008330 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058e4:	e0f7      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80f2 	beq.w	8005ad6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d011      	beq.n	8005920 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f002 f883 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8005906:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8e4 	bl	8005ae8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 80d5 	bne.w	8005ad6 <HAL_SD_IRQHandler+0x2da>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 80cf 	bne.w	8005ad6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0208 	bic.w	r2, r2, #8
 8005946:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f002 fced 	bl	8008330 <HAL_SD_TxCpltCallback>
}
 8005956:	e0be      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_SD_IRQHandler+0x17c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fef9 	bl	8006768 <SD_Write_IT>
 8005976:	e0ae      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80a7 	beq.w	8005ad6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	f043 0202 	orr.w	r2, r3, #2
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	f043 0208 	orr.w	r2, r3, #8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	f043 0210 	orr.w	r2, r3, #16
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fffc 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8005a14:	4602      	mov	r2, r0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f855 	bl	8005ae8 <HAL_SD_ErrorCallback>
}
 8005a3e:	e04a      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d045      	beq.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0310 	and.w	r3, r3, #16
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <HAL_SD_IRQHandler+0x262>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d011      	beq.n	8005a82 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <HAL_SD_IRQHandler+0x2e4>)
 8005a64:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fc fa94 	bl	8001f98 <HAL_DMA_Abort_IT>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d02f      	beq.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fac8 	bl	8006010 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005a80:	e029      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_SD_IRQHandler+0x29a>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d011      	beq.n	8005aba <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <HAL_SD_IRQHandler+0x2e8>)
 8005a9c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fc fa78 	bl	8001f98 <HAL_DMA_Abort_IT>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d013      	beq.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fae3 	bl	800607e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005ab8:	e00d      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f002 fc24 	bl	800831c <HAL_SD_AbortCallback>
}
 8005ad4:	e7ff      	b.n	8005ad6 <HAL_SD_IRQHandler+0x2da>
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	08006011 	.word	0x08006011
 8005ae4:	0800607f 	.word	0x0800607f

08005ae8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0a:	0f9b      	lsrs	r3, r3, #30
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b16:	0e9b      	lsrs	r3, r3, #26
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b28:	0e1b      	lsrs	r3, r3, #24
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5c:	0d1b      	lsrs	r3, r3, #20
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b68:	0c1b      	lsrs	r3, r3, #16
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7a:	0bdb      	lsrs	r3, r3, #15
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b8c:	0b9b      	lsrs	r3, r3, #14
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b9e:	0b5b      	lsrs	r3, r3, #13
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb0:	0b1b      	lsrs	r3, r3, #12
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d163      	bne.n	8005c94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd0:	009a      	lsls	r2, r3, #2
 8005bd2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005bdc:	0f92      	lsrs	r2, r2, #30
 8005bde:	431a      	orrs	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be8:	0edb      	lsrs	r3, r3, #27
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfa:	0e1b      	lsrs	r3, r3, #24
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0c:	0d5b      	lsrs	r3, r3, #21
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1e:	0c9b      	lsrs	r3, r3, #18
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c30:	0bdb      	lsrs	r3, r3, #15
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	7e1b      	ldrb	r3, [r3, #24]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	3302      	adds	r3, #2
 8005c54:	2201      	movs	r2, #1
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c5e:	fb03 f202 	mul.w	r2, r3, r2
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	7a1b      	ldrb	r3, [r3, #8]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	2201      	movs	r2, #1
 8005c72:	409a      	lsls	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c80:	0a52      	lsrs	r2, r2, #9
 8005c82:	fb03 f202 	mul.w	r2, r3, r2
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c90:	661a      	str	r2, [r3, #96]	; 0x60
 8005c92:	e031      	b.n	8005cf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d11d      	bne.n	8005cd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca0:	041b      	lsls	r3, r3, #16
 8005ca2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	431a      	orrs	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	029a      	lsls	r2, r3, #10
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ccc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	661a      	str	r2, [r3, #96]	; 0x60
 8005cd6:	e00f      	b.n	8005cf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a58      	ldr	r2, [pc, #352]	; (8005e40 <HAL_SD_GetCardCSD+0x344>)
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e09d      	b.n	8005e34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfc:	0b9b      	lsrs	r3, r3, #14
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0e:	09db      	lsrs	r3, r3, #7
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	0fdb      	lsrs	r3, r3, #31
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	0f5b      	lsrs	r3, r3, #29
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	0e9b      	lsrs	r3, r3, #26
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d60:	0d9b      	lsrs	r3, r3, #22
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	0d5b      	lsrs	r3, r3, #21
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	0c1b      	lsrs	r3, r3, #16
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	0bdb      	lsrs	r3, r3, #15
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	0b9b      	lsrs	r3, r3, #14
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	0b5b      	lsrs	r3, r3, #13
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	0b1b      	lsrs	r3, r3, #12
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	0a9b      	lsrs	r3, r3, #10
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	004005ff 	.word	0x004005ff

08005e44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005e9c:	b5b0      	push	{r4, r5, r7, lr}
 8005e9e:	b08e      	sub	sp, #56	; 0x38
 8005ea0:	af04      	add	r7, sp, #16
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2203      	movs	r2, #3
 8005eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d02e      	beq.n	8005f1a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec2:	d106      	bne.n	8005ed2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38
 8005ed0:	e029      	b.n	8005f26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa8a 	bl	80063f4 <SD_WideBus_Enable>
 8005ee0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
 8005eee:	e01a      	b.n	8005f26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fac7 	bl	800648a <SD_WideBus_Disable>
 8005efc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
 8005f0a:	e00c      	b.n	8005f26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	639a      	str	r2, [r3, #56]	; 0x38
 8005f18:	e005      	b.n	8005f26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f44:	e01f      	b.n	8005f86 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681d      	ldr	r5, [r3, #0]
 8005f6c:	466c      	mov	r4, sp
 8005f6e:	f107 0314 	add.w	r3, r7, #20
 8005f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f7a:	f107 0308 	add.w	r3, r7, #8
 8005f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f80:	4628      	mov	r0, r5
 8005f82:	f001 fbbd 	bl	8007700 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fc91 	bl	80078b6 <SDMMC_CmdBlockLength>
 8005f94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00c      	beq.n	8005fb6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <HAL_SD_ConfigWideBusOperation+0x130>)
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3728      	adds	r7, #40	; 0x28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	004005ff 	.word	0x004005ff

08005fd0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005fdc:	f107 030c 	add.w	r3, r7, #12
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f9de 	bl	80063a4 <SD_SendStatus>
 8005fe8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	0a5b      	lsrs	r3, r3, #9
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006006:	693b      	ldr	r3, [r7, #16]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f240 523a 	movw	r2, #1338	; 0x53a
 8006026:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff ffd1 	bl	8005fd0 <HAL_SD_GetCardState>
 800602e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b06      	cmp	r3, #6
 8006042:	d002      	beq.n	800604a <SD_DMATxAbort+0x3a>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b05      	cmp	r3, #5
 8006048:	d10a      	bne.n	8006060 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fcdc 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8006054:	4602      	mov	r2, r0
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	431a      	orrs	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f002 f957 	bl	800831c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800606e:	e002      	b.n	8006076 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff fd39 	bl	8005ae8 <HAL_SD_ErrorCallback>
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f240 523a 	movw	r2, #1338	; 0x53a
 8006094:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff ff9a 	bl	8005fd0 <HAL_SD_GetCardState>
 800609c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b06      	cmp	r3, #6
 80060b0:	d002      	beq.n	80060b8 <SD_DMARxAbort+0x3a>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b05      	cmp	r3, #5
 80060b6:	d10a      	bne.n	80060ce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 fca5 	bl	8007a0c <SDMMC_CmdStopTransfer>
 80060c2:	4602      	mov	r2, r0
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f002 f920 	bl	800831c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80060dc:	e002      	b.n	80060e4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fd02 	bl	8005ae8 <HAL_SD_ErrorCallback>
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060ec:	b5b0      	push	{r4, r5, r7, lr}
 80060ee:	b094      	sub	sp, #80	; 0x50
 80060f0:	af04      	add	r7, sp, #16
 80060f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80060f4:	2301      	movs	r3, #1
 80060f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 fb56 	bl	80077ae <SDIO_GetPowerState>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006108:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800610c:	e0b8      	b.n	8006280 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	2b03      	cmp	r3, #3
 8006114:	d02f      	beq.n	8006176 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f001 fd80 	bl	8007c20 <SDMMC_CmdSendCID>
 8006120:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <SD_InitCard+0x40>
    {
      return errorstate;
 8006128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612a:	e0a9      	b.n	8006280 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f001 fb80 	bl	8007838 <SDIO_GetResponse>
 8006138:	4602      	mov	r2, r0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2104      	movs	r1, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f001 fb77 	bl	8007838 <SDIO_GetResponse>
 800614a:	4602      	mov	r2, r0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2108      	movs	r1, #8
 8006156:	4618      	mov	r0, r3
 8006158:	f001 fb6e 	bl	8007838 <SDIO_GetResponse>
 800615c:	4602      	mov	r2, r0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	210c      	movs	r1, #12
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fb65 	bl	8007838 <SDIO_GetResponse>
 800616e:	4602      	mov	r2, r0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617a:	2b03      	cmp	r3, #3
 800617c:	d00d      	beq.n	800619a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f107 020e 	add.w	r2, r7, #14
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fd86 	bl	8007c9a <SDMMC_CmdSetRelAdd>
 800618e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <SD_InitCard+0xae>
    {
      return errorstate;
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	e072      	b.n	8006280 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d036      	beq.n	8006210 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80061a2:	89fb      	ldrh	r3, [r7, #14]
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f001 fd50 	bl	8007c5c <SDMMC_CmdSendCSD>
 80061bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c6:	e05b      	b.n	8006280 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fb32 	bl	8007838 <SDIO_GetResponse>
 80061d4:	4602      	mov	r2, r0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2104      	movs	r1, #4
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 fb29 	bl	8007838 <SDIO_GetResponse>
 80061e6:	4602      	mov	r2, r0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2108      	movs	r1, #8
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 fb20 	bl	8007838 <SDIO_GetResponse>
 80061f8:	4602      	mov	r2, r0
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	210c      	movs	r1, #12
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fb17 	bl	8007838 <SDIO_GetResponse>
 800620a:	4602      	mov	r2, r0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2104      	movs	r1, #4
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fb0e 	bl	8007838 <SDIO_GetResponse>
 800621c:	4603      	mov	r3, r0
 800621e:	0d1a      	lsrs	r2, r3, #20
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006224:	f107 0310 	add.w	r3, r7, #16
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fc66 	bl	8005afc <HAL_SD_GetCardCSD>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006236:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800623a:	e021      	b.n	8006280 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	2200      	movs	r2, #0
 8006248:	461c      	mov	r4, r3
 800624a:	4615      	mov	r5, r2
 800624c:	4622      	mov	r2, r4
 800624e:	462b      	mov	r3, r5
 8006250:	4608      	mov	r0, r1
 8006252:	f001 fbfd 	bl	8007a50 <SDMMC_CmdSelDesel>
 8006256:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <SD_InitCard+0x176>
  {
    return errorstate;
 800625e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006260:	e00e      	b.n	8006280 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681d      	ldr	r5, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	466c      	mov	r4, sp
 800626a:	f103 0210 	add.w	r2, r3, #16
 800626e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006274:	3304      	adds	r3, #4
 8006276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006278:	4628      	mov	r0, r5
 800627a:	f001 fa41 	bl	8007700 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3740      	adds	r7, #64	; 0x40
 8006284:	46bd      	mov	sp, r7
 8006286:	bdb0      	pop	{r4, r5, r7, pc}

08006288 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 fbf8 	bl	8007a96 <SDMMC_CmdGoIdleState>
 80062a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	e072      	b.n	8006398 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fc0b 	bl	8007ad2 <SDMMC_CmdOperCond>
 80062bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00d      	beq.n	80062e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 fbe1 	bl	8007a96 <SDMMC_CmdGoIdleState>
 80062d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	e05b      	b.n	8006398 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d137      	bne.n	800635e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fc0b 	bl	8007b10 <SDMMC_CmdAppCommand>
 80062fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d02d      	beq.n	800635e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006306:	e047      	b.n	8006398 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fbfe 	bl	8007b10 <SDMMC_CmdAppCommand>
 8006314:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <SD_PowerON+0x98>
    {
      return errorstate;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	e03b      	b.n	8006398 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	491e      	ldr	r1, [pc, #120]	; (80063a0 <SD_PowerON+0x118>)
 8006326:	4618      	mov	r0, r3
 8006328:	f001 fc14 	bl	8007b54 <SDMMC_CmdAppOperCommand>
 800632c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006338:	e02e      	b.n	8006398 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2100      	movs	r1, #0
 8006340:	4618      	mov	r0, r3
 8006342:	f001 fa79 	bl	8007838 <SDIO_GetResponse>
 8006346:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	0fdb      	lsrs	r3, r3, #31
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <SD_PowerON+0xcc>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <SD_PowerON+0xce>
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]

    count++;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	3301      	adds	r3, #1
 800635c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006364:	4293      	cmp	r3, r2
 8006366:	d802      	bhi.n	800636e <SD_PowerON+0xe6>
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0cc      	beq.n	8006308 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006374:	4293      	cmp	r3, r2
 8006376:	d902      	bls.n	800637e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800637c:	e00c      	b.n	8006398 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	645a      	str	r2, [r3, #68]	; 0x44
 800638e:	e002      	b.n	8006396 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	c1100000 	.word	0xc1100000

080063a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80063b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063b8:	e018      	b.n	80063ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f001 fc88 	bl	8007cdc <SDMMC_CmdSendStatus>
 80063cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	e009      	b.n	80063ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 fa2a 	bl	8007838 <SDIO_GetResponse>
 80063e4:	4602      	mov	r2, r0
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	2300      	movs	r3, #0
 8006402:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f001 fa14 	bl	8007838 <SDIO_GetResponse>
 8006410:	4603      	mov	r3, r0
 8006412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800641a:	d102      	bne.n	8006422 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800641c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006420:	e02f      	b.n	8006482 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006422:	f107 030c 	add.w	r3, r7, #12
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f879 	bl	8006520 <SD_FindSCR>
 800642e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	e023      	b.n	8006482 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01c      	beq.n	800647e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644c:	041b      	lsls	r3, r3, #16
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f001 fb5d 	bl	8007b10 <SDMMC_CmdAppCommand>
 8006456:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	e00f      	b.n	8006482 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2102      	movs	r1, #2
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fb96 	bl	8007b9a <SDMMC_CmdBusWidth>
 800646e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	e003      	b.n	8006482 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800647a:	2300      	movs	r3, #0
 800647c:	e001      	b.n	8006482 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800647e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 f9c9 	bl	8007838 <SDIO_GetResponse>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064b0:	d102      	bne.n	80064b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064b6:	e02f      	b.n	8006518 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064b8:	f107 030c 	add.w	r3, r7, #12
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f82e 	bl	8006520 <SD_FindSCR>
 80064c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	e023      	b.n	8006518 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01c      	beq.n	8006514 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f001 fb12 	bl	8007b10 <SDMMC_CmdAppCommand>
 80064ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	e00f      	b.n	8006518 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2100      	movs	r1, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	f001 fb4b 	bl	8007b9a <SDMMC_CmdBusWidth>
 8006504:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	e003      	b.n	8006518 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006510:	2300      	movs	r3, #0
 8006512:	e001      	b.n	8006518 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006514:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b08f      	sub	sp, #60	; 0x3c
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800652a:	f7fb fa61 	bl	80019f0 <HAL_GetTick>
 800652e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006534:	2300      	movs	r3, #0
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2108      	movs	r1, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f9b5 	bl	80078b6 <SDMMC_CmdBlockLength>
 800654c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	e0b2      	b.n	80066be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f001 fad3 	bl	8007b10 <SDMMC_CmdAppCommand>
 800656a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	e0a3      	b.n	80066be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800657a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800657c:	2308      	movs	r3, #8
 800657e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006580:	2330      	movs	r3, #48	; 0x30
 8006582:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006584:	2302      	movs	r3, #2
 8006586:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006588:	2300      	movs	r3, #0
 800658a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800658c:	2301      	movs	r3, #1
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f107 0210 	add.w	r2, r7, #16
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f001 f95f 	bl	800785e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 fb1a 	bl	8007bde <SDMMC_CmdSendSCR>
 80065aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d02a      	beq.n	8006608 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	e083      	b.n	80066be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00f      	beq.n	80065e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	f107 0208 	add.w	r2, r7, #8
 80065d0:	18d4      	adds	r4, r2, r3
 80065d2:	4608      	mov	r0, r1
 80065d4:	f001 f8bf 	bl	8007756 <SDIO_ReadFIFO>
 80065d8:	4603      	mov	r3, r0
 80065da:	6023      	str	r3, [r4, #0]
      index++;
 80065dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065de:	3301      	adds	r3, #1
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
 80065e2:	e006      	b.n	80065f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d012      	beq.n	8006618 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80065f2:	f7fb f9fd 	bl	80019f0 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006600:	d102      	bne.n	8006608 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006602:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006606:	e05a      	b.n	80066be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0cf      	beq.n	80065b6 <SD_FindSCR+0x96>
 8006616:	e000      	b.n	800661a <SD_FindSCR+0xfa>
      break;
 8006618:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2208      	movs	r2, #8
 800662e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006630:	2308      	movs	r3, #8
 8006632:	e044      	b.n	80066be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2202      	movs	r2, #2
 8006648:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800664a:	2302      	movs	r3, #2
 800664c:	e037      	b.n	80066be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2220      	movs	r2, #32
 8006662:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006664:	2320      	movs	r3, #32
 8006666:	e02a      	b.n	80066be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006670:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	061a      	lsls	r2, r3, #24
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800667e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006688:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	0e1b      	lsrs	r3, r3, #24
 800668e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	601a      	str	r2, [r3, #0]
    scr++;
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	3304      	adds	r3, #4
 8006698:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	061a      	lsls	r2, r3, #24
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	0e1b      	lsrs	r3, r3, #24
 80066b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	373c      	adds	r7, #60	; 0x3c
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd90      	pop	{r4, r7, pc}

080066c6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b086      	sub	sp, #24
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d03f      	beq.n	8006760 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80066e0:	2300      	movs	r3, #0
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e033      	b.n	800674e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 f833 	bl	8007756 <SDIO_ReadFIFO>
 80066f0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3b01      	subs	r3, #1
 8006704:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	b2da      	uxtb	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	3b01      	subs	r3, #1
 800671a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3b01      	subs	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	0e1b      	lsrs	r3, r3, #24
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3b01      	subs	r3, #1
 8006746:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3301      	adds	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b07      	cmp	r3, #7
 8006752:	d9c8      	bls.n	80066e6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006760:	bf00      	nop
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d043      	beq.n	800680a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e037      	b.n	80067f8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3b01      	subs	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	041a      	lsls	r2, r3, #16
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	061a      	lsls	r2, r3, #24
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3b01      	subs	r3, #1
 80067e0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f107 0208 	add.w	r2, r7, #8
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 ffbf 	bl	8007770 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	3301      	adds	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b07      	cmp	r3, #7
 80067fc:	d9c4      	bls.n	8006788 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800680a:	bf00      	nop
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e03f      	b.n	80068a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fa ff3b 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2224      	movs	r2, #36	; 0x24
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006854:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fcde 	bl	8007218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800686a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800687a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800688a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d11d      	bne.n	8006902 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_UART_Receive_IT+0x26>
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e016      	b.n	8006904 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_UART_Receive_IT+0x38>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e00f      	b.n	8006904 <HAL_UART_Receive_IT+0x58>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	461a      	mov	r2, r3
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fab5 	bl	8006e68 <UART_Start_Receive_IT>
 80068fe:	4603      	mov	r3, r0
 8006900:	e000      	b.n	8006904 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006902:	2302      	movs	r3, #2
  }
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b0ba      	sub	sp, #232	; 0xe8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006932:	2300      	movs	r3, #0
 8006934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006938:	2300      	movs	r3, #0
 800693a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800694a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10f      	bne.n	8006972 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <HAL_UART_IRQHandler+0x66>
 800695e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb99 	bl	80070a2 <UART_Receive_IT>
      return;
 8006970:	e256      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80de 	beq.w	8006b38 <HAL_UART_IRQHandler+0x22c>
 800697c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 80d1 	beq.w	8006b38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <HAL_UART_IRQHandler+0xae>
 80069a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <HAL_UART_IRQHandler+0xd2>
 80069c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f043 0202 	orr.w	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <HAL_UART_IRQHandler+0xf6>
 80069ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f043 0204 	orr.w	r2, r3, #4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <HAL_UART_IRQHandler+0x126>
 8006a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d105      	bne.n	8006a26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f043 0208 	orr.w	r2, r3, #8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 81ed 	beq.w	8006e16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_UART_IRQHandler+0x14e>
 8006a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fb24 	bl	80070a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <HAL_UART_IRQHandler+0x17a>
 8006a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d04f      	beq.n	8006b26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa2c 	bl	8006ee4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	d141      	bne.n	8006b1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3314      	adds	r3, #20
 8006ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1d9      	bne.n	8006a9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d013      	beq.n	8006b16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	4a7d      	ldr	r2, [pc, #500]	; (8006ce8 <HAL_UART_IRQHandler+0x3dc>)
 8006af4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fb fa4c 	bl	8001f98 <HAL_DMA_Abort_IT>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b14:	e00e      	b.n	8006b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f990 	bl	8006e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	e00a      	b.n	8006b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f98c 	bl	8006e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b24:	e006      	b.n	8006b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f988 	bl	8006e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b32:	e170      	b.n	8006e16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b34:	bf00      	nop
    return;
 8006b36:	e16e      	b.n	8006e16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	f040 814a 	bne.w	8006dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8143 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 813c 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60bb      	str	r3, [r7, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	f040 80b4 	bne.w	8006cec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8140 	beq.w	8006e1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	f080 8139 	bcs.w	8006e1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bba:	f000 8088 	beq.w	8006cce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1d9      	bne.n	8006bbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e1      	bne.n	8006c0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3314      	adds	r3, #20
 8006c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e3      	bne.n	8006c46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9e:	f023 0310 	bic.w	r3, r3, #16
 8006ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	330c      	adds	r3, #12
 8006cac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e3      	bne.n	8006c8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fb f8f5 	bl	8001eb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f8b6 	bl	8006e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ce4:	e099      	b.n	8006e1a <HAL_UART_IRQHandler+0x50e>
 8006ce6:	bf00      	nop
 8006ce8:	08006fab 	.word	0x08006fab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 808b 	beq.w	8006e1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8086 	beq.w	8006e1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	330c      	adds	r3, #12
 8006d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	330c      	adds	r3, #12
 8006d32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d36:	647a      	str	r2, [r7, #68]	; 0x44
 8006d38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e3      	bne.n	8006d12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3314      	adds	r3, #20
 8006d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e3      	bne.n	8006d4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	330c      	adds	r3, #12
 8006d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0310 	bic.w	r3, r3, #16
 8006da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	330c      	adds	r3, #12
 8006db0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006db4:	61fa      	str	r2, [r7, #28]
 8006db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	69b9      	ldr	r1, [r7, #24]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e3      	bne.n	8006d90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f83e 	bl	8006e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dd4:	e023      	b.n	8006e1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <HAL_UART_IRQHandler+0x4ea>
 8006de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f8ef 	bl	8006fd2 <UART_Transmit_IT>
    return;
 8006df4:	e014      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00e      	beq.n	8006e20 <HAL_UART_IRQHandler+0x514>
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f92f 	bl	8007072 <UART_EndTransmit_IT>
    return;
 8006e14:	e004      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
    return;
 8006e16:	bf00      	nop
 8006e18:	e002      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
      return;
 8006e1a:	bf00      	nop
 8006e1c:	e000      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
      return;
 8006e1e:	bf00      	nop
  }
}
 8006e20:	37e8      	adds	r7, #232	; 0xe8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop

08006e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	88fa      	ldrh	r2, [r7, #6]
 8006e80:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2222      	movs	r2, #34	; 0x22
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0220 	orr.w	r2, r2, #32
 8006ed4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b095      	sub	sp, #84	; 0x54
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f0c:	643a      	str	r2, [r7, #64]	; 0x40
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e5      	bne.n	8006eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3314      	adds	r3, #20
 8006f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3314      	adds	r3, #20
 8006f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e5      	bne.n	8006f20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d119      	bne.n	8006f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f023 0310 	bic.w	r3, r3, #16
 8006f72:	647b      	str	r3, [r7, #68]	; 0x44
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f7c:	61ba      	str	r2, [r7, #24]
 8006f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6979      	ldr	r1, [r7, #20]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e5      	bne.n	8006f5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f9e:	bf00      	nop
 8006fa0:	3754      	adds	r7, #84	; 0x54
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff ff39 	bl	8006e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b21      	cmp	r3, #33	; 0x21
 8006fe4:	d13e      	bne.n	8007064 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fee:	d114      	bne.n	800701a <UART_Transmit_IT+0x48>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d110      	bne.n	800701a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800700c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	621a      	str	r2, [r3, #32]
 8007018:	e008      	b.n	800702c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	1c59      	adds	r1, r3, #1
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6211      	str	r1, [r2, #32]
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29b      	uxth	r3, r3
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4619      	mov	r1, r3
 800703a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10f      	bne.n	8007060 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800704e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800705e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	e000      	b.n	8007066 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007088:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fec8 	bl	8006e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b08c      	sub	sp, #48	; 0x30
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b22      	cmp	r3, #34	; 0x22
 80070b4:	f040 80ab 	bne.w	800720e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c0:	d117      	bne.n	80070f2 <UART_Receive_IT+0x50>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d113      	bne.n	80070f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	1c9a      	adds	r2, r3, #2
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	629a      	str	r2, [r3, #40]	; 0x28
 80070f0:	e026      	b.n	8007140 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007104:	d007      	beq.n	8007116 <UART_Receive_IT+0x74>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <UART_Receive_IT+0x82>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	e008      	b.n	8007136 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007130:	b2da      	uxtb	r2, r3
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29b      	uxth	r3, r3
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4619      	mov	r1, r3
 800714e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007150:	2b00      	cmp	r3, #0
 8007152:	d15a      	bne.n	800720a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0220 	bic.w	r2, r2, #32
 8007162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	2b01      	cmp	r3, #1
 8007192:	d135      	bne.n	8007200 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	613b      	str	r3, [r7, #16]
   return(result);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f023 0310 	bic.w	r3, r3, #16
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ba:	623a      	str	r2, [r7, #32]
 80071bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	69f9      	ldr	r1, [r7, #28]
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e5      	bne.n	800719a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b10      	cmp	r3, #16
 80071da:	d10a      	bne.n	80071f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fe29 	bl	8006e50 <HAL_UARTEx_RxEventCallback>
 80071fe:	e002      	b.n	8007206 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7f9 ffaf 	bl	8001164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e002      	b.n	8007210 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	e000      	b.n	8007210 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800720e:	2302      	movs	r3, #2
  }
}
 8007210:	4618      	mov	r0, r3
 8007212:	3730      	adds	r7, #48	; 0x30
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800721c:	b0c0      	sub	sp, #256	; 0x100
 800721e:	af00      	add	r7, sp, #0
 8007220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	68d9      	ldr	r1, [r3, #12]
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	ea40 0301 	orr.w	r3, r0, r1
 8007240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	431a      	orrs	r2, r3
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	431a      	orrs	r2, r3
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007270:	f021 010c 	bic.w	r1, r1, #12
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800727e:	430b      	orrs	r3, r1
 8007280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007292:	6999      	ldr	r1, [r3, #24]
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	ea40 0301 	orr.w	r3, r0, r1
 800729e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b8f      	ldr	r3, [pc, #572]	; (80074e4 <UART_SetConfig+0x2cc>)
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d005      	beq.n	80072b8 <UART_SetConfig+0xa0>
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b8d      	ldr	r3, [pc, #564]	; (80074e8 <UART_SetConfig+0x2d0>)
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d104      	bne.n	80072c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072b8:	f7fc fc40 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 80072bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072c0:	e003      	b.n	80072ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072c2:	f7fc fc27 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 80072c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d4:	f040 810c 	bne.w	80074f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072ea:	4622      	mov	r2, r4
 80072ec:	462b      	mov	r3, r5
 80072ee:	1891      	adds	r1, r2, r2
 80072f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80072f2:	415b      	adcs	r3, r3
 80072f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072fa:	4621      	mov	r1, r4
 80072fc:	eb12 0801 	adds.w	r8, r2, r1
 8007300:	4629      	mov	r1, r5
 8007302:	eb43 0901 	adc.w	r9, r3, r1
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800731a:	4690      	mov	r8, r2
 800731c:	4699      	mov	r9, r3
 800731e:	4623      	mov	r3, r4
 8007320:	eb18 0303 	adds.w	r3, r8, r3
 8007324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007328:	462b      	mov	r3, r5
 800732a:	eb49 0303 	adc.w	r3, r9, r3
 800732e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800733e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007346:	460b      	mov	r3, r1
 8007348:	18db      	adds	r3, r3, r3
 800734a:	653b      	str	r3, [r7, #80]	; 0x50
 800734c:	4613      	mov	r3, r2
 800734e:	eb42 0303 	adc.w	r3, r2, r3
 8007352:	657b      	str	r3, [r7, #84]	; 0x54
 8007354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800735c:	f7f8 ffb8 	bl	80002d0 <__aeabi_uldivmod>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4b61      	ldr	r3, [pc, #388]	; (80074ec <UART_SetConfig+0x2d4>)
 8007366:	fba3 2302 	umull	r2, r3, r3, r2
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	011c      	lsls	r4, r3, #4
 800736e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800737c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	1891      	adds	r1, r2, r2
 8007386:	64b9      	str	r1, [r7, #72]	; 0x48
 8007388:	415b      	adcs	r3, r3
 800738a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800738c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007390:	4641      	mov	r1, r8
 8007392:	eb12 0a01 	adds.w	sl, r2, r1
 8007396:	4649      	mov	r1, r9
 8007398:	eb43 0b01 	adc.w	fp, r3, r1
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073b0:	4692      	mov	sl, r2
 80073b2:	469b      	mov	fp, r3
 80073b4:	4643      	mov	r3, r8
 80073b6:	eb1a 0303 	adds.w	r3, sl, r3
 80073ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073be:	464b      	mov	r3, r9
 80073c0:	eb4b 0303 	adc.w	r3, fp, r3
 80073c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073dc:	460b      	mov	r3, r1
 80073de:	18db      	adds	r3, r3, r3
 80073e0:	643b      	str	r3, [r7, #64]	; 0x40
 80073e2:	4613      	mov	r3, r2
 80073e4:	eb42 0303 	adc.w	r3, r2, r3
 80073e8:	647b      	str	r3, [r7, #68]	; 0x44
 80073ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073f2:	f7f8 ff6d 	bl	80002d0 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b3b      	ldr	r3, [pc, #236]	; (80074ec <UART_SetConfig+0x2d4>)
 80073fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	2264      	movs	r2, #100	; 0x64
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	1acb      	subs	r3, r1, r3
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007412:	4b36      	ldr	r3, [pc, #216]	; (80074ec <UART_SetConfig+0x2d4>)
 8007414:	fba3 2302 	umull	r2, r3, r3, r2
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007420:	441c      	add	r4, r3
 8007422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800742c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007434:	4642      	mov	r2, r8
 8007436:	464b      	mov	r3, r9
 8007438:	1891      	adds	r1, r2, r2
 800743a:	63b9      	str	r1, [r7, #56]	; 0x38
 800743c:	415b      	adcs	r3, r3
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007444:	4641      	mov	r1, r8
 8007446:	1851      	adds	r1, r2, r1
 8007448:	6339      	str	r1, [r7, #48]	; 0x30
 800744a:	4649      	mov	r1, r9
 800744c:	414b      	adcs	r3, r1
 800744e:	637b      	str	r3, [r7, #52]	; 0x34
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800745c:	4659      	mov	r1, fp
 800745e:	00cb      	lsls	r3, r1, #3
 8007460:	4651      	mov	r1, sl
 8007462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007466:	4651      	mov	r1, sl
 8007468:	00ca      	lsls	r2, r1, #3
 800746a:	4610      	mov	r0, r2
 800746c:	4619      	mov	r1, r3
 800746e:	4603      	mov	r3, r0
 8007470:	4642      	mov	r2, r8
 8007472:	189b      	adds	r3, r3, r2
 8007474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007478:	464b      	mov	r3, r9
 800747a:	460a      	mov	r2, r1
 800747c:	eb42 0303 	adc.w	r3, r2, r3
 8007480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007498:	460b      	mov	r3, r1
 800749a:	18db      	adds	r3, r3, r3
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
 800749e:	4613      	mov	r3, r2
 80074a0:	eb42 0303 	adc.w	r3, r2, r3
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074ae:	f7f8 ff0f 	bl	80002d0 <__aeabi_uldivmod>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <UART_SetConfig+0x2d4>)
 80074b8:	fba3 1302 	umull	r1, r3, r3, r2
 80074bc:	095b      	lsrs	r3, r3, #5
 80074be:	2164      	movs	r1, #100	; 0x64
 80074c0:	fb01 f303 	mul.w	r3, r1, r3
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	3332      	adds	r3, #50	; 0x32
 80074ca:	4a08      	ldr	r2, [pc, #32]	; (80074ec <UART_SetConfig+0x2d4>)
 80074cc:	fba2 2303 	umull	r2, r3, r2, r3
 80074d0:	095b      	lsrs	r3, r3, #5
 80074d2:	f003 0207 	and.w	r2, r3, #7
 80074d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4422      	add	r2, r4
 80074de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074e0:	e105      	b.n	80076ee <UART_SetConfig+0x4d6>
 80074e2:	bf00      	nop
 80074e4:	40011000 	.word	0x40011000
 80074e8:	40011400 	.word	0x40011400
 80074ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007502:	4642      	mov	r2, r8
 8007504:	464b      	mov	r3, r9
 8007506:	1891      	adds	r1, r2, r2
 8007508:	6239      	str	r1, [r7, #32]
 800750a:	415b      	adcs	r3, r3
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
 800750e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007512:	4641      	mov	r1, r8
 8007514:	1854      	adds	r4, r2, r1
 8007516:	4649      	mov	r1, r9
 8007518:	eb43 0501 	adc.w	r5, r3, r1
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	00eb      	lsls	r3, r5, #3
 8007526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800752a:	00e2      	lsls	r2, r4, #3
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	4643      	mov	r3, r8
 8007532:	18e3      	adds	r3, r4, r3
 8007534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007538:	464b      	mov	r3, r9
 800753a:	eb45 0303 	adc.w	r3, r5, r3
 800753e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800754e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800755e:	4629      	mov	r1, r5
 8007560:	008b      	lsls	r3, r1, #2
 8007562:	4621      	mov	r1, r4
 8007564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007568:	4621      	mov	r1, r4
 800756a:	008a      	lsls	r2, r1, #2
 800756c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007570:	f7f8 feae 	bl	80002d0 <__aeabi_uldivmod>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4b60      	ldr	r3, [pc, #384]	; (80076fc <UART_SetConfig+0x4e4>)
 800757a:	fba3 2302 	umull	r2, r3, r3, r2
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	011c      	lsls	r4, r3, #4
 8007582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007586:	2200      	movs	r2, #0
 8007588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800758c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	1891      	adds	r1, r2, r2
 800759a:	61b9      	str	r1, [r7, #24]
 800759c:	415b      	adcs	r3, r3
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a4:	4641      	mov	r1, r8
 80075a6:	1851      	adds	r1, r2, r1
 80075a8:	6139      	str	r1, [r7, #16]
 80075aa:	4649      	mov	r1, r9
 80075ac:	414b      	adcs	r3, r1
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075bc:	4659      	mov	r1, fp
 80075be:	00cb      	lsls	r3, r1, #3
 80075c0:	4651      	mov	r1, sl
 80075c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c6:	4651      	mov	r1, sl
 80075c8:	00ca      	lsls	r2, r1, #3
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	4642      	mov	r2, r8
 80075d2:	189b      	adds	r3, r3, r2
 80075d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075d8:	464b      	mov	r3, r9
 80075da:	460a      	mov	r2, r1
 80075dc:	eb42 0303 	adc.w	r3, r2, r3
 80075e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075fc:	4649      	mov	r1, r9
 80075fe:	008b      	lsls	r3, r1, #2
 8007600:	4641      	mov	r1, r8
 8007602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007606:	4641      	mov	r1, r8
 8007608:	008a      	lsls	r2, r1, #2
 800760a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800760e:	f7f8 fe5f 	bl	80002d0 <__aeabi_uldivmod>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4b39      	ldr	r3, [pc, #228]	; (80076fc <UART_SetConfig+0x4e4>)
 8007618:	fba3 1302 	umull	r1, r3, r3, r2
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	2164      	movs	r1, #100	; 0x64
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	3332      	adds	r3, #50	; 0x32
 800762a:	4a34      	ldr	r2, [pc, #208]	; (80076fc <UART_SetConfig+0x4e4>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007636:	441c      	add	r4, r3
 8007638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763c:	2200      	movs	r2, #0
 800763e:	673b      	str	r3, [r7, #112]	; 0x70
 8007640:	677a      	str	r2, [r7, #116]	; 0x74
 8007642:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007646:	4642      	mov	r2, r8
 8007648:	464b      	mov	r3, r9
 800764a:	1891      	adds	r1, r2, r2
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	415b      	adcs	r3, r3
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007656:	4641      	mov	r1, r8
 8007658:	1851      	adds	r1, r2, r1
 800765a:	6039      	str	r1, [r7, #0]
 800765c:	4649      	mov	r1, r9
 800765e:	414b      	adcs	r3, r1
 8007660:	607b      	str	r3, [r7, #4]
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800766e:	4659      	mov	r1, fp
 8007670:	00cb      	lsls	r3, r1, #3
 8007672:	4651      	mov	r1, sl
 8007674:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007678:	4651      	mov	r1, sl
 800767a:	00ca      	lsls	r2, r1, #3
 800767c:	4610      	mov	r0, r2
 800767e:	4619      	mov	r1, r3
 8007680:	4603      	mov	r3, r0
 8007682:	4642      	mov	r2, r8
 8007684:	189b      	adds	r3, r3, r2
 8007686:	66bb      	str	r3, [r7, #104]	; 0x68
 8007688:	464b      	mov	r3, r9
 800768a:	460a      	mov	r2, r1
 800768c:	eb42 0303 	adc.w	r3, r2, r3
 8007690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	663b      	str	r3, [r7, #96]	; 0x60
 800769c:	667a      	str	r2, [r7, #100]	; 0x64
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	f04f 0300 	mov.w	r3, #0
 80076a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076aa:	4649      	mov	r1, r9
 80076ac:	008b      	lsls	r3, r1, #2
 80076ae:	4641      	mov	r1, r8
 80076b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076b4:	4641      	mov	r1, r8
 80076b6:	008a      	lsls	r2, r1, #2
 80076b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076bc:	f7f8 fe08 	bl	80002d0 <__aeabi_uldivmod>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <UART_SetConfig+0x4e4>)
 80076c6:	fba3 1302 	umull	r1, r3, r3, r2
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	2164      	movs	r1, #100	; 0x64
 80076ce:	fb01 f303 	mul.w	r3, r1, r3
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	3332      	adds	r3, #50	; 0x32
 80076d8:	4a08      	ldr	r2, [pc, #32]	; (80076fc <UART_SetConfig+0x4e4>)
 80076da:	fba2 2303 	umull	r2, r3, r2, r3
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	f003 020f 	and.w	r2, r3, #15
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4422      	add	r2, r4
 80076ec:	609a      	str	r2, [r3, #8]
}
 80076ee:	bf00      	nop
 80076f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076f4:	46bd      	mov	sp, r7
 80076f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076fa:	bf00      	nop
 80076fc:	51eb851f 	.word	0x51eb851f

08007700 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007700:	b084      	sub	sp, #16
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	f107 001c 	add.w	r0, r7, #28
 800770e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007716:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007718:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800771a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800771e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007722:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007726:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800772a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800773a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	b004      	add	sp, #16
 8007754:	4770      	bx	lr

08007756 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2203      	movs	r2, #3
 800779e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0303 	and.w	r3, r3, #3
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077e8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80077ee:	431a      	orrs	r2, r3
                       Command->CPSM);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80077f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007804:	f023 030f 	bic.w	r3, r3, #15
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	b2db      	uxtb	r3, r3
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3314      	adds	r3, #20
 8007846:	461a      	mov	r2, r3
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	4413      	add	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
}  
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007884:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800788a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007890:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0

}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b088      	sub	sp, #32
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80078c4:	2310      	movs	r3, #16
 80078c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078c8:	2340      	movs	r3, #64	; 0x40
 80078ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff74 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80078e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e6:	2110      	movs	r1, #16
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fa19 	bl	8007d20 <SDMMC_GetCmdResp1>
 80078ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078f0:	69fb      	ldr	r3, [r7, #28]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b088      	sub	sp, #32
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007908:	2311      	movs	r3, #17
 800790a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff ff52 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007926:	f241 3288 	movw	r2, #5000	; 0x1388
 800792a:	2111      	movs	r1, #17
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f9f7 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007934:	69fb      	ldr	r3, [r7, #28]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800794c:	2312      	movs	r3, #18
 800794e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800795e:	f107 0308 	add.w	r3, r7, #8
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff ff30 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800796a:	f241 3288 	movw	r2, #5000	; 0x1388
 800796e:	2112      	movs	r1, #18
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f9d5 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007978:	69fb      	ldr	r3, [r7, #28]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b088      	sub	sp, #32
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007990:	2318      	movs	r3, #24
 8007992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007994:	2340      	movs	r3, #64	; 0x40
 8007996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800799c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff ff0e 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80079ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b2:	2118      	movs	r1, #24
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f9b3 	bl	8007d20 <SDMMC_GetCmdResp1>
 80079ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079bc:	69fb      	ldr	r3, [r7, #28]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b088      	sub	sp, #32
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80079d4:	2319      	movs	r3, #25
 80079d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079d8:	2340      	movs	r3, #64	; 0x40
 80079da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079e6:	f107 0308 	add.w	r3, r7, #8
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff feec 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80079f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f6:	2119      	movs	r1, #25
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f991 	bl	8007d20 <SDMMC_GetCmdResp1>
 80079fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a00:	69fb      	ldr	r3, [r7, #28]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007a18:	230c      	movs	r3, #12
 8007a1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a1c:	2340      	movs	r3, #64	; 0x40
 8007a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a2a:	f107 0308 	add.w	r3, r7, #8
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff feca 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007a36:	4a05      	ldr	r2, [pc, #20]	; (8007a4c <SDMMC_CmdStopTransfer+0x40>)
 8007a38:	210c      	movs	r1, #12
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f970 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a42:	69fb      	ldr	r3, [r7, #28]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3720      	adds	r7, #32
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	05f5e100 	.word	0x05f5e100

08007a50 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08a      	sub	sp, #40	; 0x28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a60:	2307      	movs	r3, #7
 8007a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a64:	2340      	movs	r3, #64	; 0x40
 8007a66:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a70:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a72:	f107 0310 	add.w	r3, r7, #16
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff fea6 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a82:	2107      	movs	r1, #7
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f94b 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007a8a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3728      	adds	r7, #40	; 0x28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b088      	sub	sp, #32
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ab4:	f107 0308 	add.w	r3, r7, #8
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fe85 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fb65 	bl	8008190 <SDMMC_GetCmdError>
 8007ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b088      	sub	sp, #32
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007ada:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007ae0:	2308      	movs	r3, #8
 8007ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fe66 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 faf8 	bl	80080f4 <SDMMC_GetCmdResp7>
 8007b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b06:	69fb      	ldr	r3, [r7, #28]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007b1e:	2337      	movs	r3, #55	; 0x37
 8007b20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b22:	2340      	movs	r3, #64	; 0x40
 8007b24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b30:	f107 0308 	add.w	r3, r7, #8
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fe47 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b40:	2137      	movs	r1, #55	; 0x37
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f8ec 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007b48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b6a:	2329      	movs	r3, #41	; 0x29
 8007b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b6e:	2340      	movs	r3, #64	; 0x40
 8007b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b7c:	f107 0308 	add.w	r3, r7, #8
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff fe21 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9ff 	bl	8007f8c <SDMMC_GetCmdResp3>
 8007b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b90:	69fb      	ldr	r3, [r7, #28]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b088      	sub	sp, #32
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007ba8:	2306      	movs	r3, #6
 8007baa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bac:	2340      	movs	r3, #64	; 0x40
 8007bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bba:	f107 0308 	add.w	r3, r7, #8
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff fe02 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bca:	2106      	movs	r1, #6
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f8a7 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3720      	adds	r7, #32
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b088      	sub	sp, #32
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007bea:	2333      	movs	r3, #51	; 0x33
 8007bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bfc:	f107 0308 	add.w	r3, r7, #8
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fde1 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0c:	2133      	movs	r1, #51	; 0x33
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f886 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c16:	69fb      	ldr	r3, [r7, #28]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007c30:	23c0      	movs	r3, #192	; 0xc0
 8007c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c3e:	f107 0308 	add.w	r3, r7, #8
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff fdc0 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f956 	bl	8007efc <SDMMC_GetCmdResp2>
 8007c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c52:	69fb      	ldr	r3, [r7, #28]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3720      	adds	r7, #32
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007c6a:	2309      	movs	r3, #9
 8007c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007c6e:	23c0      	movs	r3, #192	; 0xc0
 8007c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c72:	2300      	movs	r3, #0
 8007c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c7c:	f107 0308 	add.w	r3, r7, #8
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff fda1 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f937 	bl	8007efc <SDMMC_GetCmdResp2>
 8007c8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c90:	69fb      	ldr	r3, [r7, #28]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cac:	2340      	movs	r3, #64	; 0x40
 8007cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fd82 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	2103      	movs	r1, #3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f99c 	bl	8008008 <SDMMC_GetCmdResp6>
 8007cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007cea:	230d      	movs	r3, #13
 8007cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cee:	2340      	movs	r3, #64	; 0x40
 8007cf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cfc:	f107 0308 	add.w	r3, r7, #8
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fd61 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0c:	210d      	movs	r1, #13
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f806 	bl	8007d20 <SDMMC_GetCmdResp1>
 8007d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d16:	69fb      	ldr	r3, [r7, #28]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3720      	adds	r7, #32
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007d2e:	4b70      	ldr	r3, [pc, #448]	; (8007ef0 <SDMMC_GetCmdResp1+0x1d0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a70      	ldr	r2, [pc, #448]	; (8007ef4 <SDMMC_GetCmdResp1+0x1d4>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	0a5a      	lsrs	r2, r3, #9
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	1e5a      	subs	r2, r3, #1
 8007d46:	61fa      	str	r2, [r7, #28]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d50:	e0c9      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d56:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0ef      	beq.n	8007d42 <SDMMC_GetCmdResp1+0x22>
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ea      	bne.n	8007d42 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d7e:	2304      	movs	r3, #4
 8007d80:	e0b1      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0a6      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	22c5      	movs	r2, #197	; 0xc5
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff fd3d 	bl	800781e <SDIO_GetCommandResponse>
 8007da4:	4603      	mov	r3, r0
 8007da6:	461a      	mov	r2, r3
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d001      	beq.n	8007db2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e099      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007db2:	2100      	movs	r1, #0
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff fd3f 	bl	8007838 <SDIO_GetResponse>
 8007dba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4b4e      	ldr	r3, [pc, #312]	; (8007ef8 <SDMMC_GetCmdResp1+0x1d8>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e08d      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da02      	bge.n	8007dd6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dd4:	e087      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	e080      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007dee:	2380      	movs	r3, #128	; 0x80
 8007df0:	e079      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e00:	e071      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e10:	e069      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e20:	e061      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e30:	e059      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e40:	e051      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e50:	e049      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e60:	e041      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e70:	e039      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e80:	e031      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007e8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e90:	e029      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ea0:	e021      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007eac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007eb0:	e019      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007ebc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ec0:	e011      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ed0:	e009      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007edc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ee0:	e001      	b.n	8007ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000004 	.word	0x20000004
 8007ef4:	10624dd3 	.word	0x10624dd3
 8007ef8:	fdffe008 	.word	0xfdffe008

08007efc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f04:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <SDMMC_GetCmdResp2+0x88>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1f      	ldr	r2, [pc, #124]	; (8007f88 <SDMMC_GetCmdResp2+0x8c>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	0a5b      	lsrs	r3, r3, #9
 8007f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f14:	fb02 f303 	mul.w	r3, r2, r3
 8007f18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	1e5a      	subs	r2, r3, #1
 8007f1e:	60fa      	str	r2, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f28:	e026      	b.n	8007f78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0ef      	beq.n	8007f1a <SDMMC_GetCmdResp2+0x1e>
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1ea      	bne.n	8007f1a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2204      	movs	r2, #4
 8007f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f56:	2304      	movs	r3, #4
 8007f58:	e00e      	b.n	8007f78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d004      	beq.n	8007f70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e003      	b.n	8007f78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	22c5      	movs	r2, #197	; 0xc5
 8007f74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	20000004 	.word	0x20000004
 8007f88:	10624dd3 	.word	0x10624dd3

08007f8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f94:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <SDMMC_GetCmdResp3+0x74>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <SDMMC_GetCmdResp3+0x78>)
 8007f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9e:	0a5b      	lsrs	r3, r3, #9
 8007fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa4:	fb02 f303 	mul.w	r3, r2, r3
 8007fa8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	1e5a      	subs	r2, r3, #1
 8007fae:	60fa      	str	r2, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fb8:	e01b      	b.n	8007ff2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0ef      	beq.n	8007faa <SDMMC_GetCmdResp3+0x1e>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1ea      	bne.n	8007faa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fe6:	2304      	movs	r3, #4
 8007fe8:	e003      	b.n	8007ff2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	22c5      	movs	r2, #197	; 0xc5
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000004 	.word	0x20000004
 8008004:	10624dd3 	.word	0x10624dd3

08008008 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	460b      	mov	r3, r1
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008016:	4b35      	ldr	r3, [pc, #212]	; (80080ec <SDMMC_GetCmdResp6+0xe4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a35      	ldr	r2, [pc, #212]	; (80080f0 <SDMMC_GetCmdResp6+0xe8>)
 800801c:	fba2 2303 	umull	r2, r3, r2, r3
 8008020:	0a5b      	lsrs	r3, r3, #9
 8008022:	f241 3288 	movw	r2, #5000	; 0x1388
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	1e5a      	subs	r2, r3, #1
 8008030:	61fa      	str	r2, [r7, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d102      	bne.n	800803c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008036:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800803a:	e052      	b.n	80080e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0ef      	beq.n	800802c <SDMMC_GetCmdResp6+0x24>
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1ea      	bne.n	800802c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2204      	movs	r2, #4
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008068:	2304      	movs	r3, #4
 800806a:	e03a      	b.n	80080e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d004      	beq.n	8008082 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800807e:	2301      	movs	r3, #1
 8008080:	e02f      	b.n	80080e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff fbcb 	bl	800781e <SDIO_GetCommandResponse>
 8008088:	4603      	mov	r3, r0
 800808a:	461a      	mov	r2, r3
 800808c:	7afb      	ldrb	r3, [r7, #11]
 800808e:	4293      	cmp	r3, r2
 8008090:	d001      	beq.n	8008096 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008092:	2301      	movs	r3, #1
 8008094:	e025      	b.n	80080e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	22c5      	movs	r2, #197	; 0xc5
 800809a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800809c:	2100      	movs	r1, #0
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fbca 	bl	8007838 <SDIO_GetResponse>
 80080a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e011      	b.n	80080e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80080c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080cc:	e009      	b.n	80080e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80080d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080dc:	e001      	b.n	80080e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80080de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3720      	adds	r7, #32
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	20000004 	.word	0x20000004
 80080f0:	10624dd3 	.word	0x10624dd3

080080f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080fc:	4b22      	ldr	r3, [pc, #136]	; (8008188 <SDMMC_GetCmdResp7+0x94>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a22      	ldr	r2, [pc, #136]	; (800818c <SDMMC_GetCmdResp7+0x98>)
 8008102:	fba2 2303 	umull	r2, r3, r2, r3
 8008106:	0a5b      	lsrs	r3, r3, #9
 8008108:	f241 3288 	movw	r2, #5000	; 0x1388
 800810c:	fb02 f303 	mul.w	r3, r2, r3
 8008110:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	1e5a      	subs	r2, r3, #1
 8008116:	60fa      	str	r2, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800811c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008120:	e02c      	b.n	800817c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008126:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0ef      	beq.n	8008112 <SDMMC_GetCmdResp7+0x1e>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1ea      	bne.n	8008112 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2204      	movs	r2, #4
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800814e:	2304      	movs	r3, #4
 8008150:	e014      	b.n	800817c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d004      	beq.n	8008168 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008164:	2301      	movs	r3, #1
 8008166:	e009      	b.n	800817c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2240      	movs	r2, #64	; 0x40
 8008178:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800817a:	2300      	movs	r3, #0
  
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	20000004 	.word	0x20000004
 800818c:	10624dd3 	.word	0x10624dd3

08008190 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008198:	4b11      	ldr	r3, [pc, #68]	; (80081e0 <SDMMC_GetCmdError+0x50>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a11      	ldr	r2, [pc, #68]	; (80081e4 <SDMMC_GetCmdError+0x54>)
 800819e:	fba2 2303 	umull	r2, r3, r2, r3
 80081a2:	0a5b      	lsrs	r3, r3, #9
 80081a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a8:	fb02 f303 	mul.w	r3, r2, r3
 80081ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1e5a      	subs	r2, r3, #1
 80081b2:	60fa      	str	r2, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d102      	bne.n	80081be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081bc:	e009      	b.n	80081d2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0f1      	beq.n	80081ae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	22c5      	movs	r2, #197	; 0xc5
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000004 	.word	0x20000004
 80081e4:	10624dd3 	.word	0x10624dd3

080081e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80081ec:	4904      	ldr	r1, [pc, #16]	; (8008200 <MX_FATFS_Init+0x18>)
 80081ee:	4805      	ldr	r0, [pc, #20]	; (8008204 <MX_FATFS_Init+0x1c>)
 80081f0:	f002 ffe4 	bl	800b1bc <FATFS_LinkDriver>
 80081f4:	4603      	mov	r3, r0
 80081f6:	461a      	mov	r2, r3
 80081f8:	4b03      	ldr	r3, [pc, #12]	; (8008208 <MX_FATFS_Init+0x20>)
 80081fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081fc:	bf00      	nop
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20000b54 	.word	0x20000b54
 8008204:	0800bc0c 	.word	0x0800bc0c
 8008208:	20000b50 	.word	0x20000b50

0800820c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008210:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008212:	4618      	mov	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008226:	f000 f8ac 	bl	8008382 <BSP_SD_IsDetected>
 800822a:	4603      	mov	r3, r0
 800822c:	2b01      	cmp	r3, #1
 800822e:	d001      	beq.n	8008234 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e012      	b.n	800825a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008234:	480b      	ldr	r0, [pc, #44]	; (8008264 <BSP_SD_Init+0x48>)
 8008236:	f7fc fecd 	bl	8004fd4 <HAL_SD_Init>
 800823a:	4603      	mov	r3, r0
 800823c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d109      	bne.n	8008258 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008248:	4806      	ldr	r0, [pc, #24]	; (8008264 <BSP_SD_Init+0x48>)
 800824a:	f7fd fe27 	bl	8005e9c <HAL_SD_ConfigWideBusOperation>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008258:	79fb      	ldrb	r3, [r7, #7]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000194 	.word	0x20000194

08008268 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	68f9      	ldr	r1, [r7, #12]
 8008284:	4806      	ldr	r0, [pc, #24]	; (80082a0 <BSP_SD_ReadBlocks+0x38>)
 8008286:	f7fc ff55 	bl	8005134 <HAL_SD_ReadBlocks>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000194 	.word	0x20000194

080082a4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	68f9      	ldr	r1, [r7, #12]
 80082c0:	4806      	ldr	r0, [pc, #24]	; (80082dc <BSP_SD_WriteBlocks+0x38>)
 80082c2:	f7fd f915 	bl	80054f0 <HAL_SD_WriteBlocks>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000194 	.word	0x20000194

080082e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80082e4:	4805      	ldr	r0, [pc, #20]	; (80082fc <BSP_SD_GetCardState+0x1c>)
 80082e6:	f7fd fe73 	bl	8005fd0 <HAL_SD_GetCardState>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	bf14      	ite	ne
 80082f0:	2301      	movne	r3, #1
 80082f2:	2300      	moveq	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20000194 	.word	0x20000194

08008300 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4803      	ldr	r0, [pc, #12]	; (8008318 <BSP_SD_GetCardInfo+0x18>)
 800830c:	f7fd fd9a 	bl	8005e44 <HAL_SD_GetCardInfo>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000194 	.word	0x20000194

0800831c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008324:	f000 f818 	bl	8008358 <BSP_SD_AbortCallback>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008338:	f000 f815 	bl	8008366 <BSP_SD_WriteCpltCallback>
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800834c:	f000 f812 	bl	8008374 <BSP_SD_ReadCpltCallback>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0

}
 800835c:	bf00      	nop
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8008366:	b480      	push	{r7}
 8008368:	af00      	add	r7, sp, #0

}
 800836a:	bf00      	nop
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0

}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008388:	2301      	movs	r3, #1
 800838a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800838c:	f000 f80c 	bl	80083a8 <BSP_PlatformIsDetected>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008396:	2300      	movs	r3, #0
 8008398:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	b2db      	uxtb	r3, r3
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80083ae:	2301      	movs	r3, #1
 80083b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80083b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80083b6:	4806      	ldr	r0, [pc, #24]	; (80083d0 <BSP_PlatformIsDetected+0x28>)
 80083b8:	f7fa fa0e 	bl	80027d8 <HAL_GPIO_ReadPin>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80083c2:	2300      	movs	r3, #0
 80083c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80083c6:	79fb      	ldrb	r3, [r7, #7]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	40020400 	.word	0x40020400

080083d4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80083de:	4b0b      	ldr	r3, [pc, #44]	; (800840c <SD_CheckStatus+0x38>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80083e4:	f7ff ff7c 	bl	80082e0 <BSP_SD_GetCardState>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d107      	bne.n	80083fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80083ee:	4b07      	ldr	r3, [pc, #28]	; (800840c <SD_CheckStatus+0x38>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f023 0301 	bic.w	r3, r3, #1
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	4b04      	ldr	r3, [pc, #16]	; (800840c <SD_CheckStatus+0x38>)
 80083fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80083fe:	4b03      	ldr	r3, [pc, #12]	; (800840c <SD_CheckStatus+0x38>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	b2db      	uxtb	r3, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	2000000d 	.word	0x2000000d

08008410 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <SD_initialize+0x38>)
 800841c:	2201      	movs	r2, #1
 800841e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008420:	f7ff fefc 	bl	800821c <BSP_SD_Init>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d107      	bne.n	800843a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff ffd1 	bl	80083d4 <SD_CheckStatus>
 8008432:	4603      	mov	r3, r0
 8008434:	461a      	mov	r2, r3
 8008436:	4b04      	ldr	r3, [pc, #16]	; (8008448 <SD_initialize+0x38>)
 8008438:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800843a:	4b03      	ldr	r3, [pc, #12]	; (8008448 <SD_initialize+0x38>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	b2db      	uxtb	r3, r3
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	2000000d 	.word	0x2000000d

0800844c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008456:	79fb      	ldrb	r3, [r7, #7]
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff ffbb 	bl	80083d4 <SD_CheckStatus>
 800845e:	4603      	mov	r3, r0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	607a      	str	r2, [r7, #4]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800847c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	68b8      	ldr	r0, [r7, #8]
 8008486:	f7ff feef 	bl	8008268 <BSP_SD_ReadBlocks>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d107      	bne.n	80084a0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008490:	bf00      	nop
 8008492:	f7ff ff25 	bl	80082e0 <BSP_SD_GetCardState>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1fa      	bne.n	8008492 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80084be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	68b8      	ldr	r0, [r7, #8]
 80084c8:	f7ff feec 	bl	80082a4 <BSP_SD_WriteBlocks>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d107      	bne.n	80084e2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80084d2:	bf00      	nop
 80084d4:	f7ff ff04 	bl	80082e0 <BSP_SD_GetCardState>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1fa      	bne.n	80084d4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08c      	sub	sp, #48	; 0x30
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	603a      	str	r2, [r7, #0]
 80084f6:	71fb      	strb	r3, [r7, #7]
 80084f8:	460b      	mov	r3, r1
 80084fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008502:	4b25      	ldr	r3, [pc, #148]	; (8008598 <SD_ioctl+0xac>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <SD_ioctl+0x28>
 8008510:	2303      	movs	r3, #3
 8008512:	e03c      	b.n	800858e <SD_ioctl+0xa2>

  switch (cmd)
 8008514:	79bb      	ldrb	r3, [r7, #6]
 8008516:	2b03      	cmp	r3, #3
 8008518:	d834      	bhi.n	8008584 <SD_ioctl+0x98>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <SD_ioctl+0x34>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	08008531 	.word	0x08008531
 8008524:	08008539 	.word	0x08008539
 8008528:	08008551 	.word	0x08008551
 800852c:	0800856b 	.word	0x0800856b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008536:	e028      	b.n	800858a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fedf 	bl	8008300 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800854e:	e01c      	b.n	800858a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008550:	f107 030c 	add.w	r3, r7, #12
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fed3 	bl	8008300 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	b29a      	uxth	r2, r3
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008568:	e00f      	b.n	800858a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800856a:	f107 030c 	add.w	r3, r7, #12
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff fec6 	bl	8008300 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	0a5a      	lsrs	r2, r3, #9
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008582:	e002      	b.n	800858a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008584:	2304      	movs	r3, #4
 8008586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800858a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800858e:	4618      	mov	r0, r3
 8008590:	3730      	adds	r7, #48	; 0x30
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	2000000d 	.word	0x2000000d

0800859c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	4a08      	ldr	r2, [pc, #32]	; (80085cc <disk_status+0x30>)
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	79fa      	ldrb	r2, [r7, #7]
 80085b4:	4905      	ldr	r1, [pc, #20]	; (80085cc <disk_status+0x30>)
 80085b6:	440a      	add	r2, r1
 80085b8:	7a12      	ldrb	r2, [r2, #8]
 80085ba:	4610      	mov	r0, r2
 80085bc:	4798      	blx	r3
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20000db0 	.word	0x20000db0

080085d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	4a0d      	ldr	r2, [pc, #52]	; (8008618 <disk_initialize+0x48>)
 80085e2:	5cd3      	ldrb	r3, [r2, r3]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d111      	bne.n	800860c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	4a0b      	ldr	r2, [pc, #44]	; (8008618 <disk_initialize+0x48>)
 80085ec:	2101      	movs	r1, #1
 80085ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	4a09      	ldr	r2, [pc, #36]	; (8008618 <disk_initialize+0x48>)
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	79fa      	ldrb	r2, [r7, #7]
 80085fe:	4906      	ldr	r1, [pc, #24]	; (8008618 <disk_initialize+0x48>)
 8008600:	440a      	add	r2, r1
 8008602:	7a12      	ldrb	r2, [r2, #8]
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000db0 	.word	0x20000db0

0800861c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	4a0a      	ldr	r2, [pc, #40]	; (8008658 <disk_read+0x3c>)
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	689c      	ldr	r4, [r3, #8]
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	4a07      	ldr	r2, [pc, #28]	; (8008658 <disk_read+0x3c>)
 800863c:	4413      	add	r3, r2
 800863e:	7a18      	ldrb	r0, [r3, #8]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	47a0      	blx	r4
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]
  return res;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
}
 800864e:	4618      	mov	r0, r3
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	bd90      	pop	{r4, r7, pc}
 8008656:	bf00      	nop
 8008658:	20000db0 	.word	0x20000db0

0800865c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800865c:	b590      	push	{r4, r7, lr}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <disk_write+0x3c>)
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	68dc      	ldr	r4, [r3, #12]
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	4a07      	ldr	r2, [pc, #28]	; (8008698 <disk_write+0x3c>)
 800867c:	4413      	add	r3, r2
 800867e:	7a18      	ldrb	r0, [r3, #8]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	47a0      	blx	r4
 8008688:	4603      	mov	r3, r0
 800868a:	75fb      	strb	r3, [r7, #23]
  return res;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
}
 800868e:	4618      	mov	r0, r3
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	bd90      	pop	{r4, r7, pc}
 8008696:	bf00      	nop
 8008698:	20000db0 	.word	0x20000db0

0800869c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	603a      	str	r2, [r7, #0]
 80086a6:	71fb      	strb	r3, [r7, #7]
 80086a8:	460b      	mov	r3, r1
 80086aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	4a09      	ldr	r2, [pc, #36]	; (80086d4 <disk_ioctl+0x38>)
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	79fa      	ldrb	r2, [r7, #7]
 80086ba:	4906      	ldr	r1, [pc, #24]	; (80086d4 <disk_ioctl+0x38>)
 80086bc:	440a      	add	r2, r1
 80086be:	7a10      	ldrb	r0, [r2, #8]
 80086c0:	79b9      	ldrb	r1, [r7, #6]
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	4798      	blx	r3
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000db0 	.word	0x20000db0

080086d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3301      	adds	r3, #1
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80086e8:	89fb      	ldrh	r3, [r7, #14]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	b21a      	sxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	b21b      	sxth	r3, r3
 80086f4:	4313      	orrs	r3, r2
 80086f6:	b21b      	sxth	r3, r3
 80086f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80086fa:	89fb      	ldrh	r3, [r7, #14]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3303      	adds	r3, #3
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	3202      	adds	r2, #2
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	3201      	adds	r2, #1
 800872e:	7812      	ldrb	r2, [r2, #0]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	7812      	ldrb	r2, [r2, #0]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008740:	68fb      	ldr	r3, [r7, #12]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	460b      	mov	r3, r1
 8008758:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	887a      	ldrh	r2, [r7, #2]
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	887b      	ldrh	r3, [r7, #2]
 8008768:	0a1b      	lsrs	r3, r3, #8
 800876a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	607a      	str	r2, [r7, #4]
 8008772:	887a      	ldrh	r2, [r7, #2]
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	701a      	strb	r2, [r3, #0]
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	b2d2      	uxtb	r2, r2
 80087aa:	701a      	strb	r2, [r3, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	0a1b      	lsrs	r3, r3, #8
 80087c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	701a      	strb	r2, [r3, #0]
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	1c53      	adds	r3, r2, #1
 80087fa:	613b      	str	r3, [r7, #16]
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	1c59      	adds	r1, r3, #1
 8008800:	6179      	str	r1, [r7, #20]
 8008802:	7812      	ldrb	r2, [r2, #0]
 8008804:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	3b01      	subs	r3, #1
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1f1      	bne.n	80087f6 <mem_cpy+0x1a>
	}
}
 8008812:	bf00      	nop
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800881e:	b480      	push	{r7}
 8008820:	b087      	sub	sp, #28
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	617a      	str	r2, [r7, #20]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3b01      	subs	r3, #1
 800883e:	607b      	str	r3, [r7, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f3      	bne.n	800882e <mem_set+0x10>
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	371c      	adds	r7, #28
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008854:	b480      	push	{r7}
 8008856:	b089      	sub	sp, #36	; 0x24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	61fb      	str	r3, [r7, #28]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	61fa      	str	r2, [r7, #28]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	4619      	mov	r1, r3
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	61ba      	str	r2, [r7, #24]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	1acb      	subs	r3, r1, r3
 8008880:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3b01      	subs	r3, #1
 8008886:	607b      	str	r3, [r7, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <mem_cmp+0x40>
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0eb      	beq.n	800886c <mem_cmp+0x18>

	return r;
 8008894:	697b      	ldr	r3, [r7, #20]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3724      	adds	r7, #36	; 0x24
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80088ac:	e002      	b.n	80088b4 <chk_chr+0x12>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3301      	adds	r3, #1
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <chk_chr+0x26>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	461a      	mov	r2, r3
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d1f2      	bne.n	80088ae <chk_chr+0xc>
	return *str;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	781b      	ldrb	r3, [r3, #0]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088e2:	2300      	movs	r3, #0
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	e029      	b.n	8008940 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80088ec:	4a27      	ldr	r2, [pc, #156]	; (800898c <chk_lock+0xb4>)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	4413      	add	r3, r2
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01d      	beq.n	8008936 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088fa:	4a24      	ldr	r2, [pc, #144]	; (800898c <chk_lock+0xb4>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	4413      	add	r3, r2
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d116      	bne.n	800893a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800890c:	4a1f      	ldr	r2, [pc, #124]	; (800898c <chk_lock+0xb4>)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	4413      	add	r3, r2
 8008914:	3304      	adds	r3, #4
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800891c:	429a      	cmp	r2, r3
 800891e:	d10c      	bne.n	800893a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008920:	4a1a      	ldr	r2, [pc, #104]	; (800898c <chk_lock+0xb4>)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	4413      	add	r3, r2
 8008928:	3308      	adds	r3, #8
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008930:	429a      	cmp	r2, r3
 8008932:	d102      	bne.n	800893a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008934:	e007      	b.n	8008946 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008936:	2301      	movs	r3, #1
 8008938:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3301      	adds	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d9d2      	bls.n	80088ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d109      	bne.n	8008960 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <chk_lock+0x80>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d101      	bne.n	800895c <chk_lock+0x84>
 8008958:	2300      	movs	r3, #0
 800895a:	e010      	b.n	800897e <chk_lock+0xa6>
 800895c:	2312      	movs	r3, #18
 800895e:	e00e      	b.n	800897e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d108      	bne.n	8008978 <chk_lock+0xa0>
 8008966:	4a09      	ldr	r2, [pc, #36]	; (800898c <chk_lock+0xb4>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	4413      	add	r3, r2
 800896e:	330c      	adds	r3, #12
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008976:	d101      	bne.n	800897c <chk_lock+0xa4>
 8008978:	2310      	movs	r3, #16
 800897a:	e000      	b.n	800897e <chk_lock+0xa6>
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000d90 	.word	0x20000d90

08008990 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
 800899a:	e002      	b.n	80089a2 <enq_lock+0x12>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3301      	adds	r3, #1
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d806      	bhi.n	80089b6 <enq_lock+0x26>
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <enq_lock+0x40>)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	4413      	add	r3, r2
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f2      	bne.n	800899c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	bf14      	ite	ne
 80089bc:	2301      	movne	r3, #1
 80089be:	2300      	moveq	r3, #0
 80089c0:	b2db      	uxtb	r3, r3
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000d90 	.word	0x20000d90

080089d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	e01f      	b.n	8008a24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80089e4:	4a41      	ldr	r2, [pc, #260]	; (8008aec <inc_lock+0x118>)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	4413      	add	r3, r2
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d113      	bne.n	8008a1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80089f6:	4a3d      	ldr	r2, [pc, #244]	; (8008aec <inc_lock+0x118>)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d109      	bne.n	8008a1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008a0a:	4a38      	ldr	r2, [pc, #224]	; (8008aec <inc_lock+0x118>)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	4413      	add	r3, r2
 8008a12:	3308      	adds	r3, #8
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d006      	beq.n	8008a2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d9dc      	bls.n	80089e4 <inc_lock+0x10>
 8008a2a:	e000      	b.n	8008a2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008a2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d132      	bne.n	8008a9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e002      	b.n	8008a40 <inc_lock+0x6c>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d806      	bhi.n	8008a54 <inc_lock+0x80>
 8008a46:	4a29      	ldr	r2, [pc, #164]	; (8008aec <inc_lock+0x118>)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	4413      	add	r3, r2
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1f2      	bne.n	8008a3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d101      	bne.n	8008a5e <inc_lock+0x8a>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e040      	b.n	8008ae0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4922      	ldr	r1, [pc, #136]	; (8008aec <inc_lock+0x118>)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	011b      	lsls	r3, r3, #4
 8008a68:	440b      	add	r3, r1
 8008a6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	491e      	ldr	r1, [pc, #120]	; (8008aec <inc_lock+0x118>)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	440b      	add	r3, r1
 8008a78:	3304      	adds	r3, #4
 8008a7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	695a      	ldr	r2, [r3, #20]
 8008a80:	491a      	ldr	r1, [pc, #104]	; (8008aec <inc_lock+0x118>)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	440b      	add	r3, r1
 8008a88:	3308      	adds	r3, #8
 8008a8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008a8c:	4a17      	ldr	r2, [pc, #92]	; (8008aec <inc_lock+0x118>)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	4413      	add	r3, r2
 8008a94:	330c      	adds	r3, #12
 8008a96:	2200      	movs	r2, #0
 8008a98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <inc_lock+0xe0>
 8008aa0:	4a12      	ldr	r2, [pc, #72]	; (8008aec <inc_lock+0x118>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	4413      	add	r3, r2
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <inc_lock+0xe0>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e015      	b.n	8008ae0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d108      	bne.n	8008acc <inc_lock+0xf8>
 8008aba:	4a0c      	ldr	r2, [pc, #48]	; (8008aec <inc_lock+0x118>)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	4413      	add	r3, r2
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	e001      	b.n	8008ad0 <inc_lock+0xfc>
 8008acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ad0:	4906      	ldr	r1, [pc, #24]	; (8008aec <inc_lock+0x118>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	440b      	add	r3, r1
 8008ad8:	330c      	adds	r3, #12
 8008ada:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	20000d90 	.word	0x20000d90

08008af0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d825      	bhi.n	8008b50 <dec_lock+0x60>
		n = Files[i].ctr;
 8008b04:	4a17      	ldr	r2, [pc, #92]	; (8008b64 <dec_lock+0x74>)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	4413      	add	r3, r2
 8008b0c:	330c      	adds	r3, #12
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008b12:	89fb      	ldrh	r3, [r7, #14]
 8008b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b18:	d101      	bne.n	8008b1e <dec_lock+0x2e>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008b1e:	89fb      	ldrh	r3, [r7, #14]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <dec_lock+0x3a>
 8008b24:	89fb      	ldrh	r3, [r7, #14]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008b2a:	4a0e      	ldr	r2, [pc, #56]	; (8008b64 <dec_lock+0x74>)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	4413      	add	r3, r2
 8008b32:	330c      	adds	r3, #12
 8008b34:	89fa      	ldrh	r2, [r7, #14]
 8008b36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b38:	89fb      	ldrh	r3, [r7, #14]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d105      	bne.n	8008b4a <dec_lock+0x5a>
 8008b3e:	4a09      	ldr	r2, [pc, #36]	; (8008b64 <dec_lock+0x74>)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	4413      	add	r3, r2
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	737b      	strb	r3, [r7, #13]
 8008b4e:	e001      	b.n	8008b54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b50:	2302      	movs	r3, #2
 8008b52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008b54:	7b7b      	ldrb	r3, [r7, #13]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000d90 	.word	0x20000d90

08008b68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	e010      	b.n	8008b98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008b76:	4a0d      	ldr	r2, [pc, #52]	; (8008bac <clear_lock+0x44>)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	4413      	add	r3, r2
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d105      	bne.n	8008b92 <clear_lock+0x2a>
 8008b86:	4a09      	ldr	r2, [pc, #36]	; (8008bac <clear_lock+0x44>)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	4413      	add	r3, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3301      	adds	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d9eb      	bls.n	8008b76 <clear_lock+0xe>
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	20000d90 	.word	0x20000d90

08008bb0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	78db      	ldrb	r3, [r3, #3]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d034      	beq.n	8008c2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7858      	ldrb	r0, [r3, #1]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	f7ff fd40 	bl	800865c <disk_write>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
 8008be6:	e022      	b.n	8008c2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	1ad2      	subs	r2, r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d217      	bcs.n	8008c2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	789b      	ldrb	r3, [r3, #2]
 8008c02:	613b      	str	r3, [r7, #16]
 8008c04:	e010      	b.n	8008c28 <sync_window+0x78>
					wsect += fs->fsize;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7858      	ldrb	r0, [r3, #1]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	f7ff fd1d 	bl	800865c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d8eb      	bhi.n	8008c06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d01b      	beq.n	8008c88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff ffad 	bl	8008bb0 <sync_window>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d113      	bne.n	8008c88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	7858      	ldrb	r0, [r3, #1]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	f7ff fcd5 	bl	800861c <disk_read>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ff87 	bl	8008bb0 <sync_window>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d158      	bne.n	8008d5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d148      	bne.n	8008d46 <sync_fs+0xb2>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	791b      	ldrb	r3, [r3, #4]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d144      	bne.n	8008d46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3330      	adds	r3, #48	; 0x30
 8008cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff fda9 	bl	800881e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3330      	adds	r3, #48	; 0x30
 8008cd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cd4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fd38 	bl	800874e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3330      	adds	r3, #48	; 0x30
 8008ce2:	4921      	ldr	r1, [pc, #132]	; (8008d68 <sync_fs+0xd4>)
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7ff fd4d 	bl	8008784 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3330      	adds	r3, #48	; 0x30
 8008cee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008cf2:	491e      	ldr	r1, [pc, #120]	; (8008d6c <sync_fs+0xd8>)
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7ff fd45 	bl	8008784 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	3330      	adds	r3, #48	; 0x30
 8008cfe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	4619      	mov	r1, r3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	f7ff fd3b 	bl	8008784 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3330      	adds	r3, #48	; 0x30
 8008d12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7ff fd31 	bl	8008784 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	7858      	ldrb	r0, [r3, #1]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	f7ff fc8e 	bl	800865c <disk_write>
			fs->fsi_flag = 0;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	785b      	ldrb	r3, [r3, #1]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff fca4 	bl	800869c <disk_ioctl>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <sync_fs+0xca>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	41615252 	.word	0x41615252
 8008d6c:	61417272 	.word	0x61417272

08008d70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	3b02      	subs	r3, #2
 8008d7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	3b02      	subs	r3, #2
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d301      	bcc.n	8008d90 <clust2sect+0x20>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e008      	b.n	8008da2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	895b      	ldrh	r3, [r3, #10]
 8008d94:	461a      	mov	r2, r3
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	fb03 f202 	mul.w	r2, r3, r2
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da0:	4413      	add	r3, r2
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b086      	sub	sp, #24
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d904      	bls.n	8008dce <get_fat+0x20>
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d302      	bcc.n	8008dd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008dce:	2301      	movs	r3, #1
 8008dd0:	617b      	str	r3, [r7, #20]
 8008dd2:	e08f      	b.n	8008ef4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d062      	beq.n	8008ea8 <get_fat+0xfa>
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	dc7c      	bgt.n	8008ee0 <get_fat+0x132>
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d002      	beq.n	8008df0 <get_fat+0x42>
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d042      	beq.n	8008e74 <get_fat+0xc6>
 8008dee:	e077      	b.n	8008ee0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	085b      	lsrs	r3, r3, #1
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	6a1a      	ldr	r2, [r3, #32]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	0a5b      	lsrs	r3, r3, #9
 8008e06:	4413      	add	r3, r2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6938      	ldr	r0, [r7, #16]
 8008e0c:	f7ff ff14 	bl	8008c38 <move_window>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d167      	bne.n	8008ee6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	60fa      	str	r2, [r7, #12]
 8008e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4413      	add	r3, r2
 8008e24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	6a1a      	ldr	r2, [r3, #32]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	0a5b      	lsrs	r3, r3, #9
 8008e32:	4413      	add	r3, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	6938      	ldr	r0, [r7, #16]
 8008e38:	f7ff fefe 	bl	8008c38 <move_window>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d153      	bne.n	8008eea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	461a      	mov	r2, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <get_fat+0xbc>
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	091b      	lsrs	r3, r3, #4
 8008e68:	e002      	b.n	8008e70 <get_fat+0xc2>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e70:	617b      	str	r3, [r7, #20]
			break;
 8008e72:	e03f      	b.n	8008ef4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6a1a      	ldr	r2, [r3, #32]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	4413      	add	r3, r2
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6938      	ldr	r0, [r7, #16]
 8008e82:	f7ff fed9 	bl	8008c38 <move_window>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d130      	bne.n	8008eee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008e9a:	4413      	add	r3, r2
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fc1b 	bl	80086d8 <ld_word>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	617b      	str	r3, [r7, #20]
			break;
 8008ea6:	e025      	b.n	8008ef4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	6a1a      	ldr	r2, [r3, #32]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	09db      	lsrs	r3, r3, #7
 8008eb0:	4413      	add	r3, r2
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6938      	ldr	r0, [r7, #16]
 8008eb6:	f7ff febf 	bl	8008c38 <move_window>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d118      	bne.n	8008ef2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008ece:	4413      	add	r3, r2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff fc19 	bl	8008708 <ld_dword>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008edc:	617b      	str	r3, [r7, #20]
			break;
 8008ede:	e009      	b.n	8008ef4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	e006      	b.n	8008ef4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ee6:	bf00      	nop
 8008ee8:	e004      	b.n	8008ef4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008eea:	bf00      	nop
 8008eec:	e002      	b.n	8008ef4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008eee:	bf00      	nop
 8008ef0:	e000      	b.n	8008ef4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ef2:	bf00      	nop
		}
	}

	return val;
 8008ef4:	697b      	ldr	r3, [r7, #20]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008efe:	b590      	push	{r4, r7, lr}
 8008f00:	b089      	sub	sp, #36	; 0x24
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	f240 80d2 	bls.w	80090ba <put_fat+0x1bc>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	f080 80cc 	bcs.w	80090ba <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	f000 8096 	beq.w	8009058 <put_fat+0x15a>
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	f300 80cd 	bgt.w	80090cc <put_fat+0x1ce>
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d002      	beq.n	8008f3c <put_fat+0x3e>
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d06e      	beq.n	8009018 <put_fat+0x11a>
 8008f3a:	e0c7      	b.n	80090cc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	085b      	lsrs	r3, r3, #1
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	4413      	add	r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1a      	ldr	r2, [r3, #32]
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	0a5b      	lsrs	r3, r3, #9
 8008f52:	4413      	add	r3, r2
 8008f54:	4619      	mov	r1, r3
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f7ff fe6e 	bl	8008c38 <move_window>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f60:	7ffb      	ldrb	r3, [r7, #31]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f040 80ab 	bne.w	80090be <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	1c59      	adds	r1, r3, #1
 8008f72:	61b9      	str	r1, [r7, #24]
 8008f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f78:	4413      	add	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00d      	beq.n	8008fa2 <put_fat+0xa4>
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	b25b      	sxtb	r3, r3
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	b25a      	sxtb	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	011b      	lsls	r3, r3, #4
 8008f98:	b25b      	sxtb	r3, r3
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	e001      	b.n	8008fa6 <put_fat+0xa8>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a1a      	ldr	r2, [r3, #32]
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	0a5b      	lsrs	r3, r3, #9
 8008fb8:	4413      	add	r3, r2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff fe3b 	bl	8008c38 <move_window>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fc6:	7ffb      	ldrb	r3, [r7, #31]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d17a      	bne.n	80090c2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd8:	4413      	add	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <put_fat+0xf0>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	091b      	lsrs	r3, r3, #4
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	e00e      	b.n	800900c <put_fat+0x10e>
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	b25b      	sxtb	r3, r3
 8008ff4:	f023 030f 	bic.w	r3, r3, #15
 8008ff8:	b25a      	sxtb	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	0a1b      	lsrs	r3, r3, #8
 8008ffe:	b25b      	sxtb	r3, r3
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	b25b      	sxtb	r3, r3
 8009006:	4313      	orrs	r3, r2
 8009008:	b25b      	sxtb	r3, r3
 800900a:	b2db      	uxtb	r3, r3
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	70da      	strb	r2, [r3, #3]
			break;
 8009016:	e059      	b.n	80090cc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a1a      	ldr	r2, [r3, #32]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	0a1b      	lsrs	r3, r3, #8
 8009020:	4413      	add	r3, r2
 8009022:	4619      	mov	r1, r3
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7ff fe07 	bl	8008c38 <move_window>
 800902a:	4603      	mov	r3, r0
 800902c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800902e:	7ffb      	ldrb	r3, [r7, #31]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d148      	bne.n	80090c6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009042:	4413      	add	r3, r2
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	b292      	uxth	r2, r2
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff fb7f 	bl	800874e <st_word>
			fs->wflag = 1;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	70da      	strb	r2, [r3, #3]
			break;
 8009056:	e039      	b.n	80090cc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a1a      	ldr	r2, [r3, #32]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	09db      	lsrs	r3, r3, #7
 8009060:	4413      	add	r3, r2
 8009062:	4619      	mov	r1, r3
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7ff fde7 	bl	8008c38 <move_window>
 800906a:	4603      	mov	r3, r0
 800906c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800906e:	7ffb      	ldrb	r3, [r7, #31]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d12a      	bne.n	80090ca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009088:	4413      	add	r3, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff fb3c 	bl	8008708 <ld_dword>
 8009090:	4603      	mov	r3, r0
 8009092:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009096:	4323      	orrs	r3, r4
 8009098:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80090a8:	4413      	add	r3, r2
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff fb69 	bl	8008784 <st_dword>
			fs->wflag = 1;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2201      	movs	r2, #1
 80090b6:	70da      	strb	r2, [r3, #3]
			break;
 80090b8:	e008      	b.n	80090cc <put_fat+0x1ce>
		}
	}
 80090ba:	bf00      	nop
 80090bc:	e006      	b.n	80090cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80090be:	bf00      	nop
 80090c0:	e004      	b.n	80090cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80090c2:	bf00      	nop
 80090c4:	e002      	b.n	80090cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80090c6:	bf00      	nop
 80090c8:	e000      	b.n	80090cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80090ca:	bf00      	nop
	return res;
 80090cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3724      	adds	r7, #36	; 0x24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd90      	pop	{r4, r7, pc}

080090d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b088      	sub	sp, #32
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d904      	bls.n	80090fc <remove_chain+0x26>
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d301      	bcc.n	8009100 <remove_chain+0x2a>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e04b      	b.n	8009198 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00c      	beq.n	8009120 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	69b8      	ldr	r0, [r7, #24]
 800910e:	f7ff fef6 	bl	8008efe <put_fat>
 8009112:	4603      	mov	r3, r0
 8009114:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009116:	7ffb      	ldrb	r3, [r7, #31]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <remove_chain+0x4a>
 800911c:	7ffb      	ldrb	r3, [r7, #31]
 800911e:	e03b      	b.n	8009198 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7ff fe43 	bl	8008dae <get_fat>
 8009128:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d031      	beq.n	8009194 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d101      	bne.n	800913a <remove_chain+0x64>
 8009136:	2302      	movs	r3, #2
 8009138:	e02e      	b.n	8009198 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009140:	d101      	bne.n	8009146 <remove_chain+0x70>
 8009142:	2301      	movs	r3, #1
 8009144:	e028      	b.n	8009198 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009146:	2200      	movs	r2, #0
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	69b8      	ldr	r0, [r7, #24]
 800914c:	f7ff fed7 	bl	8008efe <put_fat>
 8009150:	4603      	mov	r3, r0
 8009152:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009154:	7ffb      	ldrb	r3, [r7, #31]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <remove_chain+0x88>
 800915a:	7ffb      	ldrb	r3, [r7, #31]
 800915c:	e01c      	b.n	8009198 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	3b02      	subs	r3, #2
 8009168:	429a      	cmp	r2, r3
 800916a:	d20b      	bcs.n	8009184 <remove_chain+0xae>
			fs->free_clst++;
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	791b      	ldrb	r3, [r3, #4]
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	b2da      	uxtb	r2, r3
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	429a      	cmp	r2, r3
 8009190:	d3c6      	bcc.n	8009120 <remove_chain+0x4a>
 8009192:	e000      	b.n	8009196 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009194:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10d      	bne.n	80091d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d004      	beq.n	80091cc <create_chain+0x2c>
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d31b      	bcc.n	8009204 <create_chain+0x64>
 80091cc:	2301      	movs	r3, #1
 80091ce:	61bb      	str	r3, [r7, #24]
 80091d0:	e018      	b.n	8009204 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7ff fdea 	bl	8008dae <get_fat>
 80091da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d801      	bhi.n	80091e6 <create_chain+0x46>
 80091e2:	2301      	movs	r3, #1
 80091e4:	e070      	b.n	80092c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ec:	d101      	bne.n	80091f2 <create_chain+0x52>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	e06a      	b.n	80092c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d201      	bcs.n	8009200 <create_chain+0x60>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	e063      	b.n	80092c8 <create_chain+0x128>
		scl = clst;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	3301      	adds	r3, #1
 800920c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	429a      	cmp	r2, r3
 8009216:	d307      	bcc.n	8009228 <create_chain+0x88>
				ncl = 2;
 8009218:	2302      	movs	r3, #2
 800921a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800921c:	69fa      	ldr	r2, [r7, #28]
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	429a      	cmp	r2, r3
 8009222:	d901      	bls.n	8009228 <create_chain+0x88>
 8009224:	2300      	movs	r3, #0
 8009226:	e04f      	b.n	80092c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009228:	69f9      	ldr	r1, [r7, #28]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff fdbf 	bl	8008dae <get_fat>
 8009230:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00e      	beq.n	8009256 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d003      	beq.n	8009246 <create_chain+0xa6>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009244:	d101      	bne.n	800924a <create_chain+0xaa>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	e03e      	b.n	80092c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	429a      	cmp	r2, r3
 8009250:	d1da      	bne.n	8009208 <create_chain+0x68>
 8009252:	2300      	movs	r3, #0
 8009254:	e038      	b.n	80092c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009256:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800925c:	69f9      	ldr	r1, [r7, #28]
 800925e:	6938      	ldr	r0, [r7, #16]
 8009260:	f7ff fe4d 	bl	8008efe <put_fat>
 8009264:	4603      	mov	r3, r0
 8009266:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d109      	bne.n	8009282 <create_chain+0xe2>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d006      	beq.n	8009282 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009274:	69fa      	ldr	r2, [r7, #28]
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6938      	ldr	r0, [r7, #16]
 800927a:	f7ff fe40 	bl	8008efe <put_fat>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d116      	bne.n	80092b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	3b02      	subs	r3, #2
 8009298:	429a      	cmp	r2, r3
 800929a:	d804      	bhi.n	80092a6 <create_chain+0x106>
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	1e5a      	subs	r2, r3, #1
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	791b      	ldrb	r3, [r3, #4]
 80092aa:	f043 0301 	orr.w	r3, r3, #1
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	711a      	strb	r2, [r3, #4]
 80092b4:	e007      	b.n	80092c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d102      	bne.n	80092c2 <create_chain+0x122>
 80092bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092c0:	e000      	b.n	80092c4 <create_chain+0x124>
 80092c2:	2301      	movs	r3, #1
 80092c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80092c6:	69fb      	ldr	r3, [r7, #28]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3720      	adds	r7, #32
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	3304      	adds	r3, #4
 80092e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	0a5b      	lsrs	r3, r3, #9
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	8952      	ldrh	r2, [r2, #10]
 80092f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	1d1a      	adds	r2, r3, #4
 80092fa:	613a      	str	r2, [r7, #16]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <clmt_clust+0x3a>
 8009306:	2300      	movs	r3, #0
 8009308:	e010      	b.n	800932c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	d307      	bcc.n	8009322 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	3304      	adds	r3, #4
 800931e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009320:	e7e9      	b.n	80092f6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009322:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	4413      	add	r3, r2
}
 800932c:	4618      	mov	r0, r3
 800932e:	371c      	adds	r7, #28
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800934e:	d204      	bcs.n	800935a <dir_sdi+0x22>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	f003 031f 	and.w	r3, r3, #31
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <dir_sdi+0x26>
		return FR_INT_ERR;
 800935a:	2302      	movs	r3, #2
 800935c:	e063      	b.n	8009426 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d106      	bne.n	800937e <dir_sdi+0x46>
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b02      	cmp	r3, #2
 8009376:	d902      	bls.n	800937e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10c      	bne.n	800939e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	095b      	lsrs	r3, r3, #5
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	8912      	ldrh	r2, [r2, #8]
 800938c:	4293      	cmp	r3, r2
 800938e:	d301      	bcc.n	8009394 <dir_sdi+0x5c>
 8009390:	2302      	movs	r3, #2
 8009392:	e048      	b.n	8009426 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	61da      	str	r2, [r3, #28]
 800939c:	e029      	b.n	80093f2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	895b      	ldrh	r3, [r3, #10]
 80093a2:	025b      	lsls	r3, r3, #9
 80093a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80093a6:	e019      	b.n	80093dc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6979      	ldr	r1, [r7, #20]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff fcfe 	bl	8008dae <get_fat>
 80093b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093ba:	d101      	bne.n	80093c0 <dir_sdi+0x88>
 80093bc:	2301      	movs	r3, #1
 80093be:	e032      	b.n	8009426 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d904      	bls.n	80093d0 <dir_sdi+0x98>
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d301      	bcc.n	80093d4 <dir_sdi+0x9c>
 80093d0:	2302      	movs	r3, #2
 80093d2:	e028      	b.n	8009426 <dir_sdi+0xee>
			ofs -= csz;
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d2e1      	bcs.n	80093a8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80093e4:	6979      	ldr	r1, [r7, #20]
 80093e6:	6938      	ldr	r0, [r7, #16]
 80093e8:	f7ff fcc2 	bl	8008d70 <clust2sect>
 80093ec:	4602      	mov	r2, r0
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <dir_sdi+0xcc>
 8009400:	2302      	movs	r3, #2
 8009402:	e010      	b.n	8009426 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	69da      	ldr	r2, [r3, #28]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	0a5b      	lsrs	r3, r3, #9
 800940c:	441a      	add	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941e:	441a      	add	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	3320      	adds	r3, #32
 8009444:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <dir_next+0x28>
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009454:	d301      	bcc.n	800945a <dir_next+0x2c>
 8009456:	2304      	movs	r3, #4
 8009458:	e0aa      	b.n	80095b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009460:	2b00      	cmp	r3, #0
 8009462:	f040 8098 	bne.w	8009596 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	8912      	ldrh	r2, [r2, #8]
 8009480:	4293      	cmp	r3, r2
 8009482:	f0c0 8088 	bcc.w	8009596 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	61da      	str	r2, [r3, #28]
 800948c:	2304      	movs	r3, #4
 800948e:	e08f      	b.n	80095b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	0a5b      	lsrs	r3, r3, #9
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	8952      	ldrh	r2, [r2, #10]
 8009498:	3a01      	subs	r2, #1
 800949a:	4013      	ands	r3, r2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d17a      	bne.n	8009596 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f7ff fc80 	bl	8008dae <get_fat>
 80094ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d801      	bhi.n	80094ba <dir_next+0x8c>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e07a      	b.n	80095b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094c0:	d101      	bne.n	80094c6 <dir_next+0x98>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e074      	b.n	80095b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d358      	bcc.n	8009582 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	61da      	str	r2, [r3, #28]
 80094dc:	2304      	movs	r3, #4
 80094de:	e067      	b.n	80095b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	4619      	mov	r1, r3
 80094e8:	4610      	mov	r0, r2
 80094ea:	f7ff fe59 	bl	80091a0 <create_chain>
 80094ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <dir_next+0xcc>
 80094f6:	2307      	movs	r3, #7
 80094f8:	e05a      	b.n	80095b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d101      	bne.n	8009504 <dir_next+0xd6>
 8009500:	2302      	movs	r3, #2
 8009502:	e055      	b.n	80095b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800950a:	d101      	bne.n	8009510 <dir_next+0xe2>
 800950c:	2301      	movs	r3, #1
 800950e:	e04f      	b.n	80095b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7ff fb4d 	bl	8008bb0 <sync_window>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <dir_next+0xf2>
 800951c:	2301      	movs	r3, #1
 800951e:	e047      	b.n	80095b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3330      	adds	r3, #48	; 0x30
 8009524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff f977 	bl	800881e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009530:	2300      	movs	r3, #0
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	6979      	ldr	r1, [r7, #20]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff fc1a 	bl	8008d70 <clust2sect>
 800953c:	4602      	mov	r2, r0
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	62da      	str	r2, [r3, #44]	; 0x2c
 8009542:	e012      	b.n	800956a <dir_next+0x13c>
						fs->wflag = 1;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff fb30 	bl	8008bb0 <sync_window>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <dir_next+0x12c>
 8009556:	2301      	movs	r3, #1
 8009558:	e02a      	b.n	80095b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	3301      	adds	r3, #1
 800955e:	613b      	str	r3, [r7, #16]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	62da      	str	r2, [r3, #44]	; 0x2c
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	895b      	ldrh	r3, [r3, #10]
 800956e:	461a      	mov	r2, r3
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	4293      	cmp	r3, r2
 8009574:	d3e6      	bcc.n	8009544 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1ad2      	subs	r2, r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009588:	6979      	ldr	r1, [r7, #20]
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f7ff fbf0 	bl	8008d70 <clust2sect>
 8009590:	4602      	mov	r2, r0
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a8:	441a      	add	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80095c8:	2100      	movs	r1, #0
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff feb4 	bl	8009338 <dir_sdi>
 80095d0:	4603      	mov	r3, r0
 80095d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d12b      	bne.n	8009632 <dir_alloc+0x7a>
		n = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	4619      	mov	r1, r3
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff fb27 	bl	8008c38 <move_window>
 80095ea:	4603      	mov	r3, r0
 80095ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d11d      	bne.n	8009630 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2be5      	cmp	r3, #229	; 0xe5
 80095fc:	d004      	beq.n	8009608 <dir_alloc+0x50>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d107      	bne.n	8009618 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	3301      	adds	r3, #1
 800960c:	613b      	str	r3, [r7, #16]
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d102      	bne.n	800961c <dir_alloc+0x64>
 8009616:	e00c      	b.n	8009632 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009618:	2300      	movs	r3, #0
 800961a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800961c:	2101      	movs	r1, #1
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff ff05 	bl	800942e <dir_next>
 8009624:	4603      	mov	r3, r0
 8009626:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009628:	7dfb      	ldrb	r3, [r7, #23]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0d7      	beq.n	80095de <dir_alloc+0x26>
 800962e:	e000      	b.n	8009632 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009630:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	2b04      	cmp	r3, #4
 8009636:	d101      	bne.n	800963c <dir_alloc+0x84>
 8009638:	2307      	movs	r3, #7
 800963a:	75fb      	strb	r3, [r7, #23]
	return res;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	331a      	adds	r3, #26
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff f83f 	bl	80086d8 <ld_word>
 800965a:	4603      	mov	r3, r0
 800965c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	2b03      	cmp	r3, #3
 8009664:	d109      	bne.n	800967a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	3314      	adds	r3, #20
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff f834 	bl	80086d8 <ld_word>
 8009670:	4603      	mov	r3, r0
 8009672:	041b      	lsls	r3, r3, #16
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800967a:	68fb      	ldr	r3, [r7, #12]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	331a      	adds	r3, #26
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	b292      	uxth	r2, r2
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff f857 	bl	800874e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d109      	bne.n	80096bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f103 0214 	add.w	r2, r3, #20
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	0c1b      	lsrs	r3, r3, #16
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7ff f849 	bl	800874e <st_word>
	}
}
 80096bc:	bf00      	nop
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80096ce:	2304      	movs	r3, #4
 80096d0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80096d8:	e03c      	b.n	8009754 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	4619      	mov	r1, r3
 80096e0:	6938      	ldr	r0, [r7, #16]
 80096e2:	f7ff faa9 	bl	8008c38 <move_window>
 80096e6:	4603      	mov	r3, r0
 80096e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d136      	bne.n	800975e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d102      	bne.n	8009704 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80096fe:	2304      	movs	r3, #4
 8009700:	75fb      	strb	r3, [r7, #23]
 8009702:	e031      	b.n	8009768 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a1b      	ldr	r3, [r3, #32]
 8009708:	330b      	adds	r3, #11
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009710:	73bb      	strb	r3, [r7, #14]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	7bba      	ldrb	r2, [r7, #14]
 8009716:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	2be5      	cmp	r3, #229	; 0xe5
 800971c:	d011      	beq.n	8009742 <dir_read+0x7e>
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	2b2e      	cmp	r3, #46	; 0x2e
 8009722:	d00e      	beq.n	8009742 <dir_read+0x7e>
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d00b      	beq.n	8009742 <dir_read+0x7e>
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	f023 0320 	bic.w	r3, r3, #32
 8009730:	2b08      	cmp	r3, #8
 8009732:	bf0c      	ite	eq
 8009734:	2301      	moveq	r3, #1
 8009736:	2300      	movne	r3, #0
 8009738:	b2db      	uxtb	r3, r3
 800973a:	461a      	mov	r2, r3
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	4293      	cmp	r3, r2
 8009740:	d00f      	beq.n	8009762 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009742:	2100      	movs	r1, #0
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff fe72 	bl	800942e <dir_next>
 800974a:	4603      	mov	r3, r0
 800974c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d108      	bne.n	8009766 <dir_read+0xa2>
	while (dp->sect) {
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1be      	bne.n	80096da <dir_read+0x16>
 800975c:	e004      	b.n	8009768 <dir_read+0xa4>
		if (res != FR_OK) break;
 800975e:	bf00      	nop
 8009760:	e002      	b.n	8009768 <dir_read+0xa4>
				break;
 8009762:	bf00      	nop
 8009764:	e000      	b.n	8009768 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009766:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <dir_read+0xb0>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	61da      	str	r2, [r3, #28]
	return res;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b086      	sub	sp, #24
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800978c:	2100      	movs	r1, #0
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff fdd2 	bl	8009338 <dir_sdi>
 8009794:	4603      	mov	r3, r0
 8009796:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <dir_find+0x24>
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	e03e      	b.n	8009820 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	4619      	mov	r1, r3
 80097a8:	6938      	ldr	r0, [r7, #16]
 80097aa:	f7ff fa45 	bl	8008c38 <move_window>
 80097ae:	4603      	mov	r3, r0
 80097b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d12f      	bne.n	8009818 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <dir_find+0x4e>
 80097c6:	2304      	movs	r3, #4
 80097c8:	75fb      	strb	r3, [r7, #23]
 80097ca:	e028      	b.n	800981e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	330b      	adds	r3, #11
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	330b      	adds	r3, #11
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	f003 0308 	and.w	r3, r3, #8
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <dir_find+0x86>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a18      	ldr	r0, [r3, #32]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3324      	adds	r3, #36	; 0x24
 80097f6:	220b      	movs	r2, #11
 80097f8:	4619      	mov	r1, r3
 80097fa:	f7ff f82b 	bl	8008854 <mem_cmp>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009804:	2100      	movs	r1, #0
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff fe11 	bl	800942e <dir_next>
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0c5      	beq.n	80097a2 <dir_find+0x24>
 8009816:	e002      	b.n	800981e <dir_find+0xa0>
		if (res != FR_OK) break;
 8009818:	bf00      	nop
 800981a:	e000      	b.n	800981e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800981c:	bf00      	nop

	return res;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009836:	2101      	movs	r1, #1
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff febd 	bl	80095b8 <dir_alloc>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d11c      	bne.n	8009882 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	4619      	mov	r1, r3
 800984e:	68b8      	ldr	r0, [r7, #8]
 8009850:	f7ff f9f2 	bl	8008c38 <move_window>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d111      	bne.n	8009882 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	2220      	movs	r2, #32
 8009864:	2100      	movs	r1, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe ffd9 	bl	800881e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a18      	ldr	r0, [r3, #32]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3324      	adds	r3, #36	; 0x24
 8009874:	220b      	movs	r2, #11
 8009876:	4619      	mov	r1, r3
 8009878:	f7fe ffb0 	bl	80087dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2201      	movs	r2, #1
 8009880:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	4619      	mov	r1, r3
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff f9c9 	bl	8008c38 <move_window>
 80098a6:	4603      	mov	r3, r0
 80098a8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	22e5      	movs	r2, #229	; 0xe5
 80098b6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2201      	movs	r2, #1
 80098bc:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80098be:	7afb      	ldrb	r3, [r7, #11]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2200      	movs	r2, #0
 80098d6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d04e      	beq.n	800997e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80098e8:	e021      	b.n	800992e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1a      	ldr	r2, [r3, #32]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	1c59      	adds	r1, r3, #1
 80098f2:	6179      	str	r1, [r7, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	d100      	bne.n	8009902 <get_fileinfo+0x3a>
 8009900:	e015      	b.n	800992e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	2b05      	cmp	r3, #5
 8009906:	d101      	bne.n	800990c <get_fileinfo+0x44>
 8009908:	23e5      	movs	r3, #229	; 0xe5
 800990a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2b09      	cmp	r3, #9
 8009910:	d106      	bne.n	8009920 <get_fileinfo+0x58>
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	613a      	str	r2, [r7, #16]
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	4413      	add	r3, r2
 800991c:	222e      	movs	r2, #46	; 0x2e
 800991e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	613a      	str	r2, [r7, #16]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4413      	add	r3, r2
 800992a:	7bfa      	ldrb	r2, [r7, #15]
 800992c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b0a      	cmp	r3, #10
 8009932:	d9da      	bls.n	80098ea <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	4413      	add	r3, r2
 800993a:	3309      	adds	r3, #9
 800993c:	2200      	movs	r2, #0
 800993e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	7ada      	ldrb	r2, [r3, #11]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	331c      	adds	r3, #28
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe fed9 	bl	8008708 <ld_dword>
 8009956:	4602      	mov	r2, r0
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	3316      	adds	r3, #22
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fed0 	bl	8008708 <ld_dword>
 8009968:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	b29a      	uxth	r2, r3
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	80da      	strh	r2, [r3, #6]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	0c1b      	lsrs	r3, r3, #16
 8009976:	b29a      	uxth	r2, r3
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	809a      	strh	r2, [r3, #4]
 800997c:	e000      	b.n	8009980 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800997e:	bf00      	nop
}
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3324      	adds	r3, #36	; 0x24
 800999c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800999e:	220b      	movs	r2, #11
 80099a0:	2120      	movs	r1, #32
 80099a2:	68b8      	ldr	r0, [r7, #8]
 80099a4:	f7fe ff3b 	bl	800881e <mem_set>
	si = i = 0; ni = 8;
 80099a8:	2300      	movs	r3, #0
 80099aa:	613b      	str	r3, [r7, #16]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	2308      	movs	r3, #8
 80099b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	61fa      	str	r2, [r7, #28]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80099c2:	7efb      	ldrb	r3, [r7, #27]
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	d94e      	bls.n	8009a66 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80099c8:	7efb      	ldrb	r3, [r7, #27]
 80099ca:	2b2f      	cmp	r3, #47	; 0x2f
 80099cc:	d006      	beq.n	80099dc <create_name+0x54>
 80099ce:	7efb      	ldrb	r3, [r7, #27]
 80099d0:	2b5c      	cmp	r3, #92	; 0x5c
 80099d2:	d110      	bne.n	80099f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80099d4:	e002      	b.n	80099dc <create_name+0x54>
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	3301      	adds	r3, #1
 80099da:	61fb      	str	r3, [r7, #28]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	4413      	add	r3, r2
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b2f      	cmp	r3, #47	; 0x2f
 80099e6:	d0f6      	beq.n	80099d6 <create_name+0x4e>
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	4413      	add	r3, r2
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b5c      	cmp	r3, #92	; 0x5c
 80099f2:	d0f0      	beq.n	80099d6 <create_name+0x4e>
			break;
 80099f4:	e038      	b.n	8009a68 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80099f6:	7efb      	ldrb	r3, [r7, #27]
 80099f8:	2b2e      	cmp	r3, #46	; 0x2e
 80099fa:	d003      	beq.n	8009a04 <create_name+0x7c>
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d30c      	bcc.n	8009a1e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b0b      	cmp	r3, #11
 8009a08:	d002      	beq.n	8009a10 <create_name+0x88>
 8009a0a:	7efb      	ldrb	r3, [r7, #27]
 8009a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a0e:	d001      	beq.n	8009a14 <create_name+0x8c>
 8009a10:	2306      	movs	r3, #6
 8009a12:	e044      	b.n	8009a9e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009a14:	2308      	movs	r3, #8
 8009a16:	613b      	str	r3, [r7, #16]
 8009a18:	230b      	movs	r3, #11
 8009a1a:	617b      	str	r3, [r7, #20]
			continue;
 8009a1c:	e022      	b.n	8009a64 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009a1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	da04      	bge.n	8009a30 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009a26:	7efb      	ldrb	r3, [r7, #27]
 8009a28:	3b80      	subs	r3, #128	; 0x80
 8009a2a:	4a1f      	ldr	r2, [pc, #124]	; (8009aa8 <create_name+0x120>)
 8009a2c:	5cd3      	ldrb	r3, [r2, r3]
 8009a2e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009a30:	7efb      	ldrb	r3, [r7, #27]
 8009a32:	4619      	mov	r1, r3
 8009a34:	481d      	ldr	r0, [pc, #116]	; (8009aac <create_name+0x124>)
 8009a36:	f7fe ff34 	bl	80088a2 <chk_chr>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <create_name+0xbc>
 8009a40:	2306      	movs	r3, #6
 8009a42:	e02c      	b.n	8009a9e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009a44:	7efb      	ldrb	r3, [r7, #27]
 8009a46:	2b60      	cmp	r3, #96	; 0x60
 8009a48:	d905      	bls.n	8009a56 <create_name+0xce>
 8009a4a:	7efb      	ldrb	r3, [r7, #27]
 8009a4c:	2b7a      	cmp	r3, #122	; 0x7a
 8009a4e:	d802      	bhi.n	8009a56 <create_name+0xce>
 8009a50:	7efb      	ldrb	r3, [r7, #27]
 8009a52:	3b20      	subs	r3, #32
 8009a54:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	613a      	str	r2, [r7, #16]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	4413      	add	r3, r2
 8009a60:	7efa      	ldrb	r2, [r7, #27]
 8009a62:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009a64:	e7a6      	b.n	80099b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a66:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	441a      	add	r2, r3
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <create_name+0xf4>
 8009a78:	2306      	movs	r3, #6
 8009a7a:	e010      	b.n	8009a9e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	2be5      	cmp	r3, #229	; 0xe5
 8009a82:	d102      	bne.n	8009a8a <create_name+0x102>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2205      	movs	r2, #5
 8009a88:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009a8a:	7efb      	ldrb	r3, [r7, #27]
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	d801      	bhi.n	8009a94 <create_name+0x10c>
 8009a90:	2204      	movs	r2, #4
 8009a92:	e000      	b.n	8009a96 <create_name+0x10e>
 8009a94:	2200      	movs	r2, #0
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	330b      	adds	r3, #11
 8009a9a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009a9c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3720      	adds	r7, #32
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	0800bc20 	.word	0x0800bc20
 8009aac:	0800bba8 	.word	0x0800bba8

08009ab0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009ac4:	e002      	b.n	8009acc <follow_path+0x1c>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	2b2f      	cmp	r3, #47	; 0x2f
 8009ad2:	d0f8      	beq.n	8009ac6 <follow_path+0x16>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b5c      	cmp	r3, #92	; 0x5c
 8009ada:	d0f4      	beq.n	8009ac6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b1f      	cmp	r3, #31
 8009ae8:	d80a      	bhi.n	8009b00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2280      	movs	r2, #128	; 0x80
 8009aee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009af2:	2100      	movs	r1, #0
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7ff fc1f 	bl	8009338 <dir_sdi>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]
 8009afe:	e043      	b.n	8009b88 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b00:	463b      	mov	r3, r7
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7ff ff3f 	bl	8009988 <create_name>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d134      	bne.n	8009b7e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff fe32 	bl	800977e <dir_find>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00a      	beq.n	8009b42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	d127      	bne.n	8009b82 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009b32:	7afb      	ldrb	r3, [r7, #11]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d122      	bne.n	8009b82 <follow_path+0xd2>
 8009b3c:	2305      	movs	r3, #5
 8009b3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b40:	e01f      	b.n	8009b82 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b42:	7afb      	ldrb	r3, [r7, #11]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d11c      	bne.n	8009b86 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	799b      	ldrb	r3, [r3, #6]
 8009b50:	f003 0310 	and.w	r3, r3, #16
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009b58:	2305      	movs	r3, #5
 8009b5a:	75fb      	strb	r3, [r7, #23]
 8009b5c:	e014      	b.n	8009b88 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6c:	4413      	add	r3, r2
 8009b6e:	4619      	mov	r1, r3
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff fd68 	bl	8009646 <ld_clust>
 8009b76:	4602      	mov	r2, r0
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b7c:	e7c0      	b.n	8009b00 <follow_path+0x50>
			if (res != FR_OK) break;
 8009b7e:	bf00      	nop
 8009b80:	e002      	b.n	8009b88 <follow_path+0xd8>
				break;
 8009b82:	bf00      	nop
 8009b84:	e000      	b.n	8009b88 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b86:	bf00      	nop
			}
		}
	}

	return res;
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b087      	sub	sp, #28
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b9e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d031      	beq.n	8009c0c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	617b      	str	r3, [r7, #20]
 8009bae:	e002      	b.n	8009bb6 <get_ldnumber+0x24>
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	617b      	str	r3, [r7, #20]
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	d903      	bls.n	8009bc6 <get_ldnumber+0x34>
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	2b3a      	cmp	r3, #58	; 0x3a
 8009bc4:	d1f4      	bne.n	8009bb0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b3a      	cmp	r3, #58	; 0x3a
 8009bcc:	d11c      	bne.n	8009c08 <get_ldnumber+0x76>
			tp = *path;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	60fa      	str	r2, [r7, #12]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	3b30      	subs	r3, #48	; 0x30
 8009bde:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b09      	cmp	r3, #9
 8009be4:	d80e      	bhi.n	8009c04 <get_ldnumber+0x72>
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d10a      	bne.n	8009c04 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d107      	bne.n	8009c04 <get_ldnumber+0x72>
					vol = (int)i;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	e002      	b.n	8009c0e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009c08:	2300      	movs	r3, #0
 8009c0a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009c0c:	693b      	ldr	r3, [r7, #16]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
	...

08009c1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	70da      	strb	r2, [r3, #3]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c32:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7fe fffe 	bl	8008c38 <move_window>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <check_fs+0x2a>
 8009c42:	2304      	movs	r3, #4
 8009c44:	e038      	b.n	8009cb8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3330      	adds	r3, #48	; 0x30
 8009c4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fd42 	bl	80086d8 <ld_word>
 8009c54:	4603      	mov	r3, r0
 8009c56:	461a      	mov	r2, r3
 8009c58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d001      	beq.n	8009c64 <check_fs+0x48>
 8009c60:	2303      	movs	r3, #3
 8009c62:	e029      	b.n	8009cb8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c6a:	2be9      	cmp	r3, #233	; 0xe9
 8009c6c:	d009      	beq.n	8009c82 <check_fs+0x66>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c74:	2beb      	cmp	r3, #235	; 0xeb
 8009c76:	d11e      	bne.n	8009cb6 <check_fs+0x9a>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009c7e:	2b90      	cmp	r3, #144	; 0x90
 8009c80:	d119      	bne.n	8009cb6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	3330      	adds	r3, #48	; 0x30
 8009c86:	3336      	adds	r3, #54	; 0x36
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe fd3d 	bl	8008708 <ld_dword>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c94:	4a0a      	ldr	r2, [pc, #40]	; (8009cc0 <check_fs+0xa4>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d101      	bne.n	8009c9e <check_fs+0x82>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e00c      	b.n	8009cb8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3330      	adds	r3, #48	; 0x30
 8009ca2:	3352      	adds	r3, #82	; 0x52
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fe fd2f 	bl	8008708 <ld_dword>
 8009caa:	4603      	mov	r3, r0
 8009cac:	4a05      	ldr	r2, [pc, #20]	; (8009cc4 <check_fs+0xa8>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d101      	bne.n	8009cb6 <check_fs+0x9a>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	e000      	b.n	8009cb8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009cb6:	2302      	movs	r3, #2
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	00544146 	.word	0x00544146
 8009cc4:	33544146 	.word	0x33544146

08009cc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b096      	sub	sp, #88	; 0x58
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff ff58 	bl	8009b92 <get_ldnumber>
 8009ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da01      	bge.n	8009cee <find_volume+0x26>
 8009cea:	230b      	movs	r3, #11
 8009cec:	e22d      	b.n	800a14a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009cee:	4aa1      	ldr	r2, [pc, #644]	; (8009f74 <find_volume+0x2ac>)
 8009cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <find_volume+0x3a>
 8009cfe:	230c      	movs	r3, #12
 8009d00:	e223      	b.n	800a14a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	f023 0301 	bic.w	r3, r3, #1
 8009d0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01a      	beq.n	8009d4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fc3d 	bl	800859c <disk_status>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10c      	bne.n	8009d4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d007      	beq.n	8009d4a <find_volume+0x82>
 8009d3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d3e:	f003 0304 	and.w	r3, r3, #4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009d46:	230a      	movs	r3, #10
 8009d48:	e1ff      	b.n	800a14a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e1fd      	b.n	800a14a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fc35 	bl	80085d0 <disk_initialize>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009d6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e1e6      	b.n	800a14a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d007      	beq.n	8009d92 <find_volume+0xca>
 8009d82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d86:	f003 0304 	and.w	r3, r3, #4
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009d8e:	230a      	movs	r3, #10
 8009d90:	e1db      	b.n	800a14a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009d96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d9a:	f7ff ff3f 	bl	8009c1c <check_fs>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d149      	bne.n	8009e40 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009dac:	2300      	movs	r3, #0
 8009dae:	643b      	str	r3, [r7, #64]	; 0x40
 8009db0:	e01e      	b.n	8009df0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009dc0:	4413      	add	r3, r2
 8009dc2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d006      	beq.n	8009ddc <find_volume+0x114>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe fc98 	bl	8008708 <ld_dword>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	e000      	b.n	8009dde <find_volume+0x116>
 8009ddc:	2200      	movs	r2, #0
 8009dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	3358      	adds	r3, #88	; 0x58
 8009de4:	443b      	add	r3, r7
 8009de6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dec:	3301      	adds	r3, #1
 8009dee:	643b      	str	r3, [r7, #64]	; 0x40
 8009df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d9dd      	bls.n	8009db2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009df6:	2300      	movs	r3, #0
 8009df8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <find_volume+0x13e>
 8009e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e02:	3b01      	subs	r3, #1
 8009e04:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	3358      	adds	r3, #88	; 0x58
 8009e0c:	443b      	add	r3, r7
 8009e0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009e12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <find_volume+0x15e>
 8009e1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e1e:	f7ff fefd 	bl	8009c1c <check_fs>
 8009e22:	4603      	mov	r3, r0
 8009e24:	e000      	b.n	8009e28 <find_volume+0x160>
 8009e26:	2303      	movs	r3, #3
 8009e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d905      	bls.n	8009e40 <find_volume+0x178>
 8009e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e36:	3301      	adds	r3, #1
 8009e38:	643b      	str	r3, [r7, #64]	; 0x40
 8009e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d9e2      	bls.n	8009e06 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d101      	bne.n	8009e4c <find_volume+0x184>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e17e      	b.n	800a14a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d901      	bls.n	8009e58 <find_volume+0x190>
 8009e54:	230d      	movs	r3, #13
 8009e56:	e178      	b.n	800a14a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	3330      	adds	r3, #48	; 0x30
 8009e5c:	330b      	adds	r3, #11
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fc3a 	bl	80086d8 <ld_word>
 8009e64:	4603      	mov	r3, r0
 8009e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e6a:	d001      	beq.n	8009e70 <find_volume+0x1a8>
 8009e6c:	230d      	movs	r3, #13
 8009e6e:	e16c      	b.n	800a14a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	3330      	adds	r3, #48	; 0x30
 8009e74:	3316      	adds	r3, #22
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fe fc2e 	bl	80086d8 <ld_word>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <find_volume+0x1cc>
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	3330      	adds	r3, #48	; 0x30
 8009e8a:	3324      	adds	r3, #36	; 0x24
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fc3b 	bl	8008708 <ld_dword>
 8009e92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e98:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	789b      	ldrb	r3, [r3, #2]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d005      	beq.n	8009eb8 <find_volume+0x1f0>
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	789b      	ldrb	r3, [r3, #2]
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d001      	beq.n	8009eb8 <find_volume+0x1f0>
 8009eb4:	230d      	movs	r3, #13
 8009eb6:	e148      	b.n	800a14a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	789b      	ldrb	r3, [r3, #2]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec0:	fb02 f303 	mul.w	r3, r2, r3
 8009ec4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed4:	895b      	ldrh	r3, [r3, #10]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d008      	beq.n	8009eec <find_volume+0x224>
 8009eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009edc:	895b      	ldrh	r3, [r3, #10]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	895b      	ldrh	r3, [r3, #10]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <find_volume+0x228>
 8009eec:	230d      	movs	r3, #13
 8009eee:	e12c      	b.n	800a14a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	3330      	adds	r3, #48	; 0x30
 8009ef4:	3311      	adds	r3, #17
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fbee 	bl	80086d8 <ld_word>
 8009efc:	4603      	mov	r3, r0
 8009efe:	461a      	mov	r2, r3
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	891b      	ldrh	r3, [r3, #8]
 8009f08:	f003 030f 	and.w	r3, r3, #15
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <find_volume+0x24e>
 8009f12:	230d      	movs	r3, #13
 8009f14:	e119      	b.n	800a14a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	3330      	adds	r3, #48	; 0x30
 8009f1a:	3313      	adds	r3, #19
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fbdb 	bl	80086d8 <ld_word>
 8009f22:	4603      	mov	r3, r0
 8009f24:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d106      	bne.n	8009f3a <find_volume+0x272>
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	3330      	adds	r3, #48	; 0x30
 8009f30:	3320      	adds	r3, #32
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fbe8 	bl	8008708 <ld_dword>
 8009f38:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	3330      	adds	r3, #48	; 0x30
 8009f3e:	330e      	adds	r3, #14
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe fbc9 	bl	80086d8 <ld_word>
 8009f46:	4603      	mov	r3, r0
 8009f48:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <find_volume+0x28c>
 8009f50:	230d      	movs	r3, #13
 8009f52:	e0fa      	b.n	800a14a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f58:	4413      	add	r3, r2
 8009f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f5c:	8912      	ldrh	r2, [r2, #8]
 8009f5e:	0912      	lsrs	r2, r2, #4
 8009f60:	b292      	uxth	r2, r2
 8009f62:	4413      	add	r3, r2
 8009f64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d204      	bcs.n	8009f78 <find_volume+0x2b0>
 8009f6e:	230d      	movs	r3, #13
 8009f70:	e0eb      	b.n	800a14a <find_volume+0x482>
 8009f72:	bf00      	nop
 8009f74:	20000d88 	.word	0x20000d88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f80:	8952      	ldrh	r2, [r2, #10]
 8009f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <find_volume+0x2ca>
 8009f8e:	230d      	movs	r3, #13
 8009f90:	e0db      	b.n	800a14a <find_volume+0x482>
		fmt = FS_FAT32;
 8009f92:	2303      	movs	r3, #3
 8009f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d802      	bhi.n	8009fa8 <find_volume+0x2e0>
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d802      	bhi.n	8009fb8 <find_volume+0x2f0>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	1c9a      	adds	r2, r3, #2
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fc4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009fc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fca:	441a      	add	r2, r3
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	441a      	add	r2, r3
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d11e      	bne.n	800a020 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	3330      	adds	r3, #48	; 0x30
 8009fe6:	332a      	adds	r3, #42	; 0x2a
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe fb75 	bl	80086d8 <ld_word>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <find_volume+0x330>
 8009ff4:	230d      	movs	r3, #13
 8009ff6:	e0a8      	b.n	800a14a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	891b      	ldrh	r3, [r3, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <find_volume+0x33c>
 800a000:	230d      	movs	r3, #13
 800a002:	e0a2      	b.n	800a14a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	3330      	adds	r3, #48	; 0x30
 800a008:	332c      	adds	r3, #44	; 0x2c
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fb7c 	bl	8008708 <ld_dword>
 800a010:	4602      	mov	r2, r0
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	647b      	str	r3, [r7, #68]	; 0x44
 800a01e:	e01f      	b.n	800a060 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	891b      	ldrh	r3, [r3, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <find_volume+0x364>
 800a028:	230d      	movs	r3, #13
 800a02a:	e08e      	b.n	800a14a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	6a1a      	ldr	r2, [r3, #32]
 800a030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a032:	441a      	add	r2, r3
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d103      	bne.n	800a048 <find_volume+0x380>
 800a040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	e00a      	b.n	800a05e <find_volume+0x396>
 800a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04a:	695a      	ldr	r2, [r3, #20]
 800a04c:	4613      	mov	r3, r2
 800a04e:	005b      	lsls	r3, r3, #1
 800a050:	4413      	add	r3, r2
 800a052:	085a      	lsrs	r2, r3, #1
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a05e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	699a      	ldr	r2, [r3, #24]
 800a064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a066:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a06a:	0a5b      	lsrs	r3, r3, #9
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d201      	bcs.n	800a074 <find_volume+0x3ac>
 800a070:	230d      	movs	r3, #13
 800a072:	e06a      	b.n	800a14a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a07a:	611a      	str	r2, [r3, #16]
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	691a      	ldr	r2, [r3, #16]
 800a080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a082:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a086:	2280      	movs	r2, #128	; 0x80
 800a088:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a08a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d149      	bne.n	800a126 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	3330      	adds	r3, #48	; 0x30
 800a096:	3330      	adds	r3, #48	; 0x30
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fb1d 	bl	80086d8 <ld_word>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d140      	bne.n	800a126 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0ac:	f7fe fdc4 	bl	8008c38 <move_window>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d137      	bne.n	800a126 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0be:	3330      	adds	r3, #48	; 0x30
 800a0c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe fb07 	bl	80086d8 <ld_word>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d127      	bne.n	800a126 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	3330      	adds	r3, #48	; 0x30
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe fb14 	bl	8008708 <ld_dword>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	4a1c      	ldr	r2, [pc, #112]	; (800a154 <find_volume+0x48c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d11e      	bne.n	800a126 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	3330      	adds	r3, #48	; 0x30
 800a0ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe fb09 	bl	8008708 <ld_dword>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4a17      	ldr	r2, [pc, #92]	; (800a158 <find_volume+0x490>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d113      	bne.n	800a126 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	3330      	adds	r3, #48	; 0x30
 800a102:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fafe 	bl	8008708 <ld_dword>
 800a10c:	4602      	mov	r2, r0
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a114:	3330      	adds	r3, #48	; 0x30
 800a116:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe faf4 	bl	8008708 <ld_dword>
 800a120:	4602      	mov	r2, r0
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a12c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <find_volume+0x494>)
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	3301      	adds	r3, #1
 800a134:	b29a      	uxth	r2, r3
 800a136:	4b09      	ldr	r3, [pc, #36]	; (800a15c <find_volume+0x494>)
 800a138:	801a      	strh	r2, [r3, #0]
 800a13a:	4b08      	ldr	r3, [pc, #32]	; (800a15c <find_volume+0x494>)
 800a13c:	881a      	ldrh	r2, [r3, #0]
 800a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a140:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a142:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a144:	f7fe fd10 	bl	8008b68 <clear_lock>
#endif
	return FR_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3758      	adds	r7, #88	; 0x58
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	41615252 	.word	0x41615252
 800a158:	61417272 	.word	0x61417272
 800a15c:	20000d8c 	.word	0x20000d8c

0800a160 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a16a:	2309      	movs	r3, #9
 800a16c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01c      	beq.n	800a1ae <validate+0x4e>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d018      	beq.n	800a1ae <validate+0x4e>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d013      	beq.n	800a1ae <validate+0x4e>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	889a      	ldrh	r2, [r3, #4]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	88db      	ldrh	r3, [r3, #6]
 800a190:	429a      	cmp	r2, r3
 800a192:	d10c      	bne.n	800a1ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	785b      	ldrb	r3, [r3, #1]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe f9fe 	bl	800859c <disk_status>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <validate+0x4e>
			res = FR_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <validate+0x5a>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	e000      	b.n	800a1bc <validate+0x5c>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	6013      	str	r3, [r2, #0]
	return res;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7ff fcd5 	bl	8009b92 <get_ldnumber>
 800a1e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	da01      	bge.n	800a1f4 <f_mount+0x28>
 800a1f0:	230b      	movs	r3, #11
 800a1f2:	e02b      	b.n	800a24c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a1f4:	4a17      	ldr	r2, [pc, #92]	; (800a254 <f_mount+0x88>)
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a204:	69b8      	ldr	r0, [r7, #24]
 800a206:	f7fe fcaf 	bl	8008b68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	2200      	movs	r2, #0
 800a20e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	490d      	ldr	r1, [pc, #52]	; (800a254 <f_mount+0x88>)
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <f_mount+0x66>
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d001      	beq.n	800a236 <f_mount+0x6a>
 800a232:	2300      	movs	r3, #0
 800a234:	e00a      	b.n	800a24c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a236:	f107 010c 	add.w	r1, r7, #12
 800a23a:	f107 0308 	add.w	r3, r7, #8
 800a23e:	2200      	movs	r2, #0
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff fd41 	bl	8009cc8 <find_volume>
 800a246:	4603      	mov	r3, r0
 800a248:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3720      	adds	r7, #32
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20000d88 	.word	0x20000d88

0800a258 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b098      	sub	sp, #96	; 0x60
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	4613      	mov	r3, r2
 800a264:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <f_open+0x18>
 800a26c:	2309      	movs	r3, #9
 800a26e:	e1ad      	b.n	800a5cc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a276:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a278:	79fa      	ldrb	r2, [r7, #7]
 800a27a:	f107 0110 	add.w	r1, r7, #16
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff fd20 	bl	8009cc8 <find_volume>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a28e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 8191 	bne.w	800a5ba <f_open+0x362>
		dj.obj.fs = fs;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	f107 0314 	add.w	r3, r7, #20
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff fc03 	bl	8009ab0 <follow_path>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a2b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d11a      	bne.n	800a2ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a2b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2bc:	b25b      	sxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	da03      	bge.n	800a2ca <f_open+0x72>
				res = FR_INVALID_NAME;
 800a2c2:	2306      	movs	r3, #6
 800a2c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a2c8:	e011      	b.n	800a2ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	f023 0301 	bic.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bf14      	ite	ne
 800a2d4:	2301      	movne	r3, #1
 800a2d6:	2300      	moveq	r3, #0
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f107 0314 	add.w	r3, r7, #20
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe faf8 	bl	80088d8 <chk_lock>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a2ee:	79fb      	ldrb	r3, [r7, #7]
 800a2f0:	f003 031c 	and.w	r3, r3, #28
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d07f      	beq.n	800a3f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a2f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d017      	beq.n	800a330 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a304:	2b04      	cmp	r3, #4
 800a306:	d10e      	bne.n	800a326 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a308:	f7fe fb42 	bl	8008990 <enq_lock>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d006      	beq.n	800a320 <f_open+0xc8>
 800a312:	f107 0314 	add.w	r3, r7, #20
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff fa86 	bl	8009828 <dir_register>
 800a31c:	4603      	mov	r3, r0
 800a31e:	e000      	b.n	800a322 <f_open+0xca>
 800a320:	2312      	movs	r3, #18
 800a322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a326:	79fb      	ldrb	r3, [r7, #7]
 800a328:	f043 0308 	orr.w	r3, r3, #8
 800a32c:	71fb      	strb	r3, [r7, #7]
 800a32e:	e010      	b.n	800a352 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a330:	7ebb      	ldrb	r3, [r7, #26]
 800a332:	f003 0311 	and.w	r3, r3, #17
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <f_open+0xea>
					res = FR_DENIED;
 800a33a:	2307      	movs	r3, #7
 800a33c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a340:	e007      	b.n	800a352 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <f_open+0xfa>
 800a34c:	2308      	movs	r3, #8
 800a34e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a356:	2b00      	cmp	r3, #0
 800a358:	d168      	bne.n	800a42c <f_open+0x1d4>
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	f003 0308 	and.w	r3, r3, #8
 800a360:	2b00      	cmp	r3, #0
 800a362:	d063      	beq.n	800a42c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a364:	f7fd ff52 	bl	800820c <get_fattime>
 800a368:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36c:	330e      	adds	r3, #14
 800a36e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fa07 	bl	8008784 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a378:	3316      	adds	r3, #22
 800a37a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fe fa01 	bl	8008784 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a384:	330b      	adds	r3, #11
 800a386:	2220      	movs	r2, #32
 800a388:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff f958 	bl	8009646 <ld_clust>
 800a396:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a39c:	2200      	movs	r2, #0
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7ff f970 	bl	8009684 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a6:	331c      	adds	r3, #28
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe f9ea 	bl	8008784 <st_dword>
					fs->wflag = 1;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d037      	beq.n	800a42c <f_open+0x1d4>
						dw = fs->winsect;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a3c2:	f107 0314 	add.w	r3, r7, #20
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fe83 	bl	80090d6 <remove_chain>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a3d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d126      	bne.n	800a42c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe fc28 	bl	8008c38 <move_window>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3f2:	3a01      	subs	r2, #1
 800a3f4:	60da      	str	r2, [r3, #12]
 800a3f6:	e019      	b.n	800a42c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a3f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d115      	bne.n	800a42c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a400:	7ebb      	ldrb	r3, [r7, #26]
 800a402:	f003 0310 	and.w	r3, r3, #16
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a40a:	2304      	movs	r3, #4
 800a40c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a410:	e00c      	b.n	800a42c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a412:	79fb      	ldrb	r3, [r7, #7]
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d007      	beq.n	800a42c <f_open+0x1d4>
 800a41c:	7ebb      	ldrb	r3, [r7, #26]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <f_open+0x1d4>
						res = FR_DENIED;
 800a426:	2307      	movs	r3, #7
 800a428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a42c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a430:	2b00      	cmp	r3, #0
 800a432:	d128      	bne.n	800a486 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	f003 0308 	and.w	r3, r3, #8
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a444:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	bf14      	ite	ne
 800a45e:	2301      	movne	r3, #1
 800a460:	2300      	moveq	r3, #0
 800a462:	b2db      	uxtb	r3, r3
 800a464:	461a      	mov	r2, r3
 800a466:	f107 0314 	add.w	r3, r7, #20
 800a46a:	4611      	mov	r1, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fab1 	bl	80089d4 <inc_lock>
 800a472:	4602      	mov	r2, r0
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <f_open+0x22e>
 800a480:	2302      	movs	r3, #2
 800a482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f040 8095 	bne.w	800a5ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a494:	4611      	mov	r1, r2
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff f8d5 	bl	8009646 <ld_clust>
 800a49c:	4602      	mov	r2, r0
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a4:	331c      	adds	r3, #28
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe f92e 	bl	8008708 <ld_dword>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	88da      	ldrh	r2, [r3, #6]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	79fa      	ldrb	r2, [r7, #7]
 800a4ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3330      	adds	r3, #48	; 0x30
 800a4e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fe f998 	bl	800881e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d060      	beq.n	800a5ba <f_open+0x362>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d05c      	beq.n	800a5ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	68da      	ldr	r2, [r3, #12]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	895b      	ldrh	r3, [r3, #10]
 800a50c:	025b      	lsls	r3, r3, #9
 800a50e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	657b      	str	r3, [r7, #84]	; 0x54
 800a51c:	e016      	b.n	800a54c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fc43 	bl	8008dae <get_fat>
 800a528:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a52a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d802      	bhi.n	800a536 <f_open+0x2de>
 800a530:	2302      	movs	r3, #2
 800a532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a53c:	d102      	bne.n	800a544 <f_open+0x2ec>
 800a53e:	2301      	movs	r3, #1
 800a540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	657b      	str	r3, [r7, #84]	; 0x54
 800a54c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a550:	2b00      	cmp	r3, #0
 800a552:	d103      	bne.n	800a55c <f_open+0x304>
 800a554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a558:	429a      	cmp	r2, r3
 800a55a:	d8e0      	bhi.n	800a51e <f_open+0x2c6>
				}
				fp->clust = clst;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a560:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a566:	2b00      	cmp	r3, #0
 800a568:	d127      	bne.n	800a5ba <f_open+0x362>
 800a56a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a570:	2b00      	cmp	r3, #0
 800a572:	d022      	beq.n	800a5ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe fbf9 	bl	8008d70 <clust2sect>
 800a57e:	6478      	str	r0, [r7, #68]	; 0x44
 800a580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <f_open+0x336>
						res = FR_INT_ERR;
 800a586:	2302      	movs	r3, #2
 800a588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a58c:	e015      	b.n	800a5ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a58e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a590:	0a5a      	lsrs	r2, r3, #9
 800a592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a594:	441a      	add	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	7858      	ldrb	r0, [r3, #1]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6a1a      	ldr	r2, [r3, #32]
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f7fe f837 	bl	800861c <disk_read>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <f_open+0x362>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a5ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <f_open+0x370>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3760      	adds	r7, #96	; 0x60
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08c      	sub	sp, #48	; 0x30
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f107 0210 	add.w	r2, r7, #16
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff fdb3 	bl	800a160 <validate>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a604:	2b00      	cmp	r3, #0
 800a606:	d107      	bne.n	800a618 <f_write+0x44>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	7d5b      	ldrb	r3, [r3, #21]
 800a60c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <f_write+0x4a>
 800a618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a61c:	e14b      	b.n	800a8b6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	7d1b      	ldrb	r3, [r3, #20]
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <f_write+0x5a>
 800a62a:	2307      	movs	r3, #7
 800a62c:	e143      	b.n	800a8b6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	441a      	add	r2, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	f080 812d 	bcs.w	800a89a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	43db      	mvns	r3, r3
 800a646:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a648:	e127      	b.n	800a89a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a652:	2b00      	cmp	r3, #0
 800a654:	f040 80e3 	bne.w	800a81e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	0a5b      	lsrs	r3, r3, #9
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	8952      	ldrh	r2, [r2, #10]
 800a662:	3a01      	subs	r2, #1
 800a664:	4013      	ands	r3, r2
 800a666:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d143      	bne.n	800a6f6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10c      	bne.n	800a690 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d11a      	bne.n	800a6b8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe fd8a 	bl	80091a0 <create_chain>
 800a68c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a68e:	e013      	b.n	800a6b8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	4619      	mov	r1, r3
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7fe fe16 	bl	80092d0 <clmt_clust>
 800a6a4:	62b8      	str	r0, [r7, #40]	; 0x28
 800a6a6:	e007      	b.n	800a6b8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	f7fe fd75 	bl	80091a0 <create_chain>
 800a6b6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 80f2 	beq.w	800a8a4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d104      	bne.n	800a6d0 <f_write+0xfc>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	755a      	strb	r2, [r3, #21]
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	e0f2      	b.n	800a8b6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6d6:	d104      	bne.n	800a6e2 <f_write+0x10e>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	755a      	strb	r2, [r3, #21]
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e0e9      	b.n	800a8b6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d102      	bne.n	800a6f6 <f_write+0x122>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	7d1b      	ldrb	r3, [r3, #20]
 800a6fa:	b25b      	sxtb	r3, r3
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	da18      	bge.n	800a732 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	7858      	ldrb	r0, [r3, #1]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6a1a      	ldr	r2, [r3, #32]
 800a70e:	2301      	movs	r3, #1
 800a710:	f7fd ffa4 	bl	800865c <disk_write>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d004      	beq.n	800a724 <f_write+0x150>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2201      	movs	r2, #1
 800a71e:	755a      	strb	r2, [r3, #21]
 800a720:	2301      	movs	r3, #1
 800a722:	e0c8      	b.n	800a8b6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	7d1b      	ldrb	r3, [r3, #20]
 800a728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7fe fb18 	bl	8008d70 <clust2sect>
 800a740:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d104      	bne.n	800a752 <f_write+0x17e>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2202      	movs	r2, #2
 800a74c:	755a      	strb	r2, [r3, #21]
 800a74e:	2302      	movs	r3, #2
 800a750:	e0b1      	b.n	800a8b6 <f_write+0x2e2>
			sect += csect;
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	4413      	add	r3, r2
 800a758:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	0a5b      	lsrs	r3, r3, #9
 800a75e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d03c      	beq.n	800a7e0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	4413      	add	r3, r2
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	8952      	ldrh	r2, [r2, #10]
 800a770:	4293      	cmp	r3, r2
 800a772:	d905      	bls.n	800a780 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	895b      	ldrh	r3, [r3, #10]
 800a778:	461a      	mov	r2, r3
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	7858      	ldrb	r0, [r3, #1]
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	69f9      	ldr	r1, [r7, #28]
 800a78a:	f7fd ff67 	bl	800865c <disk_write>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <f_write+0x1ca>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2201      	movs	r2, #1
 800a798:	755a      	strb	r2, [r3, #21]
 800a79a:	2301      	movs	r3, #1
 800a79c:	e08b      	b.n	800a8b6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6a1a      	ldr	r2, [r3, #32]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	6a3a      	ldr	r2, [r7, #32]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d915      	bls.n	800a7d8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6a1a      	ldr	r2, [r3, #32]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	025b      	lsls	r3, r3, #9
 800a7bc:	69fa      	ldr	r2, [r7, #28]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f7fe f809 	bl	80087dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	7d1b      	ldrb	r3, [r3, #20]
 800a7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	025b      	lsls	r3, r3, #9
 800a7dc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a7de:	e03f      	b.n	800a860 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d016      	beq.n	800a818 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d210      	bcs.n	800a818 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	7858      	ldrb	r0, [r3, #1]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a800:	2301      	movs	r3, #1
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	f7fd ff0a 	bl	800861c <disk_read>
 800a808:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d004      	beq.n	800a818 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2201      	movs	r2, #1
 800a812:	755a      	strb	r2, [r3, #21]
 800a814:	2301      	movs	r3, #1
 800a816:	e04e      	b.n	800a8b6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a826:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	429a      	cmp	r2, r3
 800a832:	d901      	bls.n	800a838 <f_write+0x264>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a846:	4413      	add	r3, r2
 800a848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a84a:	69f9      	ldr	r1, [r7, #28]
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd ffc5 	bl	80087dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	7d1b      	ldrb	r3, [r3, #20]
 800a856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a860:	69fa      	ldr	r2, [r7, #28]
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	4413      	add	r3, r2
 800a866:	61fb      	str	r3, [r7, #28]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	441a      	add	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	619a      	str	r2, [r3, #24]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	bf38      	it	cc
 800a880:	461a      	movcc	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	60da      	str	r2, [r3, #12]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88c:	441a      	add	r2, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f47f aed4 	bne.w	800a64a <f_write+0x76>
 800a8a2:	e000      	b.n	800a8a6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8a4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	7d1b      	ldrb	r3, [r3, #20]
 800a8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3730      	adds	r7, #48	; 0x30
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b086      	sub	sp, #24
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f107 0208 	add.w	r2, r7, #8
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7ff fc46 	bl	800a160 <validate>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d168      	bne.n	800a9b0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	7d1b      	ldrb	r3, [r3, #20]
 800a8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d062      	beq.n	800a9b0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	7d1b      	ldrb	r3, [r3, #20]
 800a8ee:	b25b      	sxtb	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da15      	bge.n	800a920 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	7858      	ldrb	r0, [r3, #1]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a1a      	ldr	r2, [r3, #32]
 800a902:	2301      	movs	r3, #1
 800a904:	f7fd feaa 	bl	800865c <disk_write>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <f_sync+0x54>
 800a90e:	2301      	movs	r3, #1
 800a910:	e04f      	b.n	800a9b2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	7d1b      	ldrb	r3, [r3, #20]
 800a916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a920:	f7fd fc74 	bl	800820c <get_fattime>
 800a924:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	4619      	mov	r1, r3
 800a92e:	4610      	mov	r0, r2
 800a930:	f7fe f982 	bl	8008c38 <move_window>
 800a934:	4603      	mov	r3, r0
 800a936:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d138      	bne.n	800a9b0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a942:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	330b      	adds	r3, #11
 800a948:	781a      	ldrb	r2, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	330b      	adds	r3, #11
 800a94e:	f042 0220 	orr.w	r2, r2, #32
 800a952:	b2d2      	uxtb	r2, r2
 800a954:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	461a      	mov	r2, r3
 800a960:	68f9      	ldr	r1, [r7, #12]
 800a962:	f7fe fe8f 	bl	8009684 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f103 021c 	add.w	r2, r3, #28
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	4619      	mov	r1, r3
 800a972:	4610      	mov	r0, r2
 800a974:	f7fd ff06 	bl	8008784 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	3316      	adds	r3, #22
 800a97c:	6939      	ldr	r1, [r7, #16]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fd ff00 	bl	8008784 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3312      	adds	r3, #18
 800a988:	2100      	movs	r1, #0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fd fedf 	bl	800874e <st_word>
					fs->wflag = 1;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2201      	movs	r2, #1
 800a994:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe f97b 	bl	8008c94 <sync_fs>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	7d1b      	ldrb	r3, [r3, #20]
 800a9a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7ff ff7b 	bl	800a8be <f_sync>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d118      	bne.n	800aa04 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f107 0208 	add.w	r2, r7, #8
 800a9d8:	4611      	mov	r1, r2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fbc0 	bl	800a160 <validate>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10c      	bne.n	800aa04 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe f87e 	bl	8008af0 <dec_lock>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d102      	bne.n	800aa04 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b090      	sub	sp, #64	; 0x40
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f107 0208 	add.w	r2, r7, #8
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff fb9d 	bl	800a160 <validate>
 800aa26:	4603      	mov	r3, r0
 800aa28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800aa2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d103      	bne.n	800aa3c <f_lseek+0x2e>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	7d5b      	ldrb	r3, [r3, #21]
 800aa38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800aa3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <f_lseek+0x3c>
 800aa44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa48:	e1e6      	b.n	800ae18 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 80d1 	beq.w	800abf6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa5a:	d15a      	bne.n	800ab12 <f_lseek+0x104>
			tbl = fp->cltbl;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	1d1a      	adds	r2, r3, #4
 800aa66:	627a      	str	r2, [r7, #36]	; 0x24
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d03a      	beq.n	800aaf2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	2300      	movs	r3, #0
 800aa82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	3302      	adds	r3, #2
 800aa88:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	3301      	adds	r3, #1
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe f988 	bl	8008dae <get_fat>
 800aa9e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d804      	bhi.n	800aab0 <f_lseek+0xa2>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	755a      	strb	r2, [r3, #21]
 800aaac:	2302      	movs	r3, #2
 800aaae:	e1b3      	b.n	800ae18 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aab6:	d104      	bne.n	800aac2 <f_lseek+0xb4>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	755a      	strb	r2, [r3, #21]
 800aabe:	2301      	movs	r3, #1
 800aac0:	e1aa      	b.n	800ae18 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3301      	adds	r3, #1
 800aac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d0de      	beq.n	800aa8a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800aacc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d809      	bhi.n	800aae8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad6:	1d1a      	adds	r2, r3, #4
 800aad8:	627a      	str	r2, [r7, #36]	; 0x24
 800aada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	1d1a      	adds	r2, r3, #4
 800aae2:	627a      	str	r2, [r7, #36]	; 0x24
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d3c4      	bcc.n	800aa7c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800aafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d803      	bhi.n	800ab0a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	2200      	movs	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	e184      	b.n	800ae14 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ab0a:	2311      	movs	r3, #17
 800ab0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ab10:	e180      	b.n	800ae14 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d902      	bls.n	800ab22 <f_lseek+0x114>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8172 	beq.w	800ae14 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	4619      	mov	r1, r3
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7fe fbca 	bl	80092d0 <clmt_clust>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7fe f910 	bl	8008d70 <clust2sect>
 800ab50:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d104      	bne.n	800ab62 <f_lseek+0x154>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	755a      	strb	r2, [r3, #21]
 800ab5e:	2302      	movs	r3, #2
 800ab60:	e15a      	b.n	800ae18 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	0a5b      	lsrs	r3, r3, #9
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	8952      	ldrh	r2, [r2, #10]
 800ab6c:	3a01      	subs	r2, #1
 800ab6e:	4013      	ands	r3, r2
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	4413      	add	r3, r2
 800ab74:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 8148 	beq.w	800ae14 <f_lseek+0x406>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a1b      	ldr	r3, [r3, #32]
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	f000 8142 	beq.w	800ae14 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7d1b      	ldrb	r3, [r3, #20]
 800ab94:	b25b      	sxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	da18      	bge.n	800abcc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	7858      	ldrb	r0, [r3, #1]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a1a      	ldr	r2, [r3, #32]
 800aba8:	2301      	movs	r3, #1
 800abaa:	f7fd fd57 	bl	800865c <disk_write>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <f_lseek+0x1b0>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	755a      	strb	r2, [r3, #21]
 800abba:	2301      	movs	r3, #1
 800abbc:	e12c      	b.n	800ae18 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	7d1b      	ldrb	r3, [r3, #20]
 800abc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	7858      	ldrb	r0, [r3, #1]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abd6:	2301      	movs	r3, #1
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	f7fd fd1f 	bl	800861c <disk_read>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <f_lseek+0x1e0>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	755a      	strb	r2, [r3, #21]
 800abea:	2301      	movs	r3, #1
 800abec:	e114      	b.n	800ae18 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	621a      	str	r2, [r3, #32]
 800abf4:	e10e      	b.n	800ae14 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d908      	bls.n	800ac12 <f_lseek+0x204>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	7d1b      	ldrb	r3, [r3, #20]
 800ac04:	f003 0302 	and.w	r3, r3, #2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d102      	bne.n	800ac12 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac20:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 80a7 	beq.w	800ad78 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	895b      	ldrh	r3, [r3, #10]
 800ac2e:	025b      	lsls	r3, r3, #9
 800ac30:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d01b      	beq.n	800ac70 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	1e5a      	subs	r2, r3, #1
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	1e59      	subs	r1, r3, #1
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d30f      	bcc.n	800ac70 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	1e5a      	subs	r2, r3, #1
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	425b      	negs	r3, r3
 800ac58:	401a      	ands	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac6e:	e022      	b.n	800acb6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ac76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d119      	bne.n	800acb0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2100      	movs	r1, #0
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe fa8d 	bl	80091a0 <create_chain>
 800ac86:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d104      	bne.n	800ac98 <f_lseek+0x28a>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2202      	movs	r2, #2
 800ac92:	755a      	strb	r2, [r3, #21]
 800ac94:	2302      	movs	r3, #2
 800ac96:	e0bf      	b.n	800ae18 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac9e:	d104      	bne.n	800acaa <f_lseek+0x29c>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	755a      	strb	r2, [r3, #21]
 800aca6:	2301      	movs	r3, #1
 800aca8:	e0b6      	b.n	800ae18 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acae:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acb4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d05d      	beq.n	800ad78 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800acbc:	e03a      	b.n	800ad34 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	603b      	str	r3, [r7, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	699a      	ldr	r2, [r3, #24]
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	441a      	add	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	7d1b      	ldrb	r3, [r3, #20]
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00b      	beq.n	800acf6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fa5c 	bl	80091a0 <create_chain>
 800ace8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	2b00      	cmp	r3, #0
 800acee:	d108      	bne.n	800ad02 <f_lseek+0x2f4>
							ofs = 0; break;
 800acf0:	2300      	movs	r3, #0
 800acf2:	603b      	str	r3, [r7, #0]
 800acf4:	e022      	b.n	800ad3c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe f857 	bl	8008dae <get_fat>
 800ad00:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad08:	d104      	bne.n	800ad14 <f_lseek+0x306>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	755a      	strb	r2, [r3, #21]
 800ad10:	2301      	movs	r3, #1
 800ad12:	e081      	b.n	800ae18 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d904      	bls.n	800ad24 <f_lseek+0x316>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d304      	bcc.n	800ad2e <f_lseek+0x320>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2202      	movs	r2, #2
 800ad28:	755a      	strb	r2, [r3, #21]
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	e074      	b.n	800ae18 <f_lseek+0x40a>
					fp->clust = clst;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad32:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d8c0      	bhi.n	800acbe <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	699a      	ldr	r2, [r3, #24]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	441a      	add	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d012      	beq.n	800ad78 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fe f80a 	bl	8008d70 <clust2sect>
 800ad5c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d104      	bne.n	800ad6e <f_lseek+0x360>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	755a      	strb	r2, [r3, #21]
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e054      	b.n	800ae18 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	0a5b      	lsrs	r3, r3, #9
 800ad72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad74:	4413      	add	r3, r2
 800ad76:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	699a      	ldr	r2, [r3, #24]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d90a      	bls.n	800ad9a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	699a      	ldr	r2, [r3, #24]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7d1b      	ldrb	r3, [r3, #20]
 800ad90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d036      	beq.n	800ae14 <f_lseek+0x406>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adac:	429a      	cmp	r2, r3
 800adae:	d031      	beq.n	800ae14 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7d1b      	ldrb	r3, [r3, #20]
 800adb4:	b25b      	sxtb	r3, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da18      	bge.n	800adec <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	7858      	ldrb	r0, [r3, #1]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a1a      	ldr	r2, [r3, #32]
 800adc8:	2301      	movs	r3, #1
 800adca:	f7fd fc47 	bl	800865c <disk_write>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d004      	beq.n	800adde <f_lseek+0x3d0>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	755a      	strb	r2, [r3, #21]
 800adda:	2301      	movs	r3, #1
 800addc:	e01c      	b.n	800ae18 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7d1b      	ldrb	r3, [r3, #20]
 800ade2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	7858      	ldrb	r0, [r3, #1]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adf6:	2301      	movs	r3, #1
 800adf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adfa:	f7fd fc0f 	bl	800861c <disk_read>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d004      	beq.n	800ae0e <f_lseek+0x400>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	755a      	strb	r2, [r3, #21]
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e004      	b.n	800ae18 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae12:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ae14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3740      	adds	r7, #64	; 0x40
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <f_opendir+0x14>
 800ae30:	2309      	movs	r3, #9
 800ae32:	e064      	b.n	800aefe <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ae38:	f107 010c 	add.w	r1, r7, #12
 800ae3c:	463b      	mov	r3, r7
 800ae3e:	2200      	movs	r2, #0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe ff41 	bl	8009cc8 <find_volume>
 800ae46:	4603      	mov	r3, r0
 800ae48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d14f      	bne.n	800aef0 <f_opendir+0xd0>
		obj->fs = fs;
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7fe fe28 	bl	8009ab0 <follow_path>
 800ae60:	4603      	mov	r3, r0
 800ae62:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d13d      	bne.n	800aee6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae70:	b25b      	sxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	db12      	blt.n	800ae9c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	799b      	ldrb	r3, [r3, #6]
 800ae7a:	f003 0310 	and.w	r3, r3, #16
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6a1b      	ldr	r3, [r3, #32]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	f7fe fbdb 	bl	8009646 <ld_clust>
 800ae90:	4602      	mov	r2, r0
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	609a      	str	r2, [r3, #8]
 800ae96:	e001      	b.n	800ae9c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ae98:	2305      	movs	r3, #5
 800ae9a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d121      	bne.n	800aee6 <f_opendir+0xc6>
				obj->id = fs->id;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	88da      	ldrh	r2, [r3, #6]
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800aeaa:	2100      	movs	r1, #0
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7fe fa43 	bl	8009338 <dir_sdi>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800aeb6:	7dfb      	ldrb	r3, [r7, #23]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d114      	bne.n	800aee6 <f_opendir+0xc6>
					if (obj->sclust) {
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00d      	beq.n	800aee0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800aec4:	2100      	movs	r1, #0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7fd fd84 	bl	80089d4 <inc_lock>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d105      	bne.n	800aee6 <f_opendir+0xc6>
 800aeda:	2312      	movs	r3, #18
 800aedc:	75fb      	strb	r3, [r7, #23]
 800aede:	e002      	b.n	800aee6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	2200      	movs	r2, #0
 800aee4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d101      	bne.n	800aef0 <f_opendir+0xd0>
 800aeec:	2305      	movs	r3, #5
 800aeee:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <f_opendir+0xdc>
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f107 0208 	add.w	r2, r7, #8
 800af14:	4611      	mov	r1, r2
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff f922 	bl	800a160 <validate>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d110      	bne.n	800af48 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d006      	beq.n	800af3c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	4618      	mov	r0, r3
 800af34:	f7fd fddc 	bl	8008af0 <dec_lock>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800af48:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f107 0208 	add.w	r2, r7, #8
 800af62:	4611      	mov	r1, r2
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff f8fb 	bl	800a160 <validate>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d126      	bne.n	800afc2 <f_readdir+0x70>
		if (!fno) {
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800af7a:	2100      	movs	r1, #0
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7fe f9db 	bl	8009338 <dir_sdi>
 800af82:	4603      	mov	r3, r0
 800af84:	73fb      	strb	r3, [r7, #15]
 800af86:	e01c      	b.n	800afc2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800af88:	2100      	movs	r1, #0
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7fe fb9a 	bl	80096c4 <dir_read>
 800af90:	4603      	mov	r3, r0
 800af92:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	2b04      	cmp	r3, #4
 800af98:	d101      	bne.n	800af9e <f_readdir+0x4c>
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10e      	bne.n	800afc2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7fe fc8e 	bl	80098c8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800afac:	2100      	movs	r1, #0
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7fe fa3d 	bl	800942e <dir_next>
 800afb4:	4603      	mov	r3, r0
 800afb6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	2b04      	cmp	r3, #4
 800afbc:	d101      	bne.n	800afc2 <f_readdir+0x70>
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b09e      	sub	sp, #120	; 0x78
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800afd8:	f107 010c 	add.w	r1, r7, #12
 800afdc:	1d3b      	adds	r3, r7, #4
 800afde:	2202      	movs	r2, #2
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe fe71 	bl	8009cc8 <find_volume>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800aff0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f040 808e 	bne.w	800b116 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fd54 	bl	8009ab0 <follow_path>
 800b008:	4603      	mov	r3, r0
 800b00a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b00e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b012:	2b00      	cmp	r3, #0
 800b014:	d108      	bne.n	800b028 <f_unlink+0x5c>
 800b016:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b01a:	2102      	movs	r1, #2
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fd fc5b 	bl	80088d8 <chk_lock>
 800b022:	4603      	mov	r3, r0
 800b024:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b028:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d172      	bne.n	800b116 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b030:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b034:	b25b      	sxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	da03      	bge.n	800b042 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b03a:	2306      	movs	r3, #6
 800b03c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b040:	e008      	b.n	800b054 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b042:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b04e:	2307      	movs	r3, #7
 800b050:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b054:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d134      	bne.n	800b0c6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b060:	4611      	mov	r1, r2
 800b062:	4618      	mov	r0, r3
 800b064:	f7fe faef 	bl	8009646 <ld_clust>
 800b068:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b06a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b06e:	f003 0310 	and.w	r3, r3, #16
 800b072:	2b00      	cmp	r3, #0
 800b074:	d027      	beq.n	800b0c6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b07a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b07c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b07e:	f107 0310 	add.w	r3, r7, #16
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f7fe f957 	bl	8009338 <dir_sdi>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b090:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b094:	2b00      	cmp	r3, #0
 800b096:	d116      	bne.n	800b0c6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b098:	f107 0310 	add.w	r3, r7, #16
 800b09c:	2100      	movs	r1, #0
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fb10 	bl	80096c4 <dir_read>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b0aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <f_unlink+0xec>
 800b0b2:	2307      	movs	r3, #7
 800b0b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b0b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d102      	bne.n	800b0c6 <f_unlink+0xfa>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b0c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d123      	bne.n	800b116 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b0ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fe fbda 	bl	800988c <dir_remove>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b0de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d10c      	bne.n	800b100 <f_unlink+0x134>
 800b0e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d009      	beq.n	800b100 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b0ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7fd ffee 	bl	80090d6 <remove_chain>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b100:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b104:	2b00      	cmp	r3, #0
 800b106:	d106      	bne.n	800b116 <f_unlink+0x14a>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fd fdc2 	bl	8008c94 <sync_fs>
 800b110:	4603      	mov	r3, r0
 800b112:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b116:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3778      	adds	r7, #120	; 0x78
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	4613      	mov	r3, r2
 800b130:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b132:	2301      	movs	r3, #1
 800b134:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b13a:	4b1f      	ldr	r3, [pc, #124]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b13c:	7a5b      	ldrb	r3, [r3, #9]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d131      	bne.n	800b1a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b144:	4b1c      	ldr	r3, [pc, #112]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b146:	7a5b      	ldrb	r3, [r3, #9]
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	461a      	mov	r2, r3
 800b14c:	4b1a      	ldr	r3, [pc, #104]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b14e:	2100      	movs	r1, #0
 800b150:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b152:	4b19      	ldr	r3, [pc, #100]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b154:	7a5b      	ldrb	r3, [r3, #9]
 800b156:	b2db      	uxtb	r3, r3
 800b158:	4a17      	ldr	r2, [pc, #92]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b162:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b164:	7a5b      	ldrb	r3, [r3, #9]
 800b166:	b2db      	uxtb	r3, r3
 800b168:	461a      	mov	r2, r3
 800b16a:	4b13      	ldr	r3, [pc, #76]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b16c:	4413      	add	r3, r2
 800b16e:	79fa      	ldrb	r2, [r7, #7]
 800b170:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b172:	4b11      	ldr	r3, [pc, #68]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b174:	7a5b      	ldrb	r3, [r3, #9]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	b2d1      	uxtb	r1, r2
 800b17c:	4a0e      	ldr	r2, [pc, #56]	; (800b1b8 <FATFS_LinkDriverEx+0x94>)
 800b17e:	7251      	strb	r1, [r2, #9]
 800b180:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b182:	7dbb      	ldrb	r3, [r7, #22]
 800b184:	3330      	adds	r3, #48	; 0x30
 800b186:	b2da      	uxtb	r2, r3
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	3301      	adds	r3, #1
 800b190:	223a      	movs	r2, #58	; 0x3a
 800b192:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	3302      	adds	r3, #2
 800b198:	222f      	movs	r2, #47	; 0x2f
 800b19a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	3303      	adds	r3, #3
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	371c      	adds	r7, #28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	20000db0 	.word	0x20000db0

0800b1bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7ff ffaa 	bl	800b124 <FATFS_LinkDriverEx>
 800b1d0:	4603      	mov	r3, r0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <__errno>:
 800b1dc:	4b01      	ldr	r3, [pc, #4]	; (800b1e4 <__errno+0x8>)
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	20000010 	.word	0x20000010

0800b1e8 <exit>:
 800b1e8:	b508      	push	{r3, lr}
 800b1ea:	4b07      	ldr	r3, [pc, #28]	; (800b208 <exit+0x20>)
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	b113      	cbz	r3, 800b1f6 <exit+0xe>
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	f3af 8000 	nop.w
 800b1f6:	4b05      	ldr	r3, [pc, #20]	; (800b20c <exit+0x24>)
 800b1f8:	6818      	ldr	r0, [r3, #0]
 800b1fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b1fc:	b103      	cbz	r3, 800b200 <exit+0x18>
 800b1fe:	4798      	blx	r3
 800b200:	4620      	mov	r0, r4
 800b202:	f7f6 fb13 	bl	800182c <_exit>
 800b206:	bf00      	nop
 800b208:	00000000 	.word	0x00000000
 800b20c:	0800bca0 	.word	0x0800bca0

0800b210 <__libc_init_array>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	4d0d      	ldr	r5, [pc, #52]	; (800b248 <__libc_init_array+0x38>)
 800b214:	4c0d      	ldr	r4, [pc, #52]	; (800b24c <__libc_init_array+0x3c>)
 800b216:	1b64      	subs	r4, r4, r5
 800b218:	10a4      	asrs	r4, r4, #2
 800b21a:	2600      	movs	r6, #0
 800b21c:	42a6      	cmp	r6, r4
 800b21e:	d109      	bne.n	800b234 <__libc_init_array+0x24>
 800b220:	4d0b      	ldr	r5, [pc, #44]	; (800b250 <__libc_init_array+0x40>)
 800b222:	4c0c      	ldr	r4, [pc, #48]	; (800b254 <__libc_init_array+0x44>)
 800b224:	f000 fc9e 	bl	800bb64 <_init>
 800b228:	1b64      	subs	r4, r4, r5
 800b22a:	10a4      	asrs	r4, r4, #2
 800b22c:	2600      	movs	r6, #0
 800b22e:	42a6      	cmp	r6, r4
 800b230:	d105      	bne.n	800b23e <__libc_init_array+0x2e>
 800b232:	bd70      	pop	{r4, r5, r6, pc}
 800b234:	f855 3b04 	ldr.w	r3, [r5], #4
 800b238:	4798      	blx	r3
 800b23a:	3601      	adds	r6, #1
 800b23c:	e7ee      	b.n	800b21c <__libc_init_array+0xc>
 800b23e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b242:	4798      	blx	r3
 800b244:	3601      	adds	r6, #1
 800b246:	e7f2      	b.n	800b22e <__libc_init_array+0x1e>
 800b248:	0800bce0 	.word	0x0800bce0
 800b24c:	0800bce0 	.word	0x0800bce0
 800b250:	0800bce0 	.word	0x0800bce0
 800b254:	0800bce4 	.word	0x0800bce4

0800b258 <malloc>:
 800b258:	4b02      	ldr	r3, [pc, #8]	; (800b264 <malloc+0xc>)
 800b25a:	4601      	mov	r1, r0
 800b25c:	6818      	ldr	r0, [r3, #0]
 800b25e:	f000 b87f 	b.w	800b360 <_malloc_r>
 800b262:	bf00      	nop
 800b264:	20000010 	.word	0x20000010

0800b268 <free>:
 800b268:	4b02      	ldr	r3, [pc, #8]	; (800b274 <free+0xc>)
 800b26a:	4601      	mov	r1, r0
 800b26c:	6818      	ldr	r0, [r3, #0]
 800b26e:	f000 b80b 	b.w	800b288 <_free_r>
 800b272:	bf00      	nop
 800b274:	20000010 	.word	0x20000010

0800b278 <memset>:
 800b278:	4402      	add	r2, r0
 800b27a:	4603      	mov	r3, r0
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d100      	bne.n	800b282 <memset+0xa>
 800b280:	4770      	bx	lr
 800b282:	f803 1b01 	strb.w	r1, [r3], #1
 800b286:	e7f9      	b.n	800b27c <memset+0x4>

0800b288 <_free_r>:
 800b288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b28a:	2900      	cmp	r1, #0
 800b28c:	d044      	beq.n	800b318 <_free_r+0x90>
 800b28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b292:	9001      	str	r0, [sp, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f1a1 0404 	sub.w	r4, r1, #4
 800b29a:	bfb8      	it	lt
 800b29c:	18e4      	addlt	r4, r4, r3
 800b29e:	f000 f903 	bl	800b4a8 <__malloc_lock>
 800b2a2:	4a1e      	ldr	r2, [pc, #120]	; (800b31c <_free_r+0x94>)
 800b2a4:	9801      	ldr	r0, [sp, #4]
 800b2a6:	6813      	ldr	r3, [r2, #0]
 800b2a8:	b933      	cbnz	r3, 800b2b8 <_free_r+0x30>
 800b2aa:	6063      	str	r3, [r4, #4]
 800b2ac:	6014      	str	r4, [r2, #0]
 800b2ae:	b003      	add	sp, #12
 800b2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2b4:	f000 b8fe 	b.w	800b4b4 <__malloc_unlock>
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	d908      	bls.n	800b2ce <_free_r+0x46>
 800b2bc:	6825      	ldr	r5, [r4, #0]
 800b2be:	1961      	adds	r1, r4, r5
 800b2c0:	428b      	cmp	r3, r1
 800b2c2:	bf01      	itttt	eq
 800b2c4:	6819      	ldreq	r1, [r3, #0]
 800b2c6:	685b      	ldreq	r3, [r3, #4]
 800b2c8:	1949      	addeq	r1, r1, r5
 800b2ca:	6021      	streq	r1, [r4, #0]
 800b2cc:	e7ed      	b.n	800b2aa <_free_r+0x22>
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	b10b      	cbz	r3, 800b2d8 <_free_r+0x50>
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	d9fa      	bls.n	800b2ce <_free_r+0x46>
 800b2d8:	6811      	ldr	r1, [r2, #0]
 800b2da:	1855      	adds	r5, r2, r1
 800b2dc:	42a5      	cmp	r5, r4
 800b2de:	d10b      	bne.n	800b2f8 <_free_r+0x70>
 800b2e0:	6824      	ldr	r4, [r4, #0]
 800b2e2:	4421      	add	r1, r4
 800b2e4:	1854      	adds	r4, r2, r1
 800b2e6:	42a3      	cmp	r3, r4
 800b2e8:	6011      	str	r1, [r2, #0]
 800b2ea:	d1e0      	bne.n	800b2ae <_free_r+0x26>
 800b2ec:	681c      	ldr	r4, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	6053      	str	r3, [r2, #4]
 800b2f2:	4421      	add	r1, r4
 800b2f4:	6011      	str	r1, [r2, #0]
 800b2f6:	e7da      	b.n	800b2ae <_free_r+0x26>
 800b2f8:	d902      	bls.n	800b300 <_free_r+0x78>
 800b2fa:	230c      	movs	r3, #12
 800b2fc:	6003      	str	r3, [r0, #0]
 800b2fe:	e7d6      	b.n	800b2ae <_free_r+0x26>
 800b300:	6825      	ldr	r5, [r4, #0]
 800b302:	1961      	adds	r1, r4, r5
 800b304:	428b      	cmp	r3, r1
 800b306:	bf04      	itt	eq
 800b308:	6819      	ldreq	r1, [r3, #0]
 800b30a:	685b      	ldreq	r3, [r3, #4]
 800b30c:	6063      	str	r3, [r4, #4]
 800b30e:	bf04      	itt	eq
 800b310:	1949      	addeq	r1, r1, r5
 800b312:	6021      	streq	r1, [r4, #0]
 800b314:	6054      	str	r4, [r2, #4]
 800b316:	e7ca      	b.n	800b2ae <_free_r+0x26>
 800b318:	b003      	add	sp, #12
 800b31a:	bd30      	pop	{r4, r5, pc}
 800b31c:	20000dbc 	.word	0x20000dbc

0800b320 <sbrk_aligned>:
 800b320:	b570      	push	{r4, r5, r6, lr}
 800b322:	4e0e      	ldr	r6, [pc, #56]	; (800b35c <sbrk_aligned+0x3c>)
 800b324:	460c      	mov	r4, r1
 800b326:	6831      	ldr	r1, [r6, #0]
 800b328:	4605      	mov	r5, r0
 800b32a:	b911      	cbnz	r1, 800b332 <sbrk_aligned+0x12>
 800b32c:	f000 f88c 	bl	800b448 <_sbrk_r>
 800b330:	6030      	str	r0, [r6, #0]
 800b332:	4621      	mov	r1, r4
 800b334:	4628      	mov	r0, r5
 800b336:	f000 f887 	bl	800b448 <_sbrk_r>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	d00a      	beq.n	800b354 <sbrk_aligned+0x34>
 800b33e:	1cc4      	adds	r4, r0, #3
 800b340:	f024 0403 	bic.w	r4, r4, #3
 800b344:	42a0      	cmp	r0, r4
 800b346:	d007      	beq.n	800b358 <sbrk_aligned+0x38>
 800b348:	1a21      	subs	r1, r4, r0
 800b34a:	4628      	mov	r0, r5
 800b34c:	f000 f87c 	bl	800b448 <_sbrk_r>
 800b350:	3001      	adds	r0, #1
 800b352:	d101      	bne.n	800b358 <sbrk_aligned+0x38>
 800b354:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b358:	4620      	mov	r0, r4
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	20000dc0 	.word	0x20000dc0

0800b360 <_malloc_r>:
 800b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b364:	1ccd      	adds	r5, r1, #3
 800b366:	f025 0503 	bic.w	r5, r5, #3
 800b36a:	3508      	adds	r5, #8
 800b36c:	2d0c      	cmp	r5, #12
 800b36e:	bf38      	it	cc
 800b370:	250c      	movcc	r5, #12
 800b372:	2d00      	cmp	r5, #0
 800b374:	4607      	mov	r7, r0
 800b376:	db01      	blt.n	800b37c <_malloc_r+0x1c>
 800b378:	42a9      	cmp	r1, r5
 800b37a:	d905      	bls.n	800b388 <_malloc_r+0x28>
 800b37c:	230c      	movs	r3, #12
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	2600      	movs	r6, #0
 800b382:	4630      	mov	r0, r6
 800b384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b388:	4e2e      	ldr	r6, [pc, #184]	; (800b444 <_malloc_r+0xe4>)
 800b38a:	f000 f88d 	bl	800b4a8 <__malloc_lock>
 800b38e:	6833      	ldr	r3, [r6, #0]
 800b390:	461c      	mov	r4, r3
 800b392:	bb34      	cbnz	r4, 800b3e2 <_malloc_r+0x82>
 800b394:	4629      	mov	r1, r5
 800b396:	4638      	mov	r0, r7
 800b398:	f7ff ffc2 	bl	800b320 <sbrk_aligned>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	4604      	mov	r4, r0
 800b3a0:	d14d      	bne.n	800b43e <_malloc_r+0xde>
 800b3a2:	6834      	ldr	r4, [r6, #0]
 800b3a4:	4626      	mov	r6, r4
 800b3a6:	2e00      	cmp	r6, #0
 800b3a8:	d140      	bne.n	800b42c <_malloc_r+0xcc>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	eb04 0803 	add.w	r8, r4, r3
 800b3b4:	f000 f848 	bl	800b448 <_sbrk_r>
 800b3b8:	4580      	cmp	r8, r0
 800b3ba:	d13a      	bne.n	800b432 <_malloc_r+0xd2>
 800b3bc:	6821      	ldr	r1, [r4, #0]
 800b3be:	3503      	adds	r5, #3
 800b3c0:	1a6d      	subs	r5, r5, r1
 800b3c2:	f025 0503 	bic.w	r5, r5, #3
 800b3c6:	3508      	adds	r5, #8
 800b3c8:	2d0c      	cmp	r5, #12
 800b3ca:	bf38      	it	cc
 800b3cc:	250c      	movcc	r5, #12
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	f7ff ffa5 	bl	800b320 <sbrk_aligned>
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	d02b      	beq.n	800b432 <_malloc_r+0xd2>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	442b      	add	r3, r5
 800b3de:	6023      	str	r3, [r4, #0]
 800b3e0:	e00e      	b.n	800b400 <_malloc_r+0xa0>
 800b3e2:	6822      	ldr	r2, [r4, #0]
 800b3e4:	1b52      	subs	r2, r2, r5
 800b3e6:	d41e      	bmi.n	800b426 <_malloc_r+0xc6>
 800b3e8:	2a0b      	cmp	r2, #11
 800b3ea:	d916      	bls.n	800b41a <_malloc_r+0xba>
 800b3ec:	1961      	adds	r1, r4, r5
 800b3ee:	42a3      	cmp	r3, r4
 800b3f0:	6025      	str	r5, [r4, #0]
 800b3f2:	bf18      	it	ne
 800b3f4:	6059      	strne	r1, [r3, #4]
 800b3f6:	6863      	ldr	r3, [r4, #4]
 800b3f8:	bf08      	it	eq
 800b3fa:	6031      	streq	r1, [r6, #0]
 800b3fc:	5162      	str	r2, [r4, r5]
 800b3fe:	604b      	str	r3, [r1, #4]
 800b400:	4638      	mov	r0, r7
 800b402:	f104 060b 	add.w	r6, r4, #11
 800b406:	f000 f855 	bl	800b4b4 <__malloc_unlock>
 800b40a:	f026 0607 	bic.w	r6, r6, #7
 800b40e:	1d23      	adds	r3, r4, #4
 800b410:	1af2      	subs	r2, r6, r3
 800b412:	d0b6      	beq.n	800b382 <_malloc_r+0x22>
 800b414:	1b9b      	subs	r3, r3, r6
 800b416:	50a3      	str	r3, [r4, r2]
 800b418:	e7b3      	b.n	800b382 <_malloc_r+0x22>
 800b41a:	6862      	ldr	r2, [r4, #4]
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	bf0c      	ite	eq
 800b420:	6032      	streq	r2, [r6, #0]
 800b422:	605a      	strne	r2, [r3, #4]
 800b424:	e7ec      	b.n	800b400 <_malloc_r+0xa0>
 800b426:	4623      	mov	r3, r4
 800b428:	6864      	ldr	r4, [r4, #4]
 800b42a:	e7b2      	b.n	800b392 <_malloc_r+0x32>
 800b42c:	4634      	mov	r4, r6
 800b42e:	6876      	ldr	r6, [r6, #4]
 800b430:	e7b9      	b.n	800b3a6 <_malloc_r+0x46>
 800b432:	230c      	movs	r3, #12
 800b434:	603b      	str	r3, [r7, #0]
 800b436:	4638      	mov	r0, r7
 800b438:	f000 f83c 	bl	800b4b4 <__malloc_unlock>
 800b43c:	e7a1      	b.n	800b382 <_malloc_r+0x22>
 800b43e:	6025      	str	r5, [r4, #0]
 800b440:	e7de      	b.n	800b400 <_malloc_r+0xa0>
 800b442:	bf00      	nop
 800b444:	20000dbc 	.word	0x20000dbc

0800b448 <_sbrk_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d06      	ldr	r5, [pc, #24]	; (800b464 <_sbrk_r+0x1c>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	602b      	str	r3, [r5, #0]
 800b454:	f7f6 f9f4 	bl	8001840 <_sbrk>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_sbrk_r+0x1a>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_sbrk_r+0x1a>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	20000dc4 	.word	0x20000dc4

0800b468 <siprintf>:
 800b468:	b40e      	push	{r1, r2, r3}
 800b46a:	b500      	push	{lr}
 800b46c:	b09c      	sub	sp, #112	; 0x70
 800b46e:	ab1d      	add	r3, sp, #116	; 0x74
 800b470:	9002      	str	r0, [sp, #8]
 800b472:	9006      	str	r0, [sp, #24]
 800b474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b478:	4809      	ldr	r0, [pc, #36]	; (800b4a0 <siprintf+0x38>)
 800b47a:	9107      	str	r1, [sp, #28]
 800b47c:	9104      	str	r1, [sp, #16]
 800b47e:	4909      	ldr	r1, [pc, #36]	; (800b4a4 <siprintf+0x3c>)
 800b480:	f853 2b04 	ldr.w	r2, [r3], #4
 800b484:	9105      	str	r1, [sp, #20]
 800b486:	6800      	ldr	r0, [r0, #0]
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	a902      	add	r1, sp, #8
 800b48c:	f000 f874 	bl	800b578 <_svfiprintf_r>
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	2200      	movs	r2, #0
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	b01c      	add	sp, #112	; 0x70
 800b498:	f85d eb04 	ldr.w	lr, [sp], #4
 800b49c:	b003      	add	sp, #12
 800b49e:	4770      	bx	lr
 800b4a0:	20000010 	.word	0x20000010
 800b4a4:	ffff0208 	.word	0xffff0208

0800b4a8 <__malloc_lock>:
 800b4a8:	4801      	ldr	r0, [pc, #4]	; (800b4b0 <__malloc_lock+0x8>)
 800b4aa:	f000 baf9 	b.w	800baa0 <__retarget_lock_acquire_recursive>
 800b4ae:	bf00      	nop
 800b4b0:	20000dc8 	.word	0x20000dc8

0800b4b4 <__malloc_unlock>:
 800b4b4:	4801      	ldr	r0, [pc, #4]	; (800b4bc <__malloc_unlock+0x8>)
 800b4b6:	f000 baf4 	b.w	800baa2 <__retarget_lock_release_recursive>
 800b4ba:	bf00      	nop
 800b4bc:	20000dc8 	.word	0x20000dc8

0800b4c0 <__ssputs_r>:
 800b4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c4:	688e      	ldr	r6, [r1, #8]
 800b4c6:	429e      	cmp	r6, r3
 800b4c8:	4682      	mov	sl, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	4690      	mov	r8, r2
 800b4ce:	461f      	mov	r7, r3
 800b4d0:	d838      	bhi.n	800b544 <__ssputs_r+0x84>
 800b4d2:	898a      	ldrh	r2, [r1, #12]
 800b4d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4d8:	d032      	beq.n	800b540 <__ssputs_r+0x80>
 800b4da:	6825      	ldr	r5, [r4, #0]
 800b4dc:	6909      	ldr	r1, [r1, #16]
 800b4de:	eba5 0901 	sub.w	r9, r5, r1
 800b4e2:	6965      	ldr	r5, [r4, #20]
 800b4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	444b      	add	r3, r9
 800b4f0:	106d      	asrs	r5, r5, #1
 800b4f2:	429d      	cmp	r5, r3
 800b4f4:	bf38      	it	cc
 800b4f6:	461d      	movcc	r5, r3
 800b4f8:	0553      	lsls	r3, r2, #21
 800b4fa:	d531      	bpl.n	800b560 <__ssputs_r+0xa0>
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	f7ff ff2f 	bl	800b360 <_malloc_r>
 800b502:	4606      	mov	r6, r0
 800b504:	b950      	cbnz	r0, 800b51c <__ssputs_r+0x5c>
 800b506:	230c      	movs	r3, #12
 800b508:	f8ca 3000 	str.w	r3, [sl]
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51c:	6921      	ldr	r1, [r4, #16]
 800b51e:	464a      	mov	r2, r9
 800b520:	f000 fac0 	bl	800baa4 <memcpy>
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	6126      	str	r6, [r4, #16]
 800b532:	6165      	str	r5, [r4, #20]
 800b534:	444e      	add	r6, r9
 800b536:	eba5 0509 	sub.w	r5, r5, r9
 800b53a:	6026      	str	r6, [r4, #0]
 800b53c:	60a5      	str	r5, [r4, #8]
 800b53e:	463e      	mov	r6, r7
 800b540:	42be      	cmp	r6, r7
 800b542:	d900      	bls.n	800b546 <__ssputs_r+0x86>
 800b544:	463e      	mov	r6, r7
 800b546:	6820      	ldr	r0, [r4, #0]
 800b548:	4632      	mov	r2, r6
 800b54a:	4641      	mov	r1, r8
 800b54c:	f000 fab8 	bl	800bac0 <memmove>
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	1b9b      	subs	r3, r3, r6
 800b554:	60a3      	str	r3, [r4, #8]
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	4433      	add	r3, r6
 800b55a:	6023      	str	r3, [r4, #0]
 800b55c:	2000      	movs	r0, #0
 800b55e:	e7db      	b.n	800b518 <__ssputs_r+0x58>
 800b560:	462a      	mov	r2, r5
 800b562:	f000 fac7 	bl	800baf4 <_realloc_r>
 800b566:	4606      	mov	r6, r0
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1e1      	bne.n	800b530 <__ssputs_r+0x70>
 800b56c:	6921      	ldr	r1, [r4, #16]
 800b56e:	4650      	mov	r0, sl
 800b570:	f7ff fe8a 	bl	800b288 <_free_r>
 800b574:	e7c7      	b.n	800b506 <__ssputs_r+0x46>
	...

0800b578 <_svfiprintf_r>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	4698      	mov	r8, r3
 800b57e:	898b      	ldrh	r3, [r1, #12]
 800b580:	061b      	lsls	r3, r3, #24
 800b582:	b09d      	sub	sp, #116	; 0x74
 800b584:	4607      	mov	r7, r0
 800b586:	460d      	mov	r5, r1
 800b588:	4614      	mov	r4, r2
 800b58a:	d50e      	bpl.n	800b5aa <_svfiprintf_r+0x32>
 800b58c:	690b      	ldr	r3, [r1, #16]
 800b58e:	b963      	cbnz	r3, 800b5aa <_svfiprintf_r+0x32>
 800b590:	2140      	movs	r1, #64	; 0x40
 800b592:	f7ff fee5 	bl	800b360 <_malloc_r>
 800b596:	6028      	str	r0, [r5, #0]
 800b598:	6128      	str	r0, [r5, #16]
 800b59a:	b920      	cbnz	r0, 800b5a6 <_svfiprintf_r+0x2e>
 800b59c:	230c      	movs	r3, #12
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5a4:	e0d1      	b.n	800b74a <_svfiprintf_r+0x1d2>
 800b5a6:	2340      	movs	r3, #64	; 0x40
 800b5a8:	616b      	str	r3, [r5, #20]
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ae:	2320      	movs	r3, #32
 800b5b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5b8:	2330      	movs	r3, #48	; 0x30
 800b5ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b764 <_svfiprintf_r+0x1ec>
 800b5be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5c2:	f04f 0901 	mov.w	r9, #1
 800b5c6:	4623      	mov	r3, r4
 800b5c8:	469a      	mov	sl, r3
 800b5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ce:	b10a      	cbz	r2, 800b5d4 <_svfiprintf_r+0x5c>
 800b5d0:	2a25      	cmp	r2, #37	; 0x25
 800b5d2:	d1f9      	bne.n	800b5c8 <_svfiprintf_r+0x50>
 800b5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d8:	d00b      	beq.n	800b5f2 <_svfiprintf_r+0x7a>
 800b5da:	465b      	mov	r3, fp
 800b5dc:	4622      	mov	r2, r4
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff ff6d 	bl	800b4c0 <__ssputs_r>
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	f000 80aa 	beq.w	800b740 <_svfiprintf_r+0x1c8>
 800b5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ee:	445a      	add	r2, fp
 800b5f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 80a2 	beq.w	800b740 <_svfiprintf_r+0x1c8>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b606:	f10a 0a01 	add.w	sl, sl, #1
 800b60a:	9304      	str	r3, [sp, #16]
 800b60c:	9307      	str	r3, [sp, #28]
 800b60e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b612:	931a      	str	r3, [sp, #104]	; 0x68
 800b614:	4654      	mov	r4, sl
 800b616:	2205      	movs	r2, #5
 800b618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b61c:	4851      	ldr	r0, [pc, #324]	; (800b764 <_svfiprintf_r+0x1ec>)
 800b61e:	f7f4 fe07 	bl	8000230 <memchr>
 800b622:	9a04      	ldr	r2, [sp, #16]
 800b624:	b9d8      	cbnz	r0, 800b65e <_svfiprintf_r+0xe6>
 800b626:	06d0      	lsls	r0, r2, #27
 800b628:	bf44      	itt	mi
 800b62a:	2320      	movmi	r3, #32
 800b62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b630:	0711      	lsls	r1, r2, #28
 800b632:	bf44      	itt	mi
 800b634:	232b      	movmi	r3, #43	; 0x2b
 800b636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b63a:	f89a 3000 	ldrb.w	r3, [sl]
 800b63e:	2b2a      	cmp	r3, #42	; 0x2a
 800b640:	d015      	beq.n	800b66e <_svfiprintf_r+0xf6>
 800b642:	9a07      	ldr	r2, [sp, #28]
 800b644:	4654      	mov	r4, sl
 800b646:	2000      	movs	r0, #0
 800b648:	f04f 0c0a 	mov.w	ip, #10
 800b64c:	4621      	mov	r1, r4
 800b64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b652:	3b30      	subs	r3, #48	; 0x30
 800b654:	2b09      	cmp	r3, #9
 800b656:	d94e      	bls.n	800b6f6 <_svfiprintf_r+0x17e>
 800b658:	b1b0      	cbz	r0, 800b688 <_svfiprintf_r+0x110>
 800b65a:	9207      	str	r2, [sp, #28]
 800b65c:	e014      	b.n	800b688 <_svfiprintf_r+0x110>
 800b65e:	eba0 0308 	sub.w	r3, r0, r8
 800b662:	fa09 f303 	lsl.w	r3, r9, r3
 800b666:	4313      	orrs	r3, r2
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	46a2      	mov	sl, r4
 800b66c:	e7d2      	b.n	800b614 <_svfiprintf_r+0x9c>
 800b66e:	9b03      	ldr	r3, [sp, #12]
 800b670:	1d19      	adds	r1, r3, #4
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	9103      	str	r1, [sp, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	bfbb      	ittet	lt
 800b67a:	425b      	neglt	r3, r3
 800b67c:	f042 0202 	orrlt.w	r2, r2, #2
 800b680:	9307      	strge	r3, [sp, #28]
 800b682:	9307      	strlt	r3, [sp, #28]
 800b684:	bfb8      	it	lt
 800b686:	9204      	strlt	r2, [sp, #16]
 800b688:	7823      	ldrb	r3, [r4, #0]
 800b68a:	2b2e      	cmp	r3, #46	; 0x2e
 800b68c:	d10c      	bne.n	800b6a8 <_svfiprintf_r+0x130>
 800b68e:	7863      	ldrb	r3, [r4, #1]
 800b690:	2b2a      	cmp	r3, #42	; 0x2a
 800b692:	d135      	bne.n	800b700 <_svfiprintf_r+0x188>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	9203      	str	r2, [sp, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bfb8      	it	lt
 800b6a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6a4:	3402      	adds	r4, #2
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b774 <_svfiprintf_r+0x1fc>
 800b6ac:	7821      	ldrb	r1, [r4, #0]
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	4650      	mov	r0, sl
 800b6b2:	f7f4 fdbd 	bl	8000230 <memchr>
 800b6b6:	b140      	cbz	r0, 800b6ca <_svfiprintf_r+0x152>
 800b6b8:	2340      	movs	r3, #64	; 0x40
 800b6ba:	eba0 000a 	sub.w	r0, r0, sl
 800b6be:	fa03 f000 	lsl.w	r0, r3, r0
 800b6c2:	9b04      	ldr	r3, [sp, #16]
 800b6c4:	4303      	orrs	r3, r0
 800b6c6:	3401      	adds	r4, #1
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ce:	4826      	ldr	r0, [pc, #152]	; (800b768 <_svfiprintf_r+0x1f0>)
 800b6d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6d4:	2206      	movs	r2, #6
 800b6d6:	f7f4 fdab 	bl	8000230 <memchr>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d038      	beq.n	800b750 <_svfiprintf_r+0x1d8>
 800b6de:	4b23      	ldr	r3, [pc, #140]	; (800b76c <_svfiprintf_r+0x1f4>)
 800b6e0:	bb1b      	cbnz	r3, 800b72a <_svfiprintf_r+0x1b2>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	3307      	adds	r3, #7
 800b6e6:	f023 0307 	bic.w	r3, r3, #7
 800b6ea:	3308      	adds	r3, #8
 800b6ec:	9303      	str	r3, [sp, #12]
 800b6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f0:	4433      	add	r3, r6
 800b6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f4:	e767      	b.n	800b5c6 <_svfiprintf_r+0x4e>
 800b6f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	e7a5      	b.n	800b64c <_svfiprintf_r+0xd4>
 800b700:	2300      	movs	r3, #0
 800b702:	3401      	adds	r4, #1
 800b704:	9305      	str	r3, [sp, #20]
 800b706:	4619      	mov	r1, r3
 800b708:	f04f 0c0a 	mov.w	ip, #10
 800b70c:	4620      	mov	r0, r4
 800b70e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b712:	3a30      	subs	r2, #48	; 0x30
 800b714:	2a09      	cmp	r2, #9
 800b716:	d903      	bls.n	800b720 <_svfiprintf_r+0x1a8>
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0c5      	beq.n	800b6a8 <_svfiprintf_r+0x130>
 800b71c:	9105      	str	r1, [sp, #20]
 800b71e:	e7c3      	b.n	800b6a8 <_svfiprintf_r+0x130>
 800b720:	fb0c 2101 	mla	r1, ip, r1, r2
 800b724:	4604      	mov	r4, r0
 800b726:	2301      	movs	r3, #1
 800b728:	e7f0      	b.n	800b70c <_svfiprintf_r+0x194>
 800b72a:	ab03      	add	r3, sp, #12
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	462a      	mov	r2, r5
 800b730:	4b0f      	ldr	r3, [pc, #60]	; (800b770 <_svfiprintf_r+0x1f8>)
 800b732:	a904      	add	r1, sp, #16
 800b734:	4638      	mov	r0, r7
 800b736:	f3af 8000 	nop.w
 800b73a:	1c42      	adds	r2, r0, #1
 800b73c:	4606      	mov	r6, r0
 800b73e:	d1d6      	bne.n	800b6ee <_svfiprintf_r+0x176>
 800b740:	89ab      	ldrh	r3, [r5, #12]
 800b742:	065b      	lsls	r3, r3, #25
 800b744:	f53f af2c 	bmi.w	800b5a0 <_svfiprintf_r+0x28>
 800b748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b74a:	b01d      	add	sp, #116	; 0x74
 800b74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b750:	ab03      	add	r3, sp, #12
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	462a      	mov	r2, r5
 800b756:	4b06      	ldr	r3, [pc, #24]	; (800b770 <_svfiprintf_r+0x1f8>)
 800b758:	a904      	add	r1, sp, #16
 800b75a:	4638      	mov	r0, r7
 800b75c:	f000 f87a 	bl	800b854 <_printf_i>
 800b760:	e7eb      	b.n	800b73a <_svfiprintf_r+0x1c2>
 800b762:	bf00      	nop
 800b764:	0800bca4 	.word	0x0800bca4
 800b768:	0800bcae 	.word	0x0800bcae
 800b76c:	00000000 	.word	0x00000000
 800b770:	0800b4c1 	.word	0x0800b4c1
 800b774:	0800bcaa 	.word	0x0800bcaa

0800b778 <_printf_common>:
 800b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	4616      	mov	r6, r2
 800b77e:	4699      	mov	r9, r3
 800b780:	688a      	ldr	r2, [r1, #8]
 800b782:	690b      	ldr	r3, [r1, #16]
 800b784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b788:	4293      	cmp	r3, r2
 800b78a:	bfb8      	it	lt
 800b78c:	4613      	movlt	r3, r2
 800b78e:	6033      	str	r3, [r6, #0]
 800b790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b794:	4607      	mov	r7, r0
 800b796:	460c      	mov	r4, r1
 800b798:	b10a      	cbz	r2, 800b79e <_printf_common+0x26>
 800b79a:	3301      	adds	r3, #1
 800b79c:	6033      	str	r3, [r6, #0]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	0699      	lsls	r1, r3, #26
 800b7a2:	bf42      	ittt	mi
 800b7a4:	6833      	ldrmi	r3, [r6, #0]
 800b7a6:	3302      	addmi	r3, #2
 800b7a8:	6033      	strmi	r3, [r6, #0]
 800b7aa:	6825      	ldr	r5, [r4, #0]
 800b7ac:	f015 0506 	ands.w	r5, r5, #6
 800b7b0:	d106      	bne.n	800b7c0 <_printf_common+0x48>
 800b7b2:	f104 0a19 	add.w	sl, r4, #25
 800b7b6:	68e3      	ldr	r3, [r4, #12]
 800b7b8:	6832      	ldr	r2, [r6, #0]
 800b7ba:	1a9b      	subs	r3, r3, r2
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	dc26      	bgt.n	800b80e <_printf_common+0x96>
 800b7c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7c4:	1e13      	subs	r3, r2, #0
 800b7c6:	6822      	ldr	r2, [r4, #0]
 800b7c8:	bf18      	it	ne
 800b7ca:	2301      	movne	r3, #1
 800b7cc:	0692      	lsls	r2, r2, #26
 800b7ce:	d42b      	bmi.n	800b828 <_printf_common+0xb0>
 800b7d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	47c0      	blx	r8
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d01e      	beq.n	800b81c <_printf_common+0xa4>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	68e5      	ldr	r5, [r4, #12]
 800b7e2:	6832      	ldr	r2, [r6, #0]
 800b7e4:	f003 0306 	and.w	r3, r3, #6
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	bf08      	it	eq
 800b7ec:	1aad      	subeq	r5, r5, r2
 800b7ee:	68a3      	ldr	r3, [r4, #8]
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	bf0c      	ite	eq
 800b7f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7f8:	2500      	movne	r5, #0
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	bfc4      	itt	gt
 800b7fe:	1a9b      	subgt	r3, r3, r2
 800b800:	18ed      	addgt	r5, r5, r3
 800b802:	2600      	movs	r6, #0
 800b804:	341a      	adds	r4, #26
 800b806:	42b5      	cmp	r5, r6
 800b808:	d11a      	bne.n	800b840 <_printf_common+0xc8>
 800b80a:	2000      	movs	r0, #0
 800b80c:	e008      	b.n	800b820 <_printf_common+0xa8>
 800b80e:	2301      	movs	r3, #1
 800b810:	4652      	mov	r2, sl
 800b812:	4649      	mov	r1, r9
 800b814:	4638      	mov	r0, r7
 800b816:	47c0      	blx	r8
 800b818:	3001      	adds	r0, #1
 800b81a:	d103      	bne.n	800b824 <_printf_common+0xac>
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b824:	3501      	adds	r5, #1
 800b826:	e7c6      	b.n	800b7b6 <_printf_common+0x3e>
 800b828:	18e1      	adds	r1, r4, r3
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	2030      	movs	r0, #48	; 0x30
 800b82e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b832:	4422      	add	r2, r4
 800b834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b83c:	3302      	adds	r3, #2
 800b83e:	e7c7      	b.n	800b7d0 <_printf_common+0x58>
 800b840:	2301      	movs	r3, #1
 800b842:	4622      	mov	r2, r4
 800b844:	4649      	mov	r1, r9
 800b846:	4638      	mov	r0, r7
 800b848:	47c0      	blx	r8
 800b84a:	3001      	adds	r0, #1
 800b84c:	d0e6      	beq.n	800b81c <_printf_common+0xa4>
 800b84e:	3601      	adds	r6, #1
 800b850:	e7d9      	b.n	800b806 <_printf_common+0x8e>
	...

0800b854 <_printf_i>:
 800b854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b858:	7e0f      	ldrb	r7, [r1, #24]
 800b85a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b85c:	2f78      	cmp	r7, #120	; 0x78
 800b85e:	4691      	mov	r9, r2
 800b860:	4680      	mov	r8, r0
 800b862:	460c      	mov	r4, r1
 800b864:	469a      	mov	sl, r3
 800b866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b86a:	d807      	bhi.n	800b87c <_printf_i+0x28>
 800b86c:	2f62      	cmp	r7, #98	; 0x62
 800b86e:	d80a      	bhi.n	800b886 <_printf_i+0x32>
 800b870:	2f00      	cmp	r7, #0
 800b872:	f000 80d8 	beq.w	800ba26 <_printf_i+0x1d2>
 800b876:	2f58      	cmp	r7, #88	; 0x58
 800b878:	f000 80a3 	beq.w	800b9c2 <_printf_i+0x16e>
 800b87c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b884:	e03a      	b.n	800b8fc <_printf_i+0xa8>
 800b886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b88a:	2b15      	cmp	r3, #21
 800b88c:	d8f6      	bhi.n	800b87c <_printf_i+0x28>
 800b88e:	a101      	add	r1, pc, #4	; (adr r1, 800b894 <_printf_i+0x40>)
 800b890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b894:	0800b8ed 	.word	0x0800b8ed
 800b898:	0800b901 	.word	0x0800b901
 800b89c:	0800b87d 	.word	0x0800b87d
 800b8a0:	0800b87d 	.word	0x0800b87d
 800b8a4:	0800b87d 	.word	0x0800b87d
 800b8a8:	0800b87d 	.word	0x0800b87d
 800b8ac:	0800b901 	.word	0x0800b901
 800b8b0:	0800b87d 	.word	0x0800b87d
 800b8b4:	0800b87d 	.word	0x0800b87d
 800b8b8:	0800b87d 	.word	0x0800b87d
 800b8bc:	0800b87d 	.word	0x0800b87d
 800b8c0:	0800ba0d 	.word	0x0800ba0d
 800b8c4:	0800b931 	.word	0x0800b931
 800b8c8:	0800b9ef 	.word	0x0800b9ef
 800b8cc:	0800b87d 	.word	0x0800b87d
 800b8d0:	0800b87d 	.word	0x0800b87d
 800b8d4:	0800ba2f 	.word	0x0800ba2f
 800b8d8:	0800b87d 	.word	0x0800b87d
 800b8dc:	0800b931 	.word	0x0800b931
 800b8e0:	0800b87d 	.word	0x0800b87d
 800b8e4:	0800b87d 	.word	0x0800b87d
 800b8e8:	0800b9f7 	.word	0x0800b9f7
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	1d1a      	adds	r2, r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	602a      	str	r2, [r5, #0]
 800b8f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e0a3      	b.n	800ba48 <_printf_i+0x1f4>
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	6829      	ldr	r1, [r5, #0]
 800b904:	0606      	lsls	r6, r0, #24
 800b906:	f101 0304 	add.w	r3, r1, #4
 800b90a:	d50a      	bpl.n	800b922 <_printf_i+0xce>
 800b90c:	680e      	ldr	r6, [r1, #0]
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	2e00      	cmp	r6, #0
 800b912:	da03      	bge.n	800b91c <_printf_i+0xc8>
 800b914:	232d      	movs	r3, #45	; 0x2d
 800b916:	4276      	negs	r6, r6
 800b918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91c:	485e      	ldr	r0, [pc, #376]	; (800ba98 <_printf_i+0x244>)
 800b91e:	230a      	movs	r3, #10
 800b920:	e019      	b.n	800b956 <_printf_i+0x102>
 800b922:	680e      	ldr	r6, [r1, #0]
 800b924:	602b      	str	r3, [r5, #0]
 800b926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b92a:	bf18      	it	ne
 800b92c:	b236      	sxthne	r6, r6
 800b92e:	e7ef      	b.n	800b910 <_printf_i+0xbc>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	6820      	ldr	r0, [r4, #0]
 800b934:	1d19      	adds	r1, r3, #4
 800b936:	6029      	str	r1, [r5, #0]
 800b938:	0601      	lsls	r1, r0, #24
 800b93a:	d501      	bpl.n	800b940 <_printf_i+0xec>
 800b93c:	681e      	ldr	r6, [r3, #0]
 800b93e:	e002      	b.n	800b946 <_printf_i+0xf2>
 800b940:	0646      	lsls	r6, r0, #25
 800b942:	d5fb      	bpl.n	800b93c <_printf_i+0xe8>
 800b944:	881e      	ldrh	r6, [r3, #0]
 800b946:	4854      	ldr	r0, [pc, #336]	; (800ba98 <_printf_i+0x244>)
 800b948:	2f6f      	cmp	r7, #111	; 0x6f
 800b94a:	bf0c      	ite	eq
 800b94c:	2308      	moveq	r3, #8
 800b94e:	230a      	movne	r3, #10
 800b950:	2100      	movs	r1, #0
 800b952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b956:	6865      	ldr	r5, [r4, #4]
 800b958:	60a5      	str	r5, [r4, #8]
 800b95a:	2d00      	cmp	r5, #0
 800b95c:	bfa2      	ittt	ge
 800b95e:	6821      	ldrge	r1, [r4, #0]
 800b960:	f021 0104 	bicge.w	r1, r1, #4
 800b964:	6021      	strge	r1, [r4, #0]
 800b966:	b90e      	cbnz	r6, 800b96c <_printf_i+0x118>
 800b968:	2d00      	cmp	r5, #0
 800b96a:	d04d      	beq.n	800ba08 <_printf_i+0x1b4>
 800b96c:	4615      	mov	r5, r2
 800b96e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b972:	fb03 6711 	mls	r7, r3, r1, r6
 800b976:	5dc7      	ldrb	r7, [r0, r7]
 800b978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b97c:	4637      	mov	r7, r6
 800b97e:	42bb      	cmp	r3, r7
 800b980:	460e      	mov	r6, r1
 800b982:	d9f4      	bls.n	800b96e <_printf_i+0x11a>
 800b984:	2b08      	cmp	r3, #8
 800b986:	d10b      	bne.n	800b9a0 <_printf_i+0x14c>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	07de      	lsls	r6, r3, #31
 800b98c:	d508      	bpl.n	800b9a0 <_printf_i+0x14c>
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	6861      	ldr	r1, [r4, #4]
 800b992:	4299      	cmp	r1, r3
 800b994:	bfde      	ittt	le
 800b996:	2330      	movle	r3, #48	; 0x30
 800b998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b99c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b9a0:	1b52      	subs	r2, r2, r5
 800b9a2:	6122      	str	r2, [r4, #16]
 800b9a4:	f8cd a000 	str.w	sl, [sp]
 800b9a8:	464b      	mov	r3, r9
 800b9aa:	aa03      	add	r2, sp, #12
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	f7ff fee2 	bl	800b778 <_printf_common>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d14c      	bne.n	800ba52 <_printf_i+0x1fe>
 800b9b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9bc:	b004      	add	sp, #16
 800b9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c2:	4835      	ldr	r0, [pc, #212]	; (800ba98 <_printf_i+0x244>)
 800b9c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9c8:	6829      	ldr	r1, [r5, #0]
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9d0:	6029      	str	r1, [r5, #0]
 800b9d2:	061d      	lsls	r5, r3, #24
 800b9d4:	d514      	bpl.n	800ba00 <_printf_i+0x1ac>
 800b9d6:	07df      	lsls	r7, r3, #31
 800b9d8:	bf44      	itt	mi
 800b9da:	f043 0320 	orrmi.w	r3, r3, #32
 800b9de:	6023      	strmi	r3, [r4, #0]
 800b9e0:	b91e      	cbnz	r6, 800b9ea <_printf_i+0x196>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	f023 0320 	bic.w	r3, r3, #32
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	2310      	movs	r3, #16
 800b9ec:	e7b0      	b.n	800b950 <_printf_i+0xfc>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	f043 0320 	orr.w	r3, r3, #32
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	2378      	movs	r3, #120	; 0x78
 800b9f8:	4828      	ldr	r0, [pc, #160]	; (800ba9c <_printf_i+0x248>)
 800b9fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9fe:	e7e3      	b.n	800b9c8 <_printf_i+0x174>
 800ba00:	0659      	lsls	r1, r3, #25
 800ba02:	bf48      	it	mi
 800ba04:	b2b6      	uxthmi	r6, r6
 800ba06:	e7e6      	b.n	800b9d6 <_printf_i+0x182>
 800ba08:	4615      	mov	r5, r2
 800ba0a:	e7bb      	b.n	800b984 <_printf_i+0x130>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	6826      	ldr	r6, [r4, #0]
 800ba10:	6961      	ldr	r1, [r4, #20]
 800ba12:	1d18      	adds	r0, r3, #4
 800ba14:	6028      	str	r0, [r5, #0]
 800ba16:	0635      	lsls	r5, r6, #24
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	d501      	bpl.n	800ba20 <_printf_i+0x1cc>
 800ba1c:	6019      	str	r1, [r3, #0]
 800ba1e:	e002      	b.n	800ba26 <_printf_i+0x1d2>
 800ba20:	0670      	lsls	r0, r6, #25
 800ba22:	d5fb      	bpl.n	800ba1c <_printf_i+0x1c8>
 800ba24:	8019      	strh	r1, [r3, #0]
 800ba26:	2300      	movs	r3, #0
 800ba28:	6123      	str	r3, [r4, #16]
 800ba2a:	4615      	mov	r5, r2
 800ba2c:	e7ba      	b.n	800b9a4 <_printf_i+0x150>
 800ba2e:	682b      	ldr	r3, [r5, #0]
 800ba30:	1d1a      	adds	r2, r3, #4
 800ba32:	602a      	str	r2, [r5, #0]
 800ba34:	681d      	ldr	r5, [r3, #0]
 800ba36:	6862      	ldr	r2, [r4, #4]
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f7f4 fbf8 	bl	8000230 <memchr>
 800ba40:	b108      	cbz	r0, 800ba46 <_printf_i+0x1f2>
 800ba42:	1b40      	subs	r0, r0, r5
 800ba44:	6060      	str	r0, [r4, #4]
 800ba46:	6863      	ldr	r3, [r4, #4]
 800ba48:	6123      	str	r3, [r4, #16]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba50:	e7a8      	b.n	800b9a4 <_printf_i+0x150>
 800ba52:	6923      	ldr	r3, [r4, #16]
 800ba54:	462a      	mov	r2, r5
 800ba56:	4649      	mov	r1, r9
 800ba58:	4640      	mov	r0, r8
 800ba5a:	47d0      	blx	sl
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d0ab      	beq.n	800b9b8 <_printf_i+0x164>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	079b      	lsls	r3, r3, #30
 800ba64:	d413      	bmi.n	800ba8e <_printf_i+0x23a>
 800ba66:	68e0      	ldr	r0, [r4, #12]
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	4298      	cmp	r0, r3
 800ba6c:	bfb8      	it	lt
 800ba6e:	4618      	movlt	r0, r3
 800ba70:	e7a4      	b.n	800b9bc <_printf_i+0x168>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4632      	mov	r2, r6
 800ba76:	4649      	mov	r1, r9
 800ba78:	4640      	mov	r0, r8
 800ba7a:	47d0      	blx	sl
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d09b      	beq.n	800b9b8 <_printf_i+0x164>
 800ba80:	3501      	adds	r5, #1
 800ba82:	68e3      	ldr	r3, [r4, #12]
 800ba84:	9903      	ldr	r1, [sp, #12]
 800ba86:	1a5b      	subs	r3, r3, r1
 800ba88:	42ab      	cmp	r3, r5
 800ba8a:	dcf2      	bgt.n	800ba72 <_printf_i+0x21e>
 800ba8c:	e7eb      	b.n	800ba66 <_printf_i+0x212>
 800ba8e:	2500      	movs	r5, #0
 800ba90:	f104 0619 	add.w	r6, r4, #25
 800ba94:	e7f5      	b.n	800ba82 <_printf_i+0x22e>
 800ba96:	bf00      	nop
 800ba98:	0800bcb5 	.word	0x0800bcb5
 800ba9c:	0800bcc6 	.word	0x0800bcc6

0800baa0 <__retarget_lock_acquire_recursive>:
 800baa0:	4770      	bx	lr

0800baa2 <__retarget_lock_release_recursive>:
 800baa2:	4770      	bx	lr

0800baa4 <memcpy>:
 800baa4:	440a      	add	r2, r1
 800baa6:	4291      	cmp	r1, r2
 800baa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800baac:	d100      	bne.n	800bab0 <memcpy+0xc>
 800baae:	4770      	bx	lr
 800bab0:	b510      	push	{r4, lr}
 800bab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baba:	4291      	cmp	r1, r2
 800babc:	d1f9      	bne.n	800bab2 <memcpy+0xe>
 800babe:	bd10      	pop	{r4, pc}

0800bac0 <memmove>:
 800bac0:	4288      	cmp	r0, r1
 800bac2:	b510      	push	{r4, lr}
 800bac4:	eb01 0402 	add.w	r4, r1, r2
 800bac8:	d902      	bls.n	800bad0 <memmove+0x10>
 800baca:	4284      	cmp	r4, r0
 800bacc:	4623      	mov	r3, r4
 800bace:	d807      	bhi.n	800bae0 <memmove+0x20>
 800bad0:	1e43      	subs	r3, r0, #1
 800bad2:	42a1      	cmp	r1, r4
 800bad4:	d008      	beq.n	800bae8 <memmove+0x28>
 800bad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bada:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bade:	e7f8      	b.n	800bad2 <memmove+0x12>
 800bae0:	4402      	add	r2, r0
 800bae2:	4601      	mov	r1, r0
 800bae4:	428a      	cmp	r2, r1
 800bae6:	d100      	bne.n	800baea <memmove+0x2a>
 800bae8:	bd10      	pop	{r4, pc}
 800baea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baf2:	e7f7      	b.n	800bae4 <memmove+0x24>

0800baf4 <_realloc_r>:
 800baf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf8:	4680      	mov	r8, r0
 800bafa:	4614      	mov	r4, r2
 800bafc:	460e      	mov	r6, r1
 800bafe:	b921      	cbnz	r1, 800bb0a <_realloc_r+0x16>
 800bb00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb04:	4611      	mov	r1, r2
 800bb06:	f7ff bc2b 	b.w	800b360 <_malloc_r>
 800bb0a:	b92a      	cbnz	r2, 800bb18 <_realloc_r+0x24>
 800bb0c:	f7ff fbbc 	bl	800b288 <_free_r>
 800bb10:	4625      	mov	r5, r4
 800bb12:	4628      	mov	r0, r5
 800bb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb18:	f000 f81b 	bl	800bb52 <_malloc_usable_size_r>
 800bb1c:	4284      	cmp	r4, r0
 800bb1e:	4607      	mov	r7, r0
 800bb20:	d802      	bhi.n	800bb28 <_realloc_r+0x34>
 800bb22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb26:	d812      	bhi.n	800bb4e <_realloc_r+0x5a>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	f7ff fc18 	bl	800b360 <_malloc_r>
 800bb30:	4605      	mov	r5, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d0ed      	beq.n	800bb12 <_realloc_r+0x1e>
 800bb36:	42bc      	cmp	r4, r7
 800bb38:	4622      	mov	r2, r4
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	bf28      	it	cs
 800bb3e:	463a      	movcs	r2, r7
 800bb40:	f7ff ffb0 	bl	800baa4 <memcpy>
 800bb44:	4631      	mov	r1, r6
 800bb46:	4640      	mov	r0, r8
 800bb48:	f7ff fb9e 	bl	800b288 <_free_r>
 800bb4c:	e7e1      	b.n	800bb12 <_realloc_r+0x1e>
 800bb4e:	4635      	mov	r5, r6
 800bb50:	e7df      	b.n	800bb12 <_realloc_r+0x1e>

0800bb52 <_malloc_usable_size_r>:
 800bb52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb56:	1f18      	subs	r0, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bfbc      	itt	lt
 800bb5c:	580b      	ldrlt	r3, [r1, r0]
 800bb5e:	18c0      	addlt	r0, r0, r3
 800bb60:	4770      	bx	lr
	...

0800bb64 <_init>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr

0800bb70 <_fini>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	bf00      	nop
 800bb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb76:	bc08      	pop	{r3}
 800bb78:	469e      	mov	lr, r3
 800bb7a:	4770      	bx	lr
